import {
  require_crypto
} from "./chunk-EFIML64W.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-AUZ3RYOM.js";

// node_modules/web3/dist/web3.min.js
var require_web3_min = __commonJS({
  "node_modules/web3/dist/web3.min.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.Web3 = t() : e.Web3 = t();
    }(self, () => (() => {
      var e = { 1645: (e2, t2, r3) => {
        "use strict";
        var n = function(e3) {
          var t3 = "function" == typeof Symbol && Symbol.iterator, r4 = t3 && e3[t3], n2 = 0;
          if (r4)
            return r4.call(e3);
          if (e3 && "number" == typeof e3.length)
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i = function(e3) {
          return e3 && e3.__esModule ? e3 : { default: e3 };
        };
        Object.defineProperty(t2, "__esModule", { value: true }), t2.chains = t2._getInitializedChains = void 0;
        var o = i(r3(7295)), a = i(r3(1227)), s = i(r3(439)), u = i(r3(7098)), c = i(r3(7687));
        function f(e3) {
          var t3, r4, i2 = { 1: "mainnet", 3: "ropsten", 4: "rinkeby", 42: "kovan", 5: "goerli" }, f2 = { mainnet: o.default, ropsten: a.default, rinkeby: s.default, kovan: u.default, goerli: c.default };
          if (e3)
            try {
              for (var d = n(e3), l = d.next(); !l.done; l = d.next()) {
                var h = l.value, p = h.name;
                i2[h.chainId.toString()] = p, f2[p] = h;
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                l && !l.done && (r4 = d.return) && r4.call(d);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
          return f2.names = i2, f2;
        }
        t2._getInitializedChains = f, t2.chains = f();
      }, 425: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.EIPs = void 0, t2.EIPs = { 1559: r3(7523), 2315: r3(3339), 2537: r3(6769), 2565: r3(7897), 2718: r3(2170), 2929: r3(8436), 2930: r3(6213), 3198: r3(5491), 3529: r3(7852), 3541: r3(1871), 3554: r3(7225), 3675: r3(8571) };
      }, 7002: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.hardforks = void 0, t2.hardforks = [["chainstart", r3(114)], ["homestead", r3(2800)], ["dao", r3(7197)], ["tangerineWhistle", r3(2302)], ["spuriousDragon", r3(716)], ["byzantium", r3(6985)], ["constantinople", r3(5993)], ["petersburg", r3(4064)], ["istanbul", r3(3166)], ["muirGlacier", r3(2946)], ["berlin", r3(15)], ["london", r3(1250)], ["shanghai", r3(5553)], ["merge", r3(8648)]];
      }, 3863: (e2, t2, r3) => {
        "use strict";
        var n, i = r3(9033).Buffer, o = r3(8847)(r3(3355)), a = (n = function(e3, t3) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r4 in t4)
              Object.prototype.hasOwnProperty.call(t4, r4) && (e4[r4] = t4[r4]);
          }, n(e3, t3);
        }, function(e3, t3) {
          if ("function" != typeof t3 && null !== t3)
            throw new TypeError("Class extends value " + String(t3) + " is not a constructor or null");
          function r4() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = null === t3 ? Object.create(t3) : (r4.prototype = t3.prototype, new r4());
        }), s = function() {
          return s = Object.assign || function(e3) {
            for (var t3, r4 = 1, n2 = arguments.length; r4 < n2; r4++)
              for (var i2 in t3 = arguments[r4])
                Object.prototype.hasOwnProperty.call(t3, i2) && (e3[i2] = t3[i2]);
            return e3;
          }, s.apply(this, arguments);
        }, u = function(e3) {
          var t3 = "function" == typeof Symbol && Symbol.iterator, r4 = t3 && e3[t3], n2 = 0;
          if (r4)
            return r4.call(e3);
          if (e3 && "number" == typeof e3.length)
            return { next: function() {
              return e3 && n2 >= e3.length && (e3 = void 0), { value: e3 && e3[n2++], done: !e3 };
            } };
          throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ConsensusAlgorithm = t2.ConsensusType = t2.Hardfork = t2.Chain = t2.CustomChain = void 0;
        var c, f, d, l, h, p = r3(8291), b = r3(4628), y = r3(3062), m = r3(1645), v = r3(7002), g = r3(425);
        !function(e3) {
          e3.PolygonMainnet = "polygon-mainnet", e3.PolygonMumbai = "polygon-mumbai", e3.ArbitrumRinkebyTestnet = "arbitrum-rinkeby-testnet", e3.xDaiChain = "x-dai-chain";
        }(c = t2.CustomChain || (t2.CustomChain = {})), (h = t2.Chain || (t2.Chain = {}))[h.Mainnet = 1] = "Mainnet", h[h.Ropsten = 3] = "Ropsten", h[h.Rinkeby = 4] = "Rinkeby", h[h.Kovan = 42] = "Kovan", h[h.Goerli = 5] = "Goerli", function(e3) {
          e3.Chainstart = "chainstart", e3.Homestead = "homestead", e3.Dao = "dao", e3.TangerineWhistle = "tangerineWhistle", e3.SpuriousDragon = "spuriousDragon", e3.Byzantium = "byzantium", e3.Constantinople = "constantinople", e3.Petersburg = "petersburg", e3.Istanbul = "istanbul", e3.MuirGlacier = "muirGlacier", e3.Berlin = "berlin", e3.London = "london", e3.Shanghai = "shanghai", e3.Merge = "merge";
        }(f = t2.Hardfork || (t2.Hardfork = {})), (l = t2.ConsensusType || (t2.ConsensusType = {})).ProofOfStake = "pos", l.ProofOfWork = "pow", l.ProofOfAuthority = "poa", (d = t2.ConsensusAlgorithm || (t2.ConsensusAlgorithm = {})).Ethash = "ethash", d.Clique = "clique", d.Casper = "casper";
        var w = function(e3) {
          function t3(t4) {
            var r4, n2, i2, o2, a2 = e3.call(this) || this;
            a2._supportedHardforks = [], a2._eips = [], a2._customChains = null !== (i2 = t4.customChains) && void 0 !== i2 ? i2 : [], a2._chainParams = a2.setChain(t4.chain), a2.DEFAULT_HARDFORK = null !== (o2 = a2._chainParams.defaultHardfork) && void 0 !== o2 ? o2 : f.Istanbul;
            try {
              for (var s2 = u(a2._chainParams.hardforks), c2 = s2.next(); !c2.done; c2 = s2.next()) {
                var d2 = c2.value;
                d2.forkHash || (d2.forkHash = a2._calcForkHash(d2.name));
              }
            } catch (e4) {
              r4 = { error: e4 };
            } finally {
              try {
                c2 && !c2.done && (n2 = s2.return) && n2.call(s2);
              } finally {
                if (r4)
                  throw r4.error;
              }
            }
            return a2._hardfork = a2.DEFAULT_HARDFORK, t4.supportedHardforks && (a2._supportedHardforks = t4.supportedHardforks), t4.hardfork && a2.setHardfork(t4.hardfork), t4.eips && a2.setEIPs(t4.eips), a2;
          }
          return a(t3, e3), t3.custom = function(e4, r4) {
            var n2;
            void 0 === r4 && (r4 = {});
            var i2 = null !== (n2 = r4.baseChain) && void 0 !== n2 ? n2 : "mainnet", o2 = s({}, t3._getChainParams(i2));
            if (o2.name = "custom-chain", "string" != typeof e4)
              return new t3(s({ chain: s(s({}, o2), e4) }, r4));
            if (e4 === c.PolygonMainnet)
              return t3.custom({ name: c.PolygonMainnet, chainId: 137, networkId: 137 });
            if (e4 === c.PolygonMumbai)
              return t3.custom({ name: c.PolygonMumbai, chainId: 80001, networkId: 80001 });
            if (e4 === c.ArbitrumRinkebyTestnet)
              return t3.custom({ name: c.ArbitrumRinkebyTestnet, chainId: 421611, networkId: 421611 });
            if (e4 === c.xDaiChain)
              return t3.custom({ name: c.xDaiChain, chainId: 100, networkId: 100 });
            throw new Error("Custom chain " + e4 + " not supported");
          }, t3.forCustomChain = function(e4, r4, n2, i2) {
            var o2 = t3._getChainParams(e4);
            return new t3({ chain: s(s({}, o2), r4), hardfork: n2, supportedHardforks: i2 });
          }, t3.isSupportedChainId = function(e4) {
            var t4 = (0, m._getInitializedChains)();
            return Boolean(t4.names[e4.toString()]);
          }, t3._getChainParams = function(e4, t4) {
            var r4 = (0, m._getInitializedChains)(t4);
            if ("number" == typeof e4 || y.BN.isBN(e4)) {
              if (e4 = e4.toString(), r4.names[e4])
                return r4[r4.names[e4]];
              throw new Error("Chain with ID " + e4 + " not supported");
            }
            if (r4[e4])
              return r4[e4];
            throw new Error("Chain with name " + e4 + " not supported");
          }, t3.prototype.setChain = function(e4) {
            var r4, n2;
            if ("number" == typeof e4 || "string" == typeof e4 || y.BN.isBN(e4)) {
              var i2;
              i2 = this._customChains && this._customChains.length > 0 && Array.isArray(this._customChains[0]) ? this._customChains.map(function(e5) {
                return e5[0];
              }) : this._customChains, this._chainParams = t3._getChainParams(e4, i2);
            } else {
              if ("object" !== (0, o.default)(e4))
                throw new Error("Wrong input format");
              if (this._customChains.length > 0)
                throw new Error("Chain must be a string, number, or BN when initialized with customChains passed in");
              try {
                for (var a2 = u(["networkId", "genesis", "hardforks", "bootstrapNodes"]), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                  var c2 = s2.value;
                  if (void 0 === e4[c2])
                    throw new Error("Missing required chain parameter: " + c2);
                }
              } catch (e5) {
                r4 = { error: e5 };
              } finally {
                try {
                  s2 && !s2.done && (n2 = a2.return) && n2.call(a2);
                } finally {
                  if (r4)
                    throw r4.error;
                }
              }
              this._chainParams = e4;
            }
            return this._chainParams;
          }, t3.prototype.setHardfork = function(e4) {
            var t4, r4;
            if (!this._isSupportedHardfork(e4))
              throw new Error("Hardfork " + e4 + " not set as supported in supportedHardforks");
            var n2 = false;
            try {
              for (var i2 = u(v.hardforks), o2 = i2.next(); !o2.done; o2 = i2.next())
                o2.value[0] === e4 && (this._hardfork !== e4 && (this._hardfork = e4, this.emit("hardforkChanged", e4)), n2 = true);
            } catch (e5) {
              t4 = { error: e5 };
            } finally {
              try {
                o2 && !o2.done && (r4 = i2.return) && r4.call(i2);
              } finally {
                if (t4)
                  throw t4.error;
              }
            }
            if (!n2)
              throw new Error("Hardfork with name " + e4 + " not supported");
          }, t3.prototype.getHardforkByBlockNumber = function(e4, t4) {
            var r4, n2;
            e4 = (0, y.toType)(e4, y.TypeOutput.BN), t4 = t4 ? (0, y.toType)(t4, y.TypeOutput.BN) : void 0;
            var i2, o2, a2, s2 = f.Chainstart;
            try {
              for (var c2 = u(this.hardforks()), d2 = c2.next(); !d2.done; d2 = c2.next()) {
                var l2 = d2.value;
                if (null !== l2.block)
                  e4.gte(new y.BN(l2.block)) && (s2 = l2.name), t4 && l2.td && (t4.gten(l2.td) ? i2 = l2.name : o2 = a2), a2 = l2.name;
                else if (t4 && l2.td && t4.gten(l2.td))
                  return l2.name;
              }
            } catch (e5) {
              r4 = { error: e5 };
            } finally {
              try {
                d2 && !d2.done && (n2 = c2.return) && n2.call(c2);
              } finally {
                if (r4)
                  throw r4.error;
              }
            }
            if (t4) {
              var h2 = "block number: " + e4 + " (-> " + s2 + "), ";
              if (i2 && !this.hardforkGteHardfork(s2, i2)) {
                var p2 = "HF determined by block number is lower than the minimum total difficulty HF";
                throw h2 += "total difficulty: " + t4 + " (-> " + i2 + ")", new Error(p2 + ": " + h2);
              }
              if (o2 && !this.hardforkGteHardfork(o2, s2))
                throw p2 = "Maximum HF determined by total difficulty is lower than the block number HF", h2 += "total difficulty: " + t4 + " (-> " + o2 + ")", new Error(p2 + ": " + h2);
            }
            return s2;
          }, t3.prototype.setHardforkByBlockNumber = function(e4, t4) {
            var r4 = this.getHardforkByBlockNumber(e4, t4);
            return this.setHardfork(r4), r4;
          }, t3.prototype._chooseHardfork = function(e4, t4) {
            if (void 0 === t4 && (t4 = true), e4) {
              if (t4 && !this._isSupportedHardfork(e4))
                throw new Error("Hardfork " + e4 + " not set as supported in supportedHardforks");
            } else
              e4 = this._hardfork;
            return e4;
          }, t3.prototype._getHardfork = function(e4) {
            var t4, r4, n2 = this.hardforks();
            try {
              for (var i2 = u(n2), o2 = i2.next(); !o2.done; o2 = i2.next()) {
                var a2 = o2.value;
                if (a2.name === e4)
                  return a2;
              }
            } catch (e5) {
              t4 = { error: e5 };
            } finally {
              try {
                o2 && !o2.done && (r4 = i2.return) && r4.call(i2);
              } finally {
                if (t4)
                  throw t4.error;
              }
            }
            throw new Error("Hardfork " + e4 + " not defined for chain " + this.chainName());
          }, t3.prototype._isSupportedHardfork = function(e4) {
            var t4, r4;
            if (!(this._supportedHardforks.length > 0))
              return true;
            try {
              for (var n2 = u(this._supportedHardforks), i2 = n2.next(); !i2.done; i2 = n2.next())
                if (e4 === i2.value)
                  return true;
            } catch (e5) {
              t4 = { error: e5 };
            } finally {
              try {
                i2 && !i2.done && (r4 = n2.return) && r4.call(n2);
              } finally {
                if (t4)
                  throw t4.error;
              }
            }
            return false;
          }, t3.prototype.setEIPs = function(e4) {
            var t4, r4, n2 = this;
            void 0 === e4 && (e4 = []);
            var i2 = function(t5) {
              if (!(t5 in g.EIPs))
                throw new Error(t5 + " not supported");
              var r5 = o2.gteHardfork(g.EIPs[t5].minimumHardfork);
              if (!r5)
                throw new Error(t5 + " cannot be activated on hardfork " + o2.hardfork() + ", minimumHardfork: " + r5);
              g.EIPs[t5].requiredEIPs && g.EIPs[t5].requiredEIPs.forEach(function(r6) {
                if (!e4.includes(r6) && !n2.isActivatedEIP(r6))
                  throw new Error(t5 + " requires EIP " + r6 + ", but is not included in the EIP list");
              });
            }, o2 = this;
            try {
              for (var a2 = u(e4), s2 = a2.next(); !s2.done; s2 = a2.next())
                i2(s2.value);
            } catch (e5) {
              t4 = { error: e5 };
            } finally {
              try {
                s2 && !s2.done && (r4 = a2.return) && r4.call(a2);
              } finally {
                if (t4)
                  throw t4.error;
              }
            }
            this._eips = e4;
          }, t3.prototype.param = function(e4, t4) {
            var r4, n2, i2 = null;
            try {
              for (var o2 = u(this._eips), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s2 = a2.value;
                if (null !== (i2 = this.paramByEIP(e4, t4, s2)))
                  return i2;
              }
            } catch (e5) {
              r4 = { error: e5 };
            } finally {
              try {
                a2 && !a2.done && (n2 = o2.return) && n2.call(o2);
              } finally {
                if (r4)
                  throw r4.error;
              }
            }
            return this.paramByHardfork(e4, t4, this._hardfork);
          }, t3.prototype.paramByHardfork = function(e4, t4, r4) {
            var n2, i2, o2, a2;
            r4 = this._chooseHardfork(r4);
            var s2 = null;
            try {
              for (var c2 = u(v.hardforks), f2 = c2.next(); !f2.done; f2 = c2.next()) {
                var d2 = f2.value;
                if ("eips" in d2[1]) {
                  var l2 = d2[1].eips;
                  try {
                    for (var h2 = (o2 = void 0, u(l2)), p2 = h2.next(); !p2.done; p2 = h2.next()) {
                      var b2 = p2.value, y2 = this.paramByEIP(e4, t4, b2);
                      s2 = null !== y2 ? y2 : s2;
                    }
                  } catch (e5) {
                    o2 = { error: e5 };
                  } finally {
                    try {
                      p2 && !p2.done && (a2 = h2.return) && a2.call(h2);
                    } finally {
                      if (o2)
                        throw o2.error;
                    }
                  }
                } else {
                  if (!d2[1][e4])
                    throw new Error("Topic " + e4 + " not defined");
                  void 0 !== d2[1][e4][t4] && (s2 = d2[1][e4][t4].v);
                }
                if (d2[0] === r4)
                  break;
              }
            } catch (e5) {
              n2 = { error: e5 };
            } finally {
              try {
                f2 && !f2.done && (i2 = c2.return) && i2.call(c2);
              } finally {
                if (n2)
                  throw n2.error;
              }
            }
            return s2;
          }, t3.prototype.paramByEIP = function(e4, t4, r4) {
            if (!(r4 in g.EIPs))
              throw new Error(r4 + " not supported");
            var n2 = g.EIPs[r4];
            if (!(e4 in n2))
              throw new Error("Topic " + e4 + " not defined");
            return void 0 === n2[e4][t4] ? null : n2[e4][t4].v;
          }, t3.prototype.paramByBlock = function(e4, t4, r4) {
            var n2 = this.activeHardforks(r4), i2 = n2[n2.length - 1].name;
            return this.paramByHardfork(e4, t4, i2);
          }, t3.prototype.isActivatedEIP = function(e4) {
            var t4, r4;
            if (this.eips().includes(e4))
              return true;
            try {
              for (var n2 = u(v.hardforks), i2 = n2.next(); !i2.done; i2 = n2.next()) {
                var o2 = i2.value[1];
                if (this.gteHardfork(o2.name) && "eips" in o2 && o2.eips.includes(e4))
                  return true;
              }
            } catch (e5) {
              t4 = { error: e5 };
            } finally {
              try {
                i2 && !i2.done && (r4 = n2.return) && r4.call(n2);
              } finally {
                if (t4)
                  throw t4.error;
              }
            }
            return false;
          }, t3.prototype.hardforkIsActiveOnBlock = function(e4, t4, r4) {
            var n2;
            void 0 === r4 && (r4 = {}), t4 = (0, y.toType)(t4, y.TypeOutput.BN);
            var i2 = null !== (n2 = r4.onlySupported) && void 0 !== n2 && n2;
            e4 = this._chooseHardfork(e4, i2);
            var o2 = this.hardforkBlockBN(e4);
            return !(!o2 || !t4.gte(o2));
          }, t3.prototype.activeOnBlock = function(e4, t4) {
            return this.hardforkIsActiveOnBlock(null, e4, t4);
          }, t3.prototype.hardforkGteHardfork = function(e4, t4, r4) {
            var n2, i2;
            void 0 === r4 && (r4 = {});
            var o2, a2 = void 0 !== r4.onlyActive && r4.onlyActive;
            e4 = this._chooseHardfork(e4, r4.onlySupported), o2 = a2 ? this.activeHardforks(null, r4) : this.hardforks();
            var s2 = -1, c2 = -1, f2 = 0;
            try {
              for (var d2 = u(o2), l2 = d2.next(); !l2.done; l2 = d2.next()) {
                var h2 = l2.value;
                h2.name === e4 && (s2 = f2), h2.name === t4 && (c2 = f2), f2 += 1;
              }
            } catch (e5) {
              n2 = { error: e5 };
            } finally {
              try {
                l2 && !l2.done && (i2 = d2.return) && i2.call(d2);
              } finally {
                if (n2)
                  throw n2.error;
              }
            }
            return s2 >= c2 && -1 !== c2;
          }, t3.prototype.gteHardfork = function(e4, t4) {
            return this.hardforkGteHardfork(null, e4, t4);
          }, t3.prototype.hardforkIsActiveOnChain = function(e4, t4) {
            var r4, n2, i2;
            void 0 === t4 && (t4 = {});
            var o2 = null !== (i2 = t4.onlySupported) && void 0 !== i2 && i2;
            e4 = this._chooseHardfork(e4, o2);
            try {
              for (var a2 = u(this.hardforks()), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                var c2 = s2.value;
                if (c2.name === e4 && null !== c2.block)
                  return true;
              }
            } catch (e5) {
              r4 = { error: e5 };
            } finally {
              try {
                s2 && !s2.done && (n2 = a2.return) && n2.call(a2);
              } finally {
                if (r4)
                  throw r4.error;
              }
            }
            return false;
          }, t3.prototype.activeHardforks = function(e4, t4) {
            var r4, n2;
            void 0 === t4 && (t4 = {});
            var i2 = [], o2 = this.hardforks();
            try {
              for (var a2 = u(o2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                var c2 = s2.value;
                if (null !== c2.block) {
                  if (null != e4 && e4 < c2.block)
                    break;
                  t4.onlySupported && !this._isSupportedHardfork(c2.name) || i2.push(c2);
                }
              }
            } catch (e5) {
              r4 = { error: e5 };
            } finally {
              try {
                s2 && !s2.done && (n2 = a2.return) && n2.call(a2);
              } finally {
                if (r4)
                  throw r4.error;
              }
            }
            return i2;
          }, t3.prototype.activeHardfork = function(e4, t4) {
            void 0 === t4 && (t4 = {});
            var r4 = this.activeHardforks(e4, t4);
            if (r4.length > 0)
              return r4[r4.length - 1].name;
            throw new Error("No (supported) active hardfork found");
          }, t3.prototype.hardforkBlock = function(e4) {
            var t4 = this.hardforkBlockBN(e4);
            return t4 ? (0, y.toType)(t4, y.TypeOutput.Number) : null;
          }, t3.prototype.hardforkBlockBN = function(e4) {
            e4 = this._chooseHardfork(e4, false);
            var t4 = this._getHardfork(e4).block;
            return null == t4 ? null : new y.BN(t4);
          }, t3.prototype.hardforkTD = function(e4) {
            e4 = this._chooseHardfork(e4, false);
            var t4 = this._getHardfork(e4).td;
            return null == t4 ? null : new y.BN(t4);
          }, t3.prototype.isHardforkBlock = function(e4, t4) {
            e4 = (0, y.toType)(e4, y.TypeOutput.BN), t4 = this._chooseHardfork(t4, false);
            var r4 = this.hardforkBlockBN(t4);
            return !!r4 && r4.eq(e4);
          }, t3.prototype.nextHardforkBlock = function(e4) {
            var t4 = this.nextHardforkBlockBN(e4);
            return null === t4 ? null : (0, y.toType)(t4, y.TypeOutput.Number);
          }, t3.prototype.nextHardforkBlockBN = function(e4) {
            e4 = this._chooseHardfork(e4, false);
            var t4 = this.hardforkBlockBN(e4);
            return null === t4 ? null : this.hardforks().reduce(function(e5, r4) {
              var n2 = new y.BN(r4.block);
              return n2.gt(t4) && null === e5 ? n2 : e5;
            }, null);
          }, t3.prototype.isNextHardforkBlock = function(e4, t4) {
            e4 = (0, y.toType)(e4, y.TypeOutput.BN), t4 = this._chooseHardfork(t4, false);
            var r4 = this.nextHardforkBlockBN(t4);
            return null !== r4 && r4.eq(e4);
          }, t3.prototype._calcForkHash = function(e4) {
            var t4, r4, n2 = i.from(this.genesis().hash.substr(2), "hex"), o2 = i.alloc(0), a2 = 0;
            try {
              for (var s2 = u(this.hardforks()), c2 = s2.next(); !c2.done; c2 = s2.next()) {
                var f2 = c2.value, d2 = f2.block;
                if (0 !== d2 && null !== d2 && d2 !== a2) {
                  var l2 = i.from(d2.toString(16).padStart(16, "0"), "hex");
                  o2 = i.concat([o2, l2]);
                }
                if (f2.name === e4)
                  break;
                null !== d2 && (a2 = d2);
              }
            } catch (e5) {
              t4 = { error: e5 };
            } finally {
              try {
                c2 && !c2.done && (r4 = s2.return) && r4.call(s2);
              } finally {
                if (t4)
                  throw t4.error;
              }
            }
            var h2 = i.concat([n2, o2]);
            return "0x" + (0, y.intToBuffer)((0, b.buf)(h2) >>> 0).toString("hex");
          }, t3.prototype.forkHash = function(e4) {
            e4 = this._chooseHardfork(e4, false);
            var t4 = this._getHardfork(e4);
            if (null === t4.block)
              throw new Error("No fork hash calculation possible for non-applied or future hardfork");
            return void 0 !== t4.forkHash ? t4.forkHash : this._calcForkHash(e4);
          }, t3.prototype.hardforkForForkHash = function(e4) {
            var t4 = this.hardforks().filter(function(t5) {
              return t5.forkHash === e4;
            });
            return t4.length >= 1 ? t4[t4.length - 1] : null;
          }, t3.prototype.genesis = function() {
            return this._chainParams.genesis;
          }, t3.prototype.genesisState = function() {
            var e4, t4;
            switch (this.chainName()) {
              case "mainnet":
                return r3(Object(function() {
                  var e5 = new Error("Cannot find module './genesisStates/mainnet.json'");
                  throw e5.code = "MODULE_NOT_FOUND", e5;
                }()));
              case "ropsten":
                return r3(Object(function() {
                  var e5 = new Error("Cannot find module './genesisStates/ropsten.json'");
                  throw e5.code = "MODULE_NOT_FOUND", e5;
                }()));
              case "rinkeby":
                return r3(Object(function() {
                  var e5 = new Error("Cannot find module './genesisStates/rinkeby.json'");
                  throw e5.code = "MODULE_NOT_FOUND", e5;
                }()));
              case "kovan":
                return r3(Object(function() {
                  var e5 = new Error("Cannot find module './genesisStates/kovan.json'");
                  throw e5.code = "MODULE_NOT_FOUND", e5;
                }()));
              case "goerli":
                return r3(Object(function() {
                  var e5 = new Error("Cannot find module './genesisStates/goerli.json'");
                  throw e5.code = "MODULE_NOT_FOUND", e5;
                }()));
            }
            if (this._customChains && this._customChains.length > 0 && Array.isArray(this._customChains[0]))
              try {
                for (var n2 = u(this._customChains), i2 = n2.next(); !i2.done; i2 = n2.next()) {
                  var o2 = i2.value;
                  if (o2[0].name === this.chainName())
                    return o2[1];
                }
              } catch (t5) {
                e4 = { error: t5 };
              } finally {
                try {
                  i2 && !i2.done && (t4 = n2.return) && t4.call(n2);
                } finally {
                  if (e4)
                    throw e4.error;
                }
              }
            return {};
          }, t3.prototype.hardforks = function() {
            return this._chainParams.hardforks;
          }, t3.prototype.bootstrapNodes = function() {
            return this._chainParams.bootstrapNodes;
          }, t3.prototype.dnsNetworks = function() {
            return this._chainParams.dnsNetworks;
          }, t3.prototype.hardfork = function() {
            return this._hardfork;
          }, t3.prototype.chainId = function() {
            return (0, y.toType)(this.chainIdBN(), y.TypeOutput.Number);
          }, t3.prototype.chainIdBN = function() {
            return new y.BN(this._chainParams.chainId);
          }, t3.prototype.chainName = function() {
            return this._chainParams.name;
          }, t3.prototype.networkId = function() {
            return (0, y.toType)(this.networkIdBN(), y.TypeOutput.Number);
          }, t3.prototype.networkIdBN = function() {
            return new y.BN(this._chainParams.networkId);
          }, t3.prototype.eips = function() {
            return this._eips;
          }, t3.prototype.consensusType = function() {
            var e4, t4, r4, n2 = this.hardfork();
            try {
              for (var i2 = u(v.hardforks), o2 = i2.next(); !o2.done; o2 = i2.next()) {
                var a2 = o2.value;
                if ("consensus" in a2[1] && (r4 = a2[1].consensus.type), a2[0] === n2)
                  break;
              }
            } catch (t5) {
              e4 = { error: t5 };
            } finally {
              try {
                o2 && !o2.done && (t4 = i2.return) && t4.call(i2);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            return r4 || this._chainParams.consensus.type;
          }, t3.prototype.consensusAlgorithm = function() {
            var e4, t4, r4, n2 = this.hardfork();
            try {
              for (var i2 = u(v.hardforks), o2 = i2.next(); !o2.done; o2 = i2.next()) {
                var a2 = o2.value;
                if ("consensus" in a2[1] && (r4 = a2[1].consensus.algorithm), a2[0] === n2)
                  break;
              }
            } catch (t5) {
              e4 = { error: t5 };
            } finally {
              try {
                o2 && !o2.done && (t4 = i2.return) && t4.call(i2);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            return r4 || this._chainParams.consensus.algorithm;
          }, t3.prototype.consensusConfig = function() {
            var e4, t4, r4, n2 = this.hardfork();
            try {
              for (var i2 = u(v.hardforks), o2 = i2.next(); !o2.done; o2 = i2.next()) {
                var a2 = o2.value;
                if ("consensus" in a2[1] && (r4 = a2[1].consensus[a2[1].consensus.algorithm]), a2[0] === n2)
                  break;
              }
            } catch (t5) {
              e4 = { error: t5 };
            } finally {
              try {
                o2 && !o2.done && (t4 = i2.return) && t4.call(i2);
              } finally {
                if (e4)
                  throw e4.error;
              }
            }
            if (r4)
              return r4;
            var s2 = this.consensusAlgorithm();
            return this._chainParams.consensus[s2];
          }, t3.prototype.copy = function() {
            return Object.assign(Object.create(Object.getPrototypeOf(this)), this);
          }, t3;
        }(p.EventEmitter);
        t2.default = w;
      }, 4383: (e2, t2, r3) => {
        "use strict";
        var n = Object.create ? function(e3, t3, r4, n2) {
          void 0 === n2 && (n2 = r4), Object.defineProperty(e3, n2, { enumerable: true, get: function() {
            return t3[r4];
          } });
        } : function(e3, t3, r4, n2) {
          void 0 === n2 && (n2 = r4), e3[n2] = t3[r4];
        }, i = Object.create ? function(e3, t3) {
          Object.defineProperty(e3, "default", { enumerable: true, value: t3 });
        } : function(e3, t3) {
          e3.default = t3;
        }, o = function(e3, t3) {
          var r4 = "function" == typeof Symbol && e3[Symbol.iterator];
          if (!r4)
            return e3;
          var n2, i2, o2 = r4.call(e3), a2 = [];
          try {
            for (; (void 0 === t3 || t3-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e4) {
            i2 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r4 = o2.return) && r4.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        };
        Object.defineProperty(t2, "__esModule", { value: true }), t2.BaseTransaction = void 0;
        var a = function(e3) {
          if (e3 && e3.__esModule)
            return e3;
          var t3 = {};
          if (null != e3)
            for (var r4 in e3)
              "default" !== r4 && Object.prototype.hasOwnProperty.call(e3, r4) && n(t3, e3, r4);
          return i(t3, e3), t3;
        }(r3(3863)), s = r3(3062), u = r3(7325), c = function() {
          function e3(e4) {
            this.cache = { hash: void 0 }, this.activeCapabilities = [], this.DEFAULT_CHAIN = a.Chain.Mainnet, this.DEFAULT_HARDFORK = a.Hardfork.Istanbul;
            var t3 = e4.nonce, r4 = e4.gasLimit, n2 = e4.to, i2 = e4.value, o2 = e4.data, u2 = e4.v, c2 = e4.r, f = e4.s, d = e4.type;
            this._type = new s.BN((0, s.toBuffer)(d)).toNumber();
            var l = (0, s.toBuffer)("" === n2 ? "0x" : n2), h = (0, s.toBuffer)("" === u2 ? "0x" : u2), p = (0, s.toBuffer)("" === c2 ? "0x" : c2), b = (0, s.toBuffer)("" === f ? "0x" : f);
            this.nonce = new s.BN((0, s.toBuffer)("" === t3 ? "0x" : t3)), this.gasLimit = new s.BN((0, s.toBuffer)("" === r4 ? "0x" : r4)), this.to = l.length > 0 ? new s.Address(l) : void 0, this.value = new s.BN((0, s.toBuffer)("" === i2 ? "0x" : i2)), this.data = (0, s.toBuffer)("" === o2 ? "0x" : o2), this.v = h.length > 0 ? new s.BN(h) : void 0, this.r = p.length > 0 ? new s.BN(p) : void 0, this.s = b.length > 0 ? new s.BN(b) : void 0, this._validateCannotExceedMaxInteger({ nonce: this.nonce, gasLimit: this.gasLimit, value: this.value, r: this.r, s: this.s });
          }
          return Object.defineProperty(e3.prototype, "transactionType", { get: function() {
            return this.type;
          }, enumerable: false, configurable: true }), Object.defineProperty(e3.prototype, "type", { get: function() {
            return this._type;
          }, enumerable: false, configurable: true }), e3.prototype.supports = function(e4) {
            return this.activeCapabilities.includes(e4);
          }, e3.prototype.validate = function(e4) {
            void 0 === e4 && (e4 = false);
            var t3 = [];
            return this.getBaseFee().gt(this.gasLimit) && t3.push("gasLimit is too low. given " + this.gasLimit + ", need at least " + this.getBaseFee()), this.isSigned() && !this.verifySignature() && t3.push("Invalid Signature"), e4 ? t3 : 0 === t3.length;
          }, e3.prototype.getBaseFee = function() {
            var e4 = this.getDataFee().addn(this.common.param("gasPrices", "tx"));
            return this.common.gteHardfork("homestead") && this.toCreationAddress() && e4.iaddn(this.common.param("gasPrices", "txCreation")), e4;
          }, e3.prototype.getDataFee = function() {
            for (var e4 = this.common.param("gasPrices", "txDataZero"), t3 = this.common.param("gasPrices", "txDataNonZero"), r4 = 0, n2 = 0; n2 < this.data.length; n2++)
              0 === this.data[n2] ? r4 += e4 : r4 += t3;
            return new s.BN(r4);
          }, e3.prototype.toCreationAddress = function() {
            return void 0 === this.to || 0 === this.to.buf.length;
          }, e3.prototype.isSigned = function() {
            var e4 = this, t3 = e4.v, r4 = e4.r, n2 = e4.s;
            return 0 === this.type ? !!(t3 && r4 && n2) : !(void 0 === t3 || !r4 || !n2);
          }, e3.prototype.verifySignature = function() {
            try {
              var e4 = this.getSenderPublicKey();
              return 0 !== (0, s.unpadBuffer)(e4).length;
            } catch (e5) {
              return false;
            }
          }, e3.prototype.getSenderAddress = function() {
            return new s.Address((0, s.publicToAddress)(this.getSenderPublicKey()));
          }, e3.prototype.sign = function(e4) {
            if (32 !== e4.length)
              throw new Error("Private key must be 32 bytes in length.");
            var t3 = false;
            0 === this.type && this.common.gteHardfork("spuriousDragon") && !this.supports(u.Capability.EIP155ReplayProtection) && (this.activeCapabilities.push(u.Capability.EIP155ReplayProtection), t3 = true);
            var r4 = this.getMessageToSign(true), n2 = (0, s.ecsign)(r4, e4), i2 = n2.v, o2 = n2.r, a2 = n2.s, c2 = this._processSignature(i2, o2, a2);
            if (t3) {
              var f = this.activeCapabilities.indexOf(u.Capability.EIP155ReplayProtection);
              f > -1 && this.activeCapabilities.splice(f, 1);
            }
            return c2;
          }, e3.prototype._getCommon = function(e4, t3) {
            var r4;
            if (t3) {
              var n2 = new s.BN((0, s.toBuffer)(t3));
              if (e4) {
                if (!e4.chainIdBN().eq(n2))
                  throw new Error("The chain ID does not match the chain ID of Common");
                return e4.copy();
              }
              return a.default.isSupportedChainId(n2) ? new a.default({ chain: n2, hardfork: this.DEFAULT_HARDFORK }) : a.default.forCustomChain(this.DEFAULT_CHAIN, { name: "custom-chain", networkId: n2, chainId: n2 }, this.DEFAULT_HARDFORK);
            }
            return null !== (r4 = null == e4 ? void 0 : e4.copy()) && void 0 !== r4 ? r4 : new a.default({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK });
          }, e3.prototype._validateCannotExceedMaxInteger = function(e4, t3) {
            var r4, n2;
            void 0 === t3 && (t3 = 53);
            try {
              for (var i2 = function(e5) {
                var t4 = "function" == typeof Symbol && Symbol.iterator, r5 = t4 && e5[t4], n3 = 0;
                if (r5)
                  return r5.call(e5);
                if (e5 && "number" == typeof e5.length)
                  return { next: function() {
                    return e5 && n3 >= e5.length && (e5 = void 0), { value: e5 && e5[n3++], done: !e5 };
                  } };
                throw new TypeError(t4 ? "Object is not iterable." : "Symbol.iterator is not defined.");
              }(Object.entries(e4)), a2 = i2.next(); !a2.done; a2 = i2.next()) {
                var u2 = o(a2.value, 2), c2 = u2[0], f = u2[1];
                if (53 === t3) {
                  if (null == f ? void 0 : f.gt(s.MAX_INTEGER))
                    throw new Error(c2 + " cannot exceed MAX_INTEGER, given " + f);
                } else {
                  if (256 !== t3)
                    throw new Error("unimplemented bits value");
                  if (null == f ? void 0 : f.gte(s.TWO_POW256))
                    throw new Error(c2 + " must be less than 2^256, given " + f);
                }
              }
            } catch (e5) {
              r4 = { error: e5 };
            } finally {
              try {
                a2 && !a2.done && (n2 = i2.return) && n2.call(i2);
              } finally {
                if (r4)
                  throw r4.error;
              }
            }
          }, e3;
        }();
        t2.BaseTransaction = c;
      }, 660: (e2, t2, r3) => {
        "use strict";
        var n, i = r3(9033).Buffer, o = (n = function(e3, t3) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r4 in t4)
              Object.prototype.hasOwnProperty.call(t4, r4) && (e4[r4] = t4[r4]);
          }, n(e3, t3);
        }, function(e3, t3) {
          if ("function" != typeof t3 && null !== t3)
            throw new TypeError("Class extends value " + String(t3) + " is not a constructor or null");
          function r4() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = null === t3 ? Object.create(t3) : (r4.prototype = t3.prototype, new r4());
        }), a = function() {
          return a = Object.assign || function(e3) {
            for (var t3, r4 = 1, n2 = arguments.length; r4 < n2; r4++)
              for (var i2 in t3 = arguments[r4])
                Object.prototype.hasOwnProperty.call(t3, i2) && (e3[i2] = t3[i2]);
            return e3;
          }, a.apply(this, arguments);
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var s = r3(3062), u = r3(4383), c = r3(7325), f = r3(3789), d = i.from(2 .toString(16).padStart(2, "0"), "hex"), l = function(e3) {
          function t3(t4, r4) {
            var n2, i2;
            void 0 === r4 && (r4 = {});
            var o2 = e3.call(this, a(a({}, t4), { type: 2 })) || this;
            o2.DEFAULT_HARDFORK = "london";
            var u2 = t4.chainId, d2 = t4.accessList, l2 = t4.maxFeePerGas, h = t4.maxPriorityFeePerGas;
            if (o2.common = o2._getCommon(r4.common, u2), o2.chainId = o2.common.chainIdBN(), !o2.common.isActivatedEIP(1559))
              throw new Error("EIP-1559 not enabled on Common");
            o2.activeCapabilities = o2.activeCapabilities.concat([1559, 2718, 2930]);
            var p = f.AccessLists.getAccessListData(null != d2 ? d2 : []);
            if (o2.accessList = p.accessList, o2.AccessListJSON = p.AccessListJSON, f.AccessLists.verifyAccessList(o2.accessList), o2.maxFeePerGas = new s.BN((0, s.toBuffer)("" === l2 ? "0x" : l2)), o2.maxPriorityFeePerGas = new s.BN((0, s.toBuffer)("" === h ? "0x" : h)), o2._validateCannotExceedMaxInteger({ maxFeePerGas: o2.maxFeePerGas, maxPriorityFeePerGas: o2.maxPriorityFeePerGas }, 256), o2.maxFeePerGas.lt(o2.maxPriorityFeePerGas))
              throw new Error("maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)");
            if (o2.v && !o2.v.eqn(0) && !o2.v.eqn(1))
              throw new Error("The y-parity of the transaction should either be 0 or 1");
            if (o2.common.gteHardfork("homestead") && (null === (n2 = o2.s) || void 0 === n2 ? void 0 : n2.gt(c.N_DIV_2)))
              throw new Error("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
            return (null === (i2 = null == r4 ? void 0 : r4.freeze) || void 0 === i2 || i2) && Object.freeze(o2), o2;
          }
          return o(t3, e3), Object.defineProperty(t3.prototype, "senderR", { get: function() {
            return this.r;
          }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "senderS", { get: function() {
            return this.s;
          }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "yParity", { get: function() {
            return this.v;
          }, enumerable: false, configurable: true }), t3.fromTxData = function(e4, r4) {
            return void 0 === r4 && (r4 = {}), new t3(e4, r4);
          }, t3.fromSerializedTx = function(e4, r4) {
            if (void 0 === r4 && (r4 = {}), !e4.slice(0, 1).equals(d))
              throw new Error("Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: 2, received: " + e4.slice(0, 1).toString("hex"));
            var n2 = s.rlp.decode(e4.slice(1));
            if (!Array.isArray(n2))
              throw new Error("Invalid serialized tx input: must be array");
            return t3.fromValuesArray(n2, r4);
          }, t3.fromRlpSerializedTx = function(e4, r4) {
            return void 0 === r4 && (r4 = {}), t3.fromSerializedTx(e4, r4);
          }, t3.fromValuesArray = function(e4, r4) {
            if (void 0 === r4 && (r4 = {}), 9 !== e4.length && 12 !== e4.length)
              throw new Error("Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).");
            var n2 = function(e5, t4) {
              var r5 = "function" == typeof Symbol && e5[Symbol.iterator];
              if (!r5)
                return e5;
              var n3, i3, o3 = r5.call(e5), a3 = [];
              try {
                for (; (void 0 === t4 || t4-- > 0) && !(n3 = o3.next()).done; )
                  a3.push(n3.value);
              } catch (e6) {
                i3 = { error: e6 };
              } finally {
                try {
                  n3 && !n3.done && (r5 = o3.return) && r5.call(o3);
                } finally {
                  if (i3)
                    throw i3.error;
                }
              }
              return a3;
            }(e4, 12), i2 = n2[0], o2 = n2[1], a2 = n2[2], u2 = n2[3], c2 = n2[4], f2 = n2[5], d2 = n2[6], l2 = n2[7], h = n2[8], p = n2[9], b = n2[10], y = n2[11];
            return new t3({ chainId: new s.BN(i2), nonce: o2, maxPriorityFeePerGas: a2, maxFeePerGas: u2, gasLimit: c2, to: f2, value: d2, data: l2, accessList: null != h ? h : [], v: void 0 !== p ? new s.BN(p) : void 0, r: b, s: y }, r4);
          }, t3.prototype.getDataFee = function() {
            var t4 = e3.prototype.getDataFee.call(this);
            return t4.iaddn(f.AccessLists.getDataFeeEIP2930(this.accessList, this.common)), t4;
          }, t3.prototype.getUpfrontCost = function(e4) {
            void 0 === e4 && (e4 = new s.BN(0));
            var t4 = s.BN.min(this.maxPriorityFeePerGas, this.maxFeePerGas.sub(e4)).add(e4);
            return this.gasLimit.mul(t4).add(this.value);
          }, t3.prototype.raw = function() {
            return [(0, s.bnToUnpaddedBuffer)(this.chainId), (0, s.bnToUnpaddedBuffer)(this.nonce), (0, s.bnToUnpaddedBuffer)(this.maxPriorityFeePerGas), (0, s.bnToUnpaddedBuffer)(this.maxFeePerGas), (0, s.bnToUnpaddedBuffer)(this.gasLimit), void 0 !== this.to ? this.to.buf : i.from([]), (0, s.bnToUnpaddedBuffer)(this.value), this.data, this.accessList, void 0 !== this.v ? (0, s.bnToUnpaddedBuffer)(this.v) : i.from([]), void 0 !== this.r ? (0, s.bnToUnpaddedBuffer)(this.r) : i.from([]), void 0 !== this.s ? (0, s.bnToUnpaddedBuffer)(this.s) : i.from([])];
          }, t3.prototype.serialize = function() {
            var e4 = this.raw();
            return i.concat([d, s.rlp.encode(e4)]);
          }, t3.prototype.getMessageToSign = function(e4) {
            void 0 === e4 && (e4 = true);
            var t4 = this.raw().slice(0, 9), r4 = i.concat([d, s.rlp.encode(t4)]);
            return e4 ? (0, s.keccak256)(r4) : r4;
          }, t3.prototype.hash = function() {
            if (!this.isSigned())
              throw new Error("Cannot call hash method if transaction is not signed");
            return Object.isFrozen(this) ? (this.cache.hash || (this.cache.hash = (0, s.keccak256)(this.serialize())), this.cache.hash) : (0, s.keccak256)(this.serialize());
          }, t3.prototype.getMessageToVerifySignature = function() {
            return this.getMessageToSign();
          }, t3.prototype.getSenderPublicKey = function() {
            var e4;
            if (!this.isSigned())
              throw new Error("Cannot call this method if transaction is not signed");
            var t4 = this.getMessageToVerifySignature();
            if (this.common.gteHardfork("homestead") && (null === (e4 = this.s) || void 0 === e4 ? void 0 : e4.gt(c.N_DIV_2)))
              throw new Error("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
            var r4 = this, n2 = r4.v, i2 = r4.r, o2 = r4.s;
            try {
              return (0, s.ecrecover)(t4, n2.addn(27), (0, s.bnToUnpaddedBuffer)(i2), (0, s.bnToUnpaddedBuffer)(o2));
            } catch (e5) {
              throw new Error("Invalid Signature");
            }
          }, t3.prototype._processSignature = function(e4, r4, n2) {
            var i2 = { common: this.common };
            return t3.fromTxData({ chainId: this.chainId, nonce: this.nonce, maxPriorityFeePerGas: this.maxPriorityFeePerGas, maxFeePerGas: this.maxFeePerGas, gasLimit: this.gasLimit, to: this.to, value: this.value, data: this.data, accessList: this.accessList, v: new s.BN(e4 - 27), r: new s.BN(r4), s: new s.BN(n2) }, i2);
          }, t3.prototype.toJSON = function() {
            var e4 = f.AccessLists.getAccessListJSON(this.accessList);
            return { chainId: (0, s.bnToHex)(this.chainId), nonce: (0, s.bnToHex)(this.nonce), maxPriorityFeePerGas: (0, s.bnToHex)(this.maxPriorityFeePerGas), maxFeePerGas: (0, s.bnToHex)(this.maxFeePerGas), gasLimit: (0, s.bnToHex)(this.gasLimit), to: void 0 !== this.to ? this.to.toString() : void 0, value: (0, s.bnToHex)(this.value), data: "0x" + this.data.toString("hex"), accessList: e4, v: void 0 !== this.v ? (0, s.bnToHex)(this.v) : void 0, r: void 0 !== this.r ? (0, s.bnToHex)(this.r) : void 0, s: void 0 !== this.s ? (0, s.bnToHex)(this.s) : void 0 };
          }, t3;
        }(u.BaseTransaction);
        t2.default = l;
      }, 7613: (e2, t2, r3) => {
        "use strict";
        var n, i = r3(9033).Buffer, o = (n = function(e3, t3) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r4 in t4)
              Object.prototype.hasOwnProperty.call(t4, r4) && (e4[r4] = t4[r4]);
          }, n(e3, t3);
        }, function(e3, t3) {
          if ("function" != typeof t3 && null !== t3)
            throw new TypeError("Class extends value " + String(t3) + " is not a constructor or null");
          function r4() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = null === t3 ? Object.create(t3) : (r4.prototype = t3.prototype, new r4());
        }), a = function() {
          return a = Object.assign || function(e3) {
            for (var t3, r4 = 1, n2 = arguments.length; r4 < n2; r4++)
              for (var i2 in t3 = arguments[r4])
                Object.prototype.hasOwnProperty.call(t3, i2) && (e3[i2] = t3[i2]);
            return e3;
          }, a.apply(this, arguments);
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var s = r3(3062), u = r3(4383), c = r3(7325), f = r3(3789), d = i.from(1 .toString(16).padStart(2, "0"), "hex"), l = function(e3) {
          function t3(t4, r4) {
            var n2, i2;
            void 0 === r4 && (r4 = {});
            var o2 = e3.call(this, a(a({}, t4), { type: 1 })) || this;
            o2.DEFAULT_HARDFORK = "berlin";
            var u2 = t4.chainId, d2 = t4.accessList, l2 = t4.gasPrice;
            if (o2.common = o2._getCommon(r4.common, u2), o2.chainId = o2.common.chainIdBN(), !o2.common.isActivatedEIP(2930))
              throw new Error("EIP-2930 not enabled on Common");
            o2.activeCapabilities = o2.activeCapabilities.concat([2718, 2930]);
            var h = f.AccessLists.getAccessListData(null != d2 ? d2 : []);
            if (o2.accessList = h.accessList, o2.AccessListJSON = h.AccessListJSON, f.AccessLists.verifyAccessList(o2.accessList), o2.gasPrice = new s.BN((0, s.toBuffer)("" === l2 ? "0x" : l2)), o2._validateCannotExceedMaxInteger({ gasPrice: o2.gasPrice }), o2.v && !o2.v.eqn(0) && !o2.v.eqn(1))
              throw new Error("The y-parity of the transaction should either be 0 or 1");
            if (o2.common.gteHardfork("homestead") && (null === (n2 = o2.s) || void 0 === n2 ? void 0 : n2.gt(c.N_DIV_2)))
              throw new Error("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
            return (null === (i2 = null == r4 ? void 0 : r4.freeze) || void 0 === i2 || i2) && Object.freeze(o2), o2;
          }
          return o(t3, e3), Object.defineProperty(t3.prototype, "senderR", { get: function() {
            return this.r;
          }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "senderS", { get: function() {
            return this.s;
          }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "yParity", { get: function() {
            return this.v;
          }, enumerable: false, configurable: true }), t3.fromTxData = function(e4, r4) {
            return void 0 === r4 && (r4 = {}), new t3(e4, r4);
          }, t3.fromSerializedTx = function(e4, r4) {
            if (void 0 === r4 && (r4 = {}), !e4.slice(0, 1).equals(d))
              throw new Error("Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: 1, received: " + e4.slice(0, 1).toString("hex"));
            var n2 = s.rlp.decode(e4.slice(1));
            if (!Array.isArray(n2))
              throw new Error("Invalid serialized tx input: must be array");
            return t3.fromValuesArray(n2, r4);
          }, t3.fromRlpSerializedTx = function(e4, r4) {
            return void 0 === r4 && (r4 = {}), t3.fromSerializedTx(e4, r4);
          }, t3.fromValuesArray = function(e4, r4) {
            if (void 0 === r4 && (r4 = {}), 8 !== e4.length && 11 !== e4.length)
              throw new Error("Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).");
            var n2 = function(e5, t4) {
              var r5 = "function" == typeof Symbol && e5[Symbol.iterator];
              if (!r5)
                return e5;
              var n3, i3, o3 = r5.call(e5), a3 = [];
              try {
                for (; (void 0 === t4 || t4-- > 0) && !(n3 = o3.next()).done; )
                  a3.push(n3.value);
              } catch (e6) {
                i3 = { error: e6 };
              } finally {
                try {
                  n3 && !n3.done && (r5 = o3.return) && r5.call(o3);
                } finally {
                  if (i3)
                    throw i3.error;
                }
              }
              return a3;
            }(e4, 11), i2 = n2[0], o2 = n2[1], a2 = n2[2], u2 = n2[3], c2 = n2[4], f2 = n2[5], d2 = n2[6], l2 = n2[7], h = n2[8], p = n2[9], b = n2[10];
            return new t3({ chainId: new s.BN(i2), nonce: o2, gasPrice: a2, gasLimit: u2, to: c2, value: f2, data: d2, accessList: null != l2 ? l2 : [], v: void 0 !== h ? new s.BN(h) : void 0, r: p, s: b }, r4);
          }, t3.prototype.getDataFee = function() {
            var t4 = e3.prototype.getDataFee.call(this);
            return t4.iaddn(f.AccessLists.getDataFeeEIP2930(this.accessList, this.common)), t4;
          }, t3.prototype.getUpfrontCost = function() {
            return this.gasLimit.mul(this.gasPrice).add(this.value);
          }, t3.prototype.raw = function() {
            return [(0, s.bnToUnpaddedBuffer)(this.chainId), (0, s.bnToUnpaddedBuffer)(this.nonce), (0, s.bnToUnpaddedBuffer)(this.gasPrice), (0, s.bnToUnpaddedBuffer)(this.gasLimit), void 0 !== this.to ? this.to.buf : i.from([]), (0, s.bnToUnpaddedBuffer)(this.value), this.data, this.accessList, void 0 !== this.v ? (0, s.bnToUnpaddedBuffer)(this.v) : i.from([]), void 0 !== this.r ? (0, s.bnToUnpaddedBuffer)(this.r) : i.from([]), void 0 !== this.s ? (0, s.bnToUnpaddedBuffer)(this.s) : i.from([])];
          }, t3.prototype.serialize = function() {
            var e4 = this.raw();
            return i.concat([d, s.rlp.encode(e4)]);
          }, t3.prototype.getMessageToSign = function(e4) {
            void 0 === e4 && (e4 = true);
            var t4 = this.raw().slice(0, 8), r4 = i.concat([d, s.rlp.encode(t4)]);
            return e4 ? (0, s.keccak256)(r4) : r4;
          }, t3.prototype.hash = function() {
            if (!this.isSigned())
              throw new Error("Cannot call hash method if transaction is not signed");
            return Object.isFrozen(this) ? (this.cache.hash || (this.cache.hash = (0, s.keccak256)(this.serialize())), this.cache.hash) : (0, s.keccak256)(this.serialize());
          }, t3.prototype.getMessageToVerifySignature = function() {
            return this.getMessageToSign();
          }, t3.prototype.getSenderPublicKey = function() {
            var e4;
            if (!this.isSigned())
              throw new Error("Cannot call this method if transaction is not signed");
            var t4 = this.getMessageToVerifySignature();
            if (this.common.gteHardfork("homestead") && (null === (e4 = this.s) || void 0 === e4 ? void 0 : e4.gt(c.N_DIV_2)))
              throw new Error("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
            var r4 = this, n2 = r4.yParity, i2 = r4.r, o2 = r4.s;
            try {
              return (0, s.ecrecover)(t4, n2.addn(27), (0, s.bnToUnpaddedBuffer)(i2), (0, s.bnToUnpaddedBuffer)(o2));
            } catch (e5) {
              throw new Error("Invalid Signature");
            }
          }, t3.prototype._processSignature = function(e4, r4, n2) {
            var i2 = { common: this.common };
            return t3.fromTxData({ chainId: this.chainId, nonce: this.nonce, gasPrice: this.gasPrice, gasLimit: this.gasLimit, to: this.to, value: this.value, data: this.data, accessList: this.accessList, v: new s.BN(e4 - 27), r: new s.BN(r4), s: new s.BN(n2) }, i2);
          }, t3.prototype.toJSON = function() {
            var e4 = f.AccessLists.getAccessListJSON(this.accessList);
            return { chainId: (0, s.bnToHex)(this.chainId), nonce: (0, s.bnToHex)(this.nonce), gasPrice: (0, s.bnToHex)(this.gasPrice), gasLimit: (0, s.bnToHex)(this.gasLimit), to: void 0 !== this.to ? this.to.toString() : void 0, value: (0, s.bnToHex)(this.value), data: "0x" + this.data.toString("hex"), accessList: e4, v: void 0 !== this.v ? (0, s.bnToHex)(this.v) : void 0, r: void 0 !== this.r ? (0, s.bnToHex)(this.r) : void 0, s: void 0 !== this.s ? (0, s.bnToHex)(this.s) : void 0 };
          }, t3;
        }(u.BaseTransaction);
        t2.default = l;
      }, 2339: (e2, t2, r3) => {
        "use strict";
        var n = Object.create ? function(e3, t3, r4, n2) {
          void 0 === n2 && (n2 = r4), Object.defineProperty(e3, n2, { enumerable: true, get: function() {
            return t3[r4];
          } });
        } : function(e3, t3, r4, n2) {
          void 0 === n2 && (n2 = r4), e3[n2] = t3[r4];
        }, i = function(e3) {
          return e3 && e3.__esModule ? e3 : { default: e3 };
        };
        Object.defineProperty(t2, "__esModule", { value: true }), t2.FeeMarketEIP1559Transaction = t2.TransactionFactory = t2.AccessListEIP2930Transaction = t2.Transaction = void 0;
        var o = r3(3088);
        Object.defineProperty(t2, "Transaction", { enumerable: true, get: function() {
          return i(o).default;
        } });
        var a = r3(7613);
        Object.defineProperty(t2, "AccessListEIP2930Transaction", { enumerable: true, get: function() {
          return i(a).default;
        } });
        var s = r3(9562);
        Object.defineProperty(t2, "TransactionFactory", { enumerable: true, get: function() {
          return i(s).default;
        } });
        var u = r3(660);
        Object.defineProperty(t2, "FeeMarketEIP1559Transaction", { enumerable: true, get: function() {
          return i(u).default;
        } }), function(e3, t3) {
          for (var r4 in e3)
            "default" === r4 || Object.prototype.hasOwnProperty.call(t3, r4) || n(t3, e3, r4);
        }(r3(7325), t2);
      }, 3088: (e2, t2, r3) => {
        "use strict";
        var n, i = r3(9033).Buffer, o = (n = function(e3, t3) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e4, t4) {
            e4.__proto__ = t4;
          } || function(e4, t4) {
            for (var r4 in t4)
              Object.prototype.hasOwnProperty.call(t4, r4) && (e4[r4] = t4[r4]);
          }, n(e3, t3);
        }, function(e3, t3) {
          if ("function" != typeof t3 && null !== t3)
            throw new TypeError("Class extends value " + String(t3) + " is not a constructor or null");
          function r4() {
            this.constructor = e3;
          }
          n(e3, t3), e3.prototype = null === t3 ? Object.create(t3) : (r4.prototype = t3.prototype, new r4());
        }), a = function() {
          return a = Object.assign || function(e3) {
            for (var t3, r4 = 1, n2 = arguments.length; r4 < n2; r4++)
              for (var i2 in t3 = arguments[r4])
                Object.prototype.hasOwnProperty.call(t3, i2) && (e3[i2] = t3[i2]);
            return e3;
          }, a.apply(this, arguments);
        };
        Object.defineProperty(t2, "__esModule", { value: true });
        var s = r3(3062), u = r3(7325), c = function(e3) {
          function t3(t4, r4) {
            var n2;
            void 0 === r4 && (r4 = {});
            var i2 = e3.call(this, a(a({}, t4), { type: 0 })) || this;
            if (i2.common = i2._validateTxV(i2.v, r4.common), i2.gasPrice = new s.BN((0, s.toBuffer)("" === t4.gasPrice ? "0x" : t4.gasPrice)), i2._validateCannotExceedMaxInteger({ gasPrice: i2.gasPrice }), i2.common.gteHardfork("spuriousDragon"))
              if (i2.isSigned()) {
                var o2 = i2.v, c2 = i2.common.chainIdBN().muln(2);
                (o2.eq(c2.addn(35)) || o2.eq(c2.addn(36))) && i2.activeCapabilities.push(u.Capability.EIP155ReplayProtection);
              } else
                i2.activeCapabilities.push(u.Capability.EIP155ReplayProtection);
            return (null === (n2 = null == r4 ? void 0 : r4.freeze) || void 0 === n2 || n2) && Object.freeze(i2), i2;
          }
          return o(t3, e3), t3.fromTxData = function(e4, r4) {
            return void 0 === r4 && (r4 = {}), new t3(e4, r4);
          }, t3.fromSerializedTx = function(e4, t4) {
            void 0 === t4 && (t4 = {});
            var r4 = s.rlp.decode(e4);
            if (!Array.isArray(r4))
              throw new Error("Invalid serialized tx input. Must be array");
            return this.fromValuesArray(r4, t4);
          }, t3.fromRlpSerializedTx = function(e4, r4) {
            return void 0 === r4 && (r4 = {}), t3.fromSerializedTx(e4, r4);
          }, t3.fromValuesArray = function(e4, r4) {
            if (void 0 === r4 && (r4 = {}), 6 !== e4.length && 9 !== e4.length)
              throw new Error("Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).");
            var n2 = function(e5, t4) {
              var r5 = "function" == typeof Symbol && e5[Symbol.iterator];
              if (!r5)
                return e5;
              var n3, i2, o2 = r5.call(e5), a2 = [];
              try {
                for (; (void 0 === t4 || t4-- > 0) && !(n3 = o2.next()).done; )
                  a2.push(n3.value);
              } catch (e6) {
                i2 = { error: e6 };
              } finally {
                try {
                  n3 && !n3.done && (r5 = o2.return) && r5.call(o2);
                } finally {
                  if (i2)
                    throw i2.error;
                }
              }
              return a2;
            }(e4, 9);
            return new t3({ nonce: n2[0], gasPrice: n2[1], gasLimit: n2[2], to: n2[3], value: n2[4], data: n2[5], v: n2[6], r: n2[7], s: n2[8] }, r4);
          }, t3.prototype.raw = function() {
            return [(0, s.bnToUnpaddedBuffer)(this.nonce), (0, s.bnToUnpaddedBuffer)(this.gasPrice), (0, s.bnToUnpaddedBuffer)(this.gasLimit), void 0 !== this.to ? this.to.buf : i.from([]), (0, s.bnToUnpaddedBuffer)(this.value), this.data, void 0 !== this.v ? (0, s.bnToUnpaddedBuffer)(this.v) : i.from([]), void 0 !== this.r ? (0, s.bnToUnpaddedBuffer)(this.r) : i.from([]), void 0 !== this.s ? (0, s.bnToUnpaddedBuffer)(this.s) : i.from([])];
          }, t3.prototype.serialize = function() {
            return s.rlp.encode(this.raw());
          }, t3.prototype._getMessageToSign = function() {
            var e4 = [(0, s.bnToUnpaddedBuffer)(this.nonce), (0, s.bnToUnpaddedBuffer)(this.gasPrice), (0, s.bnToUnpaddedBuffer)(this.gasLimit), void 0 !== this.to ? this.to.buf : i.from([]), (0, s.bnToUnpaddedBuffer)(this.value), this.data];
            return this.supports(u.Capability.EIP155ReplayProtection) && (e4.push((0, s.toBuffer)(this.common.chainIdBN())), e4.push((0, s.unpadBuffer)((0, s.toBuffer)(0))), e4.push((0, s.unpadBuffer)((0, s.toBuffer)(0)))), e4;
          }, t3.prototype.getMessageToSign = function(e4) {
            void 0 === e4 && (e4 = true);
            var t4 = this._getMessageToSign();
            return e4 ? (0, s.rlphash)(t4) : t4;
          }, t3.prototype.getUpfrontCost = function() {
            return this.gasLimit.mul(this.gasPrice).add(this.value);
          }, t3.prototype.hash = function() {
            return Object.isFrozen(this) ? (this.cache.hash || (this.cache.hash = (0, s.rlphash)(this.raw())), this.cache.hash) : (0, s.rlphash)(this.raw());
          }, t3.prototype.getMessageToVerifySignature = function() {
            if (!this.isSigned())
              throw Error("This transaction is not signed");
            var e4 = this._getMessageToSign();
            return (0, s.rlphash)(e4);
          }, t3.prototype.getSenderPublicKey = function() {
            var e4, t4 = this.getMessageToVerifySignature();
            if (this.common.gteHardfork("homestead") && (null === (e4 = this.s) || void 0 === e4 ? void 0 : e4.gt(u.N_DIV_2)))
              throw new Error("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
            var r4 = this, n2 = r4.v, i2 = r4.r, o2 = r4.s;
            try {
              return (0, s.ecrecover)(t4, n2, (0, s.bnToUnpaddedBuffer)(i2), (0, s.bnToUnpaddedBuffer)(o2), this.supports(u.Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : void 0);
            } catch (e5) {
              throw new Error("Invalid Signature");
            }
          }, t3.prototype._processSignature = function(e4, r4, n2) {
            var i2 = new s.BN(e4);
            this.supports(u.Capability.EIP155ReplayProtection) && i2.iadd(this.common.chainIdBN().muln(2).addn(8));
            var o2 = { common: this.common };
            return t3.fromTxData({ nonce: this.nonce, gasPrice: this.gasPrice, gasLimit: this.gasLimit, to: this.to, value: this.value, data: this.data, v: i2, r: new s.BN(r4), s: new s.BN(n2) }, o2);
          }, t3.prototype.toJSON = function() {
            return { nonce: (0, s.bnToHex)(this.nonce), gasPrice: (0, s.bnToHex)(this.gasPrice), gasLimit: (0, s.bnToHex)(this.gasLimit), to: void 0 !== this.to ? this.to.toString() : void 0, value: (0, s.bnToHex)(this.value), data: "0x" + this.data.toString("hex"), v: void 0 !== this.v ? (0, s.bnToHex)(this.v) : void 0, r: void 0 !== this.r ? (0, s.bnToHex)(this.r) : void 0, s: void 0 !== this.s ? (0, s.bnToHex)(this.s) : void 0 };
          }, t3.prototype._validateTxV = function(e4, t4) {
            var r4;
            if (void 0 !== e4 && !e4.eqn(0) && (!t4 || t4.gteHardfork("spuriousDragon")) && !e4.eqn(27) && !e4.eqn(28))
              if (t4) {
                var n2 = t4.chainIdBN().muln(2);
                if (!e4.eq(n2.addn(35)) && !e4.eq(n2.addn(36)))
                  throw new Error("Incompatible EIP155-based V " + e4.toString() + " and chain id " + t4.chainIdBN().toString() + ". See the Common parameter of the Transaction constructor to set the chain id.");
              } else {
                var i2;
                i2 = e4.subn(35).isEven() ? 35 : 36, r4 = e4.subn(i2).divn(2);
              }
            return this._getCommon(t4, r4);
          }, t3.prototype._unsignedTxImplementsEIP155 = function() {
            return this.common.gteHardfork("spuriousDragon");
          }, t3.prototype._signedTxImplementsEIP155 = function() {
            if (!this.isSigned())
              throw Error("This transaction is not signed");
            var e4 = this.common.gteHardfork("spuriousDragon"), t4 = this.v, r4 = this.common.chainIdBN().muln(2);
            return (t4.eq(r4.addn(35)) || t4.eq(r4.addn(36))) && e4;
          }, t3;
        }(r3(4383).BaseTransaction);
        t2.default = c;
      }, 9562: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer;
        Object.defineProperty(t2, "__esModule", { value: true });
        var i = r3(3062), o = r3(2339), a = function() {
          function e3() {
          }
          return e3.fromTxData = function(e4, t3) {
            if (void 0 === t3 && (t3 = {}), "type" in e4 && void 0 !== e4.type) {
              var r4 = new i.BN((0, i.toBuffer)(e4.type)).toNumber();
              if (0 === r4)
                return o.Transaction.fromTxData(e4, t3);
              if (1 === r4)
                return o.AccessListEIP2930Transaction.fromTxData(e4, t3);
              if (2 === r4)
                return o.FeeMarketEIP1559Transaction.fromTxData(e4, t3);
              throw new Error("Tx instantiation with type " + r4 + " not supported");
            }
            return o.Transaction.fromTxData(e4, t3);
          }, e3.fromSerializedData = function(e4, t3) {
            if (void 0 === t3 && (t3 = {}), e4[0] <= 127) {
              var r4 = void 0;
              switch (e4[0]) {
                case 1:
                  r4 = 2930;
                  break;
                case 2:
                  r4 = 1559;
                  break;
                default:
                  throw new Error("TypedTransaction with ID " + e4[0] + " unknown");
              }
              return 1559 === r4 ? o.FeeMarketEIP1559Transaction.fromSerializedTx(e4, t3) : o.AccessListEIP2930Transaction.fromSerializedTx(e4, t3);
            }
            return o.Transaction.fromSerializedTx(e4, t3);
          }, e3.fromBlockBodyData = function(e4, t3) {
            if (void 0 === t3 && (t3 = {}), n.isBuffer(e4))
              return this.fromSerializedData(e4, t3);
            if (Array.isArray(e4))
              return o.Transaction.fromValuesArray(e4, t3);
            throw new Error("Cannot decode transaction: unknown type input");
          }, e3.getTransactionClass = function(e4, t3) {
            if (void 0 === e4 && (e4 = 0), 0 == e4 || e4 >= 128 && e4 <= 255)
              return o.Transaction;
            switch (e4) {
              case 1:
                return o.AccessListEIP2930Transaction;
              case 2:
                return o.FeeMarketEIP1559Transaction;
              default:
                throw new Error("TypedTransaction with ID " + e4 + " unknown");
            }
          }, e3;
        }();
        t2.default = a;
      }, 7325: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.N_DIV_2 = t2.isAccessList = t2.isAccessListBuffer = t2.Capability = void 0;
        var n, i = r3(3062);
        function o(e3) {
          if (0 === e3.length)
            return true;
          var t3 = e3[0];
          return !!Array.isArray(t3);
        }
        (n = t2.Capability || (t2.Capability = {}))[n.EIP155ReplayProtection = 155] = "EIP155ReplayProtection", n[n.EIP1559FeeMarket = 1559] = "EIP1559FeeMarket", n[n.EIP2718TypedTransaction = 2718] = "EIP2718TypedTransaction", n[n.EIP2930AccessLists = 2930] = "EIP2930AccessLists", t2.isAccessListBuffer = o, t2.isAccessList = function(e3) {
          return !o(e3);
        }, t2.N_DIV_2 = new i.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16);
      }, 3789: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.AccessLists = void 0;
        var n = r3(3062), i = r3(7325), o = function() {
          function e3() {
          }
          return e3.getAccessListData = function(e4) {
            var t3, r4;
            if (e4 && (0, i.isAccessList)(e4)) {
              t3 = e4;
              for (var o2 = [], a = 0; a < e4.length; a++) {
                for (var s = e4[a], u = (0, n.toBuffer)(s.address), c = [], f = 0; f < s.storageKeys.length; f++)
                  c.push((0, n.toBuffer)(s.storageKeys[f]));
                o2.push([u, c]);
              }
              r4 = o2;
            } else {
              r4 = null != e4 ? e4 : [];
              var d = [];
              for (a = 0; a < r4.length; a++) {
                var l = r4[a], h = (0, n.bufferToHex)(l[0]), p = [];
                for (s = 0; s < l[1].length; s++)
                  p.push((0, n.bufferToHex)(l[1][s]));
                var b = { address: h, storageKeys: p };
                d.push(b);
              }
              t3 = d;
            }
            return { AccessListJSON: t3, accessList: r4 };
          }, e3.verifyAccessList = function(e4) {
            for (var t3 = 0; t3 < e4.length; t3++) {
              var r4 = e4[t3], n2 = r4[0], i2 = r4[1];
              if (void 0 !== r4[2])
                throw new Error("Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.");
              if (20 != n2.length)
                throw new Error("Invalid EIP-2930 transaction: address length should be 20 bytes");
              for (var o2 = 0; o2 < i2.length; o2++)
                if (32 != i2[o2].length)
                  throw new Error("Invalid EIP-2930 transaction: storage slot length should be 32 bytes");
            }
          }, e3.getAccessListJSON = function(e4) {
            for (var t3 = [], r4 = 0; r4 < e4.length; r4++) {
              for (var i2 = e4[r4], o2 = { address: "0x" + (0, n.setLengthLeft)(i2[0], 20).toString("hex"), storageKeys: [] }, a = i2[1], s = 0; s < a.length; s++) {
                var u = a[s];
                o2.storageKeys.push("0x" + (0, n.setLengthLeft)(u, 32).toString("hex"));
              }
              t3.push(o2);
            }
            return t3;
          }, e3.getDataFeeEIP2930 = function(e4, t3) {
            for (var r4 = t3.param("gasPrices", "accessListStorageKeyCost"), n2 = t3.param("gasPrices", "accessListAddressCost"), i2 = 0, o2 = 0; o2 < e4.length; o2++)
              i2 += e4[o2][1].length;
            return e4.length * n2 + i2 * r4;
          }, e3;
        }();
        t2.AccessLists = o;
      }, 8067: (e2, t2) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.version = void 0, t2.version = "abi/5.7.0";
      }, 4937: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.defaultAbiCoder = t2.AbiCoder = void 0;
        var i = n(r3(9721)), o = n(r3(8985)), a = r3(908), s = r3(3694), u = r3(4327), c = r3(8067), f = r3(7316), d = r3(9146), l = r3(4341), h = r3(24), p = r3(3861), b = r3(28), y = r3(4522), m = r3(8287), v = r3(8040), g = r3(2010), w = r3(800), A = new u.Logger(c.version), k = new RegExp(/^bytes([0-9]*)$/), _ = new RegExp(/^(u?int)([0-9]*)$/), S = function() {
          function e3(t3) {
            (0, i.default)(this, e3), (0, s.defineReadOnly)(this, "coerceFunc", t3 || null);
          }
          return (0, o.default)(e3, [{ key: "_getCoder", value: function(e4) {
            var t3 = this;
            switch (e4.baseType) {
              case "address":
                return new d.AddressCoder(e4.name);
              case "bool":
                return new h.BooleanCoder(e4.name);
              case "string":
                return new v.StringCoder(e4.name);
              case "bytes":
                return new p.BytesCoder(e4.name);
              case "array":
                return new l.ArrayCoder(this._getCoder(e4.arrayChildren), e4.arrayLength, e4.name);
              case "tuple":
                return new g.TupleCoder((e4.components || []).map(function(e5) {
                  return t3._getCoder(e5);
                }), e4.name);
              case "":
                return new y.NullCoder(e4.name);
            }
            var r4 = e4.type.match(_);
            if (r4) {
              var n2 = parseInt(r4[2] || "256");
              return (0 === n2 || n2 > 256 || n2 % 8 != 0) && A.throwArgumentError("invalid " + r4[1] + " bit length", "param", e4), new m.NumberCoder(n2 / 8, "int" === r4[1], e4.name);
            }
            if (r4 = e4.type.match(k)) {
              var i2 = parseInt(r4[1]);
              return (0 === i2 || i2 > 32) && A.throwArgumentError("invalid bytes length", "param", e4), new b.FixedBytesCoder(i2, e4.name);
            }
            return A.throwArgumentError("invalid type", "type", e4.type);
          } }, { key: "_getWordSize", value: function() {
            return 32;
          } }, { key: "_getReader", value: function(e4, t3) {
            return new f.Reader(e4, this._getWordSize(), this.coerceFunc, t3);
          } }, { key: "_getWriter", value: function() {
            return new f.Writer(this._getWordSize());
          } }, { key: "getDefaultValue", value: function(e4) {
            var t3 = this, r4 = e4.map(function(e5) {
              return t3._getCoder(w.ParamType.from(e5));
            });
            return new g.TupleCoder(r4, "_").defaultValue();
          } }, { key: "encode", value: function(e4, t3) {
            var r4 = this;
            e4.length !== t3.length && A.throwError("types/values length mismatch", u.Logger.errors.INVALID_ARGUMENT, { count: { types: e4.length, values: t3.length }, value: { types: e4, values: t3 } });
            var n2 = e4.map(function(e5) {
              return r4._getCoder(w.ParamType.from(e5));
            }), i2 = new g.TupleCoder(n2, "_"), o2 = this._getWriter();
            return i2.encode(o2, t3), o2.data;
          } }, { key: "decode", value: function(e4, t3, r4) {
            var n2 = this, i2 = e4.map(function(e5) {
              return n2._getCoder(w.ParamType.from(e5));
            });
            return new g.TupleCoder(i2, "_").decode(this._getReader((0, a.arrayify)(t3), r4));
          } }]), e3;
        }();
        t2.AbiCoder = S;
        var E = new S();
        t2.defaultAbiCoder = E;
      }, 7316: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.Writer = t2.Reader = t2.Coder = void 0, t2.checkResultErrors = function(e3) {
          var t3 = [];
          return function e4(r4, n2) {
            if (Array.isArray(n2))
              for (var i2 in n2) {
                var o2 = r4.slice();
                o2.push(i2);
                try {
                  e4(o2, n2[i2]);
                } catch (e5) {
                  t3.push({ path: o2, error: e5 });
                }
              }
          }([], e3), t3;
        };
        var i = n(r3(9721)), o = n(r3(8985)), a = r3(908), s = r3(4952), u = r3(3694), c = r3(4327), f = r3(8067), d = new c.Logger(f.version), l = function() {
          function e3(t3, r4, n2, o2) {
            (0, i.default)(this, e3), this.name = t3, this.type = r4, this.localName = n2, this.dynamic = o2;
          }
          return (0, o.default)(e3, [{ key: "_throwError", value: function(e4, t3) {
            d.throwArgumentError(e4, this.localName, t3);
          } }]), e3;
        }();
        t2.Coder = l;
        var h = function() {
          function e3(t3) {
            (0, i.default)(this, e3), (0, u.defineReadOnly)(this, "wordSize", t3 || 32), this._data = [], this._dataLength = 0, this._padding = new Uint8Array(t3);
          }
          return (0, o.default)(e3, [{ key: "data", get: function() {
            return (0, a.hexConcat)(this._data);
          } }, { key: "length", get: function() {
            return this._dataLength;
          } }, { key: "_writeData", value: function(e4) {
            return this._data.push(e4), this._dataLength += e4.length, e4.length;
          } }, { key: "appendWriter", value: function(e4) {
            return this._writeData((0, a.concat)(e4._data));
          } }, { key: "writeBytes", value: function(e4) {
            var t3 = (0, a.arrayify)(e4), r4 = t3.length % this.wordSize;
            return r4 && (t3 = (0, a.concat)([t3, this._padding.slice(r4)])), this._writeData(t3);
          } }, { key: "_getValue", value: function(e4) {
            var t3 = (0, a.arrayify)(s.BigNumber.from(e4));
            return t3.length > this.wordSize && d.throwError("value out-of-bounds", c.Logger.errors.BUFFER_OVERRUN, { length: this.wordSize, offset: t3.length }), t3.length % this.wordSize && (t3 = (0, a.concat)([this._padding.slice(t3.length % this.wordSize), t3])), t3;
          } }, { key: "writeValue", value: function(e4) {
            return this._writeData(this._getValue(e4));
          } }, { key: "writeUpdatableValue", value: function() {
            var e4 = this, t3 = this._data.length;
            return this._data.push(this._padding), this._dataLength += this.wordSize, function(r4) {
              e4._data[t3] = e4._getValue(r4);
            };
          } }]), e3;
        }();
        t2.Writer = h;
        var p = function() {
          function e3(t3, r4, n2, o2) {
            (0, i.default)(this, e3), (0, u.defineReadOnly)(this, "_data", (0, a.arrayify)(t3)), (0, u.defineReadOnly)(this, "wordSize", r4 || 32), (0, u.defineReadOnly)(this, "_coerceFunc", n2), (0, u.defineReadOnly)(this, "allowLoose", o2), this._offset = 0;
          }
          return (0, o.default)(e3, [{ key: "data", get: function() {
            return (0, a.hexlify)(this._data);
          } }, { key: "consumed", get: function() {
            return this._offset;
          } }, { key: "coerce", value: function(t3, r4) {
            return this._coerceFunc ? this._coerceFunc(t3, r4) : e3.coerce(t3, r4);
          } }, { key: "_peekBytes", value: function(e4, t3, r4) {
            var n2 = Math.ceil(t3 / this.wordSize) * this.wordSize;
            return this._offset + n2 > this._data.length && (this.allowLoose && r4 && this._offset + t3 <= this._data.length ? n2 = t3 : d.throwError("data out-of-bounds", c.Logger.errors.BUFFER_OVERRUN, { length: this._data.length, offset: this._offset + n2 })), this._data.slice(this._offset, this._offset + n2);
          } }, { key: "subReader", value: function(t3) {
            return new e3(this._data.slice(this._offset + t3), this.wordSize, this._coerceFunc, this.allowLoose);
          } }, { key: "readBytes", value: function(e4, t3) {
            var r4 = this._peekBytes(0, e4, !!t3);
            return this._offset += r4.length, r4.slice(0, e4);
          } }, { key: "readValue", value: function() {
            return s.BigNumber.from(this.readBytes(this.wordSize));
          } }], [{ key: "coerce", value: function(e4, t3) {
            var r4 = e4.match("^u?int([0-9]+)$");
            return r4 && parseInt(r4[1]) <= 48 && (t3 = t3.toNumber()), t3;
          } }]), e3;
        }();
        t2.Reader = p;
      }, 9146: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.AddressCoder = void 0;
        var i = n(r3(9721)), o = n(r3(8985)), a = n(r3(5163)), s = n(r3(4650)), u = n(r3(1949)), c = r3(7921), f = r3(908);
        var d = function(e3) {
          (0, a.default)(d2, e3);
          var t3, r4, n2 = (t3 = d2, r4 = function() {
            if ("undefined" == typeof Reflect || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if ("function" == typeof Proxy)
              return true;
            try {
              return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              })), true;
            } catch (e4) {
              return false;
            }
          }(), function() {
            var e4, n3 = (0, u.default)(t3);
            if (r4) {
              var i2 = (0, u.default)(this).constructor;
              e4 = Reflect.construct(n3, arguments, i2);
            } else
              e4 = n3.apply(this, arguments);
            return (0, s.default)(this, e4);
          });
          function d2(e4) {
            return (0, i.default)(this, d2), n2.call(this, "address", "address", e4, false);
          }
          return (0, o.default)(d2, [{ key: "defaultValue", value: function() {
            return "0x0000000000000000000000000000000000000000";
          } }, { key: "encode", value: function(e4, t4) {
            try {
              t4 = (0, c.getAddress)(t4);
            } catch (e5) {
              this._throwError(e5.message, t4);
            }
            return e4.writeValue(t4);
          } }, { key: "decode", value: function(e4) {
            return (0, c.getAddress)((0, f.hexZeroPad)(e4.readValue().toHexString(), 20));
          } }]), d2;
        }(r3(7316).Coder);
        t2.AddressCoder = d;
      }, 8090: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.AnonymousCoder = void 0;
        var i = n(r3(9721)), o = n(r3(8985)), a = n(r3(5163)), s = n(r3(4650)), u = n(r3(1949));
        var c = function(e3) {
          (0, a.default)(c2, e3);
          var t3, r4, n2 = (t3 = c2, r4 = function() {
            if ("undefined" == typeof Reflect || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if ("function" == typeof Proxy)
              return true;
            try {
              return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              })), true;
            } catch (e4) {
              return false;
            }
          }(), function() {
            var e4, n3 = (0, u.default)(t3);
            if (r4) {
              var i2 = (0, u.default)(this).constructor;
              e4 = Reflect.construct(n3, arguments, i2);
            } else
              e4 = n3.apply(this, arguments);
            return (0, s.default)(this, e4);
          });
          function c2(e4) {
            var t4;
            return (0, i.default)(this, c2), (t4 = n2.call(this, e4.name, e4.type, void 0, e4.dynamic)).coder = e4, t4;
          }
          return (0, o.default)(c2, [{ key: "defaultValue", value: function() {
            return this.coder.defaultValue();
          } }, { key: "encode", value: function(e4, t4) {
            return this.coder.encode(e4, t4);
          } }, { key: "decode", value: function(e4) {
            return this.coder.decode(e4);
          } }]), c2;
        }(r3(7316).Coder);
        t2.AnonymousCoder = c;
      }, 4341: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ArrayCoder = void 0, t2.pack = b, t2.unpack = y;
        var i = n(r3(9721)), o = n(r3(8985)), a = n(r3(5163)), s = n(r3(4650)), u = n(r3(1949)), c = n(r3(3355)), f = r3(4327), d = r3(8067), l = r3(7316), h = r3(8090);
        var p = new f.Logger(d.version);
        function b(e3, t3, r4) {
          var n2 = null;
          if (Array.isArray(r4))
            n2 = r4;
          else if (r4 && "object" === (0, c.default)(r4)) {
            var i2 = {};
            n2 = t3.map(function(e4) {
              var t4 = e4.localName;
              return t4 || p.throwError("cannot encode object for signature with missing names", f.Logger.errors.INVALID_ARGUMENT, { argument: "values", coder: e4, value: r4 }), i2[t4] && p.throwError("cannot encode object for signature with duplicate names", f.Logger.errors.INVALID_ARGUMENT, { argument: "values", coder: e4, value: r4 }), i2[t4] = true, r4[t4];
            });
          } else
            p.throwArgumentError("invalid tuple value", "tuple", r4);
          t3.length !== n2.length && p.throwArgumentError("types/value length mismatch", "tuple", r4);
          var o2 = new l.Writer(e3.wordSize), a2 = new l.Writer(e3.wordSize), s2 = [];
          return t3.forEach(function(e4, t4) {
            var r5 = n2[t4];
            if (e4.dynamic) {
              var i3 = a2.length;
              e4.encode(a2, r5);
              var u2 = o2.writeUpdatableValue();
              s2.push(function(e5) {
                u2(e5 + i3);
              });
            } else
              e4.encode(o2, r5);
          }), s2.forEach(function(e4) {
            e4(o2.length);
          }), e3.appendWriter(o2) + e3.appendWriter(a2);
        }
        function y(e3, t3) {
          var r4 = [], n2 = e3.subReader(0);
          t3.forEach(function(t4) {
            var i3 = null;
            if (t4.dynamic) {
              var o3 = e3.readValue(), a3 = n2.subReader(o3.toNumber());
              try {
                i3 = t4.decode(a3);
              } catch (e4) {
                if (e4.code === f.Logger.errors.BUFFER_OVERRUN)
                  throw e4;
                (i3 = e4).baseType = t4.name, i3.name = t4.localName, i3.type = t4.type;
              }
            } else
              try {
                i3 = t4.decode(e3);
              } catch (e4) {
                if (e4.code === f.Logger.errors.BUFFER_OVERRUN)
                  throw e4;
                (i3 = e4).baseType = t4.name, i3.name = t4.localName, i3.type = t4.type;
              }
            null != i3 && r4.push(i3);
          });
          var i2 = t3.reduce(function(e4, t4) {
            var r5 = t4.localName;
            return r5 && (e4[r5] || (e4[r5] = 0), e4[r5]++), e4;
          }, {});
          t3.forEach(function(e4, t4) {
            var n3 = e4.localName;
            if (n3 && 1 === i2[n3] && ("length" === n3 && (n3 = "_length"), null == r4[n3])) {
              var o3 = r4[t4];
              o3 instanceof Error ? Object.defineProperty(r4, n3, { enumerable: true, get: function() {
                throw o3;
              } }) : r4[n3] = o3;
            }
          });
          for (var o2 = function(e4) {
            var t4 = r4[e4];
            t4 instanceof Error && Object.defineProperty(r4, e4, { enumerable: true, get: function() {
              throw t4;
            } });
          }, a2 = 0; a2 < r4.length; a2++)
            o2(a2);
          return Object.freeze(r4);
        }
        var m = function(e3) {
          (0, a.default)(c2, e3);
          var t3, r4, n2 = (t3 = c2, r4 = function() {
            if ("undefined" == typeof Reflect || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if ("function" == typeof Proxy)
              return true;
            try {
              return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              })), true;
            } catch (e4) {
              return false;
            }
          }(), function() {
            var e4, n3 = (0, u.default)(t3);
            if (r4) {
              var i2 = (0, u.default)(this).constructor;
              e4 = Reflect.construct(n3, arguments, i2);
            } else
              e4 = n3.apply(this, arguments);
            return (0, s.default)(this, e4);
          });
          function c2(e4, t4, r5) {
            var o2;
            (0, i.default)(this, c2);
            var a2 = e4.type + "[" + (t4 >= 0 ? t4 : "") + "]", s2 = -1 === t4 || e4.dynamic;
            return (o2 = n2.call(this, "array", a2, r5, s2)).coder = e4, o2.length = t4, o2;
          }
          return (0, o.default)(c2, [{ key: "defaultValue", value: function() {
            for (var e4 = this.coder.defaultValue(), t4 = [], r5 = 0; r5 < this.length; r5++)
              t4.push(e4);
            return t4;
          } }, { key: "encode", value: function(e4, t4) {
            Array.isArray(t4) || this._throwError("expected array value", t4);
            var r5 = this.length;
            -1 === r5 && (r5 = t4.length, e4.writeValue(t4.length)), p.checkArgumentCount(t4.length, r5, "coder array" + (this.localName ? " " + this.localName : ""));
            for (var n3 = [], i2 = 0; i2 < t4.length; i2++)
              n3.push(this.coder);
            return b(e4, n3, t4);
          } }, { key: "decode", value: function(e4) {
            var t4 = this.length;
            -1 === t4 && 32 * (t4 = e4.readValue().toNumber()) > e4._data.length && p.throwError("insufficient data length", f.Logger.errors.BUFFER_OVERRUN, { length: e4._data.length, count: t4 });
            for (var r5 = [], n3 = 0; n3 < t4; n3++)
              r5.push(new h.AnonymousCoder(this.coder));
            return e4.coerce(this.name, y(e4, r5));
          } }]), c2;
        }(l.Coder);
        t2.ArrayCoder = m;
      }, 24: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.BooleanCoder = void 0;
        var i = n(r3(9721)), o = n(r3(8985)), a = n(r3(5163)), s = n(r3(4650)), u = n(r3(1949));
        var c = function(e3) {
          (0, a.default)(c2, e3);
          var t3, r4, n2 = (t3 = c2, r4 = function() {
            if ("undefined" == typeof Reflect || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if ("function" == typeof Proxy)
              return true;
            try {
              return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              })), true;
            } catch (e4) {
              return false;
            }
          }(), function() {
            var e4, n3 = (0, u.default)(t3);
            if (r4) {
              var i2 = (0, u.default)(this).constructor;
              e4 = Reflect.construct(n3, arguments, i2);
            } else
              e4 = n3.apply(this, arguments);
            return (0, s.default)(this, e4);
          });
          function c2(e4) {
            return (0, i.default)(this, c2), n2.call(this, "bool", "bool", e4, false);
          }
          return (0, o.default)(c2, [{ key: "defaultValue", value: function() {
            return false;
          } }, { key: "encode", value: function(e4, t4) {
            return e4.writeValue(t4 ? 1 : 0);
          } }, { key: "decode", value: function(e4) {
            return e4.coerce(this.type, !e4.readValue().isZero());
          } }]), c2;
        }(r3(7316).Coder);
        t2.BooleanCoder = c;
      }, 3861: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.DynamicBytesCoder = t2.BytesCoder = void 0;
        var i = n(r3(119)), o = n(r3(9721)), a = n(r3(8985)), s = n(r3(5163)), u = n(r3(4650)), c = n(r3(1949)), f = r3(908);
        function d(e3) {
          var t3 = function() {
            if ("undefined" == typeof Reflect || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if ("function" == typeof Proxy)
              return true;
            try {
              return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              })), true;
            } catch (e4) {
              return false;
            }
          }();
          return function() {
            var r4, n2 = (0, c.default)(e3);
            if (t3) {
              var i2 = (0, c.default)(this).constructor;
              r4 = Reflect.construct(n2, arguments, i2);
            } else
              r4 = n2.apply(this, arguments);
            return (0, u.default)(this, r4);
          };
        }
        var l = function(e3) {
          (0, s.default)(r4, e3);
          var t3 = d(r4);
          function r4(e4, n2) {
            return (0, o.default)(this, r4), t3.call(this, e4, e4, n2, true);
          }
          return (0, a.default)(r4, [{ key: "defaultValue", value: function() {
            return "0x";
          } }, { key: "encode", value: function(e4, t4) {
            return t4 = (0, f.arrayify)(t4), e4.writeValue(t4.length) + e4.writeBytes(t4);
          } }, { key: "decode", value: function(e4) {
            return e4.readBytes(e4.readValue().toNumber(), true);
          } }]), r4;
        }(r3(7316).Coder);
        t2.DynamicBytesCoder = l;
        var h = function(e3) {
          (0, s.default)(r4, e3);
          var t3 = d(r4);
          function r4(e4) {
            return (0, o.default)(this, r4), t3.call(this, "bytes", e4);
          }
          return (0, a.default)(r4, [{ key: "decode", value: function(e4) {
            return e4.coerce(this.name, (0, f.hexlify)((0, i.default)((0, c.default)(r4.prototype), "decode", this).call(this, e4)));
          } }]), r4;
        }(l);
        t2.BytesCoder = h;
      }, 28: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.FixedBytesCoder = void 0;
        var i = n(r3(9721)), o = n(r3(8985)), a = n(r3(5163)), s = n(r3(4650)), u = n(r3(1949)), c = r3(908);
        var f = function(e3) {
          (0, a.default)(f2, e3);
          var t3, r4, n2 = (t3 = f2, r4 = function() {
            if ("undefined" == typeof Reflect || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if ("function" == typeof Proxy)
              return true;
            try {
              return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              })), true;
            } catch (e4) {
              return false;
            }
          }(), function() {
            var e4, n3 = (0, u.default)(t3);
            if (r4) {
              var i2 = (0, u.default)(this).constructor;
              e4 = Reflect.construct(n3, arguments, i2);
            } else
              e4 = n3.apply(this, arguments);
            return (0, s.default)(this, e4);
          });
          function f2(e4, t4) {
            var r5;
            (0, i.default)(this, f2);
            var o2 = "bytes" + String(e4);
            return (r5 = n2.call(this, o2, o2, t4, false)).size = e4, r5;
          }
          return (0, o.default)(f2, [{ key: "defaultValue", value: function() {
            return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + 2 * this.size);
          } }, { key: "encode", value: function(e4, t4) {
            var r5 = (0, c.arrayify)(t4);
            return r5.length !== this.size && this._throwError("incorrect data length", t4), e4.writeBytes(r5);
          } }, { key: "decode", value: function(e4) {
            return e4.coerce(this.name, (0, c.hexlify)(e4.readBytes(this.size)));
          } }]), f2;
        }(r3(7316).Coder);
        t2.FixedBytesCoder = f;
      }, 4522: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.NullCoder = void 0;
        var i = n(r3(9721)), o = n(r3(8985)), a = n(r3(5163)), s = n(r3(4650)), u = n(r3(1949));
        var c = function(e3) {
          (0, a.default)(c2, e3);
          var t3, r4, n2 = (t3 = c2, r4 = function() {
            if ("undefined" == typeof Reflect || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if ("function" == typeof Proxy)
              return true;
            try {
              return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              })), true;
            } catch (e4) {
              return false;
            }
          }(), function() {
            var e4, n3 = (0, u.default)(t3);
            if (r4) {
              var i2 = (0, u.default)(this).constructor;
              e4 = Reflect.construct(n3, arguments, i2);
            } else
              e4 = n3.apply(this, arguments);
            return (0, s.default)(this, e4);
          });
          function c2(e4) {
            return (0, i.default)(this, c2), n2.call(this, "null", "", e4, false);
          }
          return (0, o.default)(c2, [{ key: "defaultValue", value: function() {
            return null;
          } }, { key: "encode", value: function(e4, t4) {
            return null != t4 && this._throwError("not null", t4), e4.writeBytes([]);
          } }, { key: "decode", value: function(e4) {
            return e4.readBytes(0), e4.coerce(this.name, null);
          } }]), c2;
        }(r3(7316).Coder);
        t2.NullCoder = c;
      }, 8287: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.NumberCoder = void 0;
        var i = n(r3(9721)), o = n(r3(8985)), a = n(r3(5163)), s = n(r3(4650)), u = n(r3(1949)), c = r3(4952), f = r3(5465);
        var d = function(e3) {
          (0, a.default)(d2, e3);
          var t3, r4, n2 = (t3 = d2, r4 = function() {
            if ("undefined" == typeof Reflect || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if ("function" == typeof Proxy)
              return true;
            try {
              return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              })), true;
            } catch (e4) {
              return false;
            }
          }(), function() {
            var e4, n3 = (0, u.default)(t3);
            if (r4) {
              var i2 = (0, u.default)(this).constructor;
              e4 = Reflect.construct(n3, arguments, i2);
            } else
              e4 = n3.apply(this, arguments);
            return (0, s.default)(this, e4);
          });
          function d2(e4, t4, r5) {
            var o2;
            (0, i.default)(this, d2);
            var a2 = (t4 ? "int" : "uint") + 8 * e4;
            return (o2 = n2.call(this, a2, a2, r5, false)).size = e4, o2.signed = t4, o2;
          }
          return (0, o.default)(d2, [{ key: "defaultValue", value: function() {
            return 0;
          } }, { key: "encode", value: function(e4, t4) {
            var r5 = c.BigNumber.from(t4), n3 = f.MaxUint256.mask(8 * e4.wordSize);
            if (this.signed) {
              var i2 = n3.mask(8 * this.size - 1);
              (r5.gt(i2) || r5.lt(i2.add(f.One).mul(f.NegativeOne))) && this._throwError("value out-of-bounds", t4);
            } else
              (r5.lt(f.Zero) || r5.gt(n3.mask(8 * this.size))) && this._throwError("value out-of-bounds", t4);
            return r5 = r5.toTwos(8 * this.size).mask(8 * this.size), this.signed && (r5 = r5.fromTwos(8 * this.size).toTwos(8 * e4.wordSize)), e4.writeValue(r5);
          } }, { key: "decode", value: function(e4) {
            var t4 = e4.readValue().mask(8 * this.size);
            return this.signed && (t4 = t4.fromTwos(8 * this.size)), e4.coerce(this.name, t4);
          } }]), d2;
        }(r3(7316).Coder);
        t2.NumberCoder = d;
      }, 8040: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.StringCoder = void 0;
        var i = n(r3(9721)), o = n(r3(8985)), a = n(r3(119)), s = n(r3(5163)), u = n(r3(4650)), c = n(r3(1949)), f = r3(8627);
        var d = function(e3) {
          (0, s.default)(d2, e3);
          var t3, r4, n2 = (t3 = d2, r4 = function() {
            if ("undefined" == typeof Reflect || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if ("function" == typeof Proxy)
              return true;
            try {
              return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              })), true;
            } catch (e4) {
              return false;
            }
          }(), function() {
            var e4, n3 = (0, c.default)(t3);
            if (r4) {
              var i2 = (0, c.default)(this).constructor;
              e4 = Reflect.construct(n3, arguments, i2);
            } else
              e4 = n3.apply(this, arguments);
            return (0, u.default)(this, e4);
          });
          function d2(e4) {
            return (0, i.default)(this, d2), n2.call(this, "string", e4);
          }
          return (0, o.default)(d2, [{ key: "defaultValue", value: function() {
            return "";
          } }, { key: "encode", value: function(e4, t4) {
            return (0, a.default)((0, c.default)(d2.prototype), "encode", this).call(this, e4, (0, f.toUtf8Bytes)(t4));
          } }, { key: "decode", value: function(e4) {
            return (0, f.toUtf8String)((0, a.default)((0, c.default)(d2.prototype), "decode", this).call(this, e4));
          } }]), d2;
        }(r3(3861).DynamicBytesCoder);
        t2.StringCoder = d;
      }, 2010: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.TupleCoder = void 0;
        var i = n(r3(9721)), o = n(r3(8985)), a = n(r3(5163)), s = n(r3(4650)), u = n(r3(1949)), c = r3(7316), f = r3(4341);
        var d = function(e3) {
          (0, a.default)(c2, e3);
          var t3, r4, n2 = (t3 = c2, r4 = function() {
            if ("undefined" == typeof Reflect || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if ("function" == typeof Proxy)
              return true;
            try {
              return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              })), true;
            } catch (e4) {
              return false;
            }
          }(), function() {
            var e4, n3 = (0, u.default)(t3);
            if (r4) {
              var i2 = (0, u.default)(this).constructor;
              e4 = Reflect.construct(n3, arguments, i2);
            } else
              e4 = n3.apply(this, arguments);
            return (0, s.default)(this, e4);
          });
          function c2(e4, t4) {
            var r5;
            (0, i.default)(this, c2);
            var o2 = false, a2 = [];
            e4.forEach(function(e5) {
              e5.dynamic && (o2 = true), a2.push(e5.type);
            });
            var s2 = "tuple(" + a2.join(",") + ")";
            return (r5 = n2.call(this, "tuple", s2, t4, o2)).coders = e4, r5;
          }
          return (0, o.default)(c2, [{ key: "defaultValue", value: function() {
            var e4 = [];
            this.coders.forEach(function(t5) {
              e4.push(t5.defaultValue());
            });
            var t4 = this.coders.reduce(function(e5, t5) {
              var r5 = t5.localName;
              return r5 && (e5[r5] || (e5[r5] = 0), e5[r5]++), e5;
            }, {});
            return this.coders.forEach(function(r5, n3) {
              var i2 = r5.localName;
              i2 && 1 === t4[i2] && ("length" === i2 && (i2 = "_length"), null == e4[i2] && (e4[i2] = e4[n3]));
            }), Object.freeze(e4);
          } }, { key: "encode", value: function(e4, t4) {
            return (0, f.pack)(e4, this.coders, t4);
          } }, { key: "decode", value: function(e4) {
            return e4.coerce(this.name, (0, f.unpack)(e4, this.coders));
          } }]), c2;
        }(c.Coder);
        t2.TupleCoder = d;
      }, 800: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ParamType = t2.FunctionFragment = t2.Fragment = t2.FormatTypes = t2.EventFragment = t2.ErrorFragment = t2.ConstructorFragment = void 0;
        var i = n(r3(5163)), o = n(r3(4650)), a = n(r3(1949)), s = n(r3(9721)), u = n(r3(8985)), c = r3(4952), f = r3(3694), d = r3(4327), l = r3(8067);
        function h(e3) {
          var t3 = function() {
            if ("undefined" == typeof Reflect || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if ("function" == typeof Proxy)
              return true;
            try {
              return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              })), true;
            } catch (e4) {
              return false;
            }
          }();
          return function() {
            var r4, n2 = (0, a.default)(e3);
            if (t3) {
              var i2 = (0, a.default)(this).constructor;
              r4 = Reflect.construct(n2, arguments, i2);
            } else
              r4 = n2.apply(this, arguments);
            return (0, o.default)(this, r4);
          };
        }
        var p = new d.Logger(l.version), b = {}, y = { calldata: true, memory: true, storage: true }, m = { calldata: true, memory: true };
        function v(e3, t3) {
          if ("bytes" === e3 || "string" === e3) {
            if (y[t3])
              return true;
          } else if ("address" === e3) {
            if ("payable" === t3)
              return true;
          } else if ((e3.indexOf("[") >= 0 || "tuple" === e3) && m[t3])
            return true;
          return (y[t3] || "payable" === t3) && p.throwArgumentError("invalid modifier", "name", t3), false;
        }
        function g(e3, t3) {
          for (var r4 in t3)
            (0, f.defineReadOnly)(e3, r4, t3[r4]);
        }
        var w = Object.freeze({ sighash: "sighash", minimal: "minimal", full: "full", json: "json" });
        t2.FormatTypes = w;
        var A = new RegExp(/^(.*)\[([0-9]*)\]$/), k = function() {
          function e3(t3, r4) {
            (0, s.default)(this, e3), t3 !== b && p.throwError("use fromString", d.Logger.errors.UNSUPPORTED_OPERATION, { operation: "new ParamType()" }), g(this, r4);
            var n2 = this.type.match(A);
            g(this, n2 ? { arrayLength: parseInt(n2[2] || "-1"), arrayChildren: e3.fromObject({ type: n2[1], components: this.components }), baseType: "array" } : { arrayLength: null, arrayChildren: null, baseType: null != this.components ? "tuple" : this.type }), this._isParamType = true, Object.freeze(this);
          }
          return (0, u.default)(e3, [{ key: "format", value: function(e4) {
            if (e4 || (e4 = w.sighash), w[e4] || p.throwArgumentError("invalid format type", "format", e4), e4 === w.json) {
              var t3 = { type: "tuple" === this.baseType ? "tuple" : this.type, name: this.name || void 0 };
              return "boolean" == typeof this.indexed && (t3.indexed = this.indexed), this.components && (t3.components = this.components.map(function(t4) {
                return JSON.parse(t4.format(e4));
              })), JSON.stringify(t3);
            }
            var r4 = "";
            return "array" === this.baseType ? (r4 += this.arrayChildren.format(e4), r4 += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]") : "tuple" === this.baseType ? (e4 !== w.sighash && (r4 += this.type), r4 += "(" + this.components.map(function(t4) {
              return t4.format(e4);
            }).join(e4 === w.full ? ", " : ",") + ")") : r4 += this.type, e4 !== w.sighash && (true === this.indexed && (r4 += " indexed"), e4 === w.full && this.name && (r4 += " " + this.name)), r4;
          } }], [{ key: "from", value: function(t3, r4) {
            return "string" == typeof t3 ? e3.fromString(t3, r4) : e3.fromObject(t3);
          } }, { key: "fromObject", value: function(t3) {
            return e3.isParamType(t3) ? t3 : new e3(b, { name: t3.name || null, type: M(t3.type), indexed: null == t3.indexed ? null : !!t3.indexed, components: t3.components ? t3.components.map(e3.fromObject) : null });
          } }, { key: "fromString", value: function(t3, r4) {
            return n2 = function(e4, t4) {
              var r5 = e4;
              function n3(t5) {
                p.throwArgumentError("unexpected character at position ".concat(t5), "param", e4);
              }
              function i2(e5) {
                var r6 = { type: "", name: "", parent: e5, state: { allowType: true } };
                return t4 && (r6.indexed = false), r6;
              }
              e4 = e4.replace(/\s/g, " ");
              for (var o2 = { type: "", name: "", state: { allowType: true } }, a2 = o2, s2 = 0; s2 < e4.length; s2++) {
                var u2 = e4[s2];
                switch (u2) {
                  case "(":
                    a2.state.allowType && "" === a2.type ? a2.type = "tuple" : a2.state.allowParams || n3(s2), a2.state.allowType = false, a2.type = M(a2.type), a2.components = [i2(a2)], a2 = a2.components[0];
                    break;
                  case ")":
                    delete a2.state, "indexed" === a2.name && (t4 || n3(s2), a2.indexed = true, a2.name = ""), v(a2.type, a2.name) && (a2.name = ""), a2.type = M(a2.type);
                    var c2 = a2;
                    (a2 = a2.parent) || n3(s2), delete c2.parent, a2.state.allowParams = false, a2.state.allowName = true, a2.state.allowArray = true;
                    break;
                  case ",":
                    delete a2.state, "indexed" === a2.name && (t4 || n3(s2), a2.indexed = true, a2.name = ""), v(a2.type, a2.name) && (a2.name = ""), a2.type = M(a2.type);
                    var f2 = i2(a2.parent);
                    a2.parent.components.push(f2), delete a2.parent, a2 = f2;
                    break;
                  case " ":
                    a2.state.allowType && "" !== a2.type && (a2.type = M(a2.type), delete a2.state.allowType, a2.state.allowName = true, a2.state.allowParams = true), a2.state.allowName && "" !== a2.name && ("indexed" === a2.name ? (t4 || n3(s2), a2.indexed && n3(s2), a2.indexed = true, a2.name = "") : v(a2.type, a2.name) ? a2.name = "" : a2.state.allowName = false);
                    break;
                  case "[":
                    a2.state.allowArray || n3(s2), a2.type += u2, a2.state.allowArray = false, a2.state.allowName = false, a2.state.readArray = true;
                    break;
                  case "]":
                    a2.state.readArray || n3(s2), a2.type += u2, a2.state.readArray = false, a2.state.allowArray = true, a2.state.allowName = true;
                    break;
                  default:
                    a2.state.allowType ? (a2.type += u2, a2.state.allowParams = true, a2.state.allowArray = true) : a2.state.allowName ? (a2.name += u2, delete a2.state.allowArray) : a2.state.readArray ? a2.type += u2 : n3(s2);
                }
              }
              return a2.parent && p.throwArgumentError("unexpected eof", "param", e4), delete o2.state, "indexed" === a2.name ? (t4 || n3(r5.length - 7), a2.indexed && n3(r5.length - 7), a2.indexed = true, a2.name = "") : v(a2.type, a2.name) && (a2.name = ""), o2.type = M(o2.type), o2;
            }(t3, !!r4), e3.fromObject({ name: n2.name, type: n2.type, indexed: n2.indexed, components: n2.components });
            var n2;
          } }, { key: "isParamType", value: function(e4) {
            return !(null == e4 || !e4._isParamType);
          } }]), e3;
        }();
        function _(e3, t3) {
          return function(e4) {
            e4 = e4.trim();
            for (var t4 = [], r4 = "", n2 = 0, i2 = 0; i2 < e4.length; i2++) {
              var o2 = e4[i2];
              "," === o2 && 0 === n2 ? (t4.push(r4), r4 = "") : (r4 += o2, "(" === o2 ? n2++ : ")" === o2 && -1 == --n2 && p.throwArgumentError("unbalanced parenthesis", "value", e4));
            }
            return r4 && t4.push(r4), t4;
          }(e3).map(function(e4) {
            return k.fromString(e4, t3);
          });
        }
        t2.ParamType = k;
        var S = function() {
          function e3(t3, r4) {
            (0, s.default)(this, e3), t3 !== b && p.throwError("use a static from method", d.Logger.errors.UNSUPPORTED_OPERATION, { operation: "new Fragment()" }), g(this, r4), this._isFragment = true, Object.freeze(this);
          }
          return (0, u.default)(e3, null, [{ key: "from", value: function(t3) {
            return e3.isFragment(t3) ? t3 : "string" == typeof t3 ? e3.fromString(t3) : e3.fromObject(t3);
          } }, { key: "fromObject", value: function(t3) {
            if (e3.isFragment(t3))
              return t3;
            switch (t3.type) {
              case "function":
                return T.fromObject(t3);
              case "event":
                return E.fromObject(t3);
              case "constructor":
                return B.fromObject(t3);
              case "error":
                return I.fromObject(t3);
              case "fallback":
              case "receive":
                return null;
            }
            return p.throwArgumentError("invalid fragment object", "value", t3);
          } }, { key: "fromString", value: function(e4) {
            return "event" === (e4 = (e4 = (e4 = e4.replace(/\s/g, " ")).replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ")).trim()).split(" ")[0] ? E.fromString(e4.substring(5).trim()) : "function" === e4.split(" ")[0] ? T.fromString(e4.substring(8).trim()) : "constructor" === e4.split("(")[0].trim() ? B.fromString(e4.trim()) : "error" === e4.split(" ")[0] ? I.fromString(e4.substring(5).trim()) : p.throwArgumentError("unsupported fragment", "value", e4);
          } }, { key: "isFragment", value: function(e4) {
            return !(!e4 || !e4._isFragment);
          } }]), e3;
        }();
        t2.Fragment = S;
        var E = function(e3) {
          (0, i.default)(r4, e3);
          var t3 = h(r4);
          function r4() {
            return (0, s.default)(this, r4), t3.apply(this, arguments);
          }
          return (0, u.default)(r4, [{ key: "format", value: function(e4) {
            if (e4 || (e4 = w.sighash), w[e4] || p.throwArgumentError("invalid format type", "format", e4), e4 === w.json)
              return JSON.stringify({ type: "event", anonymous: this.anonymous, name: this.name, inputs: this.inputs.map(function(t5) {
                return JSON.parse(t5.format(e4));
              }) });
            var t4 = "";
            return e4 !== w.sighash && (t4 += "event "), t4 += this.name + "(" + this.inputs.map(function(t5) {
              return t5.format(e4);
            }).join(e4 === w.full ? ", " : ",") + ") ", e4 !== w.sighash && this.anonymous && (t4 += "anonymous "), t4.trim();
          } }], [{ key: "from", value: function(e4) {
            return "string" == typeof e4 ? r4.fromString(e4) : r4.fromObject(e4);
          } }, { key: "fromObject", value: function(e4) {
            if (r4.isEventFragment(e4))
              return e4;
            "event" !== e4.type && p.throwArgumentError("invalid event object", "value", e4);
            var t4 = { name: R(e4.name), anonymous: e4.anonymous, inputs: e4.inputs ? e4.inputs.map(k.fromObject) : [], type: "event" };
            return new r4(b, t4);
          } }, { key: "fromString", value: function(e4) {
            var t4 = e4.match(j);
            t4 || p.throwArgumentError("invalid event string", "value", e4);
            var n2 = false;
            return t4[3].split(" ").forEach(function(e5) {
              switch (e5.trim()) {
                case "anonymous":
                  n2 = true;
                  break;
                case "":
                  break;
                default:
                  p.warn("unknown modifier: " + e5);
              }
            }), r4.fromObject({ name: t4[1].trim(), anonymous: n2, inputs: _(t4[2], true), type: "event" });
          } }, { key: "isEventFragment", value: function(e4) {
            return e4 && e4._isFragment && "event" === e4.type;
          } }]), r4;
        }(S);
        function x(e3, t3) {
          t3.gas = null;
          var r4 = e3.split("@");
          return 1 !== r4.length ? (r4.length > 2 && p.throwArgumentError("invalid human-readable ABI signature", "value", e3), r4[1].match(/^[0-9]+$/) || p.throwArgumentError("invalid human-readable ABI signature gas", "value", e3), t3.gas = c.BigNumber.from(r4[1]), r4[0]) : e3;
        }
        function P(e3, t3) {
          t3.constant = false, t3.payable = false, t3.stateMutability = "nonpayable", e3.split(" ").forEach(function(e4) {
            switch (e4.trim()) {
              case "constant":
                t3.constant = true;
                break;
              case "payable":
                t3.payable = true, t3.stateMutability = "payable";
                break;
              case "nonpayable":
                t3.payable = false, t3.stateMutability = "nonpayable";
                break;
              case "pure":
                t3.constant = true, t3.stateMutability = "pure";
                break;
              case "view":
                t3.constant = true, t3.stateMutability = "view";
                break;
              case "external":
              case "public":
              case "":
                break;
              default:
                console.log("unknown modifier: " + e4);
            }
          });
        }
        function O(e3) {
          var t3 = { constant: false, payable: true, stateMutability: "payable" };
          return null != e3.stateMutability ? (t3.stateMutability = e3.stateMutability, t3.constant = "view" === t3.stateMutability || "pure" === t3.stateMutability, null != e3.constant && !!e3.constant !== t3.constant && p.throwArgumentError("cannot have constant function with mutability " + t3.stateMutability, "value", e3), t3.payable = "payable" === t3.stateMutability, null != e3.payable && !!e3.payable !== t3.payable && p.throwArgumentError("cannot have payable function with mutability " + t3.stateMutability, "value", e3)) : null != e3.payable ? (t3.payable = !!e3.payable, null != e3.constant || t3.payable || "constructor" === e3.type || p.throwArgumentError("unable to determine stateMutability", "value", e3), t3.constant = !!e3.constant, t3.constant ? t3.stateMutability = "view" : t3.stateMutability = t3.payable ? "payable" : "nonpayable", t3.payable && t3.constant && p.throwArgumentError("cannot have constant payable function", "value", e3)) : null != e3.constant ? (t3.constant = !!e3.constant, t3.payable = !t3.constant, t3.stateMutability = t3.constant ? "view" : "payable") : "constructor" !== e3.type && p.throwArgumentError("unable to determine stateMutability", "value", e3), t3;
        }
        t2.EventFragment = E;
        var B = function(e3) {
          (0, i.default)(r4, e3);
          var t3 = h(r4);
          function r4() {
            return (0, s.default)(this, r4), t3.apply(this, arguments);
          }
          return (0, u.default)(r4, [{ key: "format", value: function(e4) {
            if (e4 || (e4 = w.sighash), w[e4] || p.throwArgumentError("invalid format type", "format", e4), e4 === w.json)
              return JSON.stringify({ type: "constructor", stateMutability: "nonpayable" !== this.stateMutability ? this.stateMutability : void 0, payable: this.payable, gas: this.gas ? this.gas.toNumber() : void 0, inputs: this.inputs.map(function(t5) {
                return JSON.parse(t5.format(e4));
              }) });
            e4 === w.sighash && p.throwError("cannot format a constructor for sighash", d.Logger.errors.UNSUPPORTED_OPERATION, { operation: "format(sighash)" });
            var t4 = "constructor(" + this.inputs.map(function(t5) {
              return t5.format(e4);
            }).join(e4 === w.full ? ", " : ",") + ") ";
            return this.stateMutability && "nonpayable" !== this.stateMutability && (t4 += this.stateMutability + " "), t4.trim();
          } }], [{ key: "from", value: function(e4) {
            return "string" == typeof e4 ? r4.fromString(e4) : r4.fromObject(e4);
          } }, { key: "fromObject", value: function(e4) {
            if (r4.isConstructorFragment(e4))
              return e4;
            "constructor" !== e4.type && p.throwArgumentError("invalid constructor object", "value", e4);
            var t4 = O(e4);
            t4.constant && p.throwArgumentError("constructor cannot be constant", "value", e4);
            var n2 = { name: null, type: e4.type, inputs: e4.inputs ? e4.inputs.map(k.fromObject) : [], payable: t4.payable, stateMutability: t4.stateMutability, gas: e4.gas ? c.BigNumber.from(e4.gas) : null };
            return new r4(b, n2);
          } }, { key: "fromString", value: function(e4) {
            var t4 = { type: "constructor" }, n2 = (e4 = x(e4, t4)).match(j);
            return n2 && "constructor" === n2[1].trim() || p.throwArgumentError("invalid constructor string", "value", e4), t4.inputs = _(n2[2].trim(), false), P(n2[3].trim(), t4), r4.fromObject(t4);
          } }, { key: "isConstructorFragment", value: function(e4) {
            return e4 && e4._isFragment && "constructor" === e4.type;
          } }]), r4;
        }(S);
        t2.ConstructorFragment = B;
        var T = function(e3) {
          (0, i.default)(r4, e3);
          var t3 = h(r4);
          function r4() {
            return (0, s.default)(this, r4), t3.apply(this, arguments);
          }
          return (0, u.default)(r4, [{ key: "format", value: function(e4) {
            if (e4 || (e4 = w.sighash), w[e4] || p.throwArgumentError("invalid format type", "format", e4), e4 === w.json)
              return JSON.stringify({ type: "function", name: this.name, constant: this.constant, stateMutability: "nonpayable" !== this.stateMutability ? this.stateMutability : void 0, payable: this.payable, gas: this.gas ? this.gas.toNumber() : void 0, inputs: this.inputs.map(function(t5) {
                return JSON.parse(t5.format(e4));
              }), outputs: this.outputs.map(function(t5) {
                return JSON.parse(t5.format(e4));
              }) });
            var t4 = "";
            return e4 !== w.sighash && (t4 += "function "), t4 += this.name + "(" + this.inputs.map(function(t5) {
              return t5.format(e4);
            }).join(e4 === w.full ? ", " : ",") + ") ", e4 !== w.sighash && (this.stateMutability ? "nonpayable" !== this.stateMutability && (t4 += this.stateMutability + " ") : this.constant && (t4 += "view "), this.outputs && this.outputs.length && (t4 += "returns (" + this.outputs.map(function(t5) {
              return t5.format(e4);
            }).join(", ") + ") "), null != this.gas && (t4 += "@" + this.gas.toString() + " ")), t4.trim();
          } }], [{ key: "from", value: function(e4) {
            return "string" == typeof e4 ? r4.fromString(e4) : r4.fromObject(e4);
          } }, { key: "fromObject", value: function(e4) {
            if (r4.isFunctionFragment(e4))
              return e4;
            "function" !== e4.type && p.throwArgumentError("invalid function object", "value", e4);
            var t4 = O(e4), n2 = { type: e4.type, name: R(e4.name), constant: t4.constant, inputs: e4.inputs ? e4.inputs.map(k.fromObject) : [], outputs: e4.outputs ? e4.outputs.map(k.fromObject) : [], payable: t4.payable, stateMutability: t4.stateMutability, gas: e4.gas ? c.BigNumber.from(e4.gas) : null };
            return new r4(b, n2);
          } }, { key: "fromString", value: function(e4) {
            var t4 = { type: "function" }, n2 = (e4 = x(e4, t4)).split(" returns ");
            n2.length > 2 && p.throwArgumentError("invalid function string", "value", e4);
            var i2 = n2[0].match(j);
            if (i2 || p.throwArgumentError("invalid function signature", "value", e4), t4.name = i2[1].trim(), t4.name && R(t4.name), t4.inputs = _(i2[2], false), P(i2[3].trim(), t4), n2.length > 1) {
              var o2 = n2[1].match(j);
              "" == o2[1].trim() && "" == o2[3].trim() || p.throwArgumentError("unexpected tokens", "value", e4), t4.outputs = _(o2[2], false);
            } else
              t4.outputs = [];
            return r4.fromObject(t4);
          } }, { key: "isFunctionFragment", value: function(e4) {
            return e4 && e4._isFragment && "function" === e4.type;
          } }]), r4;
        }(B);
        function C(e3) {
          var t3 = e3.format();
          return "Error(string)" !== t3 && "Panic(uint256)" !== t3 || p.throwArgumentError("cannot specify user defined ".concat(t3, " error"), "fragment", e3), e3;
        }
        t2.FunctionFragment = T;
        var I = function(e3) {
          (0, i.default)(r4, e3);
          var t3 = h(r4);
          function r4() {
            return (0, s.default)(this, r4), t3.apply(this, arguments);
          }
          return (0, u.default)(r4, [{ key: "format", value: function(e4) {
            if (e4 || (e4 = w.sighash), w[e4] || p.throwArgumentError("invalid format type", "format", e4), e4 === w.json)
              return JSON.stringify({ type: "error", name: this.name, inputs: this.inputs.map(function(t5) {
                return JSON.parse(t5.format(e4));
              }) });
            var t4 = "";
            return e4 !== w.sighash && (t4 += "error "), (t4 += this.name + "(" + this.inputs.map(function(t5) {
              return t5.format(e4);
            }).join(e4 === w.full ? ", " : ",") + ") ").trim();
          } }], [{ key: "from", value: function(e4) {
            return "string" == typeof e4 ? r4.fromString(e4) : r4.fromObject(e4);
          } }, { key: "fromObject", value: function(e4) {
            if (r4.isErrorFragment(e4))
              return e4;
            "error" !== e4.type && p.throwArgumentError("invalid error object", "value", e4);
            var t4 = { type: e4.type, name: R(e4.name), inputs: e4.inputs ? e4.inputs.map(k.fromObject) : [] };
            return C(new r4(b, t4));
          } }, { key: "fromString", value: function(e4) {
            var t4 = { type: "error" }, n2 = e4.match(j);
            return n2 || p.throwArgumentError("invalid error signature", "value", e4), t4.name = n2[1].trim(), t4.name && R(t4.name), t4.inputs = _(n2[2], false), C(r4.fromObject(t4));
          } }, { key: "isErrorFragment", value: function(e4) {
            return e4 && e4._isFragment && "error" === e4.type;
          } }]), r4;
        }(S);
        function M(e3) {
          return e3.match(/^uint($|[^1-9])/) ? e3 = "uint256" + e3.substring(4) : e3.match(/^int($|[^1-9])/) && (e3 = "int256" + e3.substring(3)), e3;
        }
        t2.ErrorFragment = I;
        var U = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
        function R(e3) {
          return e3 && e3.match(U) || p.throwArgumentError('invalid identifier "'.concat(e3, '"'), "value", e3), e3;
        }
        var j = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
      }, 2914: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "RQ", { enumerable: true, get: function() {
          return i.AbiCoder;
        } }), Object.defineProperty(t2, "_R", { enumerable: true, get: function() {
          return n.ParamType;
        } });
        var n = r3(800), i = r3(4937);
        r3(9044);
      }, 9044: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.TransactionDescription = t2.LogDescription = t2.Interface = t2.Indexed = t2.ErrorDescription = void 0, Object.defineProperty(t2, "checkResultErrors", { enumerable: true, get: function() {
          return y.checkResultErrors;
        } });
        var i = n(r3(8985)), o = n(r3(9721)), a = n(r3(5163)), s = n(r3(4650)), u = n(r3(1949)), c = r3(7921), f = r3(4952), d = r3(908), l = r3(7515), h = r3(4642), p = r3(3694), b = r3(4937), y = r3(7316), m = r3(800), v = r3(4327), g = r3(8067);
        function w(e3) {
          var t3 = function() {
            if ("undefined" == typeof Reflect || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if ("function" == typeof Proxy)
              return true;
            try {
              return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              })), true;
            } catch (e4) {
              return false;
            }
          }();
          return function() {
            var r4, n2 = (0, u.default)(e3);
            if (t3) {
              var i2 = (0, u.default)(this).constructor;
              r4 = Reflect.construct(n2, arguments, i2);
            } else
              r4 = n2.apply(this, arguments);
            return (0, s.default)(this, r4);
          };
        }
        var A = new v.Logger(g.version), k = function(e3) {
          (0, a.default)(r4, e3);
          var t3 = w(r4);
          function r4() {
            return (0, o.default)(this, r4), t3.apply(this, arguments);
          }
          return (0, i.default)(r4);
        }(p.Description);
        t2.LogDescription = k;
        var _ = function(e3) {
          (0, a.default)(r4, e3);
          var t3 = w(r4);
          function r4() {
            return (0, o.default)(this, r4), t3.apply(this, arguments);
          }
          return (0, i.default)(r4);
        }(p.Description);
        t2.TransactionDescription = _;
        var S = function(e3) {
          (0, a.default)(r4, e3);
          var t3 = w(r4);
          function r4() {
            return (0, o.default)(this, r4), t3.apply(this, arguments);
          }
          return (0, i.default)(r4);
        }(p.Description);
        t2.ErrorDescription = S;
        var E = function(e3) {
          (0, a.default)(r4, e3);
          var t3 = w(r4);
          function r4() {
            return (0, o.default)(this, r4), t3.apply(this, arguments);
          }
          return (0, i.default)(r4, null, [{ key: "isIndexed", value: function(e4) {
            return !(!e4 || !e4._isIndexed);
          } }]), r4;
        }(p.Description);
        t2.Indexed = E;
        var x = { "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true }, "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] } };
        function P(e3, t3) {
          var r4 = new Error("deferred error during ABI decoding triggered accessing ".concat(e3));
          return r4.error = t3, r4;
        }
        var O = function() {
          function e3(t3) {
            var r4 = this;
            (0, o.default)(this, e3);
            var n2 = [];
            n2 = "string" == typeof t3 ? JSON.parse(t3) : t3, (0, p.defineReadOnly)(this, "fragments", n2.map(function(e4) {
              return m.Fragment.from(e4);
            }).filter(function(e4) {
              return null != e4;
            })), (0, p.defineReadOnly)(this, "_abiCoder", (0, p.getStatic)(this instanceof e3 ? this.constructor : void 0, "getAbiCoder")()), (0, p.defineReadOnly)(this, "functions", {}), (0, p.defineReadOnly)(this, "errors", {}), (0, p.defineReadOnly)(this, "events", {}), (0, p.defineReadOnly)(this, "structs", {}), this.fragments.forEach(function(e4) {
              var t4 = null;
              switch (e4.type) {
                case "constructor":
                  return r4.deploy ? void A.warn("duplicate definition - constructor") : void (0, p.defineReadOnly)(r4, "deploy", e4);
                case "function":
                  t4 = r4.functions;
                  break;
                case "event":
                  t4 = r4.events;
                  break;
                case "error":
                  t4 = r4.errors;
                  break;
                default:
                  return;
              }
              var n3 = e4.format();
              t4[n3] ? A.warn("duplicate definition - " + n3) : t4[n3] = e4;
            }), this.deploy || (0, p.defineReadOnly)(this, "deploy", m.ConstructorFragment.from({ payable: false, type: "constructor" })), (0, p.defineReadOnly)(this, "_isInterface", true);
          }
          return (0, i.default)(e3, [{ key: "format", value: function(e4) {
            e4 || (e4 = m.FormatTypes.full), e4 === m.FormatTypes.sighash && A.throwArgumentError("interface does not support formatting sighash", "format", e4);
            var t3 = this.fragments.map(function(t4) {
              return t4.format(e4);
            });
            return e4 === m.FormatTypes.json ? JSON.stringify(t3.map(function(e5) {
              return JSON.parse(e5);
            })) : t3;
          } }, { key: "getFunction", value: function(e4) {
            if ((0, d.isHexString)(e4)) {
              for (var t3 in this.functions)
                if (e4 === this.getSighash(t3))
                  return this.functions[t3];
              A.throwArgumentError("no matching function", "sighash", e4);
            }
            if (-1 === e4.indexOf("(")) {
              var r4 = e4.trim(), n2 = Object.keys(this.functions).filter(function(e5) {
                return e5.split("(")[0] === r4;
              });
              return 0 === n2.length ? A.throwArgumentError("no matching function", "name", r4) : n2.length > 1 && A.throwArgumentError("multiple matching functions", "name", r4), this.functions[n2[0]];
            }
            var i2 = this.functions[m.FunctionFragment.fromString(e4).format()];
            return i2 || A.throwArgumentError("no matching function", "signature", e4), i2;
          } }, { key: "getEvent", value: function(e4) {
            if ((0, d.isHexString)(e4)) {
              var t3 = e4.toLowerCase();
              for (var r4 in this.events)
                if (t3 === this.getEventTopic(r4))
                  return this.events[r4];
              A.throwArgumentError("no matching event", "topichash", t3);
            }
            if (-1 === e4.indexOf("(")) {
              var n2 = e4.trim(), i2 = Object.keys(this.events).filter(function(e5) {
                return e5.split("(")[0] === n2;
              });
              return 0 === i2.length ? A.throwArgumentError("no matching event", "name", n2) : i2.length > 1 && A.throwArgumentError("multiple matching events", "name", n2), this.events[i2[0]];
            }
            var o2 = this.events[m.EventFragment.fromString(e4).format()];
            return o2 || A.throwArgumentError("no matching event", "signature", e4), o2;
          } }, { key: "getError", value: function(e4) {
            if ((0, d.isHexString)(e4)) {
              var t3 = (0, p.getStatic)(this.constructor, "getSighash");
              for (var r4 in this.errors)
                if (e4 === t3(this.errors[r4]))
                  return this.errors[r4];
              A.throwArgumentError("no matching error", "sighash", e4);
            }
            if (-1 === e4.indexOf("(")) {
              var n2 = e4.trim(), i2 = Object.keys(this.errors).filter(function(e5) {
                return e5.split("(")[0] === n2;
              });
              return 0 === i2.length ? A.throwArgumentError("no matching error", "name", n2) : i2.length > 1 && A.throwArgumentError("multiple matching errors", "name", n2), this.errors[i2[0]];
            }
            var o2 = this.errors[m.FunctionFragment.fromString(e4).format()];
            return o2 || A.throwArgumentError("no matching error", "signature", e4), o2;
          } }, { key: "getSighash", value: function(e4) {
            if ("string" == typeof e4)
              try {
                e4 = this.getFunction(e4);
              } catch (t3) {
                try {
                  e4 = this.getError(e4);
                } catch (e5) {
                  throw t3;
                }
              }
            return (0, p.getStatic)(this.constructor, "getSighash")(e4);
          } }, { key: "getEventTopic", value: function(e4) {
            return "string" == typeof e4 && (e4 = this.getEvent(e4)), (0, p.getStatic)(this.constructor, "getEventTopic")(e4);
          } }, { key: "_decodeParams", value: function(e4, t3) {
            return this._abiCoder.decode(e4, t3);
          } }, { key: "_encodeParams", value: function(e4, t3) {
            return this._abiCoder.encode(e4, t3);
          } }, { key: "encodeDeploy", value: function(e4) {
            return this._encodeParams(this.deploy.inputs, e4 || []);
          } }, { key: "decodeErrorResult", value: function(e4, t3) {
            "string" == typeof e4 && (e4 = this.getError(e4));
            var r4 = (0, d.arrayify)(t3);
            return (0, d.hexlify)(r4.slice(0, 4)) !== this.getSighash(e4) && A.throwArgumentError("data signature does not match error ".concat(e4.name, "."), "data", (0, d.hexlify)(r4)), this._decodeParams(e4.inputs, r4.slice(4));
          } }, { key: "encodeErrorResult", value: function(e4, t3) {
            return "string" == typeof e4 && (e4 = this.getError(e4)), (0, d.hexlify)((0, d.concat)([this.getSighash(e4), this._encodeParams(e4.inputs, t3 || [])]));
          } }, { key: "decodeFunctionData", value: function(e4, t3) {
            "string" == typeof e4 && (e4 = this.getFunction(e4));
            var r4 = (0, d.arrayify)(t3);
            return (0, d.hexlify)(r4.slice(0, 4)) !== this.getSighash(e4) && A.throwArgumentError("data signature does not match function ".concat(e4.name, "."), "data", (0, d.hexlify)(r4)), this._decodeParams(e4.inputs, r4.slice(4));
          } }, { key: "encodeFunctionData", value: function(e4, t3) {
            return "string" == typeof e4 && (e4 = this.getFunction(e4)), (0, d.hexlify)((0, d.concat)([this.getSighash(e4), this._encodeParams(e4.inputs, t3 || [])]));
          } }, { key: "decodeFunctionResult", value: function(e4, t3) {
            "string" == typeof e4 && (e4 = this.getFunction(e4));
            var r4 = (0, d.arrayify)(t3), n2 = null, i2 = "", o2 = null, a2 = null, s2 = null;
            switch (r4.length % this._abiCoder._getWordSize()) {
              case 0:
                try {
                  return this._abiCoder.decode(e4.outputs, r4);
                } catch (f3) {
                }
                break;
              case 4:
                var u2 = (0, d.hexlify)(r4.slice(0, 4)), c2 = x[u2];
                if (c2)
                  o2 = this._abiCoder.decode(c2.inputs, r4.slice(4)), a2 = c2.name, s2 = c2.signature, c2.reason && (n2 = o2[0]), "Error" === a2 ? i2 = "; VM Exception while processing transaction: reverted with reason string ".concat(JSON.stringify(o2[0])) : "Panic" === a2 && (i2 = "; VM Exception while processing transaction: reverted with panic code ".concat(o2[0]));
                else
                  try {
                    var f2 = this.getError(u2);
                    o2 = this._abiCoder.decode(f2.inputs, r4.slice(4)), a2 = f2.name, s2 = f2.format();
                  } catch (f3) {
                  }
            }
            return A.throwError("call revert exception" + i2, v.Logger.errors.CALL_EXCEPTION, { method: e4.format(), data: (0, d.hexlify)(t3), errorArgs: o2, errorName: a2, errorSignature: s2, reason: n2 });
          } }, { key: "encodeFunctionResult", value: function(e4, t3) {
            return "string" == typeof e4 && (e4 = this.getFunction(e4)), (0, d.hexlify)(this._abiCoder.encode(e4.outputs, t3 || []));
          } }, { key: "encodeFilterTopics", value: function(e4, t3) {
            var r4 = this;
            "string" == typeof e4 && (e4 = this.getEvent(e4)), t3.length > e4.inputs.length && A.throwError("too many arguments for " + e4.format(), v.Logger.errors.UNEXPECTED_ARGUMENT, { argument: "values", value: t3 });
            var n2 = [];
            e4.anonymous || n2.push(this.getEventTopic(e4));
            var i2 = function(e5, t4) {
              return "string" === e5.type ? (0, l.id)(t4) : "bytes" === e5.type ? (0, h.keccak256)((0, d.hexlify)(t4)) : ("bool" === e5.type && "boolean" == typeof t4 && (t4 = t4 ? "0x01" : "0x00"), e5.type.match(/^u?int/) && (t4 = f.BigNumber.from(t4).toHexString()), "address" === e5.type && r4._abiCoder.encode(["address"], [t4]), (0, d.hexZeroPad)((0, d.hexlify)(t4), 32));
            };
            for (t3.forEach(function(t4, r5) {
              var o2 = e4.inputs[r5];
              o2.indexed ? null == t4 ? n2.push(null) : "array" === o2.baseType || "tuple" === o2.baseType ? A.throwArgumentError("filtering with tuples or arrays not supported", "contract." + o2.name, t4) : Array.isArray(t4) ? n2.push(t4.map(function(e5) {
                return i2(o2, e5);
              })) : n2.push(i2(o2, t4)) : null != t4 && A.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + o2.name, t4);
            }); n2.length && null === n2[n2.length - 1]; )
              n2.pop();
            return n2;
          } }, { key: "encodeEventLog", value: function(e4, t3) {
            var r4 = this;
            "string" == typeof e4 && (e4 = this.getEvent(e4));
            var n2 = [], i2 = [], o2 = [];
            return e4.anonymous || n2.push(this.getEventTopic(e4)), t3.length !== e4.inputs.length && A.throwArgumentError("event arguments/values mismatch", "values", t3), e4.inputs.forEach(function(e5, a2) {
              var s2 = t3[a2];
              if (e5.indexed)
                if ("string" === e5.type)
                  n2.push((0, l.id)(s2));
                else if ("bytes" === e5.type)
                  n2.push((0, h.keccak256)(s2));
                else {
                  if ("tuple" === e5.baseType || "array" === e5.baseType)
                    throw new Error("not implemented");
                  n2.push(r4._abiCoder.encode([e5.type], [s2]));
                }
              else
                i2.push(e5), o2.push(s2);
            }), { data: this._abiCoder.encode(i2, o2), topics: n2 };
          } }, { key: "decodeEventLog", value: function(e4, t3, r4) {
            if ("string" == typeof e4 && (e4 = this.getEvent(e4)), null != r4 && !e4.anonymous) {
              var n2 = this.getEventTopic(e4);
              (0, d.isHexString)(r4[0], 32) && r4[0].toLowerCase() === n2 || A.throwError("fragment/topic mismatch", v.Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: n2, value: r4[0] }), r4 = r4.slice(1);
            }
            var i2 = [], o2 = [], a2 = [];
            e4.inputs.forEach(function(e5, t4) {
              e5.indexed ? "string" === e5.type || "bytes" === e5.type || "tuple" === e5.baseType || "array" === e5.baseType ? (i2.push(m.ParamType.fromObject({ type: "bytes32", name: e5.name })), a2.push(true)) : (i2.push(e5), a2.push(false)) : (o2.push(e5), a2.push(false));
            });
            var s2 = null != r4 ? this._abiCoder.decode(i2, (0, d.concat)(r4)) : null, u2 = this._abiCoder.decode(o2, t3, true), c2 = [], f2 = 0, l2 = 0;
            e4.inputs.forEach(function(e5, t4) {
              if (e5.indexed)
                if (null == s2)
                  c2[t4] = new E({ _isIndexed: true, hash: null });
                else if (a2[t4])
                  c2[t4] = new E({ _isIndexed: true, hash: s2[l2++] });
                else
                  try {
                    c2[t4] = s2[l2++];
                  } catch (e6) {
                    c2[t4] = e6;
                  }
              else
                try {
                  c2[t4] = u2[f2++];
                } catch (e6) {
                  c2[t4] = e6;
                }
              if (e5.name && null == c2[e5.name]) {
                var r5 = c2[t4];
                r5 instanceof Error ? Object.defineProperty(c2, e5.name, { enumerable: true, get: function() {
                  throw P("property ".concat(JSON.stringify(e5.name)), r5);
                } }) : c2[e5.name] = r5;
              }
            });
            for (var h2 = function(e5) {
              var t4 = c2[e5];
              t4 instanceof Error && Object.defineProperty(c2, e5, { enumerable: true, get: function() {
                throw P("index ".concat(e5), t4);
              } });
            }, p2 = 0; p2 < c2.length; p2++)
              h2(p2);
            return Object.freeze(c2);
          } }, { key: "parseTransaction", value: function(e4) {
            var t3 = this.getFunction(e4.data.substring(0, 10).toLowerCase());
            return t3 ? new _({ args: this._abiCoder.decode(t3.inputs, "0x" + e4.data.substring(10)), functionFragment: t3, name: t3.name, signature: t3.format(), sighash: this.getSighash(t3), value: f.BigNumber.from(e4.value || "0") }) : null;
          } }, { key: "parseLog", value: function(e4) {
            var t3 = this.getEvent(e4.topics[0]);
            return !t3 || t3.anonymous ? null : new k({ eventFragment: t3, name: t3.name, signature: t3.format(), topic: this.getEventTopic(t3), args: this.decodeEventLog(t3, e4.data, e4.topics) });
          } }, { key: "parseError", value: function(e4) {
            var t3 = (0, d.hexlify)(e4), r4 = this.getError(t3.substring(0, 10).toLowerCase());
            return r4 ? new S({ args: this._abiCoder.decode(r4.inputs, "0x" + t3.substring(10)), errorFragment: r4, name: r4.name, signature: r4.format(), sighash: this.getSighash(r4) }) : null;
          } }], [{ key: "getAbiCoder", value: function() {
            return b.defaultAbiCoder;
          } }, { key: "getAddress", value: function(e4) {
            return (0, c.getAddress)(e4);
          } }, { key: "getSighash", value: function(e4) {
            return (0, d.hexDataSlice)((0, l.id)(e4.format()), 0, 4);
          } }, { key: "getEventTopic", value: function(e4) {
            return (0, l.id)(e4.format());
          } }, { key: "isInterface", value: function(e4) {
            return !(!e4 || !e4._isInterface);
          } }]), e3;
        }();
        t2.Interface = O;
      }, 8222: (e2, t2) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.version = void 0, t2.version = "address/5.7.0";
      }, 7921: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.getAddress = m, t2.getContractAddress = function(e3) {
          var t3 = null;
          try {
            t3 = m(e3.from);
          } catch (t4) {
            c.throwArgumentError("missing from address", "transaction", e3);
          }
          var r4 = (0, n.stripZeros)((0, n.arrayify)(i.BigNumber.from(e3.nonce).toHexString()));
          return m((0, n.hexDataSlice)((0, o.keccak256)((0, a.encode)([t3, r4])), 12));
        }, t2.getCreate2Address = function(e3, t3, r4) {
          return 32 !== (0, n.hexDataLength)(t3) && c.throwArgumentError("salt must be 32 bytes", "salt", t3), 32 !== (0, n.hexDataLength)(r4) && c.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", r4), m((0, n.hexDataSlice)((0, o.keccak256)((0, n.concat)(["0xff", m(e3), t3, r4])), 12));
        }, t2.getIcapAddress = function(e3) {
          for (var t3 = (0, i._base16To36)(m(e3).substring(2)).toUpperCase(); t3.length < 30; )
            t3 = "0" + t3;
          return "XE" + y("XE00" + t3) + t3;
        }, t2.isAddress = function(e3) {
          try {
            return m(e3), true;
          } catch (e4) {
          }
          return false;
        };
        var n = r3(908), i = r3(4952), o = r3(4642), a = r3(5265), s = r3(4327), u = r3(8222), c = new s.Logger(u.version);
        function f(e3) {
          (0, n.isHexString)(e3, 20) || c.throwArgumentError("invalid address", "address", e3);
          for (var t3 = (e3 = e3.toLowerCase()).substring(2).split(""), r4 = new Uint8Array(40), i2 = 0; i2 < 40; i2++)
            r4[i2] = t3[i2].charCodeAt(0);
          for (var a2 = (0, n.arrayify)((0, o.keccak256)(r4)), s2 = 0; s2 < 40; s2 += 2)
            a2[s2 >> 1] >> 4 >= 8 && (t3[s2] = t3[s2].toUpperCase()), (15 & a2[s2 >> 1]) >= 8 && (t3[s2 + 1] = t3[s2 + 1].toUpperCase());
          return "0x" + t3.join("");
        }
        for (var d = {}, l = 0; l < 10; l++)
          d[String(l)] = String(l);
        for (var h = 0; h < 26; h++)
          d[String.fromCharCode(65 + h)] = String(10 + h);
        var p, b = Math.floor((p = 9007199254740991, Math.log10 ? Math.log10(p) : Math.log(p) / Math.LN10));
        function y(e3) {
          for (var t3 = (e3 = (e3 = e3.toUpperCase()).substring(4) + e3.substring(0, 2) + "00").split("").map(function(e4) {
            return d[e4];
          }).join(""); t3.length >= b; ) {
            var r4 = t3.substring(0, b);
            t3 = parseInt(r4, 10) % 97 + t3.substring(r4.length);
          }
          for (var n2 = String(98 - parseInt(t3, 10) % 97); n2.length < 2; )
            n2 = "0" + n2;
          return n2;
        }
        function m(e3) {
          var t3 = null;
          if ("string" != typeof e3 && c.throwArgumentError("invalid address", "address", e3), e3.match(/^(0x)?[0-9a-fA-F]{40}$/))
            "0x" !== e3.substring(0, 2) && (e3 = "0x" + e3), t3 = f(e3), e3.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && t3 !== e3 && c.throwArgumentError("bad address checksum", "address", e3);
          else if (e3.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
            for (e3.substring(2, 4) !== y(e3) && c.throwArgumentError("bad icap checksum", "address", e3), t3 = (0, i._base36To16)(e3.substring(4)); t3.length < 40; )
              t3 = "0" + t3;
            t3 = f("0x" + t3);
          } else
            c.throwArgumentError("invalid address", "address", e3);
          return t3;
        }
      }, 5798: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.decode = function(e3) {
          e3 = atob(e3);
          for (var t3 = [], r4 = 0; r4 < e3.length; r4++)
            t3.push(e3.charCodeAt(r4));
          return (0, n.arrayify)(t3);
        }, t2.encode = function(e3) {
          e3 = (0, n.arrayify)(e3);
          for (var t3 = "", r4 = 0; r4 < e3.length; r4++)
            t3 += String.fromCharCode(e3[r4]);
          return btoa(t3);
        };
        var n = r3(908);
      }, 997: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), Object.defineProperty(t2, "decode", { enumerable: true, get: function() {
          return n.decode;
        } }), Object.defineProperty(t2, "encode", { enumerable: true, get: function() {
          return n.encode;
        } });
        var n = r3(5798);
      }, 3042: (e2, t2) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.version = void 0, t2.version = "bignumber/5.7.0";
      }, 1872: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.BigNumber = void 0, t2._base16To36 = function(e3) {
          return new f(e3, 16).toString(36);
        }, t2._base36To16 = function(e3) {
          return new f(e3, 36).toString(16);
        }, t2.isBigNumberish = function(e3) {
          return null != e3 && (b.isBigNumber(e3) || "number" == typeof e3 && e3 % 1 == 0 || "string" == typeof e3 && !!e3.match(/^-?[0-9]+$/) || (0, s.isHexString)(e3) || "bigint" == typeof e3 || (0, s.isBytes)(e3));
        };
        var i = n(r3(9721)), o = n(r3(8985)), a = n(r3(1734)), s = r3(908), u = r3(4327), c = r3(3042), f = a.default.BN, d = new u.Logger(c.version), l = {}, h = 9007199254740991, p = false, b = function() {
          function e3(t3, r4) {
            (0, i.default)(this, e3), t3 !== l && d.throwError("cannot call constructor directly; use BigNumber.from", u.Logger.errors.UNSUPPORTED_OPERATION, { operation: "new (BigNumber)" }), this._hex = r4, this._isBigNumber = true, Object.freeze(this);
          }
          return (0, o.default)(e3, [{ key: "fromTwos", value: function(e4) {
            return m(v(this).fromTwos(e4));
          } }, { key: "toTwos", value: function(e4) {
            return m(v(this).toTwos(e4));
          } }, { key: "abs", value: function() {
            return "-" === this._hex[0] ? e3.from(this._hex.substring(1)) : this;
          } }, { key: "add", value: function(e4) {
            return m(v(this).add(v(e4)));
          } }, { key: "sub", value: function(e4) {
            return m(v(this).sub(v(e4)));
          } }, { key: "div", value: function(t3) {
            return e3.from(t3).isZero() && g("division-by-zero", "div"), m(v(this).div(v(t3)));
          } }, { key: "mul", value: function(e4) {
            return m(v(this).mul(v(e4)));
          } }, { key: "mod", value: function(e4) {
            var t3 = v(e4);
            return t3.isNeg() && g("division-by-zero", "mod"), m(v(this).umod(t3));
          } }, { key: "pow", value: function(e4) {
            var t3 = v(e4);
            return t3.isNeg() && g("negative-power", "pow"), m(v(this).pow(t3));
          } }, { key: "and", value: function(e4) {
            var t3 = v(e4);
            return (this.isNegative() || t3.isNeg()) && g("unbound-bitwise-result", "and"), m(v(this).and(t3));
          } }, { key: "or", value: function(e4) {
            var t3 = v(e4);
            return (this.isNegative() || t3.isNeg()) && g("unbound-bitwise-result", "or"), m(v(this).or(t3));
          } }, { key: "xor", value: function(e4) {
            var t3 = v(e4);
            return (this.isNegative() || t3.isNeg()) && g("unbound-bitwise-result", "xor"), m(v(this).xor(t3));
          } }, { key: "mask", value: function(e4) {
            return (this.isNegative() || e4 < 0) && g("negative-width", "mask"), m(v(this).maskn(e4));
          } }, { key: "shl", value: function(e4) {
            return (this.isNegative() || e4 < 0) && g("negative-width", "shl"), m(v(this).shln(e4));
          } }, { key: "shr", value: function(e4) {
            return (this.isNegative() || e4 < 0) && g("negative-width", "shr"), m(v(this).shrn(e4));
          } }, { key: "eq", value: function(e4) {
            return v(this).eq(v(e4));
          } }, { key: "lt", value: function(e4) {
            return v(this).lt(v(e4));
          } }, { key: "lte", value: function(e4) {
            return v(this).lte(v(e4));
          } }, { key: "gt", value: function(e4) {
            return v(this).gt(v(e4));
          } }, { key: "gte", value: function(e4) {
            return v(this).gte(v(e4));
          } }, { key: "isNegative", value: function() {
            return "-" === this._hex[0];
          } }, { key: "isZero", value: function() {
            return v(this).isZero();
          } }, { key: "toNumber", value: function() {
            try {
              return v(this).toNumber();
            } catch (e4) {
              g("overflow", "toNumber", this.toString());
            }
            return null;
          } }, { key: "toBigInt", value: function() {
            try {
              return BigInt(this.toString());
            } catch (e4) {
            }
            return d.throwError("this platform does not support BigInt", u.Logger.errors.UNSUPPORTED_OPERATION, { value: this.toString() });
          } }, { key: "toString", value: function() {
            return arguments.length > 0 && (10 === arguments[0] ? p || (p = true, d.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")) : 16 === arguments[0] ? d.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", u.Logger.errors.UNEXPECTED_ARGUMENT, {}) : d.throwError("BigNumber.toString does not accept parameters", u.Logger.errors.UNEXPECTED_ARGUMENT, {})), v(this).toString(10);
          } }, { key: "toHexString", value: function() {
            return this._hex;
          } }, { key: "toJSON", value: function(e4) {
            return { type: "BigNumber", hex: this.toHexString() };
          } }], [{ key: "from", value: function(t3) {
            if (t3 instanceof e3)
              return t3;
            if ("string" == typeof t3)
              return t3.match(/^-?0x[0-9a-f]+$/i) ? new e3(l, y(t3)) : t3.match(/^-?[0-9]+$/) ? new e3(l, y(new f(t3))) : d.throwArgumentError("invalid BigNumber string", "value", t3);
            if ("number" == typeof t3)
              return t3 % 1 && g("underflow", "BigNumber.from", t3), (t3 >= h || t3 <= -h) && g("overflow", "BigNumber.from", t3), e3.from(String(t3));
            var r4 = t3;
            if ("bigint" == typeof r4)
              return e3.from(r4.toString());
            if ((0, s.isBytes)(r4))
              return e3.from((0, s.hexlify)(r4));
            if (r4)
              if (r4.toHexString) {
                var n2 = r4.toHexString();
                if ("string" == typeof n2)
                  return e3.from(n2);
              } else {
                var i2 = r4._hex;
                if (null == i2 && "BigNumber" === r4.type && (i2 = r4.hex), "string" == typeof i2 && ((0, s.isHexString)(i2) || "-" === i2[0] && (0, s.isHexString)(i2.substring(1))))
                  return e3.from(i2);
              }
            return d.throwArgumentError("invalid BigNumber value", "value", t3);
          } }, { key: "isBigNumber", value: function(e4) {
            return !(!e4 || !e4._isBigNumber);
          } }]), e3;
        }();
        function y(e3) {
          if ("string" != typeof e3)
            return y(e3.toString(16));
          if ("-" === e3[0])
            return "-" === (e3 = e3.substring(1))[0] && d.throwArgumentError("invalid hex", "value", e3), "0x00" === (e3 = y(e3)) ? e3 : "-" + e3;
          if ("0x" !== e3.substring(0, 2) && (e3 = "0x" + e3), "0x" === e3)
            return "0x00";
          for (e3.length % 2 && (e3 = "0x0" + e3.substring(2)); e3.length > 4 && "0x00" === e3.substring(0, 4); )
            e3 = "0x" + e3.substring(4);
          return e3;
        }
        function m(e3) {
          return b.from(y(e3));
        }
        function v(e3) {
          var t3 = b.from(e3).toHexString();
          return "-" === t3[0] ? new f("-" + t3.substring(3), 16) : new f(t3.substring(2), 16);
        }
        function g(e3, t3, r4) {
          var n2 = { fault: e3, operation: t3 };
          return null != r4 && (n2.value = r4), d.throwError(e3, u.Logger.errors.NUMERIC_FAULT, n2);
        }
        t2.BigNumber = b;
      }, 8390: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.FixedNumber = t2.FixedFormat = void 0, t2.formatFixed = v, t2.parseFixed = g;
        var i = n(r3(3355)), o = n(r3(9721)), a = n(r3(8985)), s = r3(908), u = r3(4327), c = r3(3042), f = r3(1872), d = new u.Logger(c.version), l = {}, h = f.BigNumber.from(0), p = f.BigNumber.from(-1);
        function b(e3, t3, r4, n2) {
          var i2 = { fault: t3, operation: r4 };
          return void 0 !== n2 && (i2.value = n2), d.throwError(e3, u.Logger.errors.NUMERIC_FAULT, i2);
        }
        for (var y = "0"; y.length < 256; )
          y += y;
        function m(e3) {
          if ("number" != typeof e3)
            try {
              e3 = f.BigNumber.from(e3).toNumber();
            } catch (e4) {
            }
          return "number" == typeof e3 && e3 >= 0 && e3 <= 256 && !(e3 % 1) ? "1" + y.substring(0, e3) : d.throwArgumentError("invalid decimal size", "decimals", e3);
        }
        function v(e3, t3) {
          null == t3 && (t3 = 0);
          var r4 = m(t3), n2 = (e3 = f.BigNumber.from(e3)).lt(h);
          n2 && (e3 = e3.mul(p));
          for (var i2 = e3.mod(r4).toString(); i2.length < r4.length - 1; )
            i2 = "0" + i2;
          i2 = i2.match(/^([0-9]*[1-9]|0)(0*)/)[1];
          var o2 = e3.div(r4).toString();
          return e3 = 1 === r4.length ? o2 : o2 + "." + i2, n2 && (e3 = "-" + e3), e3;
        }
        function g(e3, t3) {
          null == t3 && (t3 = 0);
          var r4 = m(t3);
          "string" == typeof e3 && e3.match(/^-?[0-9.]+$/) || d.throwArgumentError("invalid decimal value", "value", e3);
          var n2 = "-" === e3.substring(0, 1);
          n2 && (e3 = e3.substring(1)), "." === e3 && d.throwArgumentError("missing value", "value", e3);
          var i2 = e3.split(".");
          i2.length > 2 && d.throwArgumentError("too many decimal points", "value", e3);
          var o2 = i2[0], a2 = i2[1];
          for (o2 || (o2 = "0"), a2 || (a2 = "0"); "0" === a2[a2.length - 1]; )
            a2 = a2.substring(0, a2.length - 1);
          for (a2.length > r4.length - 1 && b("fractional component exceeds decimals", "underflow", "parseFixed"), "" === a2 && (a2 = "0"); a2.length < r4.length - 1; )
            a2 += "0";
          var s2 = f.BigNumber.from(o2), u2 = f.BigNumber.from(a2), c2 = s2.mul(r4).add(u2);
          return n2 && (c2 = c2.mul(p)), c2;
        }
        var w = function() {
          function e3(t3, r4, n2, i2) {
            (0, o.default)(this, e3), t3 !== l && d.throwError("cannot use FixedFormat constructor; use FixedFormat.from", u.Logger.errors.UNSUPPORTED_OPERATION, { operation: "new FixedFormat" }), this.signed = r4, this.width = n2, this.decimals = i2, this.name = (r4 ? "" : "u") + "fixed" + String(n2) + "x" + String(i2), this._multiplier = m(i2), Object.freeze(this);
          }
          return (0, a.default)(e3, null, [{ key: "from", value: function(t3) {
            if (t3 instanceof e3)
              return t3;
            "number" == typeof t3 && (t3 = "fixed128x".concat(t3));
            var r4 = true, n2 = 128, o2 = 18;
            if ("string" == typeof t3)
              if ("fixed" === t3)
                ;
              else if ("ufixed" === t3)
                r4 = false;
              else {
                var a2 = t3.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                a2 || d.throwArgumentError("invalid fixed format", "format", t3), r4 = "u" !== a2[1], n2 = parseInt(a2[2]), o2 = parseInt(a2[3]);
              }
            else if (t3) {
              var s2 = function(e4, r5, n3) {
                return null == t3[e4] ? n3 : ((0, i.default)(t3[e4]) !== r5 && d.throwArgumentError("invalid fixed format (" + e4 + " not " + r5 + ")", "format." + e4, t3[e4]), t3[e4]);
              };
              r4 = s2("signed", "boolean", r4), n2 = s2("width", "number", n2), o2 = s2("decimals", "number", o2);
            }
            return n2 % 8 && d.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", n2), o2 > 80 && d.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", o2), new e3(l, r4, n2, o2);
          } }]), e3;
        }();
        t2.FixedFormat = w;
        var A = function() {
          function e3(t3, r4, n2, i2) {
            (0, o.default)(this, e3), t3 !== l && d.throwError("cannot use FixedNumber constructor; use FixedNumber.from", u.Logger.errors.UNSUPPORTED_OPERATION, { operation: "new FixedFormat" }), this.format = i2, this._hex = r4, this._value = n2, this._isFixedNumber = true, Object.freeze(this);
          }
          return (0, a.default)(e3, [{ key: "_checkFormat", value: function(e4) {
            this.format.name !== e4.format.name && d.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", e4);
          } }, { key: "addUnsafe", value: function(t3) {
            this._checkFormat(t3);
            var r4 = g(this._value, this.format.decimals), n2 = g(t3._value, t3.format.decimals);
            return e3.fromValue(r4.add(n2), this.format.decimals, this.format);
          } }, { key: "subUnsafe", value: function(t3) {
            this._checkFormat(t3);
            var r4 = g(this._value, this.format.decimals), n2 = g(t3._value, t3.format.decimals);
            return e3.fromValue(r4.sub(n2), this.format.decimals, this.format);
          } }, { key: "mulUnsafe", value: function(t3) {
            this._checkFormat(t3);
            var r4 = g(this._value, this.format.decimals), n2 = g(t3._value, t3.format.decimals);
            return e3.fromValue(r4.mul(n2).div(this.format._multiplier), this.format.decimals, this.format);
          } }, { key: "divUnsafe", value: function(t3) {
            this._checkFormat(t3);
            var r4 = g(this._value, this.format.decimals), n2 = g(t3._value, t3.format.decimals);
            return e3.fromValue(r4.mul(this.format._multiplier).div(n2), this.format.decimals, this.format);
          } }, { key: "floor", value: function() {
            var t3 = this.toString().split(".");
            1 === t3.length && t3.push("0");
            var r4 = e3.from(t3[0], this.format), n2 = !t3[1].match(/^(0*)$/);
            return this.isNegative() && n2 && (r4 = r4.subUnsafe(k.toFormat(r4.format))), r4;
          } }, { key: "ceiling", value: function() {
            var t3 = this.toString().split(".");
            1 === t3.length && t3.push("0");
            var r4 = e3.from(t3[0], this.format), n2 = !t3[1].match(/^(0*)$/);
            return !this.isNegative() && n2 && (r4 = r4.addUnsafe(k.toFormat(r4.format))), r4;
          } }, { key: "round", value: function(t3) {
            null == t3 && (t3 = 0);
            var r4 = this.toString().split(".");
            if (1 === r4.length && r4.push("0"), (t3 < 0 || t3 > 80 || t3 % 1) && d.throwArgumentError("invalid decimal count", "decimals", t3), r4[1].length <= t3)
              return this;
            var n2 = e3.from("1" + y.substring(0, t3), this.format), i2 = _.toFormat(this.format);
            return this.mulUnsafe(n2).addUnsafe(i2).floor().divUnsafe(n2);
          } }, { key: "isZero", value: function() {
            return "0.0" === this._value || "0" === this._value;
          } }, { key: "isNegative", value: function() {
            return "-" === this._value[0];
          } }, { key: "toString", value: function() {
            return this._value;
          } }, { key: "toHexString", value: function(e4) {
            if (null == e4)
              return this._hex;
            e4 % 8 && d.throwArgumentError("invalid byte width", "width", e4);
            var t3 = f.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(e4).toHexString();
            return (0, s.hexZeroPad)(t3, e4 / 8);
          } }, { key: "toUnsafeFloat", value: function() {
            return parseFloat(this.toString());
          } }, { key: "toFormat", value: function(t3) {
            return e3.fromString(this._value, t3);
          } }], [{ key: "fromValue", value: function(t3, r4, n2) {
            return null != n2 || null == r4 || (0, f.isBigNumberish)(r4) || (n2 = r4, r4 = null), null == r4 && (r4 = 0), null == n2 && (n2 = "fixed"), e3.fromString(v(t3, r4), w.from(n2));
          } }, { key: "fromString", value: function(t3, r4) {
            null == r4 && (r4 = "fixed");
            var n2 = w.from(r4), i2 = g(t3, n2.decimals);
            !n2.signed && i2.lt(h) && b("unsigned value cannot be negative", "overflow", "value", t3);
            var o2 = null;
            n2.signed ? o2 = i2.toTwos(n2.width).toHexString() : (o2 = i2.toHexString(), o2 = (0, s.hexZeroPad)(o2, n2.width / 8));
            var a2 = v(i2, n2.decimals);
            return new e3(l, o2, a2, n2);
          } }, { key: "fromBytes", value: function(t3, r4) {
            null == r4 && (r4 = "fixed");
            var n2 = w.from(r4);
            if ((0, s.arrayify)(t3).length > n2.width / 8)
              throw new Error("overflow");
            var i2 = f.BigNumber.from(t3);
            n2.signed && (i2 = i2.fromTwos(n2.width));
            var o2 = i2.toTwos((n2.signed ? 0 : 1) + n2.width).toHexString(), a2 = v(i2, n2.decimals);
            return new e3(l, o2, a2, n2);
          } }, { key: "from", value: function(t3, r4) {
            if ("string" == typeof t3)
              return e3.fromString(t3, r4);
            if ((0, s.isBytes)(t3))
              return e3.fromBytes(t3, r4);
            try {
              return e3.fromValue(t3, 0, r4);
            } catch (e4) {
              if (e4.code !== u.Logger.errors.INVALID_ARGUMENT)
                throw e4;
            }
            return d.throwArgumentError("invalid FixedNumber value", "value", t3);
          } }, { key: "isFixedNumber", value: function(e4) {
            return !(!e4 || !e4._isFixedNumber);
          } }]), e3;
        }();
        t2.FixedNumber = A;
        var k = A.from(1), _ = A.from("0.5");
      }, 4952: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), Object.defineProperty(t2, "BigNumber", { enumerable: true, get: function() {
          return n.BigNumber;
        } }), Object.defineProperty(t2, "FixedFormat", { enumerable: true, get: function() {
          return i.FixedFormat;
        } }), Object.defineProperty(t2, "FixedNumber", { enumerable: true, get: function() {
          return i.FixedNumber;
        } }), Object.defineProperty(t2, "_base16To36", { enumerable: true, get: function() {
          return n._base16To36;
        } }), Object.defineProperty(t2, "_base36To16", { enumerable: true, get: function() {
          return n._base36To16;
        } }), Object.defineProperty(t2, "formatFixed", { enumerable: true, get: function() {
          return i.formatFixed;
        } }), Object.defineProperty(t2, "parseFixed", { enumerable: true, get: function() {
          return i.parseFixed;
        } });
        var n = r3(1872), i = r3(8390);
      }, 8729: (e2, t2) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.version = void 0, t2.version = "bytes/5.7.0";
      }, 908: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.arrayify = d, t2.concat = l, t2.hexConcat = function(e3) {
          var t3 = "0x";
          return e3.forEach(function(e4) {
            t3 += y(e4).substring(2);
          }), t3;
        }, t2.hexDataLength = function(e3) {
          if ("string" != typeof e3)
            e3 = y(e3);
          else if (!p(e3) || e3.length % 2)
            return null;
          return (e3.length - 2) / 2;
        }, t2.hexDataSlice = function(e3, t3, r4) {
          return "string" != typeof e3 ? e3 = y(e3) : (!p(e3) || e3.length % 2) && o.throwArgumentError("invalid hexData", "value", e3), t3 = 2 + 2 * t3, null != r4 ? "0x" + e3.substring(t3, 2 + 2 * r4) : "0x" + e3.substring(t3);
        }, t2.hexStripZeros = m, t2.hexValue = function(e3) {
          var t3 = m(y(e3, { hexPad: "left" }));
          return "0x" === t3 ? "0x0" : t3;
        }, t2.hexZeroPad = v, t2.hexlify = y, t2.isBytes = f, t2.isBytesLike = u, t2.isHexString = p, t2.joinSignature = function(e3) {
          return y(l([(e3 = g(e3)).r, e3.s, e3.recoveryParam ? "0x1c" : "0x1b"]));
        }, t2.splitSignature = g, t2.stripZeros = function(e3) {
          var t3 = d(e3);
          if (0 === t3.length)
            return t3;
          for (var r4 = 0; r4 < t3.length && 0 === t3[r4]; )
            r4++;
          return r4 && (t3 = t3.slice(r4)), t3;
        }, t2.zeroPad = h;
        var n = r3(4327), i = r3(8729), o = new n.Logger(i.version);
        function a(e3) {
          return !!e3.toHexString;
        }
        function s(e3) {
          return e3.slice || (e3.slice = function() {
            var t3 = Array.prototype.slice.call(arguments);
            return s(new Uint8Array(Array.prototype.slice.apply(e3, t3)));
          }), e3;
        }
        function u(e3) {
          return p(e3) && !(e3.length % 2) || f(e3);
        }
        function c(e3) {
          return "number" == typeof e3 && e3 == e3 && e3 % 1 == 0;
        }
        function f(e3) {
          if (null == e3)
            return false;
          if (e3.constructor === Uint8Array)
            return true;
          if ("string" == typeof e3)
            return false;
          if (!c(e3.length) || e3.length < 0)
            return false;
          for (var t3 = 0; t3 < e3.length; t3++) {
            var r4 = e3[t3];
            if (!c(r4) || r4 < 0 || r4 >= 256)
              return false;
          }
          return true;
        }
        function d(e3, t3) {
          if (t3 || (t3 = {}), "number" == typeof e3) {
            o.checkSafeUint53(e3, "invalid arrayify value");
            for (var r4 = []; e3; )
              r4.unshift(255 & e3), e3 = parseInt(String(e3 / 256));
            return 0 === r4.length && r4.push(0), s(new Uint8Array(r4));
          }
          if (t3.allowMissingPrefix && "string" == typeof e3 && "0x" !== e3.substring(0, 2) && (e3 = "0x" + e3), a(e3) && (e3 = e3.toHexString()), p(e3)) {
            var n2 = e3.substring(2);
            n2.length % 2 && ("left" === t3.hexPad ? n2 = "0" + n2 : "right" === t3.hexPad ? n2 += "0" : o.throwArgumentError("hex data is odd-length", "value", e3));
            for (var i2 = [], u2 = 0; u2 < n2.length; u2 += 2)
              i2.push(parseInt(n2.substring(u2, u2 + 2), 16));
            return s(new Uint8Array(i2));
          }
          return f(e3) ? s(new Uint8Array(e3)) : o.throwArgumentError("invalid arrayify value", "value", e3);
        }
        function l(e3) {
          var t3 = e3.map(function(e4) {
            return d(e4);
          }), r4 = t3.reduce(function(e4, t4) {
            return e4 + t4.length;
          }, 0), n2 = new Uint8Array(r4);
          return t3.reduce(function(e4, t4) {
            return n2.set(t4, e4), e4 + t4.length;
          }, 0), s(n2);
        }
        function h(e3, t3) {
          (e3 = d(e3)).length > t3 && o.throwArgumentError("value out of range", "value", arguments[0]);
          var r4 = new Uint8Array(t3);
          return r4.set(e3, t3 - e3.length), s(r4);
        }
        function p(e3, t3) {
          return !("string" != typeof e3 || !e3.match(/^0x[0-9A-Fa-f]*$/) || t3 && e3.length !== 2 + 2 * t3);
        }
        var b = "0123456789abcdef";
        function y(e3, t3) {
          if (t3 || (t3 = {}), "number" == typeof e3) {
            o.checkSafeUint53(e3, "invalid hexlify value");
            for (var r4 = ""; e3; )
              r4 = b[15 & e3] + r4, e3 = Math.floor(e3 / 16);
            return r4.length ? (r4.length % 2 && (r4 = "0" + r4), "0x" + r4) : "0x00";
          }
          if ("bigint" == typeof e3)
            return (e3 = e3.toString(16)).length % 2 ? "0x0" + e3 : "0x" + e3;
          if (t3.allowMissingPrefix && "string" == typeof e3 && "0x" !== e3.substring(0, 2) && (e3 = "0x" + e3), a(e3))
            return e3.toHexString();
          if (p(e3))
            return e3.length % 2 && ("left" === t3.hexPad ? e3 = "0x0" + e3.substring(2) : "right" === t3.hexPad ? e3 += "0" : o.throwArgumentError("hex data is odd-length", "value", e3)), e3.toLowerCase();
          if (f(e3)) {
            for (var n2 = "0x", i2 = 0; i2 < e3.length; i2++) {
              var s2 = e3[i2];
              n2 += b[(240 & s2) >> 4] + b[15 & s2];
            }
            return n2;
          }
          return o.throwArgumentError("invalid hexlify value", "value", e3);
        }
        function m(e3) {
          "string" != typeof e3 && (e3 = y(e3)), p(e3) || o.throwArgumentError("invalid hex string", "value", e3), e3 = e3.substring(2);
          for (var t3 = 0; t3 < e3.length && "0" === e3[t3]; )
            t3++;
          return "0x" + e3.substring(t3);
        }
        function v(e3, t3) {
          for ("string" != typeof e3 ? e3 = y(e3) : p(e3) || o.throwArgumentError("invalid hex string", "value", e3), e3.length > 2 * t3 + 2 && o.throwArgumentError("value out of range", "value", arguments[1]); e3.length < 2 * t3 + 2; )
            e3 = "0x0" + e3.substring(2);
          return e3;
        }
        function g(e3) {
          var t3 = { r: "0x", s: "0x", _vs: "0x", recoveryParam: 0, v: 0, yParityAndS: "0x", compact: "0x" };
          if (u(e3)) {
            var r4 = d(e3);
            64 === r4.length ? (t3.v = 27 + (r4[32] >> 7), r4[32] &= 127, t3.r = y(r4.slice(0, 32)), t3.s = y(r4.slice(32, 64))) : 65 === r4.length ? (t3.r = y(r4.slice(0, 32)), t3.s = y(r4.slice(32, 64)), t3.v = r4[64]) : o.throwArgumentError("invalid signature string", "signature", e3), t3.v < 27 && (0 === t3.v || 1 === t3.v ? t3.v += 27 : o.throwArgumentError("signature invalid v byte", "signature", e3)), t3.recoveryParam = 1 - t3.v % 2, t3.recoveryParam && (r4[32] |= 128), t3._vs = y(r4.slice(32, 64));
          } else {
            if (t3.r = e3.r, t3.s = e3.s, t3.v = e3.v, t3.recoveryParam = e3.recoveryParam, t3._vs = e3._vs, null != t3._vs) {
              var n2 = h(d(t3._vs), 32);
              t3._vs = y(n2);
              var i2 = n2[0] >= 128 ? 1 : 0;
              null == t3.recoveryParam ? t3.recoveryParam = i2 : t3.recoveryParam !== i2 && o.throwArgumentError("signature recoveryParam mismatch _vs", "signature", e3), n2[0] &= 127;
              var a2 = y(n2);
              null == t3.s ? t3.s = a2 : t3.s !== a2 && o.throwArgumentError("signature v mismatch _vs", "signature", e3);
            }
            if (null == t3.recoveryParam)
              null == t3.v ? o.throwArgumentError("signature missing v and recoveryParam", "signature", e3) : 0 === t3.v || 1 === t3.v ? t3.recoveryParam = t3.v : t3.recoveryParam = 1 - t3.v % 2;
            else if (null == t3.v)
              t3.v = 27 + t3.recoveryParam;
            else {
              var s2 = 0 === t3.v || 1 === t3.v ? t3.v : 1 - t3.v % 2;
              t3.recoveryParam !== s2 && o.throwArgumentError("signature recoveryParam mismatch v", "signature", e3);
            }
            null != t3.r && p(t3.r) ? t3.r = v(t3.r, 32) : o.throwArgumentError("signature missing or invalid r", "signature", e3), null != t3.s && p(t3.s) ? t3.s = v(t3.s, 32) : o.throwArgumentError("signature missing or invalid s", "signature", e3);
            var c2 = d(t3.s);
            c2[0] >= 128 && o.throwArgumentError("signature s out of range", "signature", e3), t3.recoveryParam && (c2[0] |= 128);
            var f2 = y(c2);
            t3._vs && (p(t3._vs) || o.throwArgumentError("signature invalid _vs", "signature", e3), t3._vs = v(t3._vs, 32)), null == t3._vs ? t3._vs = f2 : t3._vs !== f2 && o.throwArgumentError("signature _vs mismatch v and s", "signature", e3);
          }
          return t3.yParityAndS = t3._vs, t3.compact = t3.r + t3.yParityAndS.substring(2), t3;
        }
      }, 8721: (e2, t2) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.AddressZero = void 0, t2.AddressZero = "0x0000000000000000000000000000000000000000";
      }, 2997: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.Zero = t2.WeiPerEther = t2.Two = t2.One = t2.NegativeOne = t2.MinInt256 = t2.MaxUint256 = t2.MaxInt256 = void 0;
        var n = r3(4952), i = n.BigNumber.from(-1);
        t2.NegativeOne = i;
        var o = n.BigNumber.from(0);
        t2.Zero = o;
        var a = n.BigNumber.from(1);
        t2.One = a;
        var s = n.BigNumber.from(2);
        t2.Two = s;
        var u = n.BigNumber.from("1000000000000000000");
        t2.WeiPerEther = u;
        var c = n.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
        t2.MaxUint256 = c;
        var f = n.BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
        t2.MinInt256 = f;
        var d = n.BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
        t2.MaxInt256 = d;
      }, 396: (e2, t2) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.HashZero = void 0, t2.HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
      }, 5465: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), Object.defineProperty(t2, "AddressZero", { enumerable: true, get: function() {
          return n.AddressZero;
        } }), Object.defineProperty(t2, "EtherSymbol", { enumerable: true, get: function() {
          return a.EtherSymbol;
        } }), Object.defineProperty(t2, "HashZero", { enumerable: true, get: function() {
          return o.HashZero;
        } }), Object.defineProperty(t2, "MaxInt256", { enumerable: true, get: function() {
          return i.MaxInt256;
        } }), Object.defineProperty(t2, "MaxUint256", { enumerable: true, get: function() {
          return i.MaxUint256;
        } }), Object.defineProperty(t2, "MinInt256", { enumerable: true, get: function() {
          return i.MinInt256;
        } }), Object.defineProperty(t2, "NegativeOne", { enumerable: true, get: function() {
          return i.NegativeOne;
        } }), Object.defineProperty(t2, "One", { enumerable: true, get: function() {
          return i.One;
        } }), Object.defineProperty(t2, "Two", { enumerable: true, get: function() {
          return i.Two;
        } }), Object.defineProperty(t2, "WeiPerEther", { enumerable: true, get: function() {
          return i.WeiPerEther;
        } }), Object.defineProperty(t2, "Zero", { enumerable: true, get: function() {
          return i.Zero;
        } });
        var n = r3(8721), i = r3(2997), o = r3(396), a = r3(8347);
      }, 8347: (e2, t2) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.EtherSymbol = void 0, t2.EtherSymbol = "Ξ";
      }, 3989: (e2, t2) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.version = void 0, t2.version = "hash/5.7.0";
      }, 3731: (e2, t2) => {
        "use strict";
        function r3(e3, t3) {
          null == t3 && (t3 = 1);
          var r4 = [], n2 = r4.forEach;
          return function e4(t4, i2) {
            n2.call(t4, function(t5) {
              i2 > 0 && Array.isArray(t5) ? e4(t5, i2 - 1) : r4.push(t5);
            });
          }(e3, t3), r4;
        }
        function n(e3) {
          var t3 = 0;
          function r4() {
            return e3[t3++] << 8 | e3[t3++];
          }
          for (var n2 = r4(), i2 = 1, o2 = [0, 1], a2 = 1; a2 < n2; a2++)
            o2.push(i2 += r4());
          var s2 = r4(), u2 = t3;
          t3 += s2;
          var c2 = 0, f2 = 0;
          function d2() {
            return 0 == c2 && (f2 = f2 << 8 | e3[t3++], c2 = 8), f2 >> --c2 & 1;
          }
          for (var l2 = Math.pow(2, 31), h = l2 >>> 1, p = h >> 1, b = l2 - 1, y = 0, m = 0; m < 31; m++)
            y = y << 1 | d2();
          for (var v = [], g = 0, w = l2; ; ) {
            for (var A = Math.floor(((y - g + 1) * i2 - 1) / w), k = 0, _ = n2; _ - k > 1; ) {
              var S = k + _ >>> 1;
              A < o2[S] ? _ = S : k = S;
            }
            if (0 == k)
              break;
            v.push(k);
            for (var E = g + Math.floor(w * o2[k] / i2), x = g + Math.floor(w * o2[k + 1] / i2) - 1; 0 == ((E ^ x) & h); )
              y = y << 1 & b | d2(), E = E << 1 & b, x = x << 1 & b | 1;
            for (; E & ~x & p; )
              y = y & h | y << 1 & b >>> 1 | d2(), E = E << 1 ^ h, x = (x ^ h) << 1 | h | 1;
            g = E, w = 1 + x - E;
          }
          var P = n2 - 4;
          return v.map(function(t4) {
            switch (t4 - P) {
              case 3:
                return P + 65792 + (e3[u2++] << 16 | e3[u2++] << 8 | e3[u2++]);
              case 2:
                return P + 256 + (e3[u2++] << 8 | e3[u2++]);
              case 1:
                return P + e3[u2++];
              default:
                return t4 - 1;
            }
          });
        }
        function i(e3) {
          var t3 = 0;
          return function() {
            return e3[t3++];
          };
        }
        function o(e3) {
          return 1 & e3 ? ~e3 >> 1 : e3 >> 1;
        }
        function a(e3, t3) {
          for (var r4 = Array(e3), n2 = 0, i2 = -1; n2 < e3; n2++)
            r4[n2] = i2 += 1 + t3();
          return r4;
        }
        function s(e3, t3) {
          for (var r4 = Array(e3), n2 = 0, i2 = 0; n2 < e3; n2++)
            r4[n2] = i2 += o(t3());
          return r4;
        }
        function u(e3, t3) {
          for (var r4 = a(e3(), e3), n2 = e3(), i2 = a(n2, e3), o2 = function(e4, t4) {
            for (var r5 = Array(e4), n3 = 0; n3 < e4; n3++)
              r5[n3] = 1 + t4();
            return r5;
          }(n2, e3), s2 = 0; s2 < n2; s2++)
            for (var u2 = 0; u2 < o2[s2]; u2++)
              r4.push(i2[s2] + u2);
          return t3 ? r4.map(function(e4) {
            return t3[e4];
          }) : r4;
        }
        function c(e3) {
          for (var t3 = []; ; ) {
            var r4 = e3();
            if (0 == r4)
              break;
            t3.push(r4);
          }
          return t3;
        }
        function f(e3, t3, r4) {
          for (var n2 = Array(e3).fill(void 0).map(function() {
            return [];
          }), i2 = 0; i2 < t3; i2++)
            s(e3, r4).forEach(function(e4, t4) {
              return n2[t4].push(e4);
            });
          return n2;
        }
        function d(e3, t3) {
          var n2 = 1 + t3(), i2 = t3(), o2 = c(t3);
          return r3(f(o2.length, 1 + e3, t3).map(function(e4, t4) {
            var r4 = e4[0], a2 = e4.slice(1);
            return Array(o2[t4]).fill(void 0).map(function(e5, t5) {
              var o3 = t5 * i2;
              return [r4 + t5 * n2, a2.map(function(e6) {
                return e6 + o3;
              })];
            });
          }));
        }
        function l(e3, t3) {
          return f(1 + t3(), 1 + e3, t3).map(function(e4) {
            return [e4[0], e4.slice(1)];
          });
        }
        Object.defineProperty(t2, "__esModule", { value: true }), t2.decode_arithmetic = n, t2.read_compressed_payload = function(e3) {
          return i(n(e3));
        }, t2.read_emoji_trie = function(e3) {
          var t3 = u(e3).sort(function(e4, t4) {
            return e4 - t4;
          });
          return function r4() {
            for (var n2 = []; ; ) {
              var i2 = u(e3, t3);
              if (0 == i2.length)
                break;
              n2.push({ set: new Set(i2), node: r4() });
            }
            n2.sort(function(e4, t4) {
              return t4.set.size - e4.set.size;
            });
            var o2 = e3();
            return { branches: n2, valid: o2 % 3, fe0f: !!(1 & (o2 = o2 / 3 | 0)), save: 1 == (o2 >>= 1), check: 2 == o2 };
          }();
        }, t2.read_mapped_map = function(e3) {
          for (var t3 = []; ; ) {
            var n2 = e3();
            if (0 == n2)
              break;
            t3.push(d(n2, e3));
          }
          for (; ; ) {
            var i2 = e3() - 1;
            if (i2 < 0)
              break;
            t3.push(l(i2, e3));
          }
          return function(e4) {
            for (var t4 = {}, r4 = 0; r4 < e4.length; r4++) {
              var n3 = e4[r4];
              t4[n3[0]] = n3[1];
            }
            return t4;
          }(r3(t3));
        }, t2.read_member_array = u, t2.read_payload = i, t2.read_zero_terminated_array = c, t2.signed = o;
      }, 3961: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.getData = function() {
          return (0, i.read_compressed_payload)((0, n.decode)(""));
        };
        var n = r3(997), i = r3(3731);
      }, 7032: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.ens_normalize = function(e3) {
          return v(function(e4, t3) {
            for (var r4 = y(e4).reverse(), n2 = []; r4.length; ) {
              var o2 = g(r4);
              if (o2)
                n2.push.apply(n2, (0, i.default)(t3(o2)));
              else {
                var a2 = r4.pop();
                if (f.has(a2))
                  n2.push(a2);
                else if (!d.has(a2)) {
                  var s2 = l[a2];
                  if (!s2)
                    throw new Error("Disallowed codepoint: 0x".concat(a2.toString(16).toUpperCase()));
                  n2.push.apply(n2, (0, i.default)(s2));
                }
              }
            }
            return v(String.fromCodePoint.apply(String, n2).normalize("NFC"));
          }(e3, m));
        }, t2.ens_normalize_post_check = v;
        var i = n(r3(3106)), o = r3(8627), a = r3(3961), s = r3(3731);
        function u(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r4 = 0, n2 = new Array(t3); r4 < t3; r4++)
            n2[r4] = e3[r4];
          return n2;
        }
        var c = (0, a.getData)(), f = new Set((0, s.read_member_array)(c)), d = new Set((0, s.read_member_array)(c)), l = (0, s.read_mapped_map)(c), h = (0, s.read_emoji_trie)(c), p = 45, b = 95;
        function y(e3) {
          return (0, o.toUtf8CodePoints)(e3);
        }
        function m(e3) {
          return e3.filter(function(e4) {
            return 65039 != e4;
          });
        }
        function v(e3) {
          var t3, r4 = function(e4, t4) {
            var r5 = "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
            if (!r5) {
              if (Array.isArray(e4) || (r5 = function(e5, t5) {
                if (e5) {
                  if ("string" == typeof e5)
                    return u(e5, t5);
                  var r6 = Object.prototype.toString.call(e5).slice(8, -1);
                  return "Object" === r6 && e5.constructor && (r6 = e5.constructor.name), "Map" === r6 || "Set" === r6 ? Array.from(e5) : "Arguments" === r6 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r6) ? u(e5, t5) : void 0;
                }
              }(e4)) || t4 && e4 && "number" == typeof e4.length) {
                r5 && (e4 = r5);
                var n3 = 0, i3 = function() {
                };
                return { s: i3, n: function() {
                  return n3 >= e4.length ? { done: true } : { done: false, value: e4[n3++] };
                }, e: function(e5) {
                  throw e5;
                }, f: i3 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var o3, a2 = true, s2 = false;
            return { s: function() {
              r5 = r5.call(e4);
            }, n: function() {
              var e5 = r5.next();
              return a2 = e5.done, e5;
            }, e: function(e5) {
              s2 = true, o3 = e5;
            }, f: function() {
              try {
                a2 || null == r5.return || r5.return();
              } finally {
                if (s2)
                  throw o3;
              }
            } };
          }(e3.split("."));
          try {
            for (r4.s(); !(t3 = r4.n()).done; ) {
              var n2 = t3.value, i2 = y(n2);
              try {
                for (var o2 = i2.lastIndexOf(b) - 1; o2 >= 0; o2--)
                  if (i2[o2] !== b)
                    throw new Error("underscore only allowed at start");
                if (i2.length >= 4 && i2.every(function(e4) {
                  return e4 < 128;
                }) && i2[2] === p && i2[3] === p)
                  throw new Error("invalid label extension");
              } catch (e4) {
                throw new Error('Invalid label "'.concat(n2, '": ').concat(e4.message));
              }
            }
          } catch (e4) {
            r4.e(e4);
          } finally {
            r4.f();
          }
          return e3;
        }
        function g(e3, t3) {
          var r4, n2, o2, a2 = h, s2 = [], u2 = e3.length;
          t3 && (t3.length = 0);
          for (var c2 = function() {
            var c3 = e3[--u2];
            if (!(a2 = null === (r4 = a2.branches.find(function(e4) {
              return e4.set.has(c3);
            })) || void 0 === r4 ? void 0 : r4.node))
              return "break";
            if (a2.save)
              o2 = c3;
            else if (a2.check && c3 === o2)
              return "break";
            s2.push(c3), a2.fe0f && (s2.push(65039), u2 > 0 && 65039 == e3[u2 - 1] && u2--), a2.valid && (n2 = s2.slice(), 2 == a2.valid && n2.splice(1, 1), t3 && t3.push.apply(t3, (0, i.default)(e3.slice(u2).reverse())), e3.length = u2);
          }; u2 && "break" !== c2(); )
            ;
          return n2;
        }
      }, 7901: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.id = function(e3) {
          return (0, n.keccak256)((0, i.toUtf8Bytes)(e3));
        };
        var n = r3(4642), i = r3(8627);
      }, 7515: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), Object.defineProperty(t2, "_TypedDataEncoder", { enumerable: true, get: function() {
          return a.TypedDataEncoder;
        } }), Object.defineProperty(t2, "dnsEncode", { enumerable: true, get: function() {
          return i.dnsEncode;
        } }), Object.defineProperty(t2, "ensNormalize", { enumerable: true, get: function() {
          return i.ensNormalize;
        } }), Object.defineProperty(t2, "hashMessage", { enumerable: true, get: function() {
          return o.hashMessage;
        } }), Object.defineProperty(t2, "id", { enumerable: true, get: function() {
          return n.id;
        } }), Object.defineProperty(t2, "isValidName", { enumerable: true, get: function() {
          return i.isValidName;
        } }), Object.defineProperty(t2, "messagePrefix", { enumerable: true, get: function() {
          return o.messagePrefix;
        } }), Object.defineProperty(t2, "namehash", { enumerable: true, get: function() {
          return i.namehash;
        } });
        var n = r3(7901), i = r3(4898), o = r3(4443), a = r3(2171);
      }, 4443: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.hashMessage = function(e3) {
          return "string" == typeof e3 && (e3 = (0, o.toUtf8Bytes)(e3)), (0, i.keccak256)((0, n.concat)([(0, o.toUtf8Bytes)(a), (0, o.toUtf8Bytes)(String(e3.length)), e3]));
        }, t2.messagePrefix = void 0;
        var n = r3(908), i = r3(4642), o = r3(8627), a = "Ethereum Signed Message:\n";
        t2.messagePrefix = a;
      }, 4898: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.dnsEncode = function(e3) {
          return (0, n.hexlify)((0, n.concat)(l(e3).map(function(e4) {
            if (e4.length > 63)
              throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");
            var t3 = new Uint8Array(e4.length + 1);
            return t3.set(e4, 1), t3[0] = t3.length - 1, t3;
          }))) + "00";
        }, t2.ensNormalize = function(e3) {
          return l(e3).map(function(e4) {
            return (0, i.toUtf8String)(e4);
          }).join(".");
        }, t2.isValidName = function(e3) {
          try {
            return 0 !== l(e3).length;
          } catch (e4) {
          }
          return false;
        }, t2.namehash = function(e3) {
          "string" != typeof e3 && c.throwArgumentError("invalid ENS name; not a string", "name", e3);
          for (var t3 = f, r4 = l(e3); r4.length; )
            t3 = (0, o.keccak256)((0, n.concat)([t3, (0, o.keccak256)(r4.pop())]));
          return (0, n.hexlify)(t3);
        };
        var n = r3(908), i = r3(8627), o = r3(4642), a = r3(4327), s = r3(3989), u = r3(7032), c = new a.Logger(s.version), f = new Uint8Array(32);
        function d(e3) {
          if (0 === e3.length)
            throw new Error("invalid ENS name; empty component");
          return e3;
        }
        function l(e3) {
          var t3 = (0, i.toUtf8Bytes)((0, u.ens_normalize)(e3)), r4 = [];
          if (0 === e3.length)
            return r4;
          for (var n2 = 0, o2 = 0; o2 < t3.length; o2++)
            46 === t3[o2] && (r4.push(d(t3.slice(n2, o2))), n2 = o2 + 1);
          if (n2 >= t3.length)
            throw new Error("invalid ENS name; empty component");
          return r4.push(d(t3.slice(n2))), r4;
        }
        f.fill(0);
      }, 2171: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.TypedDataEncoder = void 0;
        var i = n(r3(2247)), o = n(r3(9721)), a = n(r3(8985)), s = r3(7921), u = r3(4952), c = r3(908), f = r3(4642), d = r3(3694), l = r3(4327), h = r3(3989), p = r3(7901), b = new l.Logger(h.version), y = new Uint8Array(32);
        y.fill(0);
        var m = u.BigNumber.from(-1), v = u.BigNumber.from(0), g = u.BigNumber.from(1), w = u.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), A = (0, c.hexZeroPad)(g.toHexString(), 32), k = (0, c.hexZeroPad)(v.toHexString(), 32), _ = { name: "string", version: "string", chainId: "uint256", verifyingContract: "address", salt: "bytes32" }, S = ["name", "version", "chainId", "verifyingContract", "salt"];
        function E(e3) {
          return function(t3) {
            return "string" != typeof t3 && b.throwArgumentError("invalid domain value for ".concat(JSON.stringify(e3)), "domain.".concat(e3), t3), t3;
          };
        }
        var x = { name: E("name"), version: E("version"), chainId: function(e3) {
          try {
            return u.BigNumber.from(e3).toString();
          } catch (e4) {
          }
          return b.throwArgumentError('invalid domain value for "chainId"', "domain.chainId", e3);
        }, verifyingContract: function(e3) {
          try {
            return (0, s.getAddress)(e3).toLowerCase();
          } catch (e4) {
          }
          return b.throwArgumentError('invalid domain value "verifyingContract"', "domain.verifyingContract", e3);
        }, salt: function(e3) {
          try {
            var t3 = (0, c.arrayify)(e3);
            if (32 !== t3.length)
              throw new Error("bad length");
            return (0, c.hexlify)(t3);
          } catch (e4) {
          }
          return b.throwArgumentError('invalid domain value "salt"', "domain.salt", e3);
        } };
        function P(e3) {
          var t3 = e3.match(/^(u?)int(\d*)$/);
          if (t3) {
            var r4 = "" === t3[1], n2 = parseInt(t3[2] || "256");
            (n2 % 8 != 0 || n2 > 256 || t3[2] && t3[2] !== String(n2)) && b.throwArgumentError("invalid numeric width", "type", e3);
            var i2 = w.mask(r4 ? n2 - 1 : n2), o2 = r4 ? i2.add(g).mul(m) : v;
            return function(t4) {
              var r5 = u.BigNumber.from(t4);
              return (r5.lt(o2) || r5.gt(i2)) && b.throwArgumentError("value out-of-bounds for ".concat(e3), "value", t4), (0, c.hexZeroPad)(r5.toTwos(256).toHexString(), 32);
            };
          }
          var a2 = e3.match(/^bytes(\d+)$/);
          if (a2) {
            var d2 = parseInt(a2[1]);
            return (0 === d2 || d2 > 32 || a2[1] !== String(d2)) && b.throwArgumentError("invalid bytes width", "type", e3), function(t4) {
              return (0, c.arrayify)(t4).length !== d2 && b.throwArgumentError("invalid length for ".concat(e3), "value", t4), function(e4) {
                var t5 = (0, c.arrayify)(e4), r5 = t5.length % 32;
                return r5 ? (0, c.hexConcat)([t5, y.slice(r5)]) : (0, c.hexlify)(t5);
              }(t4);
            };
          }
          switch (e3) {
            case "address":
              return function(e4) {
                return (0, c.hexZeroPad)((0, s.getAddress)(e4), 32);
              };
            case "bool":
              return function(e4) {
                return e4 ? A : k;
              };
            case "bytes":
              return function(e4) {
                return (0, f.keccak256)(e4);
              };
            case "string":
              return function(e4) {
                return (0, p.id)(e4);
              };
          }
          return null;
        }
        function O(e3, t3) {
          return "".concat(e3, "(").concat(t3.map(function(e4) {
            var t4 = e4.name;
            return e4.type + " " + t4;
          }).join(","), ")");
        }
        var B = function() {
          function e3(t3) {
            (0, o.default)(this, e3), (0, d.defineReadOnly)(this, "types", Object.freeze((0, d.deepCopy)(t3))), (0, d.defineReadOnly)(this, "_encoderCache", {}), (0, d.defineReadOnly)(this, "_types", {});
            var r4 = {}, n2 = {}, i2 = {};
            Object.keys(t3).forEach(function(e4) {
              r4[e4] = {}, n2[e4] = [], i2[e4] = {};
            });
            var a2 = function(e4) {
              var i3 = {};
              t3[e4].forEach(function(o2) {
                i3[o2.name] && b.throwArgumentError("duplicate variable name ".concat(JSON.stringify(o2.name), " in ").concat(JSON.stringify(e4)), "types", t3), i3[o2.name] = true;
                var a3 = o2.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
                a3 === e4 && b.throwArgumentError("circular type reference to ".concat(JSON.stringify(a3)), "types", t3), P(a3) || (n2[a3] || b.throwArgumentError("unknown type ".concat(JSON.stringify(a3)), "types", t3), n2[a3].push(e4), r4[e4][a3] = true);
              });
            };
            for (var s2 in t3)
              a2(s2);
            var u2 = Object.keys(n2).filter(function(e4) {
              return 0 === n2[e4].length;
            });
            for (var c2 in 0 === u2.length ? b.throwArgumentError("missing primary type", "types", t3) : u2.length > 1 && b.throwArgumentError("ambiguous primary types or unused types: ".concat(u2.map(function(e4) {
              return JSON.stringify(e4);
            }).join(", ")), "types", t3), (0, d.defineReadOnly)(this, "primaryType", u2[0]), function e4(o2, a3) {
              a3[o2] && b.throwArgumentError("circular type reference to ".concat(JSON.stringify(o2)), "types", t3), a3[o2] = true, Object.keys(r4[o2]).forEach(function(t4) {
                n2[t4] && (e4(t4, a3), Object.keys(a3).forEach(function(e5) {
                  i2[e5][t4] = true;
                }));
              }), delete a3[o2];
            }(this.primaryType, {}), i2) {
              var f2 = Object.keys(i2[c2]);
              f2.sort(), this._types[c2] = O(c2, t3[c2]) + f2.map(function(e4) {
                return O(e4, t3[e4]);
              }).join("");
            }
          }
          return (0, a.default)(e3, [{ key: "getEncoder", value: function(e4) {
            var t3 = this._encoderCache[e4];
            return t3 || (t3 = this._encoderCache[e4] = this._getEncoder(e4)), t3;
          } }, { key: "_getEncoder", value: function(e4) {
            var t3 = this, r4 = P(e4);
            if (r4)
              return r4;
            var n2 = e4.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (n2) {
              var i2 = n2[1], o2 = this.getEncoder(i2), a2 = parseInt(n2[3]);
              return function(e5) {
                a2 >= 0 && e5.length !== a2 && b.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", e5);
                var r5 = e5.map(o2);
                return t3._types[i2] && (r5 = r5.map(f.keccak256)), (0, f.keccak256)((0, c.hexConcat)(r5));
              };
            }
            var s2 = this.types[e4];
            if (s2) {
              var u2 = (0, p.id)(this._types[e4]);
              return function(e5) {
                var r5 = s2.map(function(r6) {
                  var n3 = r6.name, i3 = r6.type, o3 = t3.getEncoder(i3)(e5[n3]);
                  return t3._types[i3] ? (0, f.keccak256)(o3) : o3;
                });
                return r5.unshift(u2), (0, c.hexConcat)(r5);
              };
            }
            return b.throwArgumentError("unknown type: ".concat(e4), "type", e4);
          } }, { key: "encodeType", value: function(e4) {
            var t3 = this._types[e4];
            return t3 || b.throwArgumentError("unknown type: ".concat(JSON.stringify(e4)), "name", e4), t3;
          } }, { key: "encodeData", value: function(e4, t3) {
            return this.getEncoder(e4)(t3);
          } }, { key: "hashStruct", value: function(e4, t3) {
            return (0, f.keccak256)(this.encodeData(e4, t3));
          } }, { key: "encode", value: function(e4) {
            return this.encodeData(this.primaryType, e4);
          } }, { key: "hash", value: function(e4) {
            return this.hashStruct(this.primaryType, e4);
          } }, { key: "_visit", value: function(e4, t3, r4) {
            var n2 = this;
            if (P(e4))
              return r4(e4, t3);
            var i2 = e4.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (i2) {
              var o2 = i2[1], a2 = parseInt(i2[3]);
              return a2 >= 0 && t3.length !== a2 && b.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", t3), t3.map(function(e5) {
                return n2._visit(o2, e5, r4);
              });
            }
            var s2 = this.types[e4];
            return s2 ? s2.reduce(function(e5, i3) {
              var o3 = i3.name, a3 = i3.type;
              return e5[o3] = n2._visit(a3, t3[o3], r4), e5;
            }, {}) : b.throwArgumentError("unknown type: ".concat(e4), "type", e4);
          } }, { key: "visit", value: function(e4, t3) {
            return this._visit(this.primaryType, e4, t3);
          } }], [{ key: "from", value: function(t3) {
            return new e3(t3);
          } }, { key: "getPrimaryType", value: function(t3) {
            return e3.from(t3).primaryType;
          } }, { key: "hashStruct", value: function(t3, r4, n2) {
            return e3.from(r4).hashStruct(t3, n2);
          } }, { key: "hashDomain", value: function(t3) {
            var r4 = [];
            for (var n2 in t3) {
              var i2 = _[n2];
              i2 || b.throwArgumentError("invalid typed-data domain key: ".concat(JSON.stringify(n2)), "domain", t3), r4.push({ name: n2, type: i2 });
            }
            return r4.sort(function(e4, t4) {
              return S.indexOf(e4.name) - S.indexOf(t4.name);
            }), e3.hashStruct("EIP712Domain", { EIP712Domain: r4 }, t3);
          } }, { key: "encode", value: function(t3, r4, n2) {
            return (0, c.hexConcat)(["0x1901", e3.hashDomain(t3), e3.from(r4).hash(n2)]);
          } }, { key: "hash", value: function(t3, r4, n2) {
            return (0, f.keccak256)(e3.encode(t3, r4, n2));
          } }, { key: "resolveNames", value: function(t3, r4, n2, o2) {
            return a2 = this, s2 = void 0, u2 = void 0, f2 = i.default.mark(function a3() {
              var s3, u3, f3;
              return i.default.wrap(function(a4) {
                for (; ; )
                  switch (a4.prev = a4.next) {
                    case 0:
                      t3 = (0, d.shallowCopy)(t3), s3 = {}, t3.verifyingContract && !(0, c.isHexString)(t3.verifyingContract, 20) && (s3[t3.verifyingContract] = "0x"), (u3 = e3.from(r4)).visit(n2, function(e4, t4) {
                        return "address" !== e4 || (0, c.isHexString)(t4, 20) || (s3[t4] = "0x"), t4;
                      }), a4.t0 = i.default.keys(s3);
                    case 6:
                      if ((a4.t1 = a4.t0()).done) {
                        a4.next = 13;
                        break;
                      }
                      return f3 = a4.t1.value, a4.next = 10, o2(f3);
                    case 10:
                      s3[f3] = a4.sent, a4.next = 6;
                      break;
                    case 13:
                      return t3.verifyingContract && s3[t3.verifyingContract] && (t3.verifyingContract = s3[t3.verifyingContract]), n2 = u3.visit(n2, function(e4, t4) {
                        return "address" === e4 && s3[t4] ? s3[t4] : t4;
                      }), a4.abrupt("return", { domain: t3, value: n2 });
                    case 16:
                    case "end":
                      return a4.stop();
                  }
              }, a3);
            }), new (u2 || (u2 = Promise))(function(e4, t4) {
              function r5(e5) {
                try {
                  i2(f2.next(e5));
                } catch (e6) {
                  t4(e6);
                }
              }
              function n3(e5) {
                try {
                  i2(f2.throw(e5));
                } catch (e6) {
                  t4(e6);
                }
              }
              function i2(t5) {
                var i3;
                t5.done ? e4(t5.value) : (i3 = t5.value, i3 instanceof u2 ? i3 : new u2(function(e5) {
                  e5(i3);
                })).then(r5, n3);
              }
              i2((f2 = f2.apply(a2, s2 || [])).next());
            });
            var a2, s2, u2, f2;
          } }, { key: "getPayload", value: function(t3, r4, n2) {
            e3.hashDomain(t3);
            var i2 = {}, o2 = [];
            S.forEach(function(e4) {
              var r5 = t3[e4];
              null != r5 && (i2[e4] = x[e4](r5), o2.push({ name: e4, type: _[e4] }));
            });
            var a2 = e3.from(r4), s2 = (0, d.shallowCopy)(r4);
            return s2.EIP712Domain ? b.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", r4) : s2.EIP712Domain = o2, a2.encode(n2), { types: s2, domain: i2, primaryType: a2.primaryType, message: a2.visit(n2, function(e4, t4) {
              if (e4.match(/^bytes(\d*)/))
                return (0, c.hexlify)((0, c.arrayify)(t4));
              if (e4.match(/^u?int/))
                return u.BigNumber.from(t4).toString();
              switch (e4) {
                case "address":
                  return t4.toLowerCase();
                case "bool":
                  return !!t4;
                case "string":
                  return "string" != typeof t4 && b.throwArgumentError("invalid string", "value", t4), t4;
              }
              return b.throwArgumentError("unsupported type", "type", e4);
            }) };
          } }]), e3;
        }();
        t2.TypedDataEncoder = B;
      }, 4642: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.keccak256 = function(e3) {
          return "0x" + i.default.keccak_256((0, o.arrayify)(e3));
        };
        var i = n(r3(5975)), o = r3(908);
      }, 5975: (e2, t2, r3) => {
        "use strict";
        e2 = r3.nmd(e2);
        var n, i = r3(9142), o = r3(8847)(r3(3355));
        !function() {
          var a = "input is invalid type", s = "object" === ("undefined" == typeof window ? "undefined" : (0, o.default)(window)), u = s ? window : {};
          u.JS_SHA3_NO_WINDOW && (s = false);
          var c = !s && "object" === ("undefined" == typeof self ? "undefined" : (0, o.default)(self));
          !u.JS_SHA3_NO_NODE_JS && "object" === (void 0 === i ? "undefined" : (0, o.default)(i)) && i.versions && i.versions.node ? u = r3.g : c && (u = self);
          var f = !u.JS_SHA3_NO_COMMON_JS && "object" === (0, o.default)(e2) && e2.exports, d = r3.amdO, l = !u.JS_SHA3_NO_ARRAY_BUFFER && "undefined" != typeof ArrayBuffer, h = "0123456789abcdef".split(""), p = [4, 1024, 262144, 67108864], b = [0, 8, 16, 24], y = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648], m = [224, 256, 384, 512], v = [128, 256], g = ["hex", "buffer", "arrayBuffer", "array", "digest"], w = { 128: 168, 256: 136 };
          !u.JS_SHA3_NO_NODE_JS && Array.isArray || (Array.isArray = function(e3) {
            return "[object Array]" === Object.prototype.toString.call(e3);
          }), !l || !u.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW && ArrayBuffer.isView || (ArrayBuffer.isView = function(e3) {
            return "object" === (0, o.default)(e3) && e3.buffer && e3.buffer.constructor === ArrayBuffer;
          });
          for (var A = function(e3, t3, r4) {
            return function(n2) {
              return new j(e3, t3, e3).update(n2)[r4]();
            };
          }, k = function(e3, t3, r4) {
            return function(n2, i2) {
              return new j(e3, t3, i2).update(n2)[r4]();
            };
          }, _ = function(e3, t3, r4) {
            return function(t4, n2, i2, o2) {
              return O["cshake" + e3].update(t4, n2, i2, o2)[r4]();
            };
          }, S = function(e3, t3, r4) {
            return function(t4, n2, i2, o2) {
              return O["kmac" + e3].update(t4, n2, i2, o2)[r4]();
            };
          }, E = function(e3, t3, r4, n2) {
            for (var i2 = 0; i2 < g.length; ++i2) {
              var o2 = g[i2];
              e3[o2] = t3(r4, n2, o2);
            }
            return e3;
          }, x = function(e3, t3) {
            var r4 = A(e3, t3, "hex");
            return r4.create = function() {
              return new j(e3, t3, e3);
            }, r4.update = function(e4) {
              return r4.create().update(e4);
            }, E(r4, A, e3, t3);
          }, P = [{ name: "keccak", padding: [1, 256, 65536, 16777216], bits: m, createMethod: x }, { name: "sha3", padding: [6, 1536, 393216, 100663296], bits: m, createMethod: x }, { name: "shake", padding: [31, 7936, 2031616, 520093696], bits: v, createMethod: function(e3, t3) {
            var r4 = k(e3, t3, "hex");
            return r4.create = function(r5) {
              return new j(e3, t3, r5);
            }, r4.update = function(e4, t4) {
              return r4.create(t4).update(e4);
            }, E(r4, k, e3, t3);
          } }, { name: "cshake", padding: p, bits: v, createMethod: function(e3, t3) {
            var r4 = w[e3], n2 = _(e3, 0, "hex");
            return n2.create = function(n3, i2, o2) {
              return i2 || o2 ? new j(e3, t3, n3).bytepad([i2, o2], r4) : O["shake" + e3].create(n3);
            }, n2.update = function(e4, t4, r5, i2) {
              return n2.create(t4, r5, i2).update(e4);
            }, E(n2, _, e3, t3);
          } }, { name: "kmac", padding: p, bits: v, createMethod: function(e3, t3) {
            var r4 = w[e3], n2 = S(e3, 0, "hex");
            return n2.create = function(n3, i2, o2) {
              return new N(e3, t3, i2).bytepad(["KMAC", o2], r4).bytepad([n3], r4);
            }, n2.update = function(e4, t4, r5, i2) {
              return n2.create(e4, r5, i2).update(t4);
            }, E(n2, S, e3, t3);
          } }], O = {}, B = [], T = 0; T < P.length; ++T)
            for (var C = P[T], I = C.bits, M = 0; M < I.length; ++M) {
              var U = C.name + "_" + I[M];
              if (B.push(U), O[U] = C.createMethod(I[M], C.padding), "sha3" !== C.name) {
                var R = C.name + I[M];
                B.push(R), O[R] = O[U];
              }
            }
          function j(e3, t3, r4) {
            this.blocks = [], this.s = [], this.padding = t3, this.outputBits = r4, this.reset = true, this.finalized = false, this.block = 0, this.start = 0, this.blockCount = 1600 - (e3 << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = r4 >> 5, this.extraBytes = (31 & r4) >> 3;
            for (var n2 = 0; n2 < 50; ++n2)
              this.s[n2] = 0;
          }
          function N(e3, t3, r4) {
            j.call(this, e3, t3, r4);
          }
          j.prototype.update = function(e3) {
            if (this.finalized)
              throw new Error("finalize already called");
            var t3, r4 = (0, o.default)(e3);
            if ("string" !== r4) {
              if ("object" !== r4)
                throw new Error(a);
              if (null === e3)
                throw new Error(a);
              if (l && e3.constructor === ArrayBuffer)
                e3 = new Uint8Array(e3);
              else if (!(Array.isArray(e3) || l && ArrayBuffer.isView(e3)))
                throw new Error(a);
              t3 = true;
            }
            for (var n2, i2, s2 = this.blocks, u2 = this.byteCount, c2 = e3.length, f2 = this.blockCount, d2 = 0, h2 = this.s; d2 < c2; ) {
              if (this.reset)
                for (this.reset = false, s2[0] = this.block, n2 = 1; n2 < f2 + 1; ++n2)
                  s2[n2] = 0;
              if (t3)
                for (n2 = this.start; d2 < c2 && n2 < u2; ++d2)
                  s2[n2 >> 2] |= e3[d2] << b[3 & n2++];
              else
                for (n2 = this.start; d2 < c2 && n2 < u2; ++d2)
                  (i2 = e3.charCodeAt(d2)) < 128 ? s2[n2 >> 2] |= i2 << b[3 & n2++] : i2 < 2048 ? (s2[n2 >> 2] |= (192 | i2 >> 6) << b[3 & n2++], s2[n2 >> 2] |= (128 | 63 & i2) << b[3 & n2++]) : i2 < 55296 || i2 >= 57344 ? (s2[n2 >> 2] |= (224 | i2 >> 12) << b[3 & n2++], s2[n2 >> 2] |= (128 | i2 >> 6 & 63) << b[3 & n2++], s2[n2 >> 2] |= (128 | 63 & i2) << b[3 & n2++]) : (i2 = 65536 + ((1023 & i2) << 10 | 1023 & e3.charCodeAt(++d2)), s2[n2 >> 2] |= (240 | i2 >> 18) << b[3 & n2++], s2[n2 >> 2] |= (128 | i2 >> 12 & 63) << b[3 & n2++], s2[n2 >> 2] |= (128 | i2 >> 6 & 63) << b[3 & n2++], s2[n2 >> 2] |= (128 | 63 & i2) << b[3 & n2++]);
              if (this.lastByteIndex = n2, n2 >= u2) {
                for (this.start = n2 - u2, this.block = s2[f2], n2 = 0; n2 < f2; ++n2)
                  h2[n2] ^= s2[n2];
                F(h2), this.reset = true;
              } else
                this.start = n2;
            }
            return this;
          }, j.prototype.encode = function(e3, t3) {
            var r4 = 255 & e3, n2 = 1, i2 = [r4];
            for (r4 = 255 & (e3 >>= 8); r4 > 0; )
              i2.unshift(r4), r4 = 255 & (e3 >>= 8), ++n2;
            return t3 ? i2.push(n2) : i2.unshift(n2), this.update(i2), i2.length;
          }, j.prototype.encodeString = function(e3) {
            var t3, r4 = (0, o.default)(e3);
            if ("string" !== r4) {
              if ("object" !== r4)
                throw new Error(a);
              if (null === e3)
                throw new Error(a);
              if (l && e3.constructor === ArrayBuffer)
                e3 = new Uint8Array(e3);
              else if (!(Array.isArray(e3) || l && ArrayBuffer.isView(e3)))
                throw new Error(a);
              t3 = true;
            }
            var n2 = 0, i2 = e3.length;
            if (t3)
              n2 = i2;
            else
              for (var s2 = 0; s2 < e3.length; ++s2) {
                var u2 = e3.charCodeAt(s2);
                u2 < 128 ? n2 += 1 : u2 < 2048 ? n2 += 2 : u2 < 55296 || u2 >= 57344 ? n2 += 3 : (u2 = 65536 + ((1023 & u2) << 10 | 1023 & e3.charCodeAt(++s2)), n2 += 4);
              }
            return n2 += this.encode(8 * n2), this.update(e3), n2;
          }, j.prototype.bytepad = function(e3, t3) {
            for (var r4 = this.encode(t3), n2 = 0; n2 < e3.length; ++n2)
              r4 += this.encodeString(e3[n2]);
            var i2 = t3 - r4 % t3, o2 = [];
            return o2.length = i2, this.update(o2), this;
          }, j.prototype.finalize = function() {
            if (!this.finalized) {
              this.finalized = true;
              var e3 = this.blocks, t3 = this.lastByteIndex, r4 = this.blockCount, n2 = this.s;
              if (e3[t3 >> 2] |= this.padding[3 & t3], this.lastByteIndex === this.byteCount)
                for (e3[0] = e3[r4], t3 = 1; t3 < r4 + 1; ++t3)
                  e3[t3] = 0;
              for (e3[r4 - 1] |= 2147483648, t3 = 0; t3 < r4; ++t3)
                n2[t3] ^= e3[t3];
              F(n2);
            }
          }, j.prototype.toString = j.prototype.hex = function() {
            this.finalize();
            for (var e3, t3 = this.blockCount, r4 = this.s, n2 = this.outputBlocks, i2 = this.extraBytes, o2 = 0, a2 = 0, s2 = ""; a2 < n2; ) {
              for (o2 = 0; o2 < t3 && a2 < n2; ++o2, ++a2)
                e3 = r4[o2], s2 += h[e3 >> 4 & 15] + h[15 & e3] + h[e3 >> 12 & 15] + h[e3 >> 8 & 15] + h[e3 >> 20 & 15] + h[e3 >> 16 & 15] + h[e3 >> 28 & 15] + h[e3 >> 24 & 15];
              a2 % t3 == 0 && (F(r4), o2 = 0);
            }
            return i2 && (e3 = r4[o2], s2 += h[e3 >> 4 & 15] + h[15 & e3], i2 > 1 && (s2 += h[e3 >> 12 & 15] + h[e3 >> 8 & 15]), i2 > 2 && (s2 += h[e3 >> 20 & 15] + h[e3 >> 16 & 15])), s2;
          }, j.prototype.arrayBuffer = function() {
            this.finalize();
            var e3, t3 = this.blockCount, r4 = this.s, n2 = this.outputBlocks, i2 = this.extraBytes, o2 = 0, a2 = 0, s2 = this.outputBits >> 3;
            e3 = i2 ? new ArrayBuffer(n2 + 1 << 2) : new ArrayBuffer(s2);
            for (var u2 = new Uint32Array(e3); a2 < n2; ) {
              for (o2 = 0; o2 < t3 && a2 < n2; ++o2, ++a2)
                u2[a2] = r4[o2];
              a2 % t3 == 0 && F(r4);
            }
            return i2 && (u2[o2] = r4[o2], e3 = e3.slice(0, s2)), e3;
          }, j.prototype.buffer = j.prototype.arrayBuffer, j.prototype.digest = j.prototype.array = function() {
            this.finalize();
            for (var e3, t3, r4 = this.blockCount, n2 = this.s, i2 = this.outputBlocks, o2 = this.extraBytes, a2 = 0, s2 = 0, u2 = []; s2 < i2; ) {
              for (a2 = 0; a2 < r4 && s2 < i2; ++a2, ++s2)
                e3 = s2 << 2, t3 = n2[a2], u2[e3] = 255 & t3, u2[e3 + 1] = t3 >> 8 & 255, u2[e3 + 2] = t3 >> 16 & 255, u2[e3 + 3] = t3 >> 24 & 255;
              s2 % r4 == 0 && F(n2);
            }
            return o2 && (e3 = s2 << 2, t3 = n2[a2], u2[e3] = 255 & t3, o2 > 1 && (u2[e3 + 1] = t3 >> 8 & 255), o2 > 2 && (u2[e3 + 2] = t3 >> 16 & 255)), u2;
          }, N.prototype = new j(), N.prototype.finalize = function() {
            return this.encode(this.outputBits, true), j.prototype.finalize.call(this);
          };
          var F = function(e3) {
            var t3, r4, n2, i2, o2, a2, s2, u2, c2, f2, d2, l2, h2, p2, b2, m2, v2, g2, w2, A2, k2, _2, S2, E2, x2, P2, O2, B2, T2, C2, I2, M2, U2, R2, j2, N2, F2, L, D, H, q, z, G, K, V, J, W, Y, X, Q, Z, $, ee, te, re, ne, ie, oe, ae, se, ue, ce, fe;
            for (n2 = 0; n2 < 48; n2 += 2)
              i2 = e3[0] ^ e3[10] ^ e3[20] ^ e3[30] ^ e3[40], o2 = e3[1] ^ e3[11] ^ e3[21] ^ e3[31] ^ e3[41], a2 = e3[2] ^ e3[12] ^ e3[22] ^ e3[32] ^ e3[42], s2 = e3[3] ^ e3[13] ^ e3[23] ^ e3[33] ^ e3[43], u2 = e3[4] ^ e3[14] ^ e3[24] ^ e3[34] ^ e3[44], c2 = e3[5] ^ e3[15] ^ e3[25] ^ e3[35] ^ e3[45], f2 = e3[6] ^ e3[16] ^ e3[26] ^ e3[36] ^ e3[46], d2 = e3[7] ^ e3[17] ^ e3[27] ^ e3[37] ^ e3[47], t3 = (l2 = e3[8] ^ e3[18] ^ e3[28] ^ e3[38] ^ e3[48]) ^ (a2 << 1 | s2 >>> 31), r4 = (h2 = e3[9] ^ e3[19] ^ e3[29] ^ e3[39] ^ e3[49]) ^ (s2 << 1 | a2 >>> 31), e3[0] ^= t3, e3[1] ^= r4, e3[10] ^= t3, e3[11] ^= r4, e3[20] ^= t3, e3[21] ^= r4, e3[30] ^= t3, e3[31] ^= r4, e3[40] ^= t3, e3[41] ^= r4, t3 = i2 ^ (u2 << 1 | c2 >>> 31), r4 = o2 ^ (c2 << 1 | u2 >>> 31), e3[2] ^= t3, e3[3] ^= r4, e3[12] ^= t3, e3[13] ^= r4, e3[22] ^= t3, e3[23] ^= r4, e3[32] ^= t3, e3[33] ^= r4, e3[42] ^= t3, e3[43] ^= r4, t3 = a2 ^ (f2 << 1 | d2 >>> 31), r4 = s2 ^ (d2 << 1 | f2 >>> 31), e3[4] ^= t3, e3[5] ^= r4, e3[14] ^= t3, e3[15] ^= r4, e3[24] ^= t3, e3[25] ^= r4, e3[34] ^= t3, e3[35] ^= r4, e3[44] ^= t3, e3[45] ^= r4, t3 = u2 ^ (l2 << 1 | h2 >>> 31), r4 = c2 ^ (h2 << 1 | l2 >>> 31), e3[6] ^= t3, e3[7] ^= r4, e3[16] ^= t3, e3[17] ^= r4, e3[26] ^= t3, e3[27] ^= r4, e3[36] ^= t3, e3[37] ^= r4, e3[46] ^= t3, e3[47] ^= r4, t3 = f2 ^ (i2 << 1 | o2 >>> 31), r4 = d2 ^ (o2 << 1 | i2 >>> 31), e3[8] ^= t3, e3[9] ^= r4, e3[18] ^= t3, e3[19] ^= r4, e3[28] ^= t3, e3[29] ^= r4, e3[38] ^= t3, e3[39] ^= r4, e3[48] ^= t3, e3[49] ^= r4, p2 = e3[0], b2 = e3[1], J = e3[11] << 4 | e3[10] >>> 28, W = e3[10] << 4 | e3[11] >>> 28, B2 = e3[20] << 3 | e3[21] >>> 29, T2 = e3[21] << 3 | e3[20] >>> 29, se = e3[31] << 9 | e3[30] >>> 23, ue = e3[30] << 9 | e3[31] >>> 23, z = e3[40] << 18 | e3[41] >>> 14, G = e3[41] << 18 | e3[40] >>> 14, R2 = e3[2] << 1 | e3[3] >>> 31, j2 = e3[3] << 1 | e3[2] >>> 31, m2 = e3[13] << 12 | e3[12] >>> 20, v2 = e3[12] << 12 | e3[13] >>> 20, Y = e3[22] << 10 | e3[23] >>> 22, X = e3[23] << 10 | e3[22] >>> 22, C2 = e3[33] << 13 | e3[32] >>> 19, I2 = e3[32] << 13 | e3[33] >>> 19, ce = e3[42] << 2 | e3[43] >>> 30, fe = e3[43] << 2 | e3[42] >>> 30, te = e3[5] << 30 | e3[4] >>> 2, re = e3[4] << 30 | e3[5] >>> 2, N2 = e3[14] << 6 | e3[15] >>> 26, F2 = e3[15] << 6 | e3[14] >>> 26, g2 = e3[25] << 11 | e3[24] >>> 21, w2 = e3[24] << 11 | e3[25] >>> 21, Q = e3[34] << 15 | e3[35] >>> 17, Z = e3[35] << 15 | e3[34] >>> 17, M2 = e3[45] << 29 | e3[44] >>> 3, U2 = e3[44] << 29 | e3[45] >>> 3, E2 = e3[6] << 28 | e3[7] >>> 4, x2 = e3[7] << 28 | e3[6] >>> 4, ne = e3[17] << 23 | e3[16] >>> 9, ie = e3[16] << 23 | e3[17] >>> 9, L = e3[26] << 25 | e3[27] >>> 7, D = e3[27] << 25 | e3[26] >>> 7, A2 = e3[36] << 21 | e3[37] >>> 11, k2 = e3[37] << 21 | e3[36] >>> 11, $ = e3[47] << 24 | e3[46] >>> 8, ee = e3[46] << 24 | e3[47] >>> 8, K = e3[8] << 27 | e3[9] >>> 5, V = e3[9] << 27 | e3[8] >>> 5, P2 = e3[18] << 20 | e3[19] >>> 12, O2 = e3[19] << 20 | e3[18] >>> 12, oe = e3[29] << 7 | e3[28] >>> 25, ae = e3[28] << 7 | e3[29] >>> 25, H = e3[38] << 8 | e3[39] >>> 24, q = e3[39] << 8 | e3[38] >>> 24, _2 = e3[48] << 14 | e3[49] >>> 18, S2 = e3[49] << 14 | e3[48] >>> 18, e3[0] = p2 ^ ~m2 & g2, e3[1] = b2 ^ ~v2 & w2, e3[10] = E2 ^ ~P2 & B2, e3[11] = x2 ^ ~O2 & T2, e3[20] = R2 ^ ~N2 & L, e3[21] = j2 ^ ~F2 & D, e3[30] = K ^ ~J & Y, e3[31] = V ^ ~W & X, e3[40] = te ^ ~ne & oe, e3[41] = re ^ ~ie & ae, e3[2] = m2 ^ ~g2 & A2, e3[3] = v2 ^ ~w2 & k2, e3[12] = P2 ^ ~B2 & C2, e3[13] = O2 ^ ~T2 & I2, e3[22] = N2 ^ ~L & H, e3[23] = F2 ^ ~D & q, e3[32] = J ^ ~Y & Q, e3[33] = W ^ ~X & Z, e3[42] = ne ^ ~oe & se, e3[43] = ie ^ ~ae & ue, e3[4] = g2 ^ ~A2 & _2, e3[5] = w2 ^ ~k2 & S2, e3[14] = B2 ^ ~C2 & M2, e3[15] = T2 ^ ~I2 & U2, e3[24] = L ^ ~H & z, e3[25] = D ^ ~q & G, e3[34] = Y ^ ~Q & $, e3[35] = X ^ ~Z & ee, e3[44] = oe ^ ~se & ce, e3[45] = ae ^ ~ue & fe, e3[6] = A2 ^ ~_2 & p2, e3[7] = k2 ^ ~S2 & b2, e3[16] = C2 ^ ~M2 & E2, e3[17] = I2 ^ ~U2 & x2, e3[26] = H ^ ~z & R2, e3[27] = q ^ ~G & j2, e3[36] = Q ^ ~$ & K, e3[37] = Z ^ ~ee & V, e3[46] = se ^ ~ce & te, e3[47] = ue ^ ~fe & re, e3[8] = _2 ^ ~p2 & m2, e3[9] = S2 ^ ~b2 & v2, e3[18] = M2 ^ ~E2 & P2, e3[19] = U2 ^ ~x2 & O2, e3[28] = z ^ ~R2 & N2, e3[29] = G ^ ~j2 & F2, e3[38] = $ ^ ~K & J, e3[39] = ee ^ ~V & W, e3[48] = ce ^ ~te & ne, e3[49] = fe ^ ~re & ie, e3[0] ^= y[n2], e3[1] ^= y[n2 + 1];
          };
          if (f)
            e2.exports = O;
          else {
            for (T = 0; T < B.length; ++T)
              u[B[T]] = O[B[T]];
            d && (void 0 === (n = (function() {
              return O;
            }).call(t2, r3, t2, e2)) || (e2.exports = n));
          }
        }();
      }, 7252: (e2, t2) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.version = void 0, t2.version = "logger/5.7.0";
      }, 4327: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.Logger = t2.LogLevel = t2.ErrorCode = void 0;
        var i, o, a = n(r3(9721)), s = n(r3(8985)), u = r3(7252), c = false, f = false, d = { debug: 1, default: 2, info: 2, warning: 3, error: 4, off: 5 }, l = d.default, h = null, p = function() {
          try {
            var e3 = [];
            if (["NFD", "NFC", "NFKD", "NFKC"].forEach(function(t3) {
              try {
                if ("test" !== "test".normalize(t3))
                  throw new Error("bad normalize");
              } catch (r4) {
                e3.push(t3);
              }
            }), e3.length)
              throw new Error("missing " + e3.join(", "));
            if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769))
              throw new Error("broken implementation");
          } catch (e4) {
            return e4.message;
          }
          return null;
        }();
        t2.LogLevel = i, function(e3) {
          e3.DEBUG = "DEBUG", e3.INFO = "INFO", e3.WARNING = "WARNING", e3.ERROR = "ERROR", e3.OFF = "OFF";
        }(i || (t2.LogLevel = i = {})), t2.ErrorCode = o, function(e3) {
          e3.UNKNOWN_ERROR = "UNKNOWN_ERROR", e3.NOT_IMPLEMENTED = "NOT_IMPLEMENTED", e3.UNSUPPORTED_OPERATION = "UNSUPPORTED_OPERATION", e3.NETWORK_ERROR = "NETWORK_ERROR", e3.SERVER_ERROR = "SERVER_ERROR", e3.TIMEOUT = "TIMEOUT", e3.BUFFER_OVERRUN = "BUFFER_OVERRUN", e3.NUMERIC_FAULT = "NUMERIC_FAULT", e3.MISSING_NEW = "MISSING_NEW", e3.INVALID_ARGUMENT = "INVALID_ARGUMENT", e3.MISSING_ARGUMENT = "MISSING_ARGUMENT", e3.UNEXPECTED_ARGUMENT = "UNEXPECTED_ARGUMENT", e3.CALL_EXCEPTION = "CALL_EXCEPTION", e3.INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS", e3.NONCE_EXPIRED = "NONCE_EXPIRED", e3.REPLACEMENT_UNDERPRICED = "REPLACEMENT_UNDERPRICED", e3.UNPREDICTABLE_GAS_LIMIT = "UNPREDICTABLE_GAS_LIMIT", e3.TRANSACTION_REPLACED = "TRANSACTION_REPLACED", e3.ACTION_REJECTED = "ACTION_REJECTED";
        }(o || (t2.ErrorCode = o = {}));
        var b = "0123456789abcdef", y = function() {
          function e3(t3) {
            (0, a.default)(this, e3), Object.defineProperty(this, "version", { enumerable: true, value: t3, writable: false });
          }
          return (0, s.default)(e3, [{ key: "_log", value: function(e4, t3) {
            var r4 = e4.toLowerCase();
            null == d[r4] && this.throwArgumentError("invalid log level name", "logLevel", e4), l > d[r4] || console.log.apply(console, t3);
          } }, { key: "debug", value: function() {
            for (var t3 = arguments.length, r4 = new Array(t3), n2 = 0; n2 < t3; n2++)
              r4[n2] = arguments[n2];
            this._log(e3.levels.DEBUG, r4);
          } }, { key: "info", value: function() {
            for (var t3 = arguments.length, r4 = new Array(t3), n2 = 0; n2 < t3; n2++)
              r4[n2] = arguments[n2];
            this._log(e3.levels.INFO, r4);
          } }, { key: "warn", value: function() {
            for (var t3 = arguments.length, r4 = new Array(t3), n2 = 0; n2 < t3; n2++)
              r4[n2] = arguments[n2];
            this._log(e3.levels.WARNING, r4);
          } }, { key: "makeError", value: function(t3, r4, n2) {
            if (f)
              return this.makeError("censored error", r4, {});
            r4 || (r4 = e3.errors.UNKNOWN_ERROR), n2 || (n2 = {});
            var i2 = [];
            Object.keys(n2).forEach(function(e4) {
              var t4 = n2[e4];
              try {
                if (t4 instanceof Uint8Array) {
                  for (var r5 = "", o2 = 0; o2 < t4.length; o2++)
                    r5 += b[t4[o2] >> 4], r5 += b[15 & t4[o2]];
                  i2.push(e4 + "=Uint8Array(0x" + r5 + ")");
                } else
                  i2.push(e4 + "=" + JSON.stringify(t4));
              } catch (t5) {
                i2.push(e4 + "=" + JSON.stringify(n2[e4].toString()));
              }
            }), i2.push("code=".concat(r4)), i2.push("version=".concat(this.version));
            var a2 = t3, s2 = "";
            switch (r4) {
              case o.NUMERIC_FAULT:
                s2 = "NUMERIC_FAULT";
                var u2 = t3;
                switch (u2) {
                  case "overflow":
                  case "underflow":
                  case "division-by-zero":
                    s2 += "-" + u2;
                    break;
                  case "negative-power":
                  case "negative-width":
                    s2 += "-unsupported";
                    break;
                  case "unbound-bitwise-result":
                    s2 += "-unbound-result";
                }
                break;
              case o.CALL_EXCEPTION:
              case o.INSUFFICIENT_FUNDS:
              case o.MISSING_NEW:
              case o.NONCE_EXPIRED:
              case o.REPLACEMENT_UNDERPRICED:
              case o.TRANSACTION_REPLACED:
              case o.UNPREDICTABLE_GAS_LIMIT:
                s2 = r4;
            }
            s2 && (t3 += " [ See: https://links.ethers.org/v5-errors-" + s2 + " ]"), i2.length && (t3 += " (" + i2.join(", ") + ")");
            var c2 = new Error(t3);
            return c2.reason = a2, c2.code = r4, Object.keys(n2).forEach(function(e4) {
              c2[e4] = n2[e4];
            }), c2;
          } }, { key: "throwError", value: function(e4, t3, r4) {
            throw this.makeError(e4, t3, r4);
          } }, { key: "throwArgumentError", value: function(t3, r4, n2) {
            return this.throwError(t3, e3.errors.INVALID_ARGUMENT, { argument: r4, value: n2 });
          } }, { key: "assert", value: function(e4, t3, r4, n2) {
            e4 || this.throwError(t3, r4, n2);
          } }, { key: "assertArgument", value: function(e4, t3, r4, n2) {
            e4 || this.throwArgumentError(t3, r4, n2);
          } }, { key: "checkNormalize", value: function(t3) {
            null == t3 && (t3 = "platform missing String.prototype.normalize"), p && this.throwError("platform missing String.prototype.normalize", e3.errors.UNSUPPORTED_OPERATION, { operation: "String.prototype.normalize", form: p });
          } }, { key: "checkSafeUint53", value: function(t3, r4) {
            "number" == typeof t3 && (null == r4 && (r4 = "value not safe"), (t3 < 0 || t3 >= 9007199254740991) && this.throwError(r4, e3.errors.NUMERIC_FAULT, { operation: "checkSafeInteger", fault: "out-of-safe-range", value: t3 }), t3 % 1 && this.throwError(r4, e3.errors.NUMERIC_FAULT, { operation: "checkSafeInteger", fault: "non-integer", value: t3 }));
          } }, { key: "checkArgumentCount", value: function(t3, r4, n2) {
            n2 = n2 ? ": " + n2 : "", t3 < r4 && this.throwError("missing argument" + n2, e3.errors.MISSING_ARGUMENT, { count: t3, expectedCount: r4 }), t3 > r4 && this.throwError("too many arguments" + n2, e3.errors.UNEXPECTED_ARGUMENT, { count: t3, expectedCount: r4 });
          } }, { key: "checkNew", value: function(t3, r4) {
            t3 !== Object && null != t3 || this.throwError("missing new", e3.errors.MISSING_NEW, { name: r4.name });
          } }, { key: "checkAbstract", value: function(t3, r4) {
            t3 === r4 ? this.throwError("cannot instantiate abstract class " + JSON.stringify(r4.name) + " directly; use a sub-class", e3.errors.UNSUPPORTED_OPERATION, { name: t3.name, operation: "new" }) : t3 !== Object && null != t3 || this.throwError("missing new", e3.errors.MISSING_NEW, { name: r4.name });
          } }], [{ key: "globalLogger", value: function() {
            return h || (h = new e3(u.version)), h;
          } }, { key: "setCensorship", value: function(t3, r4) {
            if (!t3 && r4 && this.globalLogger().throwError("cannot permanently disable censorship", e3.errors.UNSUPPORTED_OPERATION, { operation: "setCensorship" }), c) {
              if (!t3)
                return;
              this.globalLogger().throwError("error censorship permanent", e3.errors.UNSUPPORTED_OPERATION, { operation: "setCensorship" });
            }
            f = !!t3, c = !!r4;
          } }, { key: "setLogLevel", value: function(t3) {
            var r4 = d[t3.toLowerCase()];
            null != r4 ? l = r4 : e3.globalLogger().warn("invalid log level - " + t3);
          } }, { key: "from", value: function(t3) {
            return new e3(t3);
          } }]), e3;
        }();
        t2.Logger = y, y.errors = o, y.levels = i;
      }, 4071: (e2, t2) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.version = void 0, t2.version = "properties/5.7.0";
      }, 3694: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.Description = void 0, t2.checkProperties = function(e3, t3) {
          e3 && "object" === (0, s.default)(e3) || d.throwArgumentError("invalid object", "object", e3), Object.keys(e3).forEach(function(r4) {
            t3[r4] || d.throwArgumentError("invalid object key - " + r4, "transaction:" + r4, e3);
          });
        }, t2.deepCopy = y, t2.defineReadOnly = l, t2.getStatic = function(e3, t3) {
          for (var r4 = 0; r4 < 32; r4++) {
            if (e3[t3])
              return e3[t3];
            if (!e3.prototype || "object" !== (0, s.default)(e3.prototype))
              break;
            e3 = Object.getPrototypeOf(e3.prototype).constructor;
          }
          return null;
        }, t2.resolveProperties = function(e3) {
          return f(this, void 0, void 0, i.default.mark(function t3() {
            var r4, n2;
            return i.default.wrap(function(t4) {
              for (; ; )
                switch (t4.prev = t4.next) {
                  case 0:
                    return r4 = Object.keys(e3).map(function(t5) {
                      var r5 = e3[t5];
                      return Promise.resolve(r5).then(function(e4) {
                        return { key: t5, value: e4 };
                      });
                    }), t4.next = 3, Promise.all(r4);
                  case 3:
                    return n2 = t4.sent, t4.abrupt("return", n2.reduce(function(e4, t5) {
                      return e4[t5.key] = t5.value, e4;
                    }, {}));
                  case 5:
                  case "end":
                    return t4.stop();
                }
            }, t3);
          }));
        }, t2.shallowCopy = function(e3) {
          var t3 = {};
          for (var r4 in e3)
            t3[r4] = e3[r4];
          return t3;
        };
        var i = n(r3(2247)), o = n(r3(8985)), a = n(r3(9721)), s = n(r3(3355)), u = r3(4327), c = r3(4071), f = function(e3, t3, r4, n2) {
          return new (r4 || (r4 = Promise))(function(i2, o2) {
            function a2(e4) {
              try {
                u2(n2.next(e4));
              } catch (e5) {
                o2(e5);
              }
            }
            function s2(e4) {
              try {
                u2(n2.throw(e4));
              } catch (e5) {
                o2(e5);
              }
            }
            function u2(e4) {
              var t4;
              e4.done ? i2(e4.value) : (t4 = e4.value, t4 instanceof r4 ? t4 : new r4(function(e5) {
                e5(t4);
              })).then(a2, s2);
            }
            u2((n2 = n2.apply(e3, t3 || [])).next());
          });
        }, d = new u.Logger(c.version);
        function l(e3, t3, r4) {
          Object.defineProperty(e3, t3, { enumerable: true, value: r4, writable: false });
        }
        var h = { bigint: true, boolean: true, function: true, number: true, string: true };
        function p(e3) {
          if (null == e3 || h[(0, s.default)(e3)])
            return true;
          if (Array.isArray(e3) || "object" === (0, s.default)(e3)) {
            if (!Object.isFrozen(e3))
              return false;
            for (var t3 = Object.keys(e3), r4 = 0; r4 < t3.length; r4++) {
              var n2 = null;
              try {
                n2 = e3[t3[r4]];
              } catch (e4) {
                continue;
              }
              if (!p(n2))
                return false;
            }
            return true;
          }
          return d.throwArgumentError("Cannot deepCopy ".concat((0, s.default)(e3)), "object", e3);
        }
        function b(e3) {
          if (p(e3))
            return e3;
          if (Array.isArray(e3))
            return Object.freeze(e3.map(function(e4) {
              return y(e4);
            }));
          if ("object" === (0, s.default)(e3)) {
            var t3 = {};
            for (var r4 in e3) {
              var n2 = e3[r4];
              void 0 !== n2 && l(t3, r4, y(n2));
            }
            return t3;
          }
          return d.throwArgumentError("Cannot deepCopy ".concat((0, s.default)(e3)), "object", e3);
        }
        function y(e3) {
          return b(e3);
        }
        var m = (0, o.default)(function e3(t3) {
          for (var r4 in (0, a.default)(this, e3), t3)
            this[r4] = y(t3[r4]);
        });
        t2.Description = m;
      }, 1466: (e2, t2) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.version = void 0, t2.version = "rlp/5.7.0";
      }, 5265: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.decode = function(e3) {
          var t3 = (0, n.arrayify)(e3), r4 = d(t3, 0);
          return r4.consumed !== t3.length && a.throwArgumentError("invalid rlp data", "data", e3), r4.result;
        }, t2.encode = function(e3) {
          return (0, n.hexlify)(c(e3));
        };
        var n = r3(908), i = r3(4327), o = r3(1466), a = new i.Logger(o.version);
        function s(e3) {
          for (var t3 = []; e3; )
            t3.unshift(255 & e3), e3 >>= 8;
          return t3;
        }
        function u(e3, t3, r4) {
          for (var n2 = 0, i2 = 0; i2 < r4; i2++)
            n2 = 256 * n2 + e3[t3 + i2];
          return n2;
        }
        function c(e3) {
          if (Array.isArray(e3)) {
            var t3 = [];
            if (e3.forEach(function(e4) {
              t3 = t3.concat(c(e4));
            }), t3.length <= 55)
              return t3.unshift(192 + t3.length), t3;
            var r4 = s(t3.length);
            return r4.unshift(247 + r4.length), r4.concat(t3);
          }
          (0, n.isBytesLike)(e3) || a.throwArgumentError("RLP object must be BytesLike", "object", e3);
          var i2 = Array.prototype.slice.call((0, n.arrayify)(e3));
          if (1 === i2.length && i2[0] <= 127)
            return i2;
          if (i2.length <= 55)
            return i2.unshift(128 + i2.length), i2;
          var o2 = s(i2.length);
          return o2.unshift(183 + o2.length), o2.concat(i2);
        }
        function f(e3, t3, r4, n2) {
          for (var o2 = []; r4 < t3 + 1 + n2; ) {
            var s2 = d(e3, r4);
            o2.push(s2.result), (r4 += s2.consumed) > t3 + 1 + n2 && a.throwError("child data too short", i.Logger.errors.BUFFER_OVERRUN, {});
          }
          return { consumed: 1 + n2, result: o2 };
        }
        function d(e3, t3) {
          if (0 === e3.length && a.throwError("data too short", i.Logger.errors.BUFFER_OVERRUN, {}), e3[t3] >= 248) {
            var r4 = e3[t3] - 247;
            t3 + 1 + r4 > e3.length && a.throwError("data short segment too short", i.Logger.errors.BUFFER_OVERRUN, {});
            var o2 = u(e3, t3 + 1, r4);
            return t3 + 1 + r4 + o2 > e3.length && a.throwError("data long segment too short", i.Logger.errors.BUFFER_OVERRUN, {}), f(e3, t3, t3 + 1 + r4, r4 + o2);
          }
          if (e3[t3] >= 192) {
            var s2 = e3[t3] - 192;
            return t3 + 1 + s2 > e3.length && a.throwError("data array too short", i.Logger.errors.BUFFER_OVERRUN, {}), f(e3, t3, t3 + 1, s2);
          }
          if (e3[t3] >= 184) {
            var c2 = e3[t3] - 183;
            t3 + 1 + c2 > e3.length && a.throwError("data array too short", i.Logger.errors.BUFFER_OVERRUN, {});
            var d2 = u(e3, t3 + 1, c2);
            return t3 + 1 + c2 + d2 > e3.length && a.throwError("data array too short", i.Logger.errors.BUFFER_OVERRUN, {}), { consumed: 1 + c2 + d2, result: (0, n.hexlify)(e3.slice(t3 + 1 + c2, t3 + 1 + c2 + d2)) };
          }
          if (e3[t3] >= 128) {
            var l = e3[t3] - 128;
            return t3 + 1 + l > e3.length && a.throwError("data too short", i.Logger.errors.BUFFER_OVERRUN, {}), { consumed: 1 + l, result: (0, n.hexlify)(e3.slice(t3 + 1, t3 + 1 + l)) };
          }
          return { consumed: 1, result: (0, n.hexlify)(e3[t3]) };
        }
      }, 8100: (e2, t2) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.version = void 0, t2.version = "signing-key/5.7.0";
      }, 6918: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.EC = void 0;
        var i = n(r3(3355)), o = n(r3(1734)), a = n(r3(7198));
        function s(e3, t3, r4) {
          return r4 = { path: t3, exports: {}, require: function(e4, t4) {
            return function() {
              throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
            }(null == t4 && r4.path);
          } }, e3(r4, r4.exports), r4.exports;
        }
        "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : void 0 !== r3.g ? r3.g : "undefined" != typeof self && self;
        var u = c;
        function c(e3, t3) {
          if (!e3)
            throw new Error(t3 || "Assertion failed");
        }
        c.equal = function(e3, t3, r4) {
          if (e3 != t3)
            throw new Error(r4 || "Assertion failed: " + e3 + " != " + t3);
        };
        var f = s(function(e3, t3) {
          var r4 = t3;
          function n2(e4) {
            return 1 === e4.length ? "0" + e4 : e4;
          }
          function i2(e4) {
            for (var t4 = "", r5 = 0; r5 < e4.length; r5++)
              t4 += n2(e4[r5].toString(16));
            return t4;
          }
          r4.toArray = function(e4, t4) {
            if (Array.isArray(e4))
              return e4.slice();
            if (!e4)
              return [];
            var r5 = [];
            if ("string" != typeof e4) {
              for (var n3 = 0; n3 < e4.length; n3++)
                r5[n3] = 0 | e4[n3];
              return r5;
            }
            if ("hex" === t4)
              for ((e4 = e4.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e4 = "0" + e4), n3 = 0; n3 < e4.length; n3 += 2)
                r5.push(parseInt(e4[n3] + e4[n3 + 1], 16));
            else
              for (n3 = 0; n3 < e4.length; n3++) {
                var i3 = e4.charCodeAt(n3), o2 = i3 >> 8, a2 = 255 & i3;
                o2 ? r5.push(o2, a2) : r5.push(a2);
              }
            return r5;
          }, r4.zero2 = n2, r4.toHex = i2, r4.encode = function(e4, t4) {
            return "hex" === t4 ? i2(e4) : e4;
          };
        }), d = s(function(e3, t3) {
          var r4 = t3;
          r4.assert = u, r4.toArray = f.toArray, r4.zero2 = f.zero2, r4.toHex = f.toHex, r4.encode = f.encode, r4.getNAF = function(e4, t4, r5) {
            var n2 = new Array(Math.max(e4.bitLength(), r5) + 1);
            n2.fill(0);
            for (var i2 = 1 << t4 + 1, o2 = e4.clone(), a2 = 0; a2 < n2.length; a2++) {
              var s2, u2 = o2.andln(i2 - 1);
              o2.isOdd() ? (s2 = u2 > (i2 >> 1) - 1 ? (i2 >> 1) - u2 : u2, o2.isubn(s2)) : s2 = 0, n2[a2] = s2, o2.iushrn(1);
            }
            return n2;
          }, r4.getJSF = function(e4, t4) {
            var r5 = [[], []];
            e4 = e4.clone(), t4 = t4.clone();
            for (var n2, i2 = 0, o2 = 0; e4.cmpn(-i2) > 0 || t4.cmpn(-o2) > 0; ) {
              var a2, s2, u2 = e4.andln(3) + i2 & 3, c2 = t4.andln(3) + o2 & 3;
              3 === u2 && (u2 = -1), 3 === c2 && (c2 = -1), a2 = 0 == (1 & u2) ? 0 : 3 != (n2 = e4.andln(7) + i2 & 7) && 5 !== n2 || 2 !== c2 ? u2 : -u2, r5[0].push(a2), s2 = 0 == (1 & c2) ? 0 : 3 != (n2 = t4.andln(7) + o2 & 7) && 5 !== n2 || 2 !== u2 ? c2 : -c2, r5[1].push(s2), 2 * i2 === a2 + 1 && (i2 = 1 - i2), 2 * o2 === s2 + 1 && (o2 = 1 - o2), e4.iushrn(1), t4.iushrn(1);
            }
            return r5;
          }, r4.cachedProperty = function(e4, t4, r5) {
            var n2 = "_" + t4;
            e4.prototype[t4] = function() {
              return void 0 !== this[n2] ? this[n2] : this[n2] = r5.call(this);
            };
          }, r4.parseBytes = function(e4) {
            return "string" == typeof e4 ? r4.toArray(e4, "hex") : e4;
          }, r4.intFromLE = function(e4) {
            return new o.default(e4, "hex", "le");
          };
        }), l = d.getNAF, h = d.getJSF, p = d.assert;
        function b(e3, t3) {
          this.type = e3, this.p = new o.default(t3.p, 16), this.red = t3.prime ? o.default.red(t3.prime) : o.default.mont(this.p), this.zero = new o.default(0).toRed(this.red), this.one = new o.default(1).toRed(this.red), this.two = new o.default(2).toRed(this.red), this.n = t3.n && new o.default(t3.n, 16), this.g = t3.g && this.pointFromJSON(t3.g, t3.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
          var r4 = this.n && this.p.div(this.n);
          !r4 || r4.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = true, this.redN = this.n.toRed(this.red));
        }
        var y = b;
        function m(e3, t3) {
          this.curve = e3, this.type = t3, this.precomputed = null;
        }
        b.prototype.point = function() {
          throw new Error("Not implemented");
        }, b.prototype.validate = function() {
          throw new Error("Not implemented");
        }, b.prototype._fixedNafMul = function(e3, t3) {
          p(e3.precomputed);
          var r4 = e3._getDoubles(), n2 = l(t3, 1, this._bitLength), i2 = (1 << r4.step + 1) - (r4.step % 2 == 0 ? 2 : 1);
          i2 /= 3;
          var o2, a2, s2 = [];
          for (o2 = 0; o2 < n2.length; o2 += r4.step) {
            a2 = 0;
            for (var u2 = o2 + r4.step - 1; u2 >= o2; u2--)
              a2 = (a2 << 1) + n2[u2];
            s2.push(a2);
          }
          for (var c2 = this.jpoint(null, null, null), f2 = this.jpoint(null, null, null), d2 = i2; d2 > 0; d2--) {
            for (o2 = 0; o2 < s2.length; o2++)
              (a2 = s2[o2]) === d2 ? f2 = f2.mixedAdd(r4.points[o2]) : a2 === -d2 && (f2 = f2.mixedAdd(r4.points[o2].neg()));
            c2 = c2.add(f2);
          }
          return c2.toP();
        }, b.prototype._wnafMul = function(e3, t3) {
          var r4 = 4, n2 = e3._getNAFPoints(r4);
          r4 = n2.wnd;
          for (var i2 = n2.points, o2 = l(t3, r4, this._bitLength), a2 = this.jpoint(null, null, null), s2 = o2.length - 1; s2 >= 0; s2--) {
            for (var u2 = 0; s2 >= 0 && 0 === o2[s2]; s2--)
              u2++;
            if (s2 >= 0 && u2++, a2 = a2.dblp(u2), s2 < 0)
              break;
            var c2 = o2[s2];
            p(0 !== c2), a2 = "affine" === e3.type ? c2 > 0 ? a2.mixedAdd(i2[c2 - 1 >> 1]) : a2.mixedAdd(i2[-c2 - 1 >> 1].neg()) : c2 > 0 ? a2.add(i2[c2 - 1 >> 1]) : a2.add(i2[-c2 - 1 >> 1].neg());
          }
          return "affine" === e3.type ? a2.toP() : a2;
        }, b.prototype._wnafMulAdd = function(e3, t3, r4, n2, i2) {
          var o2, a2, s2, u2 = this._wnafT1, c2 = this._wnafT2, f2 = this._wnafT3, d2 = 0;
          for (o2 = 0; o2 < n2; o2++) {
            var p2 = (s2 = t3[o2])._getNAFPoints(e3);
            u2[o2] = p2.wnd, c2[o2] = p2.points;
          }
          for (o2 = n2 - 1; o2 >= 1; o2 -= 2) {
            var b2 = o2 - 1, y2 = o2;
            if (1 === u2[b2] && 1 === u2[y2]) {
              var m2 = [t3[b2], null, null, t3[y2]];
              0 === t3[b2].y.cmp(t3[y2].y) ? (m2[1] = t3[b2].add(t3[y2]), m2[2] = t3[b2].toJ().mixedAdd(t3[y2].neg())) : 0 === t3[b2].y.cmp(t3[y2].y.redNeg()) ? (m2[1] = t3[b2].toJ().mixedAdd(t3[y2]), m2[2] = t3[b2].add(t3[y2].neg())) : (m2[1] = t3[b2].toJ().mixedAdd(t3[y2]), m2[2] = t3[b2].toJ().mixedAdd(t3[y2].neg()));
              var v2 = [-3, -1, -5, -7, 0, 7, 5, 1, 3], g2 = h(r4[b2], r4[y2]);
              for (d2 = Math.max(g2[0].length, d2), f2[b2] = new Array(d2), f2[y2] = new Array(d2), a2 = 0; a2 < d2; a2++) {
                var w2 = 0 | g2[0][a2], A2 = 0 | g2[1][a2];
                f2[b2][a2] = v2[3 * (w2 + 1) + (A2 + 1)], f2[y2][a2] = 0, c2[b2] = m2;
              }
            } else
              f2[b2] = l(r4[b2], u2[b2], this._bitLength), f2[y2] = l(r4[y2], u2[y2], this._bitLength), d2 = Math.max(f2[b2].length, d2), d2 = Math.max(f2[y2].length, d2);
          }
          var k2 = this.jpoint(null, null, null), _2 = this._wnafT4;
          for (o2 = d2; o2 >= 0; o2--) {
            for (var S2 = 0; o2 >= 0; ) {
              var E2 = true;
              for (a2 = 0; a2 < n2; a2++)
                _2[a2] = 0 | f2[a2][o2], 0 !== _2[a2] && (E2 = false);
              if (!E2)
                break;
              S2++, o2--;
            }
            if (o2 >= 0 && S2++, k2 = k2.dblp(S2), o2 < 0)
              break;
            for (a2 = 0; a2 < n2; a2++) {
              var x2 = _2[a2];
              0 !== x2 && (x2 > 0 ? s2 = c2[a2][x2 - 1 >> 1] : x2 < 0 && (s2 = c2[a2][-x2 - 1 >> 1].neg()), k2 = "affine" === s2.type ? k2.mixedAdd(s2) : k2.add(s2));
            }
          }
          for (o2 = 0; o2 < n2; o2++)
            c2[o2] = null;
          return i2 ? k2 : k2.toP();
        }, b.BasePoint = m, m.prototype.eq = function() {
          throw new Error("Not implemented");
        }, m.prototype.validate = function() {
          return this.curve.validate(this);
        }, b.prototype.decodePoint = function(e3, t3) {
          e3 = d.toArray(e3, t3);
          var r4 = this.p.byteLength();
          if ((4 === e3[0] || 6 === e3[0] || 7 === e3[0]) && e3.length - 1 == 2 * r4)
            return 6 === e3[0] ? p(e3[e3.length - 1] % 2 == 0) : 7 === e3[0] && p(e3[e3.length - 1] % 2 == 1), this.point(e3.slice(1, 1 + r4), e3.slice(1 + r4, 1 + 2 * r4));
          if ((2 === e3[0] || 3 === e3[0]) && e3.length - 1 === r4)
            return this.pointFromX(e3.slice(1, 1 + r4), 3 === e3[0]);
          throw new Error("Unknown point format");
        }, m.prototype.encodeCompressed = function(e3) {
          return this.encode(e3, true);
        }, m.prototype._encode = function(e3) {
          var t3 = this.curve.p.byteLength(), r4 = this.getX().toArray("be", t3);
          return e3 ? [this.getY().isEven() ? 2 : 3].concat(r4) : [4].concat(r4, this.getY().toArray("be", t3));
        }, m.prototype.encode = function(e3, t3) {
          return d.encode(this._encode(t3), e3);
        }, m.prototype.precompute = function(e3) {
          if (this.precomputed)
            return this;
          var t3 = { doubles: null, naf: null, beta: null };
          return t3.naf = this._getNAFPoints(8), t3.doubles = this._getDoubles(4, e3), t3.beta = this._getBeta(), this.precomputed = t3, this;
        }, m.prototype._hasDoubles = function(e3) {
          if (!this.precomputed)
            return false;
          var t3 = this.precomputed.doubles;
          return !!t3 && t3.points.length >= Math.ceil((e3.bitLength() + 1) / t3.step);
        }, m.prototype._getDoubles = function(e3, t3) {
          if (this.precomputed && this.precomputed.doubles)
            return this.precomputed.doubles;
          for (var r4 = [this], n2 = this, i2 = 0; i2 < t3; i2 += e3) {
            for (var o2 = 0; o2 < e3; o2++)
              n2 = n2.dbl();
            r4.push(n2);
          }
          return { step: e3, points: r4 };
        }, m.prototype._getNAFPoints = function(e3) {
          if (this.precomputed && this.precomputed.naf)
            return this.precomputed.naf;
          for (var t3 = [this], r4 = (1 << e3) - 1, n2 = 1 === r4 ? null : this.dbl(), i2 = 1; i2 < r4; i2++)
            t3[i2] = t3[i2 - 1].add(n2);
          return { wnd: e3, points: t3 };
        }, m.prototype._getBeta = function() {
          return null;
        }, m.prototype.dblp = function(e3) {
          for (var t3 = this, r4 = 0; r4 < e3; r4++)
            t3 = t3.dbl();
          return t3;
        };
        var v = s(function(e3) {
          "function" == typeof Object.create ? e3.exports = function(e4, t3) {
            t3 && (e4.super_ = t3, e4.prototype = Object.create(t3.prototype, { constructor: { value: e4, enumerable: false, writable: true, configurable: true } }));
          } : e3.exports = function(e4, t3) {
            if (t3) {
              e4.super_ = t3;
              var r4 = function() {
              };
              r4.prototype = t3.prototype, e4.prototype = new r4(), e4.prototype.constructor = e4;
            }
          };
        }), g = d.assert;
        function w(e3) {
          y.call(this, "short", e3), this.a = new o.default(e3.a, 16).toRed(this.red), this.b = new o.default(e3.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(e3), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
        }
        v(w, y);
        var A = w;
        function k(e3, t3, r4, n2) {
          y.BasePoint.call(this, e3, "affine"), null === t3 && null === r4 ? (this.x = null, this.y = null, this.inf = true) : (this.x = new o.default(t3, 16), this.y = new o.default(r4, 16), n2 && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = false);
        }
        function _(e3, t3, r4, n2) {
          y.BasePoint.call(this, e3, "jacobian"), null === t3 && null === r4 && null === n2 ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new o.default(0)) : (this.x = new o.default(t3, 16), this.y = new o.default(r4, 16), this.z = new o.default(n2, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
        }
        w.prototype._getEndomorphism = function(e3) {
          if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
            var t3, r4;
            if (e3.beta)
              t3 = new o.default(e3.beta, 16).toRed(this.red);
            else {
              var n2 = this._getEndoRoots(this.p);
              t3 = (t3 = n2[0].cmp(n2[1]) < 0 ? n2[0] : n2[1]).toRed(this.red);
            }
            if (e3.lambda)
              r4 = new o.default(e3.lambda, 16);
            else {
              var i2 = this._getEndoRoots(this.n);
              0 === this.g.mul(i2[0]).x.cmp(this.g.x.redMul(t3)) ? r4 = i2[0] : (r4 = i2[1], g(0 === this.g.mul(r4).x.cmp(this.g.x.redMul(t3))));
            }
            return { beta: t3, lambda: r4, basis: e3.basis ? e3.basis.map(function(e4) {
              return { a: new o.default(e4.a, 16), b: new o.default(e4.b, 16) };
            }) : this._getEndoBasis(r4) };
          }
        }, w.prototype._getEndoRoots = function(e3) {
          var t3 = e3 === this.p ? this.red : o.default.mont(e3), r4 = new o.default(2).toRed(t3).redInvm(), n2 = r4.redNeg(), i2 = new o.default(3).toRed(t3).redNeg().redSqrt().redMul(r4);
          return [n2.redAdd(i2).fromRed(), n2.redSub(i2).fromRed()];
        }, w.prototype._getEndoBasis = function(e3) {
          for (var t3, r4, n2, i2, a2, s2, u2, c2, f2, d2 = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), l2 = e3, h2 = this.n.clone(), p2 = new o.default(1), b2 = new o.default(0), y2 = new o.default(0), m2 = new o.default(1), v2 = 0; 0 !== l2.cmpn(0); ) {
            var g2 = h2.div(l2);
            c2 = h2.sub(g2.mul(l2)), f2 = y2.sub(g2.mul(p2));
            var w2 = m2.sub(g2.mul(b2));
            if (!n2 && c2.cmp(d2) < 0)
              t3 = u2.neg(), r4 = p2, n2 = c2.neg(), i2 = f2;
            else if (n2 && 2 == ++v2)
              break;
            u2 = c2, h2 = l2, l2 = c2, y2 = p2, p2 = f2, m2 = b2, b2 = w2;
          }
          a2 = c2.neg(), s2 = f2;
          var A2 = n2.sqr().add(i2.sqr());
          return a2.sqr().add(s2.sqr()).cmp(A2) >= 0 && (a2 = t3, s2 = r4), n2.negative && (n2 = n2.neg(), i2 = i2.neg()), a2.negative && (a2 = a2.neg(), s2 = s2.neg()), [{ a: n2, b: i2 }, { a: a2, b: s2 }];
        }, w.prototype._endoSplit = function(e3) {
          var t3 = this.endo.basis, r4 = t3[0], n2 = t3[1], i2 = n2.b.mul(e3).divRound(this.n), o2 = r4.b.neg().mul(e3).divRound(this.n), a2 = i2.mul(r4.a), s2 = o2.mul(n2.a), u2 = i2.mul(r4.b), c2 = o2.mul(n2.b);
          return { k1: e3.sub(a2).sub(s2), k2: u2.add(c2).neg() };
        }, w.prototype.pointFromX = function(e3, t3) {
          (e3 = new o.default(e3, 16)).red || (e3 = e3.toRed(this.red));
          var r4 = e3.redSqr().redMul(e3).redIAdd(e3.redMul(this.a)).redIAdd(this.b), n2 = r4.redSqrt();
          if (0 !== n2.redSqr().redSub(r4).cmp(this.zero))
            throw new Error("invalid point");
          var i2 = n2.fromRed().isOdd();
          return (t3 && !i2 || !t3 && i2) && (n2 = n2.redNeg()), this.point(e3, n2);
        }, w.prototype.validate = function(e3) {
          if (e3.inf)
            return true;
          var t3 = e3.x, r4 = e3.y, n2 = this.a.redMul(t3), i2 = t3.redSqr().redMul(t3).redIAdd(n2).redIAdd(this.b);
          return 0 === r4.redSqr().redISub(i2).cmpn(0);
        }, w.prototype._endoWnafMulAdd = function(e3, t3, r4) {
          for (var n2 = this._endoWnafT1, i2 = this._endoWnafT2, o2 = 0; o2 < e3.length; o2++) {
            var a2 = this._endoSplit(t3[o2]), s2 = e3[o2], u2 = s2._getBeta();
            a2.k1.negative && (a2.k1.ineg(), s2 = s2.neg(true)), a2.k2.negative && (a2.k2.ineg(), u2 = u2.neg(true)), n2[2 * o2] = s2, n2[2 * o2 + 1] = u2, i2[2 * o2] = a2.k1, i2[2 * o2 + 1] = a2.k2;
          }
          for (var c2 = this._wnafMulAdd(1, n2, i2, 2 * o2, r4), f2 = 0; f2 < 2 * o2; f2++)
            n2[f2] = null, i2[f2] = null;
          return c2;
        }, v(k, y.BasePoint), w.prototype.point = function(e3, t3, r4) {
          return new k(this, e3, t3, r4);
        }, w.prototype.pointFromJSON = function(e3, t3) {
          return k.fromJSON(this, e3, t3);
        }, k.prototype._getBeta = function() {
          if (this.curve.endo) {
            var e3 = this.precomputed;
            if (e3 && e3.beta)
              return e3.beta;
            var t3 = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
            if (e3) {
              var r4 = this.curve, n2 = function(e4) {
                return r4.point(e4.x.redMul(r4.endo.beta), e4.y);
              };
              e3.beta = t3, t3.precomputed = { beta: null, naf: e3.naf && { wnd: e3.naf.wnd, points: e3.naf.points.map(n2) }, doubles: e3.doubles && { step: e3.doubles.step, points: e3.doubles.points.map(n2) } };
            }
            return t3;
          }
        }, k.prototype.toJSON = function() {
          return this.precomputed ? [this.x, this.y, this.precomputed && { doubles: this.precomputed.doubles && { step: this.precomputed.doubles.step, points: this.precomputed.doubles.points.slice(1) }, naf: this.precomputed.naf && { wnd: this.precomputed.naf.wnd, points: this.precomputed.naf.points.slice(1) } }] : [this.x, this.y];
        }, k.fromJSON = function(e3, t3, r4) {
          "string" == typeof t3 && (t3 = JSON.parse(t3));
          var n2 = e3.point(t3[0], t3[1], r4);
          if (!t3[2])
            return n2;
          function i2(t4) {
            return e3.point(t4[0], t4[1], r4);
          }
          var o2 = t3[2];
          return n2.precomputed = { beta: null, doubles: o2.doubles && { step: o2.doubles.step, points: [n2].concat(o2.doubles.points.map(i2)) }, naf: o2.naf && { wnd: o2.naf.wnd, points: [n2].concat(o2.naf.points.map(i2)) } }, n2;
        }, k.prototype.inspect = function() {
          return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
        }, k.prototype.isInfinity = function() {
          return this.inf;
        }, k.prototype.add = function(e3) {
          if (this.inf)
            return e3;
          if (e3.inf)
            return this;
          if (this.eq(e3))
            return this.dbl();
          if (this.neg().eq(e3))
            return this.curve.point(null, null);
          if (0 === this.x.cmp(e3.x))
            return this.curve.point(null, null);
          var t3 = this.y.redSub(e3.y);
          0 !== t3.cmpn(0) && (t3 = t3.redMul(this.x.redSub(e3.x).redInvm()));
          var r4 = t3.redSqr().redISub(this.x).redISub(e3.x), n2 = t3.redMul(this.x.redSub(r4)).redISub(this.y);
          return this.curve.point(r4, n2);
        }, k.prototype.dbl = function() {
          if (this.inf)
            return this;
          var e3 = this.y.redAdd(this.y);
          if (0 === e3.cmpn(0))
            return this.curve.point(null, null);
          var t3 = this.curve.a, r4 = this.x.redSqr(), n2 = e3.redInvm(), i2 = r4.redAdd(r4).redIAdd(r4).redIAdd(t3).redMul(n2), o2 = i2.redSqr().redISub(this.x.redAdd(this.x)), a2 = i2.redMul(this.x.redSub(o2)).redISub(this.y);
          return this.curve.point(o2, a2);
        }, k.prototype.getX = function() {
          return this.x.fromRed();
        }, k.prototype.getY = function() {
          return this.y.fromRed();
        }, k.prototype.mul = function(e3) {
          return e3 = new o.default(e3, 16), this.isInfinity() ? this : this._hasDoubles(e3) ? this.curve._fixedNafMul(this, e3) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [e3]) : this.curve._wnafMul(this, e3);
        }, k.prototype.mulAdd = function(e3, t3, r4) {
          var n2 = [this, t3], i2 = [e3, r4];
          return this.curve.endo ? this.curve._endoWnafMulAdd(n2, i2) : this.curve._wnafMulAdd(1, n2, i2, 2);
        }, k.prototype.jmulAdd = function(e3, t3, r4) {
          var n2 = [this, t3], i2 = [e3, r4];
          return this.curve.endo ? this.curve._endoWnafMulAdd(n2, i2, true) : this.curve._wnafMulAdd(1, n2, i2, 2, true);
        }, k.prototype.eq = function(e3) {
          return this === e3 || this.inf === e3.inf && (this.inf || 0 === this.x.cmp(e3.x) && 0 === this.y.cmp(e3.y));
        }, k.prototype.neg = function(e3) {
          if (this.inf)
            return this;
          var t3 = this.curve.point(this.x, this.y.redNeg());
          if (e3 && this.precomputed) {
            var r4 = this.precomputed, n2 = function(e4) {
              return e4.neg();
            };
            t3.precomputed = { naf: r4.naf && { wnd: r4.naf.wnd, points: r4.naf.points.map(n2) }, doubles: r4.doubles && { step: r4.doubles.step, points: r4.doubles.points.map(n2) } };
          }
          return t3;
        }, k.prototype.toJ = function() {
          return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
        }, v(_, y.BasePoint), w.prototype.jpoint = function(e3, t3, r4) {
          return new _(this, e3, t3, r4);
        }, _.prototype.toP = function() {
          if (this.isInfinity())
            return this.curve.point(null, null);
          var e3 = this.z.redInvm(), t3 = e3.redSqr(), r4 = this.x.redMul(t3), n2 = this.y.redMul(t3).redMul(e3);
          return this.curve.point(r4, n2);
        }, _.prototype.neg = function() {
          return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
        }, _.prototype.add = function(e3) {
          if (this.isInfinity())
            return e3;
          if (e3.isInfinity())
            return this;
          var t3 = e3.z.redSqr(), r4 = this.z.redSqr(), n2 = this.x.redMul(t3), i2 = e3.x.redMul(r4), o2 = this.y.redMul(t3.redMul(e3.z)), a2 = e3.y.redMul(r4.redMul(this.z)), s2 = n2.redSub(i2), u2 = o2.redSub(a2);
          if (0 === s2.cmpn(0))
            return 0 !== u2.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
          var c2 = s2.redSqr(), f2 = c2.redMul(s2), d2 = n2.redMul(c2), l2 = u2.redSqr().redIAdd(f2).redISub(d2).redISub(d2), h2 = u2.redMul(d2.redISub(l2)).redISub(o2.redMul(f2)), p2 = this.z.redMul(e3.z).redMul(s2);
          return this.curve.jpoint(l2, h2, p2);
        }, _.prototype.mixedAdd = function(e3) {
          if (this.isInfinity())
            return e3.toJ();
          if (e3.isInfinity())
            return this;
          var t3 = this.z.redSqr(), r4 = this.x, n2 = e3.x.redMul(t3), i2 = this.y, o2 = e3.y.redMul(t3).redMul(this.z), a2 = r4.redSub(n2), s2 = i2.redSub(o2);
          if (0 === a2.cmpn(0))
            return 0 !== s2.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
          var u2 = a2.redSqr(), c2 = u2.redMul(a2), f2 = r4.redMul(u2), d2 = s2.redSqr().redIAdd(c2).redISub(f2).redISub(f2), l2 = s2.redMul(f2.redISub(d2)).redISub(i2.redMul(c2)), h2 = this.z.redMul(a2);
          return this.curve.jpoint(d2, l2, h2);
        }, _.prototype.dblp = function(e3) {
          if (0 === e3)
            return this;
          if (this.isInfinity())
            return this;
          if (!e3)
            return this.dbl();
          var t3;
          if (this.curve.zeroA || this.curve.threeA) {
            var r4 = this;
            for (t3 = 0; t3 < e3; t3++)
              r4 = r4.dbl();
            return r4;
          }
          var n2 = this.curve.a, i2 = this.curve.tinv, o2 = this.x, a2 = this.y, s2 = this.z, u2 = s2.redSqr().redSqr(), c2 = a2.redAdd(a2);
          for (t3 = 0; t3 < e3; t3++) {
            var f2 = o2.redSqr(), d2 = c2.redSqr(), l2 = d2.redSqr(), h2 = f2.redAdd(f2).redIAdd(f2).redIAdd(n2.redMul(u2)), p2 = o2.redMul(d2), b2 = h2.redSqr().redISub(p2.redAdd(p2)), y2 = p2.redISub(b2), m2 = h2.redMul(y2);
            m2 = m2.redIAdd(m2).redISub(l2);
            var v2 = c2.redMul(s2);
            t3 + 1 < e3 && (u2 = u2.redMul(l2)), o2 = b2, s2 = v2, c2 = m2;
          }
          return this.curve.jpoint(o2, c2.redMul(i2), s2);
        }, _.prototype.dbl = function() {
          return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
        }, _.prototype._zeroDbl = function() {
          var e3, t3, r4;
          if (this.zOne) {
            var n2 = this.x.redSqr(), i2 = this.y.redSqr(), o2 = i2.redSqr(), a2 = this.x.redAdd(i2).redSqr().redISub(n2).redISub(o2);
            a2 = a2.redIAdd(a2);
            var s2 = n2.redAdd(n2).redIAdd(n2), u2 = s2.redSqr().redISub(a2).redISub(a2), c2 = o2.redIAdd(o2);
            c2 = (c2 = c2.redIAdd(c2)).redIAdd(c2), e3 = u2, t3 = s2.redMul(a2.redISub(u2)).redISub(c2), r4 = this.y.redAdd(this.y);
          } else {
            var f2 = this.x.redSqr(), d2 = this.y.redSqr(), l2 = d2.redSqr(), h2 = this.x.redAdd(d2).redSqr().redISub(f2).redISub(l2);
            h2 = h2.redIAdd(h2);
            var p2 = f2.redAdd(f2).redIAdd(f2), b2 = p2.redSqr(), y2 = l2.redIAdd(l2);
            y2 = (y2 = y2.redIAdd(y2)).redIAdd(y2), e3 = b2.redISub(h2).redISub(h2), t3 = p2.redMul(h2.redISub(e3)).redISub(y2), r4 = (r4 = this.y.redMul(this.z)).redIAdd(r4);
          }
          return this.curve.jpoint(e3, t3, r4);
        }, _.prototype._threeDbl = function() {
          var e3, t3, r4;
          if (this.zOne) {
            var n2 = this.x.redSqr(), i2 = this.y.redSqr(), o2 = i2.redSqr(), a2 = this.x.redAdd(i2).redSqr().redISub(n2).redISub(o2);
            a2 = a2.redIAdd(a2);
            var s2 = n2.redAdd(n2).redIAdd(n2).redIAdd(this.curve.a), u2 = s2.redSqr().redISub(a2).redISub(a2);
            e3 = u2;
            var c2 = o2.redIAdd(o2);
            c2 = (c2 = c2.redIAdd(c2)).redIAdd(c2), t3 = s2.redMul(a2.redISub(u2)).redISub(c2), r4 = this.y.redAdd(this.y);
          } else {
            var f2 = this.z.redSqr(), d2 = this.y.redSqr(), l2 = this.x.redMul(d2), h2 = this.x.redSub(f2).redMul(this.x.redAdd(f2));
            h2 = h2.redAdd(h2).redIAdd(h2);
            var p2 = l2.redIAdd(l2), b2 = (p2 = p2.redIAdd(p2)).redAdd(p2);
            e3 = h2.redSqr().redISub(b2), r4 = this.y.redAdd(this.z).redSqr().redISub(d2).redISub(f2);
            var y2 = d2.redSqr();
            y2 = (y2 = (y2 = y2.redIAdd(y2)).redIAdd(y2)).redIAdd(y2), t3 = h2.redMul(p2.redISub(e3)).redISub(y2);
          }
          return this.curve.jpoint(e3, t3, r4);
        }, _.prototype._dbl = function() {
          var e3 = this.curve.a, t3 = this.x, r4 = this.y, n2 = this.z, i2 = n2.redSqr().redSqr(), o2 = t3.redSqr(), a2 = r4.redSqr(), s2 = o2.redAdd(o2).redIAdd(o2).redIAdd(e3.redMul(i2)), u2 = t3.redAdd(t3), c2 = (u2 = u2.redIAdd(u2)).redMul(a2), f2 = s2.redSqr().redISub(c2.redAdd(c2)), d2 = c2.redISub(f2), l2 = a2.redSqr();
          l2 = (l2 = (l2 = l2.redIAdd(l2)).redIAdd(l2)).redIAdd(l2);
          var h2 = s2.redMul(d2).redISub(l2), p2 = r4.redAdd(r4).redMul(n2);
          return this.curve.jpoint(f2, h2, p2);
        }, _.prototype.trpl = function() {
          if (!this.curve.zeroA)
            return this.dbl().add(this);
          var e3 = this.x.redSqr(), t3 = this.y.redSqr(), r4 = this.z.redSqr(), n2 = t3.redSqr(), i2 = e3.redAdd(e3).redIAdd(e3), o2 = i2.redSqr(), a2 = this.x.redAdd(t3).redSqr().redISub(e3).redISub(n2), s2 = (a2 = (a2 = (a2 = a2.redIAdd(a2)).redAdd(a2).redIAdd(a2)).redISub(o2)).redSqr(), u2 = n2.redIAdd(n2);
          u2 = (u2 = (u2 = u2.redIAdd(u2)).redIAdd(u2)).redIAdd(u2);
          var c2 = i2.redIAdd(a2).redSqr().redISub(o2).redISub(s2).redISub(u2), f2 = t3.redMul(c2);
          f2 = (f2 = f2.redIAdd(f2)).redIAdd(f2);
          var d2 = this.x.redMul(s2).redISub(f2);
          d2 = (d2 = d2.redIAdd(d2)).redIAdd(d2);
          var l2 = this.y.redMul(c2.redMul(u2.redISub(c2)).redISub(a2.redMul(s2)));
          l2 = (l2 = (l2 = l2.redIAdd(l2)).redIAdd(l2)).redIAdd(l2);
          var h2 = this.z.redAdd(a2).redSqr().redISub(r4).redISub(s2);
          return this.curve.jpoint(d2, l2, h2);
        }, _.prototype.mul = function(e3, t3) {
          return e3 = new o.default(e3, t3), this.curve._wnafMul(this, e3);
        }, _.prototype.eq = function(e3) {
          if ("affine" === e3.type)
            return this.eq(e3.toJ());
          if (this === e3)
            return true;
          var t3 = this.z.redSqr(), r4 = e3.z.redSqr();
          if (0 !== this.x.redMul(r4).redISub(e3.x.redMul(t3)).cmpn(0))
            return false;
          var n2 = t3.redMul(this.z), i2 = r4.redMul(e3.z);
          return 0 === this.y.redMul(i2).redISub(e3.y.redMul(n2)).cmpn(0);
        }, _.prototype.eqXToP = function(e3) {
          var t3 = this.z.redSqr(), r4 = e3.toRed(this.curve.red).redMul(t3);
          if (0 === this.x.cmp(r4))
            return true;
          for (var n2 = e3.clone(), i2 = this.curve.redN.redMul(t3); ; ) {
            if (n2.iadd(this.curve.n), n2.cmp(this.curve.p) >= 0)
              return false;
            if (r4.redIAdd(i2), 0 === this.x.cmp(r4))
              return true;
          }
        }, _.prototype.inspect = function() {
          return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
        }, _.prototype.isInfinity = function() {
          return 0 === this.z.cmpn(0);
        };
        var S = s(function(e3, t3) {
          var r4 = t3;
          r4.base = y, r4.short = A, r4.mont = null, r4.edwards = null;
        }), E = s(function(e3, t3) {
          var r4, n2 = t3, i2 = d.assert;
          function o2(e4) {
            "short" === e4.type ? this.curve = new S.short(e4) : "edwards" === e4.type ? this.curve = new S.edwards(e4) : this.curve = new S.mont(e4), this.g = this.curve.g, this.n = this.curve.n, this.hash = e4.hash, i2(this.g.validate(), "Invalid curve"), i2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
          }
          function s2(e4, t4) {
            Object.defineProperty(n2, e4, { configurable: true, enumerable: true, get: function() {
              var r5 = new o2(t4);
              return Object.defineProperty(n2, e4, { configurable: true, enumerable: true, value: r5 }), r5;
            } });
          }
          n2.PresetCurve = o2, s2("p192", { type: "short", prime: "p192", p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff", a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc", b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1", n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831", hash: a.default.sha256, gRed: false, g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"] }), s2("p224", { type: "short", prime: "p224", p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001", a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe", b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4", n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d", hash: a.default.sha256, gRed: false, g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"] }), s2("p256", { type: "short", prime: null, p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff", a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc", b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b", n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551", hash: a.default.sha256, gRed: false, g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"] }), s2("p384", { type: "short", prime: null, p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff", a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc", b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef", n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973", hash: a.default.sha384, gRed: false, g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"] }), s2("p521", { type: "short", prime: null, p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff", a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc", b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00", n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409", hash: a.default.sha512, gRed: false, g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"] }), s2("curve25519", { type: "mont", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "76d06", b: "1", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: a.default.sha256, gRed: false, g: ["9"] }), s2("ed25519", { type: "edwards", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "-1", c: "1", d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: a.default.sha256, gRed: false, g: ["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658"] });
          try {
            r4 = null.crash();
          } catch (e4) {
            r4 = void 0;
          }
          s2("secp256k1", { type: "short", prime: "k256", p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f", a: "0", b: "7", n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141", h: "1", hash: a.default.sha256, beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee", lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72", basis: [{ a: "3086d221a7d46bcde86c90e49284eb15", b: "-e4437ed6010e88286f547fa90abfe4c3" }, { a: "114ca50f7a8e2f3f657c1108d9d44cfd8", b: "3086d221a7d46bcde86c90e49284eb15" }], gRed: false, g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", r4] });
        });
        function x(e3) {
          if (!(this instanceof x))
            return new x(e3);
          this.hash = e3.hash, this.predResist = !!e3.predResist, this.outLen = this.hash.outSize, this.minEntropy = e3.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
          var t3 = f.toArray(e3.entropy, e3.entropyEnc || "hex"), r4 = f.toArray(e3.nonce, e3.nonceEnc || "hex"), n2 = f.toArray(e3.pers, e3.persEnc || "hex");
          u(t3.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(t3, r4, n2);
        }
        var P = x;
        x.prototype._init = function(e3, t3, r4) {
          var n2 = e3.concat(t3).concat(r4);
          this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
          for (var i2 = 0; i2 < this.V.length; i2++)
            this.K[i2] = 0, this.V[i2] = 1;
          this._update(n2), this._reseed = 1, this.reseedInterval = 281474976710656;
        }, x.prototype._hmac = function() {
          return new a.default.hmac(this.hash, this.K);
        }, x.prototype._update = function(e3) {
          var t3 = this._hmac().update(this.V).update([0]);
          e3 && (t3 = t3.update(e3)), this.K = t3.digest(), this.V = this._hmac().update(this.V).digest(), e3 && (this.K = this._hmac().update(this.V).update([1]).update(e3).digest(), this.V = this._hmac().update(this.V).digest());
        }, x.prototype.reseed = function(e3, t3, r4, n2) {
          "string" != typeof t3 && (n2 = r4, r4 = t3, t3 = null), e3 = f.toArray(e3, t3), r4 = f.toArray(r4, n2), u(e3.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(e3.concat(r4 || [])), this._reseed = 1;
        }, x.prototype.generate = function(e3, t3, r4, n2) {
          if (this._reseed > this.reseedInterval)
            throw new Error("Reseed is required");
          "string" != typeof t3 && (n2 = r4, r4 = t3, t3 = null), r4 && (r4 = f.toArray(r4, n2 || "hex"), this._update(r4));
          for (var i2 = []; i2.length < e3; )
            this.V = this._hmac().update(this.V).digest(), i2 = i2.concat(this.V);
          var o2 = i2.slice(0, e3);
          return this._update(r4), this._reseed++, f.encode(o2, t3);
        };
        var O = d.assert;
        function B(e3, t3) {
          this.ec = e3, this.priv = null, this.pub = null, t3.priv && this._importPrivate(t3.priv, t3.privEnc), t3.pub && this._importPublic(t3.pub, t3.pubEnc);
        }
        var T = B;
        B.fromPublic = function(e3, t3, r4) {
          return t3 instanceof B ? t3 : new B(e3, { pub: t3, pubEnc: r4 });
        }, B.fromPrivate = function(e3, t3, r4) {
          return t3 instanceof B ? t3 : new B(e3, { priv: t3, privEnc: r4 });
        }, B.prototype.validate = function() {
          var e3 = this.getPublic();
          return e3.isInfinity() ? { result: false, reason: "Invalid public key" } : e3.validate() ? e3.mul(this.ec.curve.n).isInfinity() ? { result: true, reason: null } : { result: false, reason: "Public key * N != O" } : { result: false, reason: "Public key is not a point" };
        }, B.prototype.getPublic = function(e3, t3) {
          return "string" == typeof e3 && (t3 = e3, e3 = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), t3 ? this.pub.encode(t3, e3) : this.pub;
        }, B.prototype.getPrivate = function(e3) {
          return "hex" === e3 ? this.priv.toString(16, 2) : this.priv;
        }, B.prototype._importPrivate = function(e3, t3) {
          this.priv = new o.default(e3, t3 || 16), this.priv = this.priv.umod(this.ec.curve.n);
        }, B.prototype._importPublic = function(e3, t3) {
          if (e3.x || e3.y)
            return "mont" === this.ec.curve.type ? O(e3.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || O(e3.x && e3.y, "Need both x and y coordinate"), void (this.pub = this.ec.curve.point(e3.x, e3.y));
          this.pub = this.ec.curve.decodePoint(e3, t3);
        }, B.prototype.derive = function(e3) {
          return e3.validate() || O(e3.validate(), "public point not validated"), e3.mul(this.priv).getX();
        }, B.prototype.sign = function(e3, t3, r4) {
          return this.ec.sign(e3, this, t3, r4);
        }, B.prototype.verify = function(e3, t3) {
          return this.ec.verify(e3, t3, this);
        }, B.prototype.inspect = function() {
          return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
        };
        var C = d.assert;
        function I(e3, t3) {
          if (e3 instanceof I)
            return e3;
          this._importDER(e3, t3) || (C(e3.r && e3.s, "Signature without r or s"), this.r = new o.default(e3.r, 16), this.s = new o.default(e3.s, 16), void 0 === e3.recoveryParam ? this.recoveryParam = null : this.recoveryParam = e3.recoveryParam);
        }
        var M = I;
        function U() {
          this.place = 0;
        }
        function R(e3, t3) {
          var r4 = e3[t3.place++];
          if (!(128 & r4))
            return r4;
          var n2 = 15 & r4;
          if (0 === n2 || n2 > 4)
            return false;
          for (var i2 = 0, o2 = 0, a2 = t3.place; o2 < n2; o2++, a2++)
            i2 <<= 8, i2 |= e3[a2], i2 >>>= 0;
          return !(i2 <= 127) && (t3.place = a2, i2);
        }
        function j(e3) {
          for (var t3 = 0, r4 = e3.length - 1; !e3[t3] && !(128 & e3[t3 + 1]) && t3 < r4; )
            t3++;
          return 0 === t3 ? e3 : e3.slice(t3);
        }
        function N(e3, t3) {
          if (t3 < 128)
            e3.push(t3);
          else {
            var r4 = 1 + (Math.log(t3) / Math.LN2 >>> 3);
            for (e3.push(128 | r4); --r4; )
              e3.push(t3 >>> (r4 << 3) & 255);
            e3.push(t3);
          }
        }
        I.prototype._importDER = function(e3, t3) {
          e3 = d.toArray(e3, t3);
          var r4 = new U();
          if (48 !== e3[r4.place++])
            return false;
          var n2 = R(e3, r4);
          if (false === n2)
            return false;
          if (n2 + r4.place !== e3.length)
            return false;
          if (2 !== e3[r4.place++])
            return false;
          var i2 = R(e3, r4);
          if (false === i2)
            return false;
          var a2 = e3.slice(r4.place, i2 + r4.place);
          if (r4.place += i2, 2 !== e3[r4.place++])
            return false;
          var s2 = R(e3, r4);
          if (false === s2)
            return false;
          if (e3.length !== s2 + r4.place)
            return false;
          var u2 = e3.slice(r4.place, s2 + r4.place);
          if (0 === a2[0]) {
            if (!(128 & a2[1]))
              return false;
            a2 = a2.slice(1);
          }
          if (0 === u2[0]) {
            if (!(128 & u2[1]))
              return false;
            u2 = u2.slice(1);
          }
          return this.r = new o.default(a2), this.s = new o.default(u2), this.recoveryParam = null, true;
        }, I.prototype.toDER = function(e3) {
          var t3 = this.r.toArray(), r4 = this.s.toArray();
          for (128 & t3[0] && (t3 = [0].concat(t3)), 128 & r4[0] && (r4 = [0].concat(r4)), t3 = j(t3), r4 = j(r4); !(r4[0] || 128 & r4[1]); )
            r4 = r4.slice(1);
          var n2 = [2];
          N(n2, t3.length), (n2 = n2.concat(t3)).push(2), N(n2, r4.length);
          var i2 = n2.concat(r4), o2 = [48];
          return N(o2, i2.length), o2 = o2.concat(i2), d.encode(o2, e3);
        };
        var F = function() {
          throw new Error("unsupported");
        }, L = d.assert;
        function D(e3) {
          if (!(this instanceof D))
            return new D(e3);
          "string" == typeof e3 && (L(Object.prototype.hasOwnProperty.call(E, e3), "Unknown curve " + e3), e3 = E[e3]), e3 instanceof E.PresetCurve && (e3 = { curve: e3 }), this.curve = e3.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e3.curve.g, this.g.precompute(e3.curve.n.bitLength() + 1), this.hash = e3.hash || e3.curve.hash;
        }
        var H = D;
        D.prototype.keyPair = function(e3) {
          return new T(this, e3);
        }, D.prototype.keyFromPrivate = function(e3, t3) {
          return T.fromPrivate(this, e3, t3);
        }, D.prototype.keyFromPublic = function(e3, t3) {
          return T.fromPublic(this, e3, t3);
        }, D.prototype.genKeyPair = function(e3) {
          e3 || (e3 = {});
          for (var t3 = new P({ hash: this.hash, pers: e3.pers, persEnc: e3.persEnc || "utf8", entropy: e3.entropy || F(this.hash.hmacStrength), entropyEnc: e3.entropy && e3.entropyEnc || "utf8", nonce: this.n.toArray() }), r4 = this.n.byteLength(), n2 = this.n.sub(new o.default(2)); ; ) {
            var i2 = new o.default(t3.generate(r4));
            if (!(i2.cmp(n2) > 0))
              return i2.iaddn(1), this.keyFromPrivate(i2);
          }
        }, D.prototype._truncateToN = function(e3, t3) {
          var r4 = 8 * e3.byteLength() - this.n.bitLength();
          return r4 > 0 && (e3 = e3.ushrn(r4)), !t3 && e3.cmp(this.n) >= 0 ? e3.sub(this.n) : e3;
        }, D.prototype.sign = function(e3, t3, r4, n2) {
          "object" === (0, i.default)(r4) && (n2 = r4, r4 = null), n2 || (n2 = {}), t3 = this.keyFromPrivate(t3, r4), e3 = this._truncateToN(new o.default(e3, 16));
          for (var a2 = this.n.byteLength(), s2 = t3.getPrivate().toArray("be", a2), u2 = e3.toArray("be", a2), c2 = new P({ hash: this.hash, entropy: s2, nonce: u2, pers: n2.pers, persEnc: n2.persEnc || "utf8" }), f2 = this.n.sub(new o.default(1)), d2 = 0; ; d2++) {
            var l2 = n2.k ? n2.k(d2) : new o.default(c2.generate(this.n.byteLength()));
            if (!((l2 = this._truncateToN(l2, true)).cmpn(1) <= 0 || l2.cmp(f2) >= 0)) {
              var h2 = this.g.mul(l2);
              if (!h2.isInfinity()) {
                var p2 = h2.getX(), b2 = p2.umod(this.n);
                if (0 !== b2.cmpn(0)) {
                  var y2 = l2.invm(this.n).mul(b2.mul(t3.getPrivate()).iadd(e3));
                  if (0 !== (y2 = y2.umod(this.n)).cmpn(0)) {
                    var m2 = (h2.getY().isOdd() ? 1 : 0) | (0 !== p2.cmp(b2) ? 2 : 0);
                    return n2.canonical && y2.cmp(this.nh) > 0 && (y2 = this.n.sub(y2), m2 ^= 1), new M({ r: b2, s: y2, recoveryParam: m2 });
                  }
                }
              }
            }
          }
        }, D.prototype.verify = function(e3, t3, r4, n2) {
          e3 = this._truncateToN(new o.default(e3, 16)), r4 = this.keyFromPublic(r4, n2);
          var i2 = (t3 = new M(t3, "hex")).r, a2 = t3.s;
          if (i2.cmpn(1) < 0 || i2.cmp(this.n) >= 0)
            return false;
          if (a2.cmpn(1) < 0 || a2.cmp(this.n) >= 0)
            return false;
          var s2, u2 = a2.invm(this.n), c2 = u2.mul(e3).umod(this.n), f2 = u2.mul(i2).umod(this.n);
          return this.curve._maxwellTrick ? !(s2 = this.g.jmulAdd(c2, r4.getPublic(), f2)).isInfinity() && s2.eqXToP(i2) : !(s2 = this.g.mulAdd(c2, r4.getPublic(), f2)).isInfinity() && 0 === s2.getX().umod(this.n).cmp(i2);
        }, D.prototype.recoverPubKey = function(e3, t3, r4, n2) {
          L((3 & r4) === r4, "The recovery param is more than two bits"), t3 = new M(t3, n2);
          var i2 = this.n, a2 = new o.default(e3), s2 = t3.r, u2 = t3.s, c2 = 1 & r4, f2 = r4 >> 1;
          if (s2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && f2)
            throw new Error("Unable to find sencond key candinate");
          s2 = f2 ? this.curve.pointFromX(s2.add(this.curve.n), c2) : this.curve.pointFromX(s2, c2);
          var d2 = t3.r.invm(i2), l2 = i2.sub(a2).mul(d2).umod(i2), h2 = u2.mul(d2).umod(i2);
          return this.g.mulAdd(l2, s2, h2);
        }, D.prototype.getKeyRecoveryParam = function(e3, t3, r4, n2) {
          if (null !== (t3 = new M(t3, n2)).recoveryParam)
            return t3.recoveryParam;
          for (var i2 = 0; i2 < 4; i2++) {
            var o2;
            try {
              o2 = this.recoverPubKey(e3, t3, i2);
            } catch (e4) {
              continue;
            }
            if (o2.eq(r4))
              return i2;
          }
          throw new Error("Unable to find valid recovery factor");
        };
        var q = s(function(e3, t3) {
          var r4 = t3;
          r4.version = "6.5.4", r4.utils = d, r4.rand = function() {
            throw new Error("unsupported");
          }, r4.curve = S, r4.curves = E, r4.ec = H, r4.eddsa = null;
        }), z = q.ec;
        t2.EC = z;
      }, 7612: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.SigningKey = void 0, t2.computePublicKey = b, t2.recoverPublicKey = function(e3, t3) {
          var r4 = (0, s.splitSignature)(t3), n2 = { r: (0, s.arrayify)(r4.r), s: (0, s.arrayify)(r4.s) };
          return "0x" + h().recoverPubKey((0, s.arrayify)(e3), n2, r4.recoveryParam).encode("hex", false);
        };
        var i = n(r3(9721)), o = n(r3(8985)), a = r3(6918), s = r3(908), u = r3(3694), c = r3(4327), f = r3(8100), d = new c.Logger(f.version), l = null;
        function h() {
          return l || (l = new a.EC("secp256k1")), l;
        }
        var p = function() {
          function e3(t3) {
            (0, i.default)(this, e3), (0, u.defineReadOnly)(this, "curve", "secp256k1"), (0, u.defineReadOnly)(this, "privateKey", (0, s.hexlify)(t3)), 32 !== (0, s.hexDataLength)(this.privateKey) && d.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
            var r4 = h().keyFromPrivate((0, s.arrayify)(this.privateKey));
            (0, u.defineReadOnly)(this, "publicKey", "0x" + r4.getPublic(false, "hex")), (0, u.defineReadOnly)(this, "compressedPublicKey", "0x" + r4.getPublic(true, "hex")), (0, u.defineReadOnly)(this, "_isSigningKey", true);
          }
          return (0, o.default)(e3, [{ key: "_addPoint", value: function(e4) {
            var t3 = h().keyFromPublic((0, s.arrayify)(this.publicKey)), r4 = h().keyFromPublic((0, s.arrayify)(e4));
            return "0x" + t3.pub.add(r4.pub).encodeCompressed("hex");
          } }, { key: "signDigest", value: function(e4) {
            var t3 = h().keyFromPrivate((0, s.arrayify)(this.privateKey)), r4 = (0, s.arrayify)(e4);
            32 !== r4.length && d.throwArgumentError("bad digest length", "digest", e4);
            var n2 = t3.sign(r4, { canonical: true });
            return (0, s.splitSignature)({ recoveryParam: n2.recoveryParam, r: (0, s.hexZeroPad)("0x" + n2.r.toString(16), 32), s: (0, s.hexZeroPad)("0x" + n2.s.toString(16), 32) });
          } }, { key: "computeSharedSecret", value: function(e4) {
            var t3 = h().keyFromPrivate((0, s.arrayify)(this.privateKey)), r4 = h().keyFromPublic((0, s.arrayify)(b(e4)));
            return (0, s.hexZeroPad)("0x" + t3.derive(r4.getPublic()).toString(16), 32);
          } }], [{ key: "isSigningKey", value: function(e4) {
            return !(!e4 || !e4._isSigningKey);
          } }]), e3;
        }();
        function b(e3, t3) {
          var r4 = (0, s.arrayify)(e3);
          if (32 === r4.length) {
            var n2 = new p(r4);
            return t3 ? "0x" + h().keyFromPrivate(r4).getPublic(true, "hex") : n2.publicKey;
          }
          return 33 === r4.length ? t3 ? (0, s.hexlify)(r4) : "0x" + h().keyFromPublic(r4).getPublic(false, "hex") : 65 === r4.length ? t3 ? "0x" + h().keyFromPublic(r4).getPublic(true, "hex") : (0, s.hexlify)(r4) : d.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
        }
        t2.SigningKey = p;
      }, 6518: (e2, t2) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.version = void 0, t2.version = "strings/5.7.0";
      }, 5856: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.formatBytes32String = function(e3) {
          var t3 = (0, o.toUtf8Bytes)(e3);
          if (t3.length > 31)
            throw new Error("bytes32 string must be less than 32 bytes");
          return (0, i.hexlify)((0, i.concat)([t3, n.HashZero]).slice(0, 32));
        }, t2.parseBytes32String = function(e3) {
          var t3 = (0, i.arrayify)(e3);
          if (32 !== t3.length)
            throw new Error("invalid bytes32 - not 32 bytes long");
          if (0 !== t3[31])
            throw new Error("invalid bytes32 string - no null terminator");
          for (var r4 = 31; 0 === t3[r4 - 1]; )
            r4--;
          return (0, o.toUtf8String)(t3.slice(0, r4));
        };
        var n = r3(5465), i = r3(908), o = r3(4997);
      }, 8645: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2._nameprepTableA1 = p, t2._nameprepTableB2 = b, t2._nameprepTableC = y, t2.nameprep = function(e3) {
          if (e3.match(/^[a-z0-9-]*$/i) && e3.length <= 59)
            return e3.toLowerCase();
          var t3, r4 = (0, n.toUtf8CodePoints)(e3);
          t3 = r4.map(function(e4) {
            return u.indexOf(e4) >= 0 || e4 >= 65024 && e4 <= 65039 ? [] : b(e4) || [e4];
          }), r4 = t3.reduce(function(e4, t4) {
            return t4.forEach(function(t5) {
              e4.push(t5);
            }), e4;
          }, []), (r4 = (0, n.toUtf8CodePoints)((0, n._toUtf8String)(r4), n.UnicodeNormalizationForm.NFKC)).forEach(function(e4) {
            if (y(e4))
              throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
          }), r4.forEach(function(e4) {
            if (p(e4))
              throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
          });
          var i2 = (0, n._toUtf8String)(r4);
          if ("-" === i2.substring(0, 1) || "--" === i2.substring(2, 4) || "-" === i2.substring(i2.length - 1))
            throw new Error("invalid hyphen");
          return i2;
        };
        var n = r3(4997);
        function i(e3, t3) {
          t3 || (t3 = function(e4) {
            return [parseInt(e4, 16)];
          });
          var r4 = 0, n2 = {};
          return e3.split(",").forEach(function(e4) {
            var i2 = e4.split(":");
            r4 += parseInt(i2[0], 16), n2[r4] = t3(i2[1]);
          }), n2;
        }
        function o(e3) {
          var t3 = 0;
          return e3.split(",").map(function(e4) {
            var r4 = e4.split("-");
            return 1 === r4.length ? r4[1] = "0" : "" === r4[1] && (r4[1] = "1"), { l: t3 + parseInt(r4[0], 16), h: t3 = parseInt(r4[1], 16) };
          });
        }
        function a(e3, t3) {
          for (var r4 = 0, n2 = 0; n2 < t3.length; n2++) {
            var i2 = t3[n2];
            if (e3 >= (r4 += i2.l) && e3 <= r4 + i2.h && (e3 - r4) % (i2.d || 1) == 0) {
              if (i2.e && -1 !== i2.e.indexOf(e3 - r4))
                continue;
              return i2;
            }
          }
          return null;
        }
        var s = o("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d"), u = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map(function(e3) {
          return parseInt(e3, 16);
        }), c = [{ h: 25, s: 32, l: 65 }, { h: 30, s: 32, e: [23], l: 127 }, { h: 54, s: 1, e: [48], l: 64, d: 2 }, { h: 14, s: 1, l: 57, d: 2 }, { h: 44, s: 1, l: 17, d: 2 }, { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 }, { h: 16, s: 1, l: 68, d: 2 }, { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 }, { h: 26, s: 32, e: [17], l: 435 }, { h: 22, s: 1, l: 71, d: 2 }, { h: 15, s: 80, l: 40 }, { h: 31, s: 32, l: 16 }, { h: 32, s: 1, l: 80, d: 2 }, { h: 52, s: 1, l: 42, d: 2 }, { h: 12, s: 1, l: 55, d: 2 }, { h: 40, s: 1, e: [38], l: 15, d: 2 }, { h: 14, s: 1, l: 48, d: 2 }, { h: 37, s: 48, l: 49 }, { h: 148, s: 1, l: 6351, d: 2 }, { h: 88, s: 1, l: 160, d: 2 }, { h: 15, s: 16, l: 704 }, { h: 25, s: 26, l: 854 }, { h: 25, s: 32, l: 55915 }, { h: 37, s: 40, l: 1247 }, { h: 25, s: -119711, l: 53248 }, { h: 25, s: -119763, l: 52 }, { h: 25, s: -119815, l: 52 }, { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 }, { h: 25, s: -119919, l: 52 }, { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 }, { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 }, { h: 25, s: -120075, l: 52 }, { h: 25, s: -120127, l: 52 }, { h: 25, s: -120179, l: 52 }, { h: 25, s: -120231, l: 52 }, { h: 25, s: -120283, l: 52 }, { h: 25, s: -120335, l: 52 }, { h: 24, s: -119543, e: [17], l: 56 }, { h: 24, s: -119601, e: [17], l: 58 }, { h: 24, s: -119659, e: [17], l: 58 }, { h: 24, s: -119717, e: [17], l: 58 }, { h: 24, s: -119775, e: [17], l: 58 }], f = i("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3"), d = i("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7"), l = i("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", function(e3) {
          if (e3.length % 4 != 0)
            throw new Error("bad data");
          for (var t3 = [], r4 = 0; r4 < e3.length; r4 += 4)
            t3.push(parseInt(e3.substring(r4, r4 + 4), 16));
          return t3;
        }), h = o("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
        function p(e3) {
          return !!a(e3, s);
        }
        function b(e3) {
          var t3 = a(e3, c);
          if (t3)
            return [e3 + t3.s];
          var r4 = f[e3];
          if (r4)
            return r4;
          var n2 = d[e3];
          return n2 ? [e3 + n2[0]] : l[e3] || null;
        }
        function y(e3) {
          return !!a(e3, h);
        }
      }, 8627: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), Object.defineProperty(t2, "UnicodeNormalizationForm", { enumerable: true, get: function() {
          return o.UnicodeNormalizationForm;
        } }), Object.defineProperty(t2, "Utf8ErrorFuncs", { enumerable: true, get: function() {
          return o.Utf8ErrorFuncs;
        } }), Object.defineProperty(t2, "Utf8ErrorReason", { enumerable: true, get: function() {
          return o.Utf8ErrorReason;
        } }), Object.defineProperty(t2, "_toEscapedUtf8String", { enumerable: true, get: function() {
          return o._toEscapedUtf8String;
        } }), Object.defineProperty(t2, "formatBytes32String", { enumerable: true, get: function() {
          return n.formatBytes32String;
        } }), Object.defineProperty(t2, "nameprep", { enumerable: true, get: function() {
          return i.nameprep;
        } }), Object.defineProperty(t2, "parseBytes32String", { enumerable: true, get: function() {
          return n.parseBytes32String;
        } }), Object.defineProperty(t2, "toUtf8Bytes", { enumerable: true, get: function() {
          return o.toUtf8Bytes;
        } }), Object.defineProperty(t2, "toUtf8CodePoints", { enumerable: true, get: function() {
          return o.toUtf8CodePoints;
        } }), Object.defineProperty(t2, "toUtf8String", { enumerable: true, get: function() {
          return o.toUtf8String;
        } });
        var n = r3(5856), i = r3(8645), o = r3(4997);
      }, 4997: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.Utf8ErrorReason = t2.Utf8ErrorFuncs = t2.UnicodeNormalizationForm = void 0, t2._toEscapedUtf8String = function(e3, t3) {
          return '"' + d(e3, t3).map(function(e4) {
            if (e4 < 256) {
              switch (e4) {
                case 8:
                  return "\\b";
                case 9:
                  return "\\t";
                case 10:
                  return "\\n";
                case 13:
                  return "\\r";
                case 34:
                  return '\\"';
                case 92:
                  return "\\\\";
              }
              if (e4 >= 32 && e4 < 127)
                return String.fromCharCode(e4);
            }
            return e4 <= 65535 ? h(e4) : h(55296 + ((e4 -= 65536) >> 10 & 1023)) + h(56320 + (1023 & e4));
          }).join("") + '"';
        }, t2._toUtf8String = p, t2.toUtf8Bytes = l, t2.toUtf8CodePoints = function(e3) {
          return d(l(e3, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : n.current));
        }, t2.toUtf8String = function(e3, t3) {
          return p(d(e3, t3));
        };
        var n, i, o = r3(908), a = r3(4327), s = r3(6518), u = new a.Logger(s.version);
        function c(e3, t3, r4, n2, o2) {
          if (e3 === i.BAD_PREFIX || e3 === i.UNEXPECTED_CONTINUE) {
            for (var a2 = 0, s2 = t3 + 1; s2 < r4.length && r4[s2] >> 6 == 2; s2++)
              a2++;
            return a2;
          }
          return e3 === i.OVERRUN ? r4.length - t3 - 1 : 0;
        }
        t2.UnicodeNormalizationForm = n, function(e3) {
          e3.current = "", e3.NFC = "NFC", e3.NFD = "NFD", e3.NFKC = "NFKC", e3.NFKD = "NFKD";
        }(n || (t2.UnicodeNormalizationForm = n = {})), t2.Utf8ErrorReason = i, function(e3) {
          e3.UNEXPECTED_CONTINUE = "unexpected continuation byte", e3.BAD_PREFIX = "bad codepoint prefix", e3.OVERRUN = "string overrun", e3.MISSING_CONTINUE = "missing continuation byte", e3.OUT_OF_RANGE = "out of UTF-8 range", e3.UTF16_SURROGATE = "UTF-16 surrogate", e3.OVERLONG = "overlong representation";
        }(i || (t2.Utf8ErrorReason = i = {}));
        var f = Object.freeze({ error: function(e3, t3, r4, n2, i2) {
          return u.throwArgumentError("invalid codepoint at offset ".concat(t3, "; ").concat(e3), "bytes", r4);
        }, ignore: c, replace: function(e3, t3, r4, n2, o2) {
          return e3 === i.OVERLONG ? (n2.push(o2), 0) : (n2.push(65533), c(e3, t3, r4));
        } });
        function d(e3, t3) {
          null == t3 && (t3 = f.error), e3 = (0, o.arrayify)(e3);
          for (var r4 = [], n2 = 0; n2 < e3.length; ) {
            var a2 = e3[n2++];
            if (a2 >> 7 != 0) {
              var s2 = null, u2 = null;
              if (192 == (224 & a2))
                s2 = 1, u2 = 127;
              else if (224 == (240 & a2))
                s2 = 2, u2 = 2047;
              else {
                if (240 != (248 & a2)) {
                  n2 += t3(128 == (192 & a2) ? i.UNEXPECTED_CONTINUE : i.BAD_PREFIX, n2 - 1, e3, r4);
                  continue;
                }
                s2 = 3, u2 = 65535;
              }
              if (n2 - 1 + s2 >= e3.length)
                n2 += t3(i.OVERRUN, n2 - 1, e3, r4);
              else {
                for (var c2 = a2 & (1 << 8 - s2 - 1) - 1, d2 = 0; d2 < s2; d2++) {
                  var l2 = e3[n2];
                  if (128 != (192 & l2)) {
                    n2 += t3(i.MISSING_CONTINUE, n2, e3, r4), c2 = null;
                    break;
                  }
                  c2 = c2 << 6 | 63 & l2, n2++;
                }
                null !== c2 && (c2 > 1114111 ? n2 += t3(i.OUT_OF_RANGE, n2 - 1 - s2, e3, r4, c2) : c2 >= 55296 && c2 <= 57343 ? n2 += t3(i.UTF16_SURROGATE, n2 - 1 - s2, e3, r4, c2) : c2 <= u2 ? n2 += t3(i.OVERLONG, n2 - 1 - s2, e3, r4, c2) : r4.push(c2));
              }
            } else
              r4.push(a2);
          }
          return r4;
        }
        function l(e3) {
          var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : n.current;
          t3 != n.current && (u.checkNormalize(), e3 = e3.normalize(t3));
          for (var r4 = [], i2 = 0; i2 < e3.length; i2++) {
            var a2 = e3.charCodeAt(i2);
            if (a2 < 128)
              r4.push(a2);
            else if (a2 < 2048)
              r4.push(a2 >> 6 | 192), r4.push(63 & a2 | 128);
            else if (55296 == (64512 & a2)) {
              i2++;
              var s2 = e3.charCodeAt(i2);
              if (i2 >= e3.length || 56320 != (64512 & s2))
                throw new Error("invalid utf-8 string");
              var c2 = 65536 + ((1023 & a2) << 10) + (1023 & s2);
              r4.push(c2 >> 18 | 240), r4.push(c2 >> 12 & 63 | 128), r4.push(c2 >> 6 & 63 | 128), r4.push(63 & c2 | 128);
            } else
              r4.push(a2 >> 12 | 224), r4.push(a2 >> 6 & 63 | 128), r4.push(63 & a2 | 128);
          }
          return (0, o.arrayify)(r4);
        }
        function h(e3) {
          var t3 = "0000" + e3.toString(16);
          return "\\u" + t3.substring(t3.length - 4);
        }
        function p(e3) {
          return e3.map(function(e4) {
            return e4 <= 65535 ? String.fromCharCode(e4) : (e4 -= 65536, String.fromCharCode(55296 + (e4 >> 10 & 1023), 56320 + (1023 & e4)));
          }).join("");
        }
        t2.Utf8ErrorFuncs = f;
      }, 6783: (e2, t2) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.version = void 0, t2.version = "transactions/5.7.0";
      }, 1936: (e2, t2, r3) => {
        "use strict";
        var n = r3(3355);
        Object.defineProperty(t2, "__esModule", { value: true }), t2.TransactionTypes = void 0, t2.accessListify = E, t2.computeAddress = A, t2.parse = function(e3) {
          var t3 = (0, a.arrayify)(e3);
          if (t3[0] > 127)
            return function(e4) {
              var t4 = f.decode(e4);
              9 !== t4.length && 6 !== t4.length && y.throwArgumentError("invalid raw transaction", "rawTransaction", e4);
              var r4 = { nonce: v(t4[0]).toNumber(), gasPrice: v(t4[1]), gasLimit: v(t4[2]), to: m(t4[3]), value: v(t4[4]), data: t4[5], chainId: 0 };
              if (6 === t4.length)
                return r4;
              try {
                r4.v = o.BigNumber.from(t4[6]).toNumber();
              } catch (e5) {
                return r4;
              }
              if (r4.r = (0, a.hexZeroPad)(t4[7], 32), r4.s = (0, a.hexZeroPad)(t4[8], 32), o.BigNumber.from(r4.r).isZero() && o.BigNumber.from(r4.s).isZero())
                r4.chainId = r4.v, r4.v = 0;
              else {
                r4.chainId = Math.floor((r4.v - 35) / 2), r4.chainId < 0 && (r4.chainId = 0);
                var n2 = r4.v - 27, i2 = t4.slice(0, 6);
                0 !== r4.chainId && (i2.push((0, a.hexlify)(r4.chainId)), i2.push("0x"), i2.push("0x"), n2 -= 2 * r4.chainId + 8);
                var s2 = (0, u.keccak256)(f.encode(i2));
                try {
                  r4.from = k(s2, { r: (0, a.hexlify)(r4.r), s: (0, a.hexlify)(r4.s), recoveryParam: n2 });
                } catch (e5) {
                }
                r4.hash = (0, u.keccak256)(e4);
              }
              return r4.type = null, r4;
            }(t3);
          switch (t3[0]) {
            case 1:
              return function(e4) {
                var t4 = f.decode(e4.slice(1));
                8 !== t4.length && 11 !== t4.length && y.throwArgumentError("invalid component count for transaction type: 1", "payload", (0, a.hexlify)(e4));
                var r4 = { type: 1, chainId: v(t4[0]).toNumber(), nonce: v(t4[1]).toNumber(), gasPrice: v(t4[2]), gasLimit: v(t4[3]), to: m(t4[4]), value: v(t4[5]), data: t4[6], accessList: E(t4[7]) };
                return 8 === t4.length || (r4.hash = (0, u.keccak256)(e4), B(r4, t4.slice(8), O)), r4;
              }(t3);
            case 2:
              return function(e4) {
                var t4 = f.decode(e4.slice(1));
                9 !== t4.length && 12 !== t4.length && y.throwArgumentError("invalid component count for transaction type: 2", "payload", (0, a.hexlify)(e4));
                var r4 = v(t4[2]), n2 = v(t4[3]), i2 = { type: 2, chainId: v(t4[0]).toNumber(), nonce: v(t4[1]).toNumber(), maxPriorityFeePerGas: r4, maxFeePerGas: n2, gasPrice: null, gasLimit: v(t4[4]), to: m(t4[5]), value: v(t4[6]), data: t4[7], accessList: E(t4[8]) };
                return 9 === t4.length || (i2.hash = (0, u.keccak256)(e4), B(i2, t4.slice(9), P)), i2;
              }(t3);
          }
          return y.throwError("unsupported transaction type: ".concat(t3[0]), l.Logger.errors.UNSUPPORTED_OPERATION, { operation: "parseTransaction", transactionType: t3[0] });
        }, t2.recoverAddress = k, t2.serialize = function(e3, t3) {
          if (null == e3.type || 0 === e3.type)
            return null != e3.accessList && y.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", e3), function(e4, t4) {
              (0, c.checkProperties)(e4, w);
              var r4 = [];
              g.forEach(function(t5) {
                var n3 = e4[t5.name] || [], i3 = {};
                t5.numeric && (i3.hexPad = "left"), n3 = (0, a.arrayify)((0, a.hexlify)(n3, i3)), t5.length && n3.length !== t5.length && n3.length > 0 && y.throwArgumentError("invalid length for " + t5.name, "transaction:" + t5.name, n3), t5.maxLength && (n3 = (0, a.stripZeros)(n3)).length > t5.maxLength && y.throwArgumentError("invalid length for " + t5.name, "transaction:" + t5.name, n3), r4.push((0, a.hexlify)(n3));
              });
              var n2 = 0;
              if (null != e4.chainId ? "number" != typeof (n2 = e4.chainId) && y.throwArgumentError("invalid transaction.chainId", "transaction", e4) : t4 && !(0, a.isBytesLike)(t4) && t4.v > 28 && (n2 = Math.floor((t4.v - 35) / 2)), 0 !== n2 && (r4.push((0, a.hexlify)(n2)), r4.push("0x"), r4.push("0x")), !t4)
                return f.encode(r4);
              var i2 = (0, a.splitSignature)(t4), o2 = 27 + i2.recoveryParam;
              return 0 !== n2 ? (r4.pop(), r4.pop(), r4.pop(), o2 += 2 * n2 + 8, i2.v > 28 && i2.v !== o2 && y.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", t4)) : i2.v !== o2 && y.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", t4), r4.push((0, a.hexlify)(o2)), r4.push((0, a.stripZeros)((0, a.arrayify)(i2.r))), r4.push((0, a.stripZeros)((0, a.arrayify)(i2.s))), f.encode(r4);
            }(e3, t3);
          switch (e3.type) {
            case 1:
              return O(e3, t3);
            case 2:
              return P(e3, t3);
          }
          return y.throwError("unsupported transaction type: ".concat(e3.type), l.Logger.errors.UNSUPPORTED_OPERATION, { operation: "serializeTransaction", transactionType: e3.type });
        };
        var i = r3(7921), o = r3(4952), a = r3(908), s = r3(5465), u = r3(4642), c = r3(3694), f = function(e3, t3) {
          if (e3 && e3.__esModule)
            return e3;
          if (null === e3 || "object" !== n(e3) && "function" != typeof e3)
            return { default: e3 };
          var r4 = p(t3);
          if (r4 && r4.has(e3))
            return r4.get(e3);
          var i2 = {}, o2 = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var a2 in e3)
            if ("default" !== a2 && Object.prototype.hasOwnProperty.call(e3, a2)) {
              var s2 = o2 ? Object.getOwnPropertyDescriptor(e3, a2) : null;
              s2 && (s2.get || s2.set) ? Object.defineProperty(i2, a2, s2) : i2[a2] = e3[a2];
            }
          return i2.default = e3, r4 && r4.set(e3, i2), i2;
        }(r3(5265)), d = r3(7612), l = r3(4327), h = r3(6783);
        function p(e3) {
          if ("function" != typeof WeakMap)
            return null;
          var t3 = /* @__PURE__ */ new WeakMap(), r4 = /* @__PURE__ */ new WeakMap();
          return (p = function(e4) {
            return e4 ? r4 : t3;
          })(e3);
        }
        var b, y = new l.Logger(h.version);
        function m(e3) {
          return "0x" === e3 ? null : (0, i.getAddress)(e3);
        }
        function v(e3) {
          return "0x" === e3 ? s.Zero : o.BigNumber.from(e3);
        }
        t2.TransactionTypes = b, function(e3) {
          e3[e3.legacy = 0] = "legacy", e3[e3.eip2930 = 1] = "eip2930", e3[e3.eip1559 = 2] = "eip1559";
        }(b || (t2.TransactionTypes = b = {}));
        var g = [{ name: "nonce", maxLength: 32, numeric: true }, { name: "gasPrice", maxLength: 32, numeric: true }, { name: "gasLimit", maxLength: 32, numeric: true }, { name: "to", length: 20 }, { name: "value", maxLength: 32, numeric: true }, { name: "data" }], w = { chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, type: true, value: true };
        function A(e3) {
          var t3 = (0, d.computePublicKey)(e3);
          return (0, i.getAddress)((0, a.hexDataSlice)((0, u.keccak256)((0, a.hexDataSlice)(t3, 1)), 12));
        }
        function k(e3, t3) {
          return A((0, d.recoverPublicKey)((0, a.arrayify)(e3), t3));
        }
        function _(e3, t3) {
          var r4 = (0, a.stripZeros)(o.BigNumber.from(e3).toHexString());
          return r4.length > 32 && y.throwArgumentError("invalid length for " + t3, "transaction:" + t3, e3), r4;
        }
        function S(e3, t3) {
          return { address: (0, i.getAddress)(e3), storageKeys: (t3 || []).map(function(t4, r4) {
            return 32 !== (0, a.hexDataLength)(t4) && y.throwArgumentError("invalid access list storageKey", "accessList[".concat(e3, ":").concat(r4, "]"), t4), t4.toLowerCase();
          }) };
        }
        function E(e3) {
          if (Array.isArray(e3))
            return e3.map(function(e4, t4) {
              return Array.isArray(e4) ? (e4.length > 2 && y.throwArgumentError("access list expected to be [ address, storageKeys[] ]", "value[".concat(t4, "]"), e4), S(e4[0], e4[1])) : S(e4.address, e4.storageKeys);
            });
          var t3 = Object.keys(e3).map(function(t4) {
            var r4 = e3[t4].reduce(function(e4, t5) {
              return e4[t5] = true, e4;
            }, {});
            return S(t4, Object.keys(r4).sort());
          });
          return t3.sort(function(e4, t4) {
            return e4.address.localeCompare(t4.address);
          }), t3;
        }
        function x(e3) {
          return E(e3).map(function(e4) {
            return [e4.address, e4.storageKeys];
          });
        }
        function P(e3, t3) {
          if (null != e3.gasPrice) {
            var r4 = o.BigNumber.from(e3.gasPrice), n2 = o.BigNumber.from(e3.maxFeePerGas || 0);
            r4.eq(n2) || y.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", { gasPrice: r4, maxFeePerGas: n2 });
          }
          var s2 = [_(e3.chainId || 0, "chainId"), _(e3.nonce || 0, "nonce"), _(e3.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"), _(e3.maxFeePerGas || 0, "maxFeePerGas"), _(e3.gasLimit || 0, "gasLimit"), null != e3.to ? (0, i.getAddress)(e3.to) : "0x", _(e3.value || 0, "value"), e3.data || "0x", x(e3.accessList || [])];
          if (t3) {
            var u2 = (0, a.splitSignature)(t3);
            s2.push(_(u2.recoveryParam, "recoveryParam")), s2.push((0, a.stripZeros)(u2.r)), s2.push((0, a.stripZeros)(u2.s));
          }
          return (0, a.hexConcat)(["0x02", f.encode(s2)]);
        }
        function O(e3, t3) {
          var r4 = [_(e3.chainId || 0, "chainId"), _(e3.nonce || 0, "nonce"), _(e3.gasPrice || 0, "gasPrice"), _(e3.gasLimit || 0, "gasLimit"), null != e3.to ? (0, i.getAddress)(e3.to) : "0x", _(e3.value || 0, "value"), e3.data || "0x", x(e3.accessList || [])];
          if (t3) {
            var n2 = (0, a.splitSignature)(t3);
            r4.push(_(n2.recoveryParam, "recoveryParam")), r4.push((0, a.stripZeros)(n2.r)), r4.push((0, a.stripZeros)(n2.s));
          }
          return (0, a.hexConcat)(["0x01", f.encode(r4)]);
        }
        function B(e3, t3, r4) {
          try {
            var n2 = v(t3[0]).toNumber();
            if (0 !== n2 && 1 !== n2)
              throw new Error("bad recid");
            e3.v = n2;
          } catch (e4) {
            y.throwArgumentError("invalid v for transaction type: 1", "v", t3[0]);
          }
          e3.r = (0, a.hexZeroPad)(t3[1], 32), e3.s = (0, a.hexZeroPad)(t3[2], 32);
          try {
            var i2 = (0, u.keccak256)(r4(e3));
            e3.from = k(i2, { r: e3.r, s: e3.s, recoveryParam: e3.v });
          } catch (e4) {
          }
        }
      }, 3368: (e2, t2, r3) => {
        "use strict";
        var n, i, o = r3(8847)(r3(3355));
        void 0 === (i = "function" == typeof (n = function() {
          function e3(e4, t4) {
            if (!(e4 instanceof t4))
              throw new TypeError("Cannot call a class as a function");
          }
          function t3(e4, t4) {
            for (var r4 = 0; r4 < t4.length; r4++) {
              var n3 = t4[r4];
              n3.enumerable = n3.enumerable || false, n3.configurable = true, "value" in n3 && (n3.writable = true), Object.defineProperty(e4, n3.key, n3);
            }
          }
          function n2(e4, r4, n3) {
            return r4 && t3(e4.prototype, r4), n3 && t3(e4, n3), Object.defineProperty(e4, "prototype", { writable: false }), e4;
          }
          function i2(e4) {
            return i2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e5) {
              return e5.__proto__ || Object.getPrototypeOf(e5);
            }, i2(e4);
          }
          function a(e4, t4) {
            return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e5, t5) {
              return e5.__proto__ = t5, e5;
            }, a(e4, t4);
          }
          function s(e4) {
            if (void 0 === e4)
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return e4;
          }
          function u(e4) {
            var t4 = function() {
              if ("undefined" == typeof Reflect || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if ("function" == typeof Proxy)
                return true;
              try {
                return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                })), true;
              } catch (e5) {
                return false;
              }
            }();
            return function() {
              var r4, n3 = i2(e4);
              if (t4) {
                var a2 = i2(this).constructor;
                r4 = Reflect.construct(n3, arguments, a2);
              } else
                r4 = n3.apply(this, arguments);
              return function(e5, t5) {
                if (t5 && ("object" === (0, o.default)(t5) || "function" == typeof t5))
                  return t5;
                if (void 0 !== t5)
                  throw new TypeError("Derived constructors may only return object or undefined");
                return s(e5);
              }(this, r4);
            };
          }
          function c() {
            return c = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function(e4, t4, r4) {
              var n3 = function(e5, t5) {
                for (; !Object.prototype.hasOwnProperty.call(e5, t5) && null !== (e5 = i2(e5)); )
                  ;
                return e5;
              }(e4, t4);
              if (n3) {
                var o2 = Object.getOwnPropertyDescriptor(n3, t4);
                return o2.get ? o2.get.call(arguments.length < 3 ? e4 : r4) : o2.value;
              }
            }, c.apply(this, arguments);
          }
          var f = function() {
            function t4() {
              e3(this, t4), Object.defineProperty(this, "listeners", { value: {}, writable: true, configurable: true });
            }
            return n2(t4, [{ key: "addEventListener", value: function(e4, t5, r4) {
              e4 in this.listeners || (this.listeners[e4] = []), this.listeners[e4].push({ callback: t5, options: r4 });
            } }, { key: "removeEventListener", value: function(e4, t5) {
              if (e4 in this.listeners) {
                for (var r4 = this.listeners[e4], n3 = 0, i3 = r4.length; n3 < i3; n3++)
                  if (r4[n3].callback === t5)
                    return void r4.splice(n3, 1);
              }
            } }, { key: "dispatchEvent", value: function(e4) {
              if (e4.type in this.listeners) {
                for (var t5 = this.listeners[e4.type].slice(), r4 = 0, n3 = t5.length; r4 < n3; r4++) {
                  var i3 = t5[r4];
                  try {
                    i3.callback.call(this, e4);
                  } catch (e5) {
                    Promise.resolve().then(function() {
                      throw e5;
                    });
                  }
                  i3.options && i3.options.once && this.removeEventListener(e4.type, i3.callback);
                }
                return !e4.defaultPrevented;
              }
            } }]), t4;
          }(), d = function(t4) {
            !function(e4, t5) {
              if ("function" != typeof t5 && null !== t5)
                throw new TypeError("Super expression must either be null or a function");
              e4.prototype = Object.create(t5 && t5.prototype, { constructor: { value: e4, writable: true, configurable: true } }), Object.defineProperty(e4, "prototype", { writable: false }), t5 && a(e4, t5);
            }(o2, t4);
            var r4 = u(o2);
            function o2() {
              var t5;
              return e3(this, o2), (t5 = r4.call(this)).listeners || f.call(s(t5)), Object.defineProperty(s(t5), "aborted", { value: false, writable: true, configurable: true }), Object.defineProperty(s(t5), "onabort", { value: null, writable: true, configurable: true }), Object.defineProperty(s(t5), "reason", { value: void 0, writable: true, configurable: true }), t5;
            }
            return n2(o2, [{ key: "toString", value: function() {
              return "[object AbortSignal]";
            } }, { key: "dispatchEvent", value: function(e4) {
              "abort" === e4.type && (this.aborted = true, "function" == typeof this.onabort && this.onabort.call(this, e4)), c(i2(o2.prototype), "dispatchEvent", this).call(this, e4);
            } }]), o2;
          }(f), l = function() {
            function t4() {
              e3(this, t4), Object.defineProperty(this, "signal", { value: new d(), writable: true, configurable: true });
            }
            return n2(t4, [{ key: "abort", value: function(e4) {
              var t5;
              try {
                t5 = new Event("abort");
              } catch (e5) {
                "undefined" != typeof document ? document.createEvent ? (t5 = document.createEvent("Event")).initEvent("abort", false, false) : (t5 = document.createEventObject()).type = "abort" : t5 = { type: "abort", bubbles: false, cancelable: false };
              }
              var r4 = e4;
              if (void 0 === r4)
                if ("undefined" == typeof document)
                  (r4 = new Error("This operation was aborted")).name = "AbortError";
                else
                  try {
                    r4 = new DOMException("signal is aborted without reason");
                  } catch (e5) {
                    (r4 = new Error("This operation was aborted")).name = "AbortError";
                  }
              this.signal.reason = r4, this.signal.dispatchEvent(t5);
            } }, { key: "toString", value: function() {
              return "[object AbortController]";
            } }]), t4;
          }();
          function h(e4) {
            return e4.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL ? (console.log("__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill"), true) : "function" == typeof e4.Request && !e4.Request.prototype.hasOwnProperty("signal") || !e4.AbortController;
          }
          "undefined" != typeof Symbol && Symbol.toStringTag && (l.prototype[Symbol.toStringTag] = "AbortController", d.prototype[Symbol.toStringTag] = "AbortSignal"), function(e4) {
            if (h(e4))
              if (e4.fetch) {
                var t4 = function(e5) {
                  "function" == typeof e5 && (e5 = { fetch: e5 });
                  var t5 = e5, r5 = t5.fetch, n4 = t5.Request, i3 = void 0 === n4 ? r5.Request : n4, o2 = t5.AbortController, a2 = t5.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL, s2 = void 0 !== a2 && a2;
                  if (!h({ fetch: r5, Request: i3, AbortController: o2, __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL: s2 }))
                    return { fetch: r5, Request: u2 };
                  var u2 = i3;
                  (u2 && !u2.prototype.hasOwnProperty("signal") || s2) && ((u2 = function(e6, t6) {
                    var r6;
                    t6 && t6.signal && (r6 = t6.signal, delete t6.signal);
                    var n5 = new i3(e6, t6);
                    return r6 && Object.defineProperty(n5, "signal", { writable: false, enumerable: false, configurable: true, value: r6 }), n5;
                  }).prototype = i3.prototype);
                  var c2 = r5;
                  return { fetch: function(e6, t6) {
                    var r6 = u2 && u2.prototype.isPrototypeOf(e6) ? e6.signal : t6 ? t6.signal : void 0;
                    if (r6) {
                      var n5;
                      try {
                        n5 = new DOMException("Aborted", "AbortError");
                      } catch (e7) {
                        (n5 = new Error("Aborted")).name = "AbortError";
                      }
                      if (r6.aborted)
                        return Promise.reject(n5);
                      var i4 = new Promise(function(e7, t7) {
                        r6.addEventListener("abort", function() {
                          return t7(n5);
                        }, { once: true });
                      });
                      return t6 && t6.signal && delete t6.signal, Promise.race([i4, c2(e6, t6)]);
                    }
                    return c2(e6, t6);
                  }, Request: u2 };
                }(e4), r4 = t4.fetch, n3 = t4.Request;
                e4.fetch = r4, e4.Request = n3, Object.defineProperty(e4, "AbortController", { writable: true, enumerable: false, configurable: true, value: l }), Object.defineProperty(e4, "AbortSignal", { writable: true, enumerable: false, configurable: true, value: d });
              } else
                console.warn("fetch() is not available, cannot install abortcontroller-polyfill");
          }("undefined" != typeof self ? self : r3.g);
        }) ? n.call(t2, r3, t2, e2) : n) || (e2.exports = i);
      }, 8357: (e2, t2, r3) => {
        "use strict";
        var n = t2;
        n.bignum = r3(1734), n.define = r3(1568).define, n.base = r3(2412), n.constants = r3(9387), n.decoders = r3(1500), n.encoders = r3(7506);
      }, 1568: (e2, t2, r3) => {
        "use strict";
        var n = r3(7506), i = r3(1500), o = r3(1736);
        function a(e3, t3) {
          this.name = e3, this.body = t3, this.decoders = {}, this.encoders = {};
        }
        t2.define = function(e3, t3) {
          return new a(e3, t3);
        }, a.prototype._createNamed = function(e3) {
          var t3 = this.name;
          function r4(e4) {
            this._initNamed(e4, t3);
          }
          return o(r4, e3), r4.prototype._initNamed = function(t4, r5) {
            e3.call(this, t4, r5);
          }, new r4(this);
        }, a.prototype._getDecoder = function(e3) {
          return e3 = e3 || "der", this.decoders.hasOwnProperty(e3) || (this.decoders[e3] = this._createNamed(i[e3])), this.decoders[e3];
        }, a.prototype.decode = function(e3, t3, r4) {
          return this._getDecoder(t3).decode(e3, r4);
        }, a.prototype._getEncoder = function(e3) {
          return e3 = e3 || "der", this.encoders.hasOwnProperty(e3) || (this.encoders[e3] = this._createNamed(n[e3])), this.encoders[e3];
        }, a.prototype.encode = function(e3, t3, r4) {
          return this._getEncoder(t3).encode(e3, r4);
        };
      }, 585: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(1736), o = r3(2719).b, a = r3(1755).Buffer;
        function s(e3, t3) {
          o.call(this, t3), a.isBuffer(e3) ? (this.base = e3, this.offset = 0, this.length = e3.length) : this.error("Input not Buffer");
        }
        function u(e3, t3) {
          if (Array.isArray(e3))
            this.length = 0, this.value = e3.map(function(e4) {
              return u.isEncoderBuffer(e4) || (e4 = new u(e4, t3)), this.length += e4.length, e4;
            }, this);
          else if ("number" == typeof e3) {
            if (!(0 <= e3 && e3 <= 255))
              return t3.error("non-byte EncoderBuffer value");
            this.value = e3, this.length = 1;
          } else if ("string" == typeof e3)
            this.value = e3, this.length = a.byteLength(e3);
          else {
            if (!a.isBuffer(e3))
              return t3.error("Unsupported type: " + (0, n.default)(e3));
            this.value = e3, this.length = e3.length;
          }
        }
        i(s, o), t2.C = s, s.isDecoderBuffer = function(e3) {
          return e3 instanceof s || "object" === (0, n.default)(e3) && a.isBuffer(e3.base) && "DecoderBuffer" === e3.constructor.name && "number" == typeof e3.offset && "number" == typeof e3.length && "function" == typeof e3.save && "function" == typeof e3.restore && "function" == typeof e3.isEmpty && "function" == typeof e3.readUInt8 && "function" == typeof e3.skip && "function" == typeof e3.raw;
        }, s.prototype.save = function() {
          return { offset: this.offset, reporter: o.prototype.save.call(this) };
        }, s.prototype.restore = function(e3) {
          var t3 = new s(this.base);
          return t3.offset = e3.offset, t3.length = this.offset, this.offset = e3.offset, o.prototype.restore.call(this, e3.reporter), t3;
        }, s.prototype.isEmpty = function() {
          return this.offset === this.length;
        }, s.prototype.readUInt8 = function(e3) {
          return this.offset + 1 <= this.length ? this.base.readUInt8(this.offset++, true) : this.error(e3 || "DecoderBuffer overrun");
        }, s.prototype.skip = function(e3, t3) {
          if (!(this.offset + e3 <= this.length))
            return this.error(t3 || "DecoderBuffer overrun");
          var r4 = new s(this.base);
          return r4._reporterState = this._reporterState, r4.offset = this.offset, r4.length = this.offset + e3, this.offset += e3, r4;
        }, s.prototype.raw = function(e3) {
          return this.base.slice(e3 ? e3.offset : this.offset, this.length);
        }, t2.R = u, u.isEncoderBuffer = function(e3) {
          return e3 instanceof u || "object" === (0, n.default)(e3) && "EncoderBuffer" === e3.constructor.name && "number" == typeof e3.length && "function" == typeof e3.join;
        }, u.prototype.join = function(e3, t3) {
          return e3 || (e3 = a.alloc(this.length)), t3 || (t3 = 0), 0 === this.length || (Array.isArray(this.value) ? this.value.forEach(function(r4) {
            r4.join(e3, t3), t3 += r4.length;
          }) : ("number" == typeof this.value ? e3[t3] = this.value : "string" == typeof this.value ? e3.write(this.value, t3) : a.isBuffer(this.value) && this.value.copy(e3, t3), t3 += this.length)), e3;
        };
      }, 2412: (e2, t2, r3) => {
        "use strict";
        var n = t2;
        n.Reporter = r3(2719).b, n.DecoderBuffer = r3(585).C, n.EncoderBuffer = r3(585).R, n.Node = r3(1371);
      }, 1371: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(2719).b, o = r3(585).R, a = r3(585).C, s = r3(4504), u = ["seq", "seqof", "set", "setof", "objid", "bool", "gentime", "utctime", "null_", "enum", "int", "objDesc", "bitstr", "bmpstr", "charstr", "genstr", "graphstr", "ia5str", "iso646str", "numstr", "octstr", "printstr", "t61str", "unistr", "utf8str", "videostr"], c = ["key", "obj", "use", "optional", "explicit", "implicit", "def", "choice", "any", "contains"].concat(u);
        function f(e3, t3, r4) {
          var n2 = {};
          this._baseState = n2, n2.name = r4, n2.enc = e3, n2.parent = t3 || null, n2.children = null, n2.tag = null, n2.args = null, n2.reverseArgs = null, n2.choice = null, n2.optional = false, n2.any = false, n2.obj = false, n2.use = null, n2.useDecoder = null, n2.key = null, n2.default = null, n2.explicit = null, n2.implicit = null, n2.contains = null, n2.parent || (n2.children = [], this._wrap());
        }
        e2.exports = f;
        var d = ["enc", "parent", "children", "tag", "args", "reverseArgs", "choice", "optional", "any", "obj", "use", "alteredUse", "key", "default", "explicit", "implicit", "contains"];
        f.prototype.clone = function() {
          var e3 = this._baseState, t3 = {};
          d.forEach(function(r5) {
            t3[r5] = e3[r5];
          });
          var r4 = new this.constructor(t3.parent);
          return r4._baseState = t3, r4;
        }, f.prototype._wrap = function() {
          var e3 = this._baseState;
          c.forEach(function(t3) {
            this[t3] = function() {
              var r4 = new this.constructor(this);
              return e3.children.push(r4), r4[t3].apply(r4, arguments);
            };
          }, this);
        }, f.prototype._init = function(e3) {
          var t3 = this._baseState;
          s(null === t3.parent), e3.call(this), t3.children = t3.children.filter(function(e4) {
            return e4._baseState.parent === this;
          }, this), s.equal(t3.children.length, 1, "Root node can have only one child");
        }, f.prototype._useArgs = function(e3) {
          var t3 = this._baseState, r4 = e3.filter(function(e4) {
            return e4 instanceof this.constructor;
          }, this);
          e3 = e3.filter(function(e4) {
            return !(e4 instanceof this.constructor);
          }, this), 0 !== r4.length && (s(null === t3.children), t3.children = r4, r4.forEach(function(e4) {
            e4._baseState.parent = this;
          }, this)), 0 !== e3.length && (s(null === t3.args), t3.args = e3, t3.reverseArgs = e3.map(function(e4) {
            if ("object" !== (0, n.default)(e4) || e4.constructor !== Object)
              return e4;
            var t4 = {};
            return Object.keys(e4).forEach(function(r5) {
              r5 == (0 | r5) && (r5 |= 0);
              var n2 = e4[r5];
              t4[n2] = r5;
            }), t4;
          }));
        }, ["_peekTag", "_decodeTag", "_use", "_decodeStr", "_decodeObjid", "_decodeTime", "_decodeNull", "_decodeInt", "_decodeBool", "_decodeList", "_encodeComposite", "_encodeStr", "_encodeObjid", "_encodeTime", "_encodeNull", "_encodeInt", "_encodeBool"].forEach(function(e3) {
          f.prototype[e3] = function() {
            var t3 = this._baseState;
            throw new Error(e3 + " not implemented for encoding: " + t3.enc);
          };
        }), u.forEach(function(e3) {
          f.prototype[e3] = function() {
            var t3 = this._baseState, r4 = Array.prototype.slice.call(arguments);
            return s(null === t3.tag), t3.tag = e3, this._useArgs(r4), this;
          };
        }), f.prototype.use = function(e3) {
          s(e3);
          var t3 = this._baseState;
          return s(null === t3.use), t3.use = e3, this;
        }, f.prototype.optional = function() {
          return this._baseState.optional = true, this;
        }, f.prototype.def = function(e3) {
          var t3 = this._baseState;
          return s(null === t3.default), t3.default = e3, t3.optional = true, this;
        }, f.prototype.explicit = function(e3) {
          var t3 = this._baseState;
          return s(null === t3.explicit && null === t3.implicit), t3.explicit = e3, this;
        }, f.prototype.implicit = function(e3) {
          var t3 = this._baseState;
          return s(null === t3.explicit && null === t3.implicit), t3.implicit = e3, this;
        }, f.prototype.obj = function() {
          var e3 = this._baseState, t3 = Array.prototype.slice.call(arguments);
          return e3.obj = true, 0 !== t3.length && this._useArgs(t3), this;
        }, f.prototype.key = function(e3) {
          var t3 = this._baseState;
          return s(null === t3.key), t3.key = e3, this;
        }, f.prototype.any = function() {
          return this._baseState.any = true, this;
        }, f.prototype.choice = function(e3) {
          var t3 = this._baseState;
          return s(null === t3.choice), t3.choice = e3, this._useArgs(Object.keys(e3).map(function(t4) {
            return e3[t4];
          })), this;
        }, f.prototype.contains = function(e3) {
          var t3 = this._baseState;
          return s(null === t3.use), t3.contains = e3, this;
        }, f.prototype._decode = function(e3, t3) {
          var r4 = this._baseState;
          if (null === r4.parent)
            return e3.wrapResult(r4.children[0]._decode(e3, t3));
          var n2, i2 = r4.default, o2 = true, s2 = null;
          if (null !== r4.key && (s2 = e3.enterKey(r4.key)), r4.optional) {
            var u2 = null;
            if (null !== r4.explicit ? u2 = r4.explicit : null !== r4.implicit ? u2 = r4.implicit : null !== r4.tag && (u2 = r4.tag), null !== u2 || r4.any) {
              if (o2 = this._peekTag(e3, u2, r4.any), e3.isError(o2))
                return o2;
            } else {
              var c2 = e3.save();
              try {
                null === r4.choice ? this._decodeGeneric(r4.tag, e3, t3) : this._decodeChoice(e3, t3), o2 = true;
              } catch (e4) {
                o2 = false;
              }
              e3.restore(c2);
            }
          }
          if (r4.obj && o2 && (n2 = e3.enterObject()), o2) {
            if (null !== r4.explicit) {
              var f2 = this._decodeTag(e3, r4.explicit);
              if (e3.isError(f2))
                return f2;
              e3 = f2;
            }
            var d2 = e3.offset;
            if (null === r4.use && null === r4.choice) {
              var l;
              r4.any && (l = e3.save());
              var h = this._decodeTag(e3, null !== r4.implicit ? r4.implicit : r4.tag, r4.any);
              if (e3.isError(h))
                return h;
              r4.any ? i2 = e3.raw(l) : e3 = h;
            }
            if (t3 && t3.track && null !== r4.tag && t3.track(e3.path(), d2, e3.length, "tagged"), t3 && t3.track && null !== r4.tag && t3.track(e3.path(), e3.offset, e3.length, "content"), r4.any || (i2 = null === r4.choice ? this._decodeGeneric(r4.tag, e3, t3) : this._decodeChoice(e3, t3)), e3.isError(i2))
              return i2;
            if (r4.any || null !== r4.choice || null === r4.children || r4.children.forEach(function(r5) {
              r5._decode(e3, t3);
            }), r4.contains && ("octstr" === r4.tag || "bitstr" === r4.tag)) {
              var p = new a(i2);
              i2 = this._getUse(r4.contains, e3._reporterState.obj)._decode(p, t3);
            }
          }
          return r4.obj && o2 && (i2 = e3.leaveObject(n2)), null === r4.key || null === i2 && true !== o2 ? null !== s2 && e3.exitKey(s2) : e3.leaveKey(s2, r4.key, i2), i2;
        }, f.prototype._decodeGeneric = function(e3, t3, r4) {
          var n2 = this._baseState;
          return "seq" === e3 || "set" === e3 ? null : "seqof" === e3 || "setof" === e3 ? this._decodeList(t3, e3, n2.args[0], r4) : /str$/.test(e3) ? this._decodeStr(t3, e3, r4) : "objid" === e3 && n2.args ? this._decodeObjid(t3, n2.args[0], n2.args[1], r4) : "objid" === e3 ? this._decodeObjid(t3, null, null, r4) : "gentime" === e3 || "utctime" === e3 ? this._decodeTime(t3, e3, r4) : "null_" === e3 ? this._decodeNull(t3, r4) : "bool" === e3 ? this._decodeBool(t3, r4) : "objDesc" === e3 ? this._decodeStr(t3, e3, r4) : "int" === e3 || "enum" === e3 ? this._decodeInt(t3, n2.args && n2.args[0], r4) : null !== n2.use ? this._getUse(n2.use, t3._reporterState.obj)._decode(t3, r4) : t3.error("unknown tag: " + e3);
        }, f.prototype._getUse = function(e3, t3) {
          var r4 = this._baseState;
          return r4.useDecoder = this._use(e3, t3), s(null === r4.useDecoder._baseState.parent), r4.useDecoder = r4.useDecoder._baseState.children[0], r4.implicit !== r4.useDecoder._baseState.implicit && (r4.useDecoder = r4.useDecoder.clone(), r4.useDecoder._baseState.implicit = r4.implicit), r4.useDecoder;
        }, f.prototype._decodeChoice = function(e3, t3) {
          var r4 = this._baseState, n2 = null, i2 = false;
          return Object.keys(r4.choice).some(function(o2) {
            var a2 = e3.save(), s2 = r4.choice[o2];
            try {
              var u2 = s2._decode(e3, t3);
              if (e3.isError(u2))
                return false;
              n2 = { type: o2, value: u2 }, i2 = true;
            } catch (t4) {
              return e3.restore(a2), false;
            }
            return true;
          }, this), i2 ? n2 : e3.error("Choice not matched");
        }, f.prototype._createEncoderBuffer = function(e3) {
          return new o(e3, this.reporter);
        }, f.prototype._encode = function(e3, t3, r4) {
          var n2 = this._baseState;
          if (null === n2.default || n2.default !== e3) {
            var i2 = this._encodeValue(e3, t3, r4);
            if (void 0 !== i2 && !this._skipDefault(i2, t3, r4))
              return i2;
          }
        }, f.prototype._encodeValue = function(e3, t3, r4) {
          var o2 = this._baseState;
          if (null === o2.parent)
            return o2.children[0]._encode(e3, t3 || new i());
          var a2 = null;
          if (this.reporter = t3, o2.optional && void 0 === e3) {
            if (null === o2.default)
              return;
            e3 = o2.default;
          }
          var s2 = null, u2 = false;
          if (o2.any)
            a2 = this._createEncoderBuffer(e3);
          else if (o2.choice)
            a2 = this._encodeChoice(e3, t3);
          else if (o2.contains)
            s2 = this._getUse(o2.contains, r4)._encode(e3, t3), u2 = true;
          else if (o2.children)
            s2 = o2.children.map(function(r5) {
              if ("null_" === r5._baseState.tag)
                return r5._encode(null, t3, e3);
              if (null === r5._baseState.key)
                return t3.error("Child should have a key");
              var i2 = t3.enterKey(r5._baseState.key);
              if ("object" !== (0, n.default)(e3))
                return t3.error("Child expected, but input is not object");
              var o3 = r5._encode(e3[r5._baseState.key], t3, e3);
              return t3.leaveKey(i2), o3;
            }, this).filter(function(e4) {
              return e4;
            }), s2 = this._createEncoderBuffer(s2);
          else if ("seqof" === o2.tag || "setof" === o2.tag) {
            if (!o2.args || 1 !== o2.args.length)
              return t3.error("Too many args for : " + o2.tag);
            if (!Array.isArray(e3))
              return t3.error("seqof/setof, but data is not Array");
            var c2 = this.clone();
            c2._baseState.implicit = null, s2 = this._createEncoderBuffer(e3.map(function(r5) {
              var n2 = this._baseState;
              return this._getUse(n2.args[0], e3)._encode(r5, t3);
            }, c2));
          } else
            null !== o2.use ? a2 = this._getUse(o2.use, r4)._encode(e3, t3) : (s2 = this._encodePrimitive(o2.tag, e3), u2 = true);
          if (!o2.any && null === o2.choice) {
            var f2 = null !== o2.implicit ? o2.implicit : o2.tag, d2 = null === o2.implicit ? "universal" : "context";
            null === f2 ? null === o2.use && t3.error("Tag could be omitted only for .use()") : null === o2.use && (a2 = this._encodeComposite(f2, u2, d2, s2));
          }
          return null !== o2.explicit && (a2 = this._encodeComposite(o2.explicit, false, "context", a2)), a2;
        }, f.prototype._encodeChoice = function(e3, t3) {
          var r4 = this._baseState, n2 = r4.choice[e3.type];
          return n2 || s(false, e3.type + " not found in " + JSON.stringify(Object.keys(r4.choice))), n2._encode(e3.value, t3);
        }, f.prototype._encodePrimitive = function(e3, t3) {
          var r4 = this._baseState;
          if (/str$/.test(e3))
            return this._encodeStr(t3, e3);
          if ("objid" === e3 && r4.args)
            return this._encodeObjid(t3, r4.reverseArgs[0], r4.args[1]);
          if ("objid" === e3)
            return this._encodeObjid(t3, null, null);
          if ("gentime" === e3 || "utctime" === e3)
            return this._encodeTime(t3, e3);
          if ("null_" === e3)
            return this._encodeNull();
          if ("int" === e3 || "enum" === e3)
            return this._encodeInt(t3, r4.args && r4.reverseArgs[0]);
          if ("bool" === e3)
            return this._encodeBool(t3);
          if ("objDesc" === e3)
            return this._encodeStr(t3, e3);
          throw new Error("Unsupported tag: " + e3);
        }, f.prototype._isNumstr = function(e3) {
          return /^[0-9 ]*$/.test(e3);
        }, f.prototype._isPrintstr = function(e3) {
          return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(e3);
        };
      }, 2719: (e2, t2, r3) => {
        "use strict";
        var n = r3(1736);
        function i(e3) {
          this._reporterState = { obj: null, path: [], options: e3 || {}, errors: [] };
        }
        function o(e3, t3) {
          this.path = e3, this.rethrow(t3);
        }
        t2.b = i, i.prototype.isError = function(e3) {
          return e3 instanceof o;
        }, i.prototype.save = function() {
          var e3 = this._reporterState;
          return { obj: e3.obj, pathLen: e3.path.length };
        }, i.prototype.restore = function(e3) {
          var t3 = this._reporterState;
          t3.obj = e3.obj, t3.path = t3.path.slice(0, e3.pathLen);
        }, i.prototype.enterKey = function(e3) {
          return this._reporterState.path.push(e3);
        }, i.prototype.exitKey = function(e3) {
          var t3 = this._reporterState;
          t3.path = t3.path.slice(0, e3 - 1);
        }, i.prototype.leaveKey = function(e3, t3, r4) {
          var n2 = this._reporterState;
          this.exitKey(e3), null !== n2.obj && (n2.obj[t3] = r4);
        }, i.prototype.path = function() {
          return this._reporterState.path.join("/");
        }, i.prototype.enterObject = function() {
          var e3 = this._reporterState, t3 = e3.obj;
          return e3.obj = {}, t3;
        }, i.prototype.leaveObject = function(e3) {
          var t3 = this._reporterState, r4 = t3.obj;
          return t3.obj = e3, r4;
        }, i.prototype.error = function(e3) {
          var t3, r4 = this._reporterState, n2 = e3 instanceof o;
          if (t3 = n2 ? e3 : new o(r4.path.map(function(e4) {
            return "[" + JSON.stringify(e4) + "]";
          }).join(""), e3.message || e3, e3.stack), !r4.options.partial)
            throw t3;
          return n2 || r4.errors.push(t3), t3;
        }, i.prototype.wrapResult = function(e3) {
          var t3 = this._reporterState;
          return t3.options.partial ? { result: this.isError(e3) ? null : e3, errors: t3.errors } : e3;
        }, n(o, Error), o.prototype.rethrow = function(e3) {
          if (this.message = e3 + " at: " + (this.path || "(shallow)"), Error.captureStackTrace && Error.captureStackTrace(this, o), !this.stack)
            try {
              throw new Error(this.message);
            } catch (e4) {
              this.stack = e4.stack;
            }
          return this;
        };
      }, 6520: (e2, t2) => {
        "use strict";
        function r3(e3) {
          var t3 = {};
          return Object.keys(e3).forEach(function(r4) {
            (0 | r4) == r4 && (r4 |= 0);
            var n = e3[r4];
            t3[n] = r4;
          }), t3;
        }
        t2.tagClass = { 0: "universal", 1: "application", 2: "context", 3: "private" }, t2.tagClassByName = r3(t2.tagClass), t2.tag = { 0: "end", 1: "bool", 2: "int", 3: "bitstr", 4: "octstr", 5: "null_", 6: "objid", 7: "objDesc", 8: "external", 9: "real", 10: "enum", 11: "embed", 12: "utf8str", 13: "relativeOid", 16: "seq", 17: "set", 18: "numstr", 19: "printstr", 20: "t61str", 21: "videostr", 22: "ia5str", 23: "utctime", 24: "gentime", 25: "graphstr", 26: "iso646str", 27: "genstr", 28: "unistr", 29: "charstr", 30: "bmpstr" }, t2.tagByName = r3(t2.tag);
      }, 9387: (e2, t2, r3) => {
        "use strict";
        var n = t2;
        n._reverse = function(e3) {
          var t3 = {};
          return Object.keys(e3).forEach(function(r4) {
            (0 | r4) == r4 && (r4 |= 0);
            var n2 = e3[r4];
            t3[n2] = r4;
          }), t3;
        }, n.der = r3(6520);
      }, 2387: (e2, t2, r3) => {
        "use strict";
        var n = r3(1736), i = r3(1734), o = r3(585).C, a = r3(1371), s = r3(6520);
        function u(e3) {
          this.enc = "der", this.name = e3.name, this.entity = e3, this.tree = new c(), this.tree._init(e3.body);
        }
        function c(e3) {
          a.call(this, "der", e3);
        }
        function f(e3, t3) {
          var r4 = e3.readUInt8(t3);
          if (e3.isError(r4))
            return r4;
          var n2 = s.tagClass[r4 >> 6], i2 = 0 == (32 & r4);
          if (31 == (31 & r4)) {
            var o2 = r4;
            for (r4 = 0; 128 == (128 & o2); ) {
              if (o2 = e3.readUInt8(t3), e3.isError(o2))
                return o2;
              r4 <<= 7, r4 |= 127 & o2;
            }
          } else
            r4 &= 31;
          return { cls: n2, primitive: i2, tag: r4, tagStr: s.tag[r4] };
        }
        function d(e3, t3, r4) {
          var n2 = e3.readUInt8(r4);
          if (e3.isError(n2))
            return n2;
          if (!t3 && 128 === n2)
            return null;
          if (0 == (128 & n2))
            return n2;
          var i2 = 127 & n2;
          if (i2 > 4)
            return e3.error("length octect is too long");
          n2 = 0;
          for (var o2 = 0; o2 < i2; o2++) {
            n2 <<= 8;
            var a2 = e3.readUInt8(r4);
            if (e3.isError(a2))
              return a2;
            n2 |= a2;
          }
          return n2;
        }
        e2.exports = u, u.prototype.decode = function(e3, t3) {
          return o.isDecoderBuffer(e3) || (e3 = new o(e3, t3)), this.tree._decode(e3, t3);
        }, n(c, a), c.prototype._peekTag = function(e3, t3, r4) {
          if (e3.isEmpty())
            return false;
          var n2 = e3.save(), i2 = f(e3, 'Failed to peek tag: "' + t3 + '"');
          return e3.isError(i2) ? i2 : (e3.restore(n2), i2.tag === t3 || i2.tagStr === t3 || i2.tagStr + "of" === t3 || r4);
        }, c.prototype._decodeTag = function(e3, t3, r4) {
          var n2 = f(e3, 'Failed to decode tag of "' + t3 + '"');
          if (e3.isError(n2))
            return n2;
          var i2 = d(e3, n2.primitive, 'Failed to get length of "' + t3 + '"');
          if (e3.isError(i2))
            return i2;
          if (!r4 && n2.tag !== t3 && n2.tagStr !== t3 && n2.tagStr + "of" !== t3)
            return e3.error('Failed to match tag: "' + t3 + '"');
          if (n2.primitive || null !== i2)
            return e3.skip(i2, 'Failed to match body of: "' + t3 + '"');
          var o2 = e3.save(), a2 = this._skipUntilEnd(e3, 'Failed to skip indefinite length body: "' + this.tag + '"');
          return e3.isError(a2) ? a2 : (i2 = e3.offset - o2.offset, e3.restore(o2), e3.skip(i2, 'Failed to match body of: "' + t3 + '"'));
        }, c.prototype._skipUntilEnd = function(e3, t3) {
          for (; ; ) {
            var r4 = f(e3, t3);
            if (e3.isError(r4))
              return r4;
            var n2 = d(e3, r4.primitive, t3);
            if (e3.isError(n2))
              return n2;
            var i2;
            if (i2 = r4.primitive || null !== n2 ? e3.skip(n2) : this._skipUntilEnd(e3, t3), e3.isError(i2))
              return i2;
            if ("end" === r4.tagStr)
              break;
          }
        }, c.prototype._decodeList = function(e3, t3, r4, n2) {
          for (var i2 = []; !e3.isEmpty(); ) {
            var o2 = this._peekTag(e3, "end");
            if (e3.isError(o2))
              return o2;
            var a2 = r4.decode(e3, "der", n2);
            if (e3.isError(a2) && o2)
              break;
            i2.push(a2);
          }
          return i2;
        }, c.prototype._decodeStr = function(e3, t3) {
          if ("bitstr" === t3) {
            var r4 = e3.readUInt8();
            return e3.isError(r4) ? r4 : { unused: r4, data: e3.raw() };
          }
          if ("bmpstr" === t3) {
            var n2 = e3.raw();
            if (n2.length % 2 == 1)
              return e3.error("Decoding of string type: bmpstr length mismatch");
            for (var i2 = "", o2 = 0; o2 < n2.length / 2; o2++)
              i2 += String.fromCharCode(n2.readUInt16BE(2 * o2));
            return i2;
          }
          if ("numstr" === t3) {
            var a2 = e3.raw().toString("ascii");
            return this._isNumstr(a2) ? a2 : e3.error("Decoding of string type: numstr unsupported characters");
          }
          if ("octstr" === t3)
            return e3.raw();
          if ("objDesc" === t3)
            return e3.raw();
          if ("printstr" === t3) {
            var s2 = e3.raw().toString("ascii");
            return this._isPrintstr(s2) ? s2 : e3.error("Decoding of string type: printstr unsupported characters");
          }
          return /str$/.test(t3) ? e3.raw().toString() : e3.error("Decoding of string type: " + t3 + " unsupported");
        }, c.prototype._decodeObjid = function(e3, t3, r4) {
          for (var n2, i2 = [], o2 = 0, a2 = 0; !e3.isEmpty(); )
            o2 <<= 7, o2 |= 127 & (a2 = e3.readUInt8()), 0 == (128 & a2) && (i2.push(o2), o2 = 0);
          128 & a2 && i2.push(o2);
          var s2 = i2[0] / 40 | 0, u2 = i2[0] % 40;
          if (n2 = r4 ? i2 : [s2, u2].concat(i2.slice(1)), t3) {
            var c2 = t3[n2.join(" ")];
            void 0 === c2 && (c2 = t3[n2.join(".")]), void 0 !== c2 && (n2 = c2);
          }
          return n2;
        }, c.prototype._decodeTime = function(e3, t3) {
          var r4, n2, i2, o2, a2, s2, u2 = e3.raw().toString();
          if ("gentime" === t3)
            r4 = 0 | u2.slice(0, 4), n2 = 0 | u2.slice(4, 6), i2 = 0 | u2.slice(6, 8), o2 = 0 | u2.slice(8, 10), a2 = 0 | u2.slice(10, 12), s2 = 0 | u2.slice(12, 14);
          else {
            if ("utctime" !== t3)
              return e3.error("Decoding " + t3 + " time is not supported yet");
            r4 = 0 | u2.slice(0, 2), n2 = 0 | u2.slice(2, 4), i2 = 0 | u2.slice(4, 6), o2 = 0 | u2.slice(6, 8), a2 = 0 | u2.slice(8, 10), s2 = 0 | u2.slice(10, 12), r4 = r4 < 70 ? 2e3 + r4 : 1900 + r4;
          }
          return Date.UTC(r4, n2 - 1, i2, o2, a2, s2, 0);
        }, c.prototype._decodeNull = function() {
          return null;
        }, c.prototype._decodeBool = function(e3) {
          var t3 = e3.readUInt8();
          return e3.isError(t3) ? t3 : 0 !== t3;
        }, c.prototype._decodeInt = function(e3, t3) {
          var r4 = e3.raw(), n2 = new i(r4);
          return t3 && (n2 = t3[n2.toString(10)] || n2), n2;
        }, c.prototype._use = function(e3, t3) {
          return "function" == typeof e3 && (e3 = e3(t3)), e3._getDecoder("der").tree;
        };
      }, 1500: (e2, t2, r3) => {
        "use strict";
        var n = t2;
        n.der = r3(2387), n.pem = r3(529);
      }, 529: (e2, t2, r3) => {
        "use strict";
        var n = r3(1736), i = r3(1755).Buffer, o = r3(2387);
        function a(e3) {
          o.call(this, e3), this.enc = "pem";
        }
        n(a, o), e2.exports = a, a.prototype.decode = function(e3, t3) {
          for (var r4 = e3.toString().split(/[\r\n]+/g), n2 = t3.label.toUpperCase(), a2 = /^-----(BEGIN|END) ([^-]+)-----$/, s = -1, u = -1, c = 0; c < r4.length; c++) {
            var f = r4[c].match(a2);
            if (null !== f && f[2] === n2) {
              if (-1 !== s) {
                if ("END" !== f[1])
                  break;
                u = c;
                break;
              }
              if ("BEGIN" !== f[1])
                break;
              s = c;
            }
          }
          if (-1 === s || -1 === u)
            throw new Error("PEM section not found for: " + n2);
          var d = r4.slice(s + 1, u).join("");
          d.replace(/[^a-z0-9+/=]+/gi, "");
          var l = i.from(d, "base64");
          return o.prototype.decode.call(this, l, t3);
        };
      }, 1068: (e2, t2, r3) => {
        "use strict";
        var n = r3(1736), i = r3(1755).Buffer, o = r3(1371), a = r3(6520);
        function s(e3) {
          this.enc = "der", this.name = e3.name, this.entity = e3, this.tree = new u(), this.tree._init(e3.body);
        }
        function u(e3) {
          o.call(this, "der", e3);
        }
        function c(e3) {
          return e3 < 10 ? "0" + e3 : e3;
        }
        e2.exports = s, s.prototype.encode = function(e3, t3) {
          return this.tree._encode(e3, t3).join();
        }, n(u, o), u.prototype._encodeComposite = function(e3, t3, r4, n2) {
          var o2 = function(e4, t4, r5, n3) {
            var i2;
            if ("seqof" === e4 ? e4 = "seq" : "setof" === e4 && (e4 = "set"), a.tagByName.hasOwnProperty(e4))
              i2 = a.tagByName[e4];
            else {
              if ("number" != typeof e4 || (0 | e4) !== e4)
                return n3.error("Unknown tag: " + e4);
              i2 = e4;
            }
            return i2 >= 31 ? n3.error("Multi-octet tag encoding unsupported") : (t4 || (i2 |= 32), i2 |= a.tagClassByName[r5 || "universal"] << 6);
          }(e3, t3, r4, this.reporter);
          if (n2.length < 128) {
            var s2 = i.alloc(2);
            return s2[0] = o2, s2[1] = n2.length, this._createEncoderBuffer([s2, n2]);
          }
          for (var u2 = 1, c2 = n2.length; c2 >= 256; c2 >>= 8)
            u2++;
          var f = i.alloc(2 + u2);
          f[0] = o2, f[1] = 128 | u2;
          for (var d = 1 + u2, l = n2.length; l > 0; d--, l >>= 8)
            f[d] = 255 & l;
          return this._createEncoderBuffer([f, n2]);
        }, u.prototype._encodeStr = function(e3, t3) {
          if ("bitstr" === t3)
            return this._createEncoderBuffer([0 | e3.unused, e3.data]);
          if ("bmpstr" === t3) {
            for (var r4 = i.alloc(2 * e3.length), n2 = 0; n2 < e3.length; n2++)
              r4.writeUInt16BE(e3.charCodeAt(n2), 2 * n2);
            return this._createEncoderBuffer(r4);
          }
          return "numstr" === t3 ? this._isNumstr(e3) ? this._createEncoderBuffer(e3) : this.reporter.error("Encoding of string type: numstr supports only digits and space") : "printstr" === t3 ? this._isPrintstr(e3) ? this._createEncoderBuffer(e3) : this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark") : /str$/.test(t3) || "objDesc" === t3 ? this._createEncoderBuffer(e3) : this.reporter.error("Encoding of string type: " + t3 + " unsupported");
        }, u.prototype._encodeObjid = function(e3, t3, r4) {
          if ("string" == typeof e3) {
            if (!t3)
              return this.reporter.error("string objid given, but no values map found");
            if (!t3.hasOwnProperty(e3))
              return this.reporter.error("objid not found in values map");
            e3 = t3[e3].split(/[\s.]+/g);
            for (var n2 = 0; n2 < e3.length; n2++)
              e3[n2] |= 0;
          } else if (Array.isArray(e3)) {
            e3 = e3.slice();
            for (var o2 = 0; o2 < e3.length; o2++)
              e3[o2] |= 0;
          }
          if (!Array.isArray(e3))
            return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(e3));
          if (!r4) {
            if (e3[1] >= 40)
              return this.reporter.error("Second objid identifier OOB");
            e3.splice(0, 2, 40 * e3[0] + e3[1]);
          }
          for (var a2 = 0, s2 = 0; s2 < e3.length; s2++) {
            var u2 = e3[s2];
            for (a2++; u2 >= 128; u2 >>= 7)
              a2++;
          }
          for (var c2 = i.alloc(a2), f = c2.length - 1, d = e3.length - 1; d >= 0; d--) {
            var l = e3[d];
            for (c2[f--] = 127 & l; (l >>= 7) > 0; )
              c2[f--] = 128 | 127 & l;
          }
          return this._createEncoderBuffer(c2);
        }, u.prototype._encodeTime = function(e3, t3) {
          var r4, n2 = new Date(e3);
          return "gentime" === t3 ? r4 = [c(n2.getUTCFullYear()), c(n2.getUTCMonth() + 1), c(n2.getUTCDate()), c(n2.getUTCHours()), c(n2.getUTCMinutes()), c(n2.getUTCSeconds()), "Z"].join("") : "utctime" === t3 ? r4 = [c(n2.getUTCFullYear() % 100), c(n2.getUTCMonth() + 1), c(n2.getUTCDate()), c(n2.getUTCHours()), c(n2.getUTCMinutes()), c(n2.getUTCSeconds()), "Z"].join("") : this.reporter.error("Encoding " + t3 + " time is not supported yet"), this._encodeStr(r4, "octstr");
        }, u.prototype._encodeNull = function() {
          return this._createEncoderBuffer("");
        }, u.prototype._encodeInt = function(e3, t3) {
          if ("string" == typeof e3) {
            if (!t3)
              return this.reporter.error("String int or enum given, but no values map");
            if (!t3.hasOwnProperty(e3))
              return this.reporter.error("Values map doesn't contain: " + JSON.stringify(e3));
            e3 = t3[e3];
          }
          if ("number" != typeof e3 && !i.isBuffer(e3)) {
            var r4 = e3.toArray();
            !e3.sign && 128 & r4[0] && r4.unshift(0), e3 = i.from(r4);
          }
          if (i.isBuffer(e3)) {
            var n2 = e3.length;
            0 === e3.length && n2++;
            var o2 = i.alloc(n2);
            return e3.copy(o2), 0 === e3.length && (o2[0] = 0), this._createEncoderBuffer(o2);
          }
          if (e3 < 128)
            return this._createEncoderBuffer(e3);
          if (e3 < 256)
            return this._createEncoderBuffer([0, e3]);
          for (var a2 = 1, s2 = e3; s2 >= 256; s2 >>= 8)
            a2++;
          for (var u2 = new Array(a2), c2 = u2.length - 1; c2 >= 0; c2--)
            u2[c2] = 255 & e3, e3 >>= 8;
          return 128 & u2[0] && u2.unshift(0), this._createEncoderBuffer(i.from(u2));
        }, u.prototype._encodeBool = function(e3) {
          return this._createEncoderBuffer(e3 ? 255 : 0);
        }, u.prototype._use = function(e3, t3) {
          return "function" == typeof e3 && (e3 = e3(t3)), e3._getEncoder("der").tree;
        }, u.prototype._skipDefault = function(e3, t3, r4) {
          var n2, i2 = this._baseState;
          if (null === i2.default)
            return false;
          var o2 = e3.join();
          if (void 0 === i2.defaultBuffer && (i2.defaultBuffer = this._encodeValue(i2.default, t3, r4).join()), o2.length !== i2.defaultBuffer.length)
            return false;
          for (n2 = 0; n2 < o2.length; n2++)
            if (o2[n2] !== i2.defaultBuffer[n2])
              return false;
          return true;
        };
      }, 7506: (e2, t2, r3) => {
        "use strict";
        var n = t2;
        n.der = r3(1068), n.pem = r3(8520);
      }, 8520: (e2, t2, r3) => {
        "use strict";
        var n = r3(1736), i = r3(1068);
        function o(e3) {
          i.call(this, e3), this.enc = "pem";
        }
        n(o, i), e2.exports = o, o.prototype.encode = function(e3, t3) {
          for (var r4 = i.prototype.encode.call(this, e3).toString("base64"), n2 = ["-----BEGIN " + t3.label + "-----"], o2 = 0; o2 < r4.length; o2 += 64)
            n2.push(r4.slice(o2, o2 + 64));
          return n2.push("-----END " + t3.label + "-----"), n2.join("\n");
        };
      }, 3894: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(3103);
        function o(e3, t3) {
          if (e3 === t3)
            return 0;
          for (var r4 = e3.length, n2 = t3.length, i2 = 0, o2 = Math.min(r4, n2); i2 < o2; ++i2)
            if (e3[i2] !== t3[i2]) {
              r4 = e3[i2], n2 = t3[i2];
              break;
            }
          return r4 < n2 ? -1 : n2 < r4 ? 1 : 0;
        }
        function a(e3) {
          return r3.g.Buffer && "function" == typeof r3.g.Buffer.isBuffer ? r3.g.Buffer.isBuffer(e3) : !(null == e3 || !e3._isBuffer);
        }
        var s = r3(9954), u = Object.prototype.hasOwnProperty, c = Array.prototype.slice, f = "foo" === (function() {
        }).name;
        function d(e3) {
          return Object.prototype.toString.call(e3);
        }
        function l(e3) {
          return !a(e3) && "function" == typeof r3.g.ArrayBuffer && ("function" == typeof ArrayBuffer.isView ? ArrayBuffer.isView(e3) : !!e3 && (e3 instanceof DataView || !!(e3.buffer && e3.buffer instanceof ArrayBuffer)));
        }
        var h = e2.exports = g, p = /\s*function\s+([^\(\s]*)\s*/;
        function b(e3) {
          if (s.isFunction(e3)) {
            if (f)
              return e3.name;
            var t3 = e3.toString().match(p);
            return t3 && t3[1];
          }
        }
        function y(e3, t3) {
          return "string" == typeof e3 ? e3.length < t3 ? e3 : e3.slice(0, t3) : e3;
        }
        function m(e3) {
          if (f || !s.isFunction(e3))
            return s.inspect(e3);
          var t3 = b(e3);
          return "[Function" + (t3 ? ": " + t3 : "") + "]";
        }
        function v(e3, t3, r4, n2, i2) {
          throw new h.AssertionError({ message: r4, actual: e3, expected: t3, operator: n2, stackStartFunction: i2 });
        }
        function g(e3, t3) {
          e3 || v(e3, true, t3, "==", h.ok);
        }
        function w(e3, t3, r4, i2) {
          if (e3 === t3)
            return true;
          if (a(e3) && a(t3))
            return 0 === o(e3, t3);
          if (s.isDate(e3) && s.isDate(t3))
            return e3.getTime() === t3.getTime();
          if (s.isRegExp(e3) && s.isRegExp(t3))
            return e3.source === t3.source && e3.global === t3.global && e3.multiline === t3.multiline && e3.lastIndex === t3.lastIndex && e3.ignoreCase === t3.ignoreCase;
          if (null !== e3 && "object" === (0, n.default)(e3) || null !== t3 && "object" === (0, n.default)(t3)) {
            if (l(e3) && l(t3) && d(e3) === d(t3) && !(e3 instanceof Float32Array || e3 instanceof Float64Array))
              return 0 === o(new Uint8Array(e3.buffer), new Uint8Array(t3.buffer));
            if (a(e3) !== a(t3))
              return false;
            var u2 = (i2 = i2 || { actual: [], expected: [] }).actual.indexOf(e3);
            return -1 !== u2 && u2 === i2.expected.indexOf(t3) || (i2.actual.push(e3), i2.expected.push(t3), function(e4, t4, r5, n2) {
              if (null == e4 || null == t4)
                return false;
              if (s.isPrimitive(e4) || s.isPrimitive(t4))
                return e4 === t4;
              if (r5 && Object.getPrototypeOf(e4) !== Object.getPrototypeOf(t4))
                return false;
              var i3 = A(e4), o2 = A(t4);
              if (i3 && !o2 || !i3 && o2)
                return false;
              if (i3)
                return w(e4 = c.call(e4), t4 = c.call(t4), r5);
              var a2, u3, f2 = S(e4), d2 = S(t4);
              if (f2.length !== d2.length)
                return false;
              for (f2.sort(), d2.sort(), u3 = f2.length - 1; u3 >= 0; u3--)
                if (f2[u3] !== d2[u3])
                  return false;
              for (u3 = f2.length - 1; u3 >= 0; u3--)
                if (!w(e4[a2 = f2[u3]], t4[a2], r5, n2))
                  return false;
              return true;
            }(e3, t3, r4, i2));
          }
          return r4 ? e3 === t3 : e3 == t3;
        }
        function A(e3) {
          return "[object Arguments]" == Object.prototype.toString.call(e3);
        }
        function k(e3, t3) {
          if (!e3 || !t3)
            return false;
          if ("[object RegExp]" == Object.prototype.toString.call(t3))
            return t3.test(e3);
          try {
            if (e3 instanceof t3)
              return true;
          } catch (e4) {
          }
          return !Error.isPrototypeOf(t3) && true === t3.call({}, e3);
        }
        function _(e3, t3, r4, n2) {
          var i2;
          if ("function" != typeof t3)
            throw new TypeError('"block" argument must be a function');
          "string" == typeof r4 && (n2 = r4, r4 = null), i2 = function(e4) {
            var t4;
            try {
              e4();
            } catch (e5) {
              t4 = e5;
            }
            return t4;
          }(t3), n2 = (r4 && r4.name ? " (" + r4.name + ")." : ".") + (n2 ? " " + n2 : "."), e3 && !i2 && v(i2, r4, "Missing expected exception" + n2);
          var o2 = "string" == typeof n2, a2 = !e3 && i2 && !r4;
          if ((!e3 && s.isError(i2) && o2 && k(i2, r4) || a2) && v(i2, r4, "Got unwanted exception" + n2), e3 && i2 && r4 && !k(i2, r4) || !e3 && i2)
            throw i2;
        }
        h.AssertionError = function(e3) {
          this.name = "AssertionError", this.actual = e3.actual, this.expected = e3.expected, this.operator = e3.operator, e3.message ? (this.message = e3.message, this.generatedMessage = false) : (this.message = function(e4) {
            return y(m(e4.actual), 128) + " " + e4.operator + " " + y(m(e4.expected), 128);
          }(this), this.generatedMessage = true);
          var t3 = e3.stackStartFunction || v;
          if (Error.captureStackTrace)
            Error.captureStackTrace(this, t3);
          else {
            var r4 = new Error();
            if (r4.stack) {
              var n2 = r4.stack, i2 = b(t3), o2 = n2.indexOf("\n" + i2);
              if (o2 >= 0) {
                var a2 = n2.indexOf("\n", o2 + 1);
                n2 = n2.substring(a2 + 1);
              }
              this.stack = n2;
            }
          }
        }, s.inherits(h.AssertionError, Error), h.fail = v, h.ok = g, h.equal = function(e3, t3, r4) {
          e3 != t3 && v(e3, t3, r4, "==", h.equal);
        }, h.notEqual = function(e3, t3, r4) {
          e3 == t3 && v(e3, t3, r4, "!=", h.notEqual);
        }, h.deepEqual = function(e3, t3, r4) {
          w(e3, t3, false) || v(e3, t3, r4, "deepEqual", h.deepEqual);
        }, h.deepStrictEqual = function(e3, t3, r4) {
          w(e3, t3, true) || v(e3, t3, r4, "deepStrictEqual", h.deepStrictEqual);
        }, h.notDeepEqual = function(e3, t3, r4) {
          w(e3, t3, false) && v(e3, t3, r4, "notDeepEqual", h.notDeepEqual);
        }, h.notDeepStrictEqual = function e3(t3, r4, n2) {
          w(t3, r4, true) && v(t3, r4, n2, "notDeepStrictEqual", e3);
        }, h.strictEqual = function(e3, t3, r4) {
          e3 !== t3 && v(e3, t3, r4, "===", h.strictEqual);
        }, h.notStrictEqual = function(e3, t3, r4) {
          e3 === t3 && v(e3, t3, r4, "!==", h.notStrictEqual);
        }, h.throws = function(e3, t3, r4) {
          _(true, e3, t3, r4);
        }, h.doesNotThrow = function(e3, t3, r4) {
          _(false, e3, t3, r4);
        }, h.ifError = function(e3) {
          if (e3)
            throw e3;
        }, h.strict = i(function e3(t3, r4) {
          t3 || v(t3, true, r4, "==", e3);
        }, h, { equal: h.strictEqual, deepEqual: h.deepStrictEqual, notEqual: h.notStrictEqual, notDeepEqual: h.notDeepStrictEqual }), h.strict.strict = h.strict;
        var S = Object.keys || function(e3) {
          var t3 = [];
          for (var r4 in e3)
            u.call(e3, r4) && t3.push(r4);
          return t3;
        };
      }, 4074: (e2) => {
        "use strict";
        "function" == typeof Object.create ? e2.exports = function(e3, t2) {
          e3.super_ = t2, e3.prototype = Object.create(t2.prototype, { constructor: { value: e3, enumerable: false, writable: true, configurable: true } });
        } : e2.exports = function(e3, t2) {
          e3.super_ = t2;
          var r3 = function() {
          };
          r3.prototype = t2.prototype, e3.prototype = new r3(), e3.prototype.constructor = e3;
        };
      }, 6732: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355));
        e2.exports = function(e3) {
          return e3 && "object" === (0, n.default)(e3) && "function" == typeof e3.copy && "function" == typeof e3.fill && "function" == typeof e3.readUInt8;
        };
      }, 9954: (e2, t2, r3) => {
        "use strict";
        var n = r3(9142), i = r3(8847)(r3(3355)), o = /%[sdj%]/g;
        t2.format = function(e3) {
          if (!v(e3)) {
            for (var t3 = [], r4 = 0; r4 < arguments.length; r4++)
              t3.push(u(arguments[r4]));
            return t3.join(" ");
          }
          r4 = 1;
          for (var n2 = arguments, i2 = n2.length, a2 = String(e3).replace(o, function(e4) {
            if ("%%" === e4)
              return "%";
            if (r4 >= i2)
              return e4;
            switch (e4) {
              case "%s":
                return String(n2[r4++]);
              case "%d":
                return Number(n2[r4++]);
              case "%j":
                try {
                  return JSON.stringify(n2[r4++]);
                } catch (e5) {
                  return "[Circular]";
                }
              default:
                return e4;
            }
          }), s2 = n2[r4]; r4 < i2; s2 = n2[++r4])
            y(s2) || !A(s2) ? a2 += " " + s2 : a2 += " " + u(s2);
          return a2;
        }, t2.deprecate = function(e3, i2) {
          if (g(r3.g.process))
            return function() {
              return t2.deprecate(e3, i2).apply(this, arguments);
            };
          if (true === n.noDeprecation)
            return e3;
          var o2 = false;
          return function() {
            if (!o2) {
              if (n.throwDeprecation)
                throw new Error(i2);
              n.traceDeprecation ? console.trace(i2) : console.error(i2), o2 = true;
            }
            return e3.apply(this, arguments);
          };
        };
        var a, s = {};
        function u(e3, r4) {
          var n2 = { seen: [], stylize: f };
          return arguments.length >= 3 && (n2.depth = arguments[2]), arguments.length >= 4 && (n2.colors = arguments[3]), b(r4) ? n2.showHidden = r4 : r4 && t2._extend(n2, r4), g(n2.showHidden) && (n2.showHidden = false), g(n2.depth) && (n2.depth = 2), g(n2.colors) && (n2.colors = false), g(n2.customInspect) && (n2.customInspect = true), n2.colors && (n2.stylize = c), d(n2, e3, n2.depth);
        }
        function c(e3, t3) {
          var r4 = u.styles[t3];
          return r4 ? "\x1B[" + u.colors[r4][0] + "m" + e3 + "\x1B[" + u.colors[r4][1] + "m" : e3;
        }
        function f(e3, t3) {
          return e3;
        }
        function d(e3, r4, n2) {
          if (e3.customInspect && r4 && S(r4.inspect) && r4.inspect !== t2.inspect && (!r4.constructor || r4.constructor.prototype !== r4)) {
            var i2 = r4.inspect(n2, e3);
            return v(i2) || (i2 = d(e3, i2, n2)), i2;
          }
          var o2 = function(e4, t3) {
            if (g(t3))
              return e4.stylize("undefined", "undefined");
            if (v(t3)) {
              var r5 = "'" + JSON.stringify(t3).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
              return e4.stylize(r5, "string");
            }
            return m(t3) ? e4.stylize("" + t3, "number") : b(t3) ? e4.stylize("" + t3, "boolean") : y(t3) ? e4.stylize("null", "null") : void 0;
          }(e3, r4);
          if (o2)
            return o2;
          var a2 = Object.keys(r4), s2 = function(e4) {
            var t3 = {};
            return e4.forEach(function(e5, r5) {
              t3[e5] = true;
            }), t3;
          }(a2);
          if (e3.showHidden && (a2 = Object.getOwnPropertyNames(r4)), _(r4) && (a2.indexOf("message") >= 0 || a2.indexOf("description") >= 0))
            return l(r4);
          if (0 === a2.length) {
            if (S(r4)) {
              var u2 = r4.name ? ": " + r4.name : "";
              return e3.stylize("[Function" + u2 + "]", "special");
            }
            if (w(r4))
              return e3.stylize(RegExp.prototype.toString.call(r4), "regexp");
            if (k(r4))
              return e3.stylize(Date.prototype.toString.call(r4), "date");
            if (_(r4))
              return l(r4);
          }
          var c2, f2 = "", A2 = false, E2 = ["{", "}"];
          return p(r4) && (A2 = true, E2 = ["[", "]"]), S(r4) && (f2 = " [Function" + (r4.name ? ": " + r4.name : "") + "]"), w(r4) && (f2 = " " + RegExp.prototype.toString.call(r4)), k(r4) && (f2 = " " + Date.prototype.toUTCString.call(r4)), _(r4) && (f2 = " " + l(r4)), 0 !== a2.length || A2 && 0 != r4.length ? n2 < 0 ? w(r4) ? e3.stylize(RegExp.prototype.toString.call(r4), "regexp") : e3.stylize("[Object]", "special") : (e3.seen.push(r4), c2 = A2 ? function(e4, t3, r5, n3, i3) {
            for (var o3 = [], a3 = 0, s3 = t3.length; a3 < s3; ++a3)
              O(t3, String(a3)) ? o3.push(h(e4, t3, r5, n3, String(a3), true)) : o3.push("");
            return i3.forEach(function(i4) {
              i4.match(/^\d+$/) || o3.push(h(e4, t3, r5, n3, i4, true));
            }), o3;
          }(e3, r4, n2, s2, a2) : a2.map(function(t3) {
            return h(e3, r4, n2, s2, t3, A2);
          }), e3.seen.pop(), function(e4, t3, r5) {
            return e4.reduce(function(e5, t4) {
              return t4.indexOf("\n"), e5 + t4.replace(/\u001b\[\d\d?m/g, "").length + 1;
            }, 0) > 60 ? r5[0] + ("" === t3 ? "" : t3 + "\n ") + " " + e4.join(",\n  ") + " " + r5[1] : r5[0] + t3 + " " + e4.join(", ") + " " + r5[1];
          }(c2, f2, E2)) : E2[0] + f2 + E2[1];
        }
        function l(e3) {
          return "[" + Error.prototype.toString.call(e3) + "]";
        }
        function h(e3, t3, r4, n2, i2, o2) {
          var a2, s2, u2;
          if ((u2 = Object.getOwnPropertyDescriptor(t3, i2) || { value: t3[i2] }).get ? s2 = u2.set ? e3.stylize("[Getter/Setter]", "special") : e3.stylize("[Getter]", "special") : u2.set && (s2 = e3.stylize("[Setter]", "special")), O(n2, i2) || (a2 = "[" + i2 + "]"), s2 || (e3.seen.indexOf(u2.value) < 0 ? (s2 = y(r4) ? d(e3, u2.value, null) : d(e3, u2.value, r4 - 1)).indexOf("\n") > -1 && (s2 = o2 ? s2.split("\n").map(function(e4) {
            return "  " + e4;
          }).join("\n").substr(2) : "\n" + s2.split("\n").map(function(e4) {
            return "   " + e4;
          }).join("\n")) : s2 = e3.stylize("[Circular]", "special")), g(a2)) {
            if (o2 && i2.match(/^\d+$/))
              return s2;
            (a2 = JSON.stringify("" + i2)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (a2 = a2.substr(1, a2.length - 2), a2 = e3.stylize(a2, "name")) : (a2 = a2.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), a2 = e3.stylize(a2, "string"));
          }
          return a2 + ": " + s2;
        }
        function p(e3) {
          return Array.isArray(e3);
        }
        function b(e3) {
          return "boolean" == typeof e3;
        }
        function y(e3) {
          return null === e3;
        }
        function m(e3) {
          return "number" == typeof e3;
        }
        function v(e3) {
          return "string" == typeof e3;
        }
        function g(e3) {
          return void 0 === e3;
        }
        function w(e3) {
          return A(e3) && "[object RegExp]" === E(e3);
        }
        function A(e3) {
          return "object" === (0, i.default)(e3) && null !== e3;
        }
        function k(e3) {
          return A(e3) && "[object Date]" === E(e3);
        }
        function _(e3) {
          return A(e3) && ("[object Error]" === E(e3) || e3 instanceof Error);
        }
        function S(e3) {
          return "function" == typeof e3;
        }
        function E(e3) {
          return Object.prototype.toString.call(e3);
        }
        function x(e3) {
          return e3 < 10 ? "0" + e3.toString(10) : e3.toString(10);
        }
        t2.debuglog = function(e3) {
          if (g(a) && (a = n.env.NODE_DEBUG || ""), e3 = e3.toUpperCase(), !s[e3])
            if (new RegExp("\\b" + e3 + "\\b", "i").test(a)) {
              var r4 = n.pid;
              s[e3] = function() {
                var n2 = t2.format.apply(t2, arguments);
                console.error("%s %d: %s", e3, r4, n2);
              };
            } else
              s[e3] = function() {
              };
          return s[e3];
        }, t2.inspect = u, u.colors = { bold: [1, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], white: [37, 39], grey: [90, 39], black: [30, 39], blue: [34, 39], cyan: [36, 39], green: [32, 39], magenta: [35, 39], red: [31, 39], yellow: [33, 39] }, u.styles = { special: "cyan", number: "yellow", boolean: "yellow", undefined: "grey", null: "bold", string: "green", date: "magenta", regexp: "red" }, t2.isArray = p, t2.isBoolean = b, t2.isNull = y, t2.isNullOrUndefined = function(e3) {
          return null == e3;
        }, t2.isNumber = m, t2.isString = v, t2.isSymbol = function(e3) {
          return "symbol" === (0, i.default)(e3);
        }, t2.isUndefined = g, t2.isRegExp = w, t2.isObject = A, t2.isDate = k, t2.isError = _, t2.isFunction = S, t2.isPrimitive = function(e3) {
          return null === e3 || "boolean" == typeof e3 || "number" == typeof e3 || "string" == typeof e3 || "symbol" === (0, i.default)(e3) || void 0 === e3;
        }, t2.isBuffer = r3(6732);
        var P = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        function O(e3, t3) {
          return Object.prototype.hasOwnProperty.call(e3, t3);
        }
        t2.log = function() {
          var e3, r4;
          console.log("%s - %s", (r4 = [x((e3 = /* @__PURE__ */ new Date()).getHours()), x(e3.getMinutes()), x(e3.getSeconds())].join(":"), [e3.getDate(), P[e3.getMonth()], r4].join(" ")), t2.format.apply(t2, arguments));
        }, t2.inherits = r3(4074), t2._extend = function(e3, t3) {
          if (!t3 || !A(t3))
            return e3;
          for (var r4 = Object.keys(t3), n2 = r4.length; n2--; )
            e3[r4[n2]] = t3[r4[n2]];
          return e3;
        };
      }, 7548: (e2, t2, r3) => {
        "use strict";
        var n = r3(8850).Buffer;
        e2.exports = function(e3) {
          if (e3.length >= 255)
            throw new TypeError("Alphabet too long");
          for (var t3 = new Uint8Array(256), r4 = 0; r4 < t3.length; r4++)
            t3[r4] = 255;
          for (var i = 0; i < e3.length; i++) {
            var o = e3.charAt(i), a = o.charCodeAt(0);
            if (255 !== t3[a])
              throw new TypeError(o + " is ambiguous");
            t3[a] = i;
          }
          var s = e3.length, u = e3.charAt(0), c = Math.log(s) / Math.log(256), f = Math.log(256) / Math.log(s);
          function d(e4) {
            if ("string" != typeof e4)
              throw new TypeError("Expected String");
            if (0 === e4.length)
              return n.alloc(0);
            for (var r5 = 0, i2 = 0, o2 = 0; e4[r5] === u; )
              i2++, r5++;
            for (var a2 = (e4.length - r5) * c + 1 >>> 0, f2 = new Uint8Array(a2); e4[r5]; ) {
              var d2 = t3[e4.charCodeAt(r5)];
              if (255 === d2)
                return;
              for (var l = 0, h = a2 - 1; (0 !== d2 || l < o2) && -1 !== h; h--, l++)
                d2 += s * f2[h] >>> 0, f2[h] = d2 % 256 >>> 0, d2 = d2 / 256 >>> 0;
              if (0 !== d2)
                throw new Error("Non-zero carry");
              o2 = l, r5++;
            }
            for (var p = a2 - o2; p !== a2 && 0 === f2[p]; )
              p++;
            var b = n.allocUnsafe(i2 + (a2 - p));
            b.fill(0, 0, i2);
            for (var y = i2; p !== a2; )
              b[y++] = f2[p++];
            return b;
          }
          return { encode: function(t4) {
            if ((Array.isArray(t4) || t4 instanceof Uint8Array) && (t4 = n.from(t4)), !n.isBuffer(t4))
              throw new TypeError("Expected Buffer");
            if (0 === t4.length)
              return "";
            for (var r5 = 0, i2 = 0, o2 = 0, a2 = t4.length; o2 !== a2 && 0 === t4[o2]; )
              o2++, r5++;
            for (var c2 = (a2 - o2) * f + 1 >>> 0, d2 = new Uint8Array(c2); o2 !== a2; ) {
              for (var l = t4[o2], h = 0, p = c2 - 1; (0 !== l || h < i2) && -1 !== p; p--, h++)
                l += 256 * d2[p] >>> 0, d2[p] = l % s >>> 0, l = l / s >>> 0;
              if (0 !== l)
                throw new Error("Non-zero carry");
              i2 = h, o2++;
            }
            for (var b = c2 - i2; b !== c2 && 0 === d2[b]; )
              b++;
            for (var y = u.repeat(r5); b < c2; ++b)
              y += e3.charAt(d2[b]);
            return y;
          }, decodeUnsafe: d, decode: function(e4) {
            var t4 = d(e4);
            if (t4)
              return t4;
            throw new Error("Non-base" + s + " character");
          } };
        };
      }, 4919: (e2, t2) => {
        "use strict";
        t2.byteLength = function(e3) {
          var t3 = u(e3), r4 = t3[0], n2 = t3[1];
          return 3 * (r4 + n2) / 4 - n2;
        }, t2.toByteArray = function(e3) {
          var t3, r4, o2 = u(e3), a2 = o2[0], s2 = o2[1], c2 = new i(function(e4, t4, r5) {
            return 3 * (t4 + r5) / 4 - r5;
          }(0, a2, s2)), f = 0, d = s2 > 0 ? a2 - 4 : a2;
          for (r4 = 0; r4 < d; r4 += 4)
            t3 = n[e3.charCodeAt(r4)] << 18 | n[e3.charCodeAt(r4 + 1)] << 12 | n[e3.charCodeAt(r4 + 2)] << 6 | n[e3.charCodeAt(r4 + 3)], c2[f++] = t3 >> 16 & 255, c2[f++] = t3 >> 8 & 255, c2[f++] = 255 & t3;
          return 2 === s2 && (t3 = n[e3.charCodeAt(r4)] << 2 | n[e3.charCodeAt(r4 + 1)] >> 4, c2[f++] = 255 & t3), 1 === s2 && (t3 = n[e3.charCodeAt(r4)] << 10 | n[e3.charCodeAt(r4 + 1)] << 4 | n[e3.charCodeAt(r4 + 2)] >> 2, c2[f++] = t3 >> 8 & 255, c2[f++] = 255 & t3), c2;
        }, t2.fromByteArray = function(e3) {
          for (var t3, n2 = e3.length, i2 = n2 % 3, o2 = [], a2 = 16383, s2 = 0, u2 = n2 - i2; s2 < u2; s2 += a2)
            o2.push(c(e3, s2, s2 + a2 > u2 ? u2 : s2 + a2));
          return 1 === i2 ? (t3 = e3[n2 - 1], o2.push(r3[t3 >> 2] + r3[t3 << 4 & 63] + "==")) : 2 === i2 && (t3 = (e3[n2 - 2] << 8) + e3[n2 - 1], o2.push(r3[t3 >> 10] + r3[t3 >> 4 & 63] + r3[t3 << 2 & 63] + "=")), o2.join("");
        };
        for (var r3 = [], n = [], i = "undefined" != typeof Uint8Array ? Uint8Array : Array, o = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = 0, s = o.length; a < s; ++a)
          r3[a] = o[a], n[o.charCodeAt(a)] = a;
        function u(e3) {
          var t3 = e3.length;
          if (t3 % 4 > 0)
            throw new Error("Invalid string. Length must be a multiple of 4");
          var r4 = e3.indexOf("=");
          return -1 === r4 && (r4 = t3), [r4, r4 === t3 ? 0 : 4 - r4 % 4];
        }
        function c(e3, t3, n2) {
          for (var i2, o2, a2 = [], s2 = t3; s2 < n2; s2 += 3)
            i2 = (e3[s2] << 16 & 16711680) + (e3[s2 + 1] << 8 & 65280) + (255 & e3[s2 + 2]), a2.push(r3[(o2 = i2) >> 18 & 63] + r3[o2 >> 12 & 63] + r3[o2 >> 6 & 63] + r3[63 & o2]);
          return a2.join("");
        }
        n["-".charCodeAt(0)] = 62, n["_".charCodeAt(0)] = 63;
      }, 1734: (e2, t2, r3) => {
        "use strict";
        e2 = r3.nmd(e2);
        var n = r3(8847)(r3(3355));
        !function(e3, t3) {
          function i(e4, t4) {
            if (!e4)
              throw new Error(t4 || "Assertion failed");
          }
          function o(e4, t4) {
            e4.super_ = t4;
            var r4 = function() {
            };
            r4.prototype = t4.prototype, e4.prototype = new r4(), e4.prototype.constructor = e4;
          }
          function a(e4, t4, r4) {
            if (a.isBN(e4))
              return e4;
            this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== e4 && ("le" !== t4 && "be" !== t4 || (r4 = t4, t4 = 10), this._init(e4 || 0, t4 || 10, r4 || "be"));
          }
          var s;
          "object" === (0, n.default)(e3) ? e3.exports = a : (void 0).BN = a, a.BN = a, a.wordSize = 26;
          try {
            s = "undefined" != typeof window && void 0 !== window.Buffer ? window.Buffer : r3(9033).Buffer;
          } catch (e4) {
          }
          function u(e4, t4) {
            var r4 = e4.charCodeAt(t4);
            return r4 >= 48 && r4 <= 57 ? r4 - 48 : r4 >= 65 && r4 <= 70 ? r4 - 55 : r4 >= 97 && r4 <= 102 ? r4 - 87 : void i(false, "Invalid character in " + e4);
          }
          function c(e4, t4, r4) {
            var n2 = u(e4, r4);
            return r4 - 1 >= t4 && (n2 |= u(e4, r4 - 1) << 4), n2;
          }
          function f(e4, t4, r4, n2) {
            for (var o2 = 0, a2 = 0, s2 = Math.min(e4.length, r4), u2 = t4; u2 < s2; u2++) {
              var c2 = e4.charCodeAt(u2) - 48;
              o2 *= n2, a2 = c2 >= 49 ? c2 - 49 + 10 : c2 >= 17 ? c2 - 17 + 10 : c2, i(c2 >= 0 && a2 < n2, "Invalid character"), o2 += a2;
            }
            return o2;
          }
          function d(e4, t4) {
            e4.words = t4.words, e4.length = t4.length, e4.negative = t4.negative, e4.red = t4.red;
          }
          if (a.isBN = function(e4) {
            return e4 instanceof a || null !== e4 && "object" === (0, n.default)(e4) && e4.constructor.wordSize === a.wordSize && Array.isArray(e4.words);
          }, a.max = function(e4, t4) {
            return e4.cmp(t4) > 0 ? e4 : t4;
          }, a.min = function(e4, t4) {
            return e4.cmp(t4) < 0 ? e4 : t4;
          }, a.prototype._init = function(e4, t4, r4) {
            if ("number" == typeof e4)
              return this._initNumber(e4, t4, r4);
            if ("object" === (0, n.default)(e4))
              return this._initArray(e4, t4, r4);
            "hex" === t4 && (t4 = 16), i(t4 === (0 | t4) && t4 >= 2 && t4 <= 36);
            var o2 = 0;
            "-" === (e4 = e4.toString().replace(/\s+/g, ""))[0] && (o2++, this.negative = 1), o2 < e4.length && (16 === t4 ? this._parseHex(e4, o2, r4) : (this._parseBase(e4, t4, o2), "le" === r4 && this._initArray(this.toArray(), t4, r4)));
          }, a.prototype._initNumber = function(e4, t4, r4) {
            e4 < 0 && (this.negative = 1, e4 = -e4), e4 < 67108864 ? (this.words = [67108863 & e4], this.length = 1) : e4 < 4503599627370496 ? (this.words = [67108863 & e4, e4 / 67108864 & 67108863], this.length = 2) : (i(e4 < 9007199254740992), this.words = [67108863 & e4, e4 / 67108864 & 67108863, 1], this.length = 3), "le" === r4 && this._initArray(this.toArray(), t4, r4);
          }, a.prototype._initArray = function(e4, t4, r4) {
            if (i("number" == typeof e4.length), e4.length <= 0)
              return this.words = [0], this.length = 1, this;
            this.length = Math.ceil(e4.length / 3), this.words = new Array(this.length);
            for (var n2 = 0; n2 < this.length; n2++)
              this.words[n2] = 0;
            var o2, a2, s2 = 0;
            if ("be" === r4)
              for (n2 = e4.length - 1, o2 = 0; n2 >= 0; n2 -= 3)
                a2 = e4[n2] | e4[n2 - 1] << 8 | e4[n2 - 2] << 16, this.words[o2] |= a2 << s2 & 67108863, this.words[o2 + 1] = a2 >>> 26 - s2 & 67108863, (s2 += 24) >= 26 && (s2 -= 26, o2++);
            else if ("le" === r4)
              for (n2 = 0, o2 = 0; n2 < e4.length; n2 += 3)
                a2 = e4[n2] | e4[n2 + 1] << 8 | e4[n2 + 2] << 16, this.words[o2] |= a2 << s2 & 67108863, this.words[o2 + 1] = a2 >>> 26 - s2 & 67108863, (s2 += 24) >= 26 && (s2 -= 26, o2++);
            return this._strip();
          }, a.prototype._parseHex = function(e4, t4, r4) {
            this.length = Math.ceil((e4.length - t4) / 6), this.words = new Array(this.length);
            for (var n2 = 0; n2 < this.length; n2++)
              this.words[n2] = 0;
            var i2, o2 = 0, a2 = 0;
            if ("be" === r4)
              for (n2 = e4.length - 1; n2 >= t4; n2 -= 2)
                i2 = c(e4, t4, n2) << o2, this.words[a2] |= 67108863 & i2, o2 >= 18 ? (o2 -= 18, a2 += 1, this.words[a2] |= i2 >>> 26) : o2 += 8;
            else
              for (n2 = (e4.length - t4) % 2 == 0 ? t4 + 1 : t4; n2 < e4.length; n2 += 2)
                i2 = c(e4, t4, n2) << o2, this.words[a2] |= 67108863 & i2, o2 >= 18 ? (o2 -= 18, a2 += 1, this.words[a2] |= i2 >>> 26) : o2 += 8;
            this._strip();
          }, a.prototype._parseBase = function(e4, t4, r4) {
            this.words = [0], this.length = 1;
            for (var n2 = 0, i2 = 1; i2 <= 67108863; i2 *= t4)
              n2++;
            n2--, i2 = i2 / t4 | 0;
            for (var o2 = e4.length - r4, a2 = o2 % n2, s2 = Math.min(o2, o2 - a2) + r4, u2 = 0, c2 = r4; c2 < s2; c2 += n2)
              u2 = f(e4, c2, c2 + n2, t4), this.imuln(i2), this.words[0] + u2 < 67108864 ? this.words[0] += u2 : this._iaddn(u2);
            if (0 !== a2) {
              var d2 = 1;
              for (u2 = f(e4, c2, e4.length, t4), c2 = 0; c2 < a2; c2++)
                d2 *= t4;
              this.imuln(d2), this.words[0] + u2 < 67108864 ? this.words[0] += u2 : this._iaddn(u2);
            }
            this._strip();
          }, a.prototype.copy = function(e4) {
            e4.words = new Array(this.length);
            for (var t4 = 0; t4 < this.length; t4++)
              e4.words[t4] = this.words[t4];
            e4.length = this.length, e4.negative = this.negative, e4.red = this.red;
          }, a.prototype._move = function(e4) {
            d(e4, this);
          }, a.prototype.clone = function() {
            var e4 = new a(null);
            return this.copy(e4), e4;
          }, a.prototype._expand = function(e4) {
            for (; this.length < e4; )
              this.words[this.length++] = 0;
            return this;
          }, a.prototype._strip = function() {
            for (; this.length > 1 && 0 === this.words[this.length - 1]; )
              this.length--;
            return this._normSign();
          }, a.prototype._normSign = function() {
            return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
          }, "undefined" != typeof Symbol && "function" == typeof Symbol.for)
            try {
              a.prototype[Symbol.for("nodejs.util.inspect.custom")] = l;
            } catch (e4) {
              a.prototype.inspect = l;
            }
          else
            a.prototype.inspect = l;
          function l() {
            return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
          }
          var h = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], p = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], b = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
          function y(e4, t4, r4) {
            r4.negative = t4.negative ^ e4.negative;
            var n2 = e4.length + t4.length | 0;
            r4.length = n2, n2 = n2 - 1 | 0;
            var i2 = 0 | e4.words[0], o2 = 0 | t4.words[0], a2 = i2 * o2, s2 = 67108863 & a2, u2 = a2 / 67108864 | 0;
            r4.words[0] = s2;
            for (var c2 = 1; c2 < n2; c2++) {
              for (var f2 = u2 >>> 26, d2 = 67108863 & u2, l2 = Math.min(c2, t4.length - 1), h2 = Math.max(0, c2 - e4.length + 1); h2 <= l2; h2++) {
                var p2 = c2 - h2 | 0;
                f2 += (a2 = (i2 = 0 | e4.words[p2]) * (o2 = 0 | t4.words[h2]) + d2) / 67108864 | 0, d2 = 67108863 & a2;
              }
              r4.words[c2] = 0 | d2, u2 = 0 | f2;
            }
            return 0 !== u2 ? r4.words[c2] = 0 | u2 : r4.length--, r4._strip();
          }
          a.prototype.toString = function(e4, t4) {
            var r4;
            if (t4 = 0 | t4 || 1, 16 === (e4 = e4 || 10) || "hex" === e4) {
              r4 = "";
              for (var n2 = 0, o2 = 0, a2 = 0; a2 < this.length; a2++) {
                var s2 = this.words[a2], u2 = (16777215 & (s2 << n2 | o2)).toString(16);
                o2 = s2 >>> 24 - n2 & 16777215, (n2 += 2) >= 26 && (n2 -= 26, a2--), r4 = 0 !== o2 || a2 !== this.length - 1 ? h[6 - u2.length] + u2 + r4 : u2 + r4;
              }
              for (0 !== o2 && (r4 = o2.toString(16) + r4); r4.length % t4 != 0; )
                r4 = "0" + r4;
              return 0 !== this.negative && (r4 = "-" + r4), r4;
            }
            if (e4 === (0 | e4) && e4 >= 2 && e4 <= 36) {
              var c2 = p[e4], f2 = b[e4];
              r4 = "";
              var d2 = this.clone();
              for (d2.negative = 0; !d2.isZero(); ) {
                var l2 = d2.modrn(f2).toString(e4);
                r4 = (d2 = d2.idivn(f2)).isZero() ? l2 + r4 : h[c2 - l2.length] + l2 + r4;
              }
              for (this.isZero() && (r4 = "0" + r4); r4.length % t4 != 0; )
                r4 = "0" + r4;
              return 0 !== this.negative && (r4 = "-" + r4), r4;
            }
            i(false, "Base should be between 2 and 36");
          }, a.prototype.toNumber = function() {
            var e4 = this.words[0];
            return 2 === this.length ? e4 += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? e4 += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && i(false, "Number can only safely store up to 53 bits"), 0 !== this.negative ? -e4 : e4;
          }, a.prototype.toJSON = function() {
            return this.toString(16, 2);
          }, s && (a.prototype.toBuffer = function(e4, t4) {
            return this.toArrayLike(s, e4, t4);
          }), a.prototype.toArray = function(e4, t4) {
            return this.toArrayLike(Array, e4, t4);
          }, a.prototype.toArrayLike = function(e4, t4, r4) {
            this._strip();
            var n2 = this.byteLength(), o2 = r4 || Math.max(1, n2);
            i(n2 <= o2, "byte array longer than desired length"), i(o2 > 0, "Requested array length <= 0");
            var a2 = function(e5, t5) {
              return e5.allocUnsafe ? e5.allocUnsafe(t5) : new e5(t5);
            }(e4, o2);
            return this["_toArrayLike" + ("le" === t4 ? "LE" : "BE")](a2, n2), a2;
          }, a.prototype._toArrayLikeLE = function(e4, t4) {
            for (var r4 = 0, n2 = 0, i2 = 0, o2 = 0; i2 < this.length; i2++) {
              var a2 = this.words[i2] << o2 | n2;
              e4[r4++] = 255 & a2, r4 < e4.length && (e4[r4++] = a2 >> 8 & 255), r4 < e4.length && (e4[r4++] = a2 >> 16 & 255), 6 === o2 ? (r4 < e4.length && (e4[r4++] = a2 >> 24 & 255), n2 = 0, o2 = 0) : (n2 = a2 >>> 24, o2 += 2);
            }
            if (r4 < e4.length)
              for (e4[r4++] = n2; r4 < e4.length; )
                e4[r4++] = 0;
          }, a.prototype._toArrayLikeBE = function(e4, t4) {
            for (var r4 = e4.length - 1, n2 = 0, i2 = 0, o2 = 0; i2 < this.length; i2++) {
              var a2 = this.words[i2] << o2 | n2;
              e4[r4--] = 255 & a2, r4 >= 0 && (e4[r4--] = a2 >> 8 & 255), r4 >= 0 && (e4[r4--] = a2 >> 16 & 255), 6 === o2 ? (r4 >= 0 && (e4[r4--] = a2 >> 24 & 255), n2 = 0, o2 = 0) : (n2 = a2 >>> 24, o2 += 2);
            }
            if (r4 >= 0)
              for (e4[r4--] = n2; r4 >= 0; )
                e4[r4--] = 0;
          }, Math.clz32 ? a.prototype._countBits = function(e4) {
            return 32 - Math.clz32(e4);
          } : a.prototype._countBits = function(e4) {
            var t4 = e4, r4 = 0;
            return t4 >= 4096 && (r4 += 13, t4 >>>= 13), t4 >= 64 && (r4 += 7, t4 >>>= 7), t4 >= 8 && (r4 += 4, t4 >>>= 4), t4 >= 2 && (r4 += 2, t4 >>>= 2), r4 + t4;
          }, a.prototype._zeroBits = function(e4) {
            if (0 === e4)
              return 26;
            var t4 = e4, r4 = 0;
            return 0 == (8191 & t4) && (r4 += 13, t4 >>>= 13), 0 == (127 & t4) && (r4 += 7, t4 >>>= 7), 0 == (15 & t4) && (r4 += 4, t4 >>>= 4), 0 == (3 & t4) && (r4 += 2, t4 >>>= 2), 0 == (1 & t4) && r4++, r4;
          }, a.prototype.bitLength = function() {
            var e4 = this.words[this.length - 1], t4 = this._countBits(e4);
            return 26 * (this.length - 1) + t4;
          }, a.prototype.zeroBits = function() {
            if (this.isZero())
              return 0;
            for (var e4 = 0, t4 = 0; t4 < this.length; t4++) {
              var r4 = this._zeroBits(this.words[t4]);
              if (e4 += r4, 26 !== r4)
                break;
            }
            return e4;
          }, a.prototype.byteLength = function() {
            return Math.ceil(this.bitLength() / 8);
          }, a.prototype.toTwos = function(e4) {
            return 0 !== this.negative ? this.abs().inotn(e4).iaddn(1) : this.clone();
          }, a.prototype.fromTwos = function(e4) {
            return this.testn(e4 - 1) ? this.notn(e4).iaddn(1).ineg() : this.clone();
          }, a.prototype.isNeg = function() {
            return 0 !== this.negative;
          }, a.prototype.neg = function() {
            return this.clone().ineg();
          }, a.prototype.ineg = function() {
            return this.isZero() || (this.negative ^= 1), this;
          }, a.prototype.iuor = function(e4) {
            for (; this.length < e4.length; )
              this.words[this.length++] = 0;
            for (var t4 = 0; t4 < e4.length; t4++)
              this.words[t4] = this.words[t4] | e4.words[t4];
            return this._strip();
          }, a.prototype.ior = function(e4) {
            return i(0 == (this.negative | e4.negative)), this.iuor(e4);
          }, a.prototype.or = function(e4) {
            return this.length > e4.length ? this.clone().ior(e4) : e4.clone().ior(this);
          }, a.prototype.uor = function(e4) {
            return this.length > e4.length ? this.clone().iuor(e4) : e4.clone().iuor(this);
          }, a.prototype.iuand = function(e4) {
            var t4;
            t4 = this.length > e4.length ? e4 : this;
            for (var r4 = 0; r4 < t4.length; r4++)
              this.words[r4] = this.words[r4] & e4.words[r4];
            return this.length = t4.length, this._strip();
          }, a.prototype.iand = function(e4) {
            return i(0 == (this.negative | e4.negative)), this.iuand(e4);
          }, a.prototype.and = function(e4) {
            return this.length > e4.length ? this.clone().iand(e4) : e4.clone().iand(this);
          }, a.prototype.uand = function(e4) {
            return this.length > e4.length ? this.clone().iuand(e4) : e4.clone().iuand(this);
          }, a.prototype.iuxor = function(e4) {
            var t4, r4;
            this.length > e4.length ? (t4 = this, r4 = e4) : (t4 = e4, r4 = this);
            for (var n2 = 0; n2 < r4.length; n2++)
              this.words[n2] = t4.words[n2] ^ r4.words[n2];
            if (this !== t4)
              for (; n2 < t4.length; n2++)
                this.words[n2] = t4.words[n2];
            return this.length = t4.length, this._strip();
          }, a.prototype.ixor = function(e4) {
            return i(0 == (this.negative | e4.negative)), this.iuxor(e4);
          }, a.prototype.xor = function(e4) {
            return this.length > e4.length ? this.clone().ixor(e4) : e4.clone().ixor(this);
          }, a.prototype.uxor = function(e4) {
            return this.length > e4.length ? this.clone().iuxor(e4) : e4.clone().iuxor(this);
          }, a.prototype.inotn = function(e4) {
            i("number" == typeof e4 && e4 >= 0);
            var t4 = 0 | Math.ceil(e4 / 26), r4 = e4 % 26;
            this._expand(t4), r4 > 0 && t4--;
            for (var n2 = 0; n2 < t4; n2++)
              this.words[n2] = 67108863 & ~this.words[n2];
            return r4 > 0 && (this.words[n2] = ~this.words[n2] & 67108863 >> 26 - r4), this._strip();
          }, a.prototype.notn = function(e4) {
            return this.clone().inotn(e4);
          }, a.prototype.setn = function(e4, t4) {
            i("number" == typeof e4 && e4 >= 0);
            var r4 = e4 / 26 | 0, n2 = e4 % 26;
            return this._expand(r4 + 1), this.words[r4] = t4 ? this.words[r4] | 1 << n2 : this.words[r4] & ~(1 << n2), this._strip();
          }, a.prototype.iadd = function(e4) {
            var t4, r4, n2;
            if (0 !== this.negative && 0 === e4.negative)
              return this.negative = 0, t4 = this.isub(e4), this.negative ^= 1, this._normSign();
            if (0 === this.negative && 0 !== e4.negative)
              return e4.negative = 0, t4 = this.isub(e4), e4.negative = 1, t4._normSign();
            this.length > e4.length ? (r4 = this, n2 = e4) : (r4 = e4, n2 = this);
            for (var i2 = 0, o2 = 0; o2 < n2.length; o2++)
              t4 = (0 | r4.words[o2]) + (0 | n2.words[o2]) + i2, this.words[o2] = 67108863 & t4, i2 = t4 >>> 26;
            for (; 0 !== i2 && o2 < r4.length; o2++)
              t4 = (0 | r4.words[o2]) + i2, this.words[o2] = 67108863 & t4, i2 = t4 >>> 26;
            if (this.length = r4.length, 0 !== i2)
              this.words[this.length] = i2, this.length++;
            else if (r4 !== this)
              for (; o2 < r4.length; o2++)
                this.words[o2] = r4.words[o2];
            return this;
          }, a.prototype.add = function(e4) {
            var t4;
            return 0 !== e4.negative && 0 === this.negative ? (e4.negative = 0, t4 = this.sub(e4), e4.negative ^= 1, t4) : 0 === e4.negative && 0 !== this.negative ? (this.negative = 0, t4 = e4.sub(this), this.negative = 1, t4) : this.length > e4.length ? this.clone().iadd(e4) : e4.clone().iadd(this);
          }, a.prototype.isub = function(e4) {
            if (0 !== e4.negative) {
              e4.negative = 0;
              var t4 = this.iadd(e4);
              return e4.negative = 1, t4._normSign();
            }
            if (0 !== this.negative)
              return this.negative = 0, this.iadd(e4), this.negative = 1, this._normSign();
            var r4, n2, i2 = this.cmp(e4);
            if (0 === i2)
              return this.negative = 0, this.length = 1, this.words[0] = 0, this;
            i2 > 0 ? (r4 = this, n2 = e4) : (r4 = e4, n2 = this);
            for (var o2 = 0, a2 = 0; a2 < n2.length; a2++)
              o2 = (t4 = (0 | r4.words[a2]) - (0 | n2.words[a2]) + o2) >> 26, this.words[a2] = 67108863 & t4;
            for (; 0 !== o2 && a2 < r4.length; a2++)
              o2 = (t4 = (0 | r4.words[a2]) + o2) >> 26, this.words[a2] = 67108863 & t4;
            if (0 === o2 && a2 < r4.length && r4 !== this)
              for (; a2 < r4.length; a2++)
                this.words[a2] = r4.words[a2];
            return this.length = Math.max(this.length, a2), r4 !== this && (this.negative = 1), this._strip();
          }, a.prototype.sub = function(e4) {
            return this.clone().isub(e4);
          };
          var m = function(e4, t4, r4) {
            var n2, i2, o2, a2 = e4.words, s2 = t4.words, u2 = r4.words, c2 = 0, f2 = 0 | a2[0], d2 = 8191 & f2, l2 = f2 >>> 13, h2 = 0 | a2[1], p2 = 8191 & h2, b2 = h2 >>> 13, y2 = 0 | a2[2], m2 = 8191 & y2, v2 = y2 >>> 13, g2 = 0 | a2[3], w2 = 8191 & g2, A2 = g2 >>> 13, k2 = 0 | a2[4], _2 = 8191 & k2, S2 = k2 >>> 13, E2 = 0 | a2[5], x2 = 8191 & E2, P2 = E2 >>> 13, O2 = 0 | a2[6], B = 8191 & O2, T = O2 >>> 13, C = 0 | a2[7], I = 8191 & C, M = C >>> 13, U = 0 | a2[8], R = 8191 & U, j = U >>> 13, N = 0 | a2[9], F = 8191 & N, L = N >>> 13, D = 0 | s2[0], H = 8191 & D, q = D >>> 13, z = 0 | s2[1], G = 8191 & z, K = z >>> 13, V = 0 | s2[2], J = 8191 & V, W = V >>> 13, Y = 0 | s2[3], X = 8191 & Y, Q = Y >>> 13, Z = 0 | s2[4], $ = 8191 & Z, ee = Z >>> 13, te = 0 | s2[5], re = 8191 & te, ne = te >>> 13, ie = 0 | s2[6], oe = 8191 & ie, ae = ie >>> 13, se = 0 | s2[7], ue = 8191 & se, ce = se >>> 13, fe = 0 | s2[8], de = 8191 & fe, le = fe >>> 13, he = 0 | s2[9], pe = 8191 & he, be = he >>> 13;
            r4.negative = e4.negative ^ t4.negative, r4.length = 19;
            var ye = (c2 + (n2 = Math.imul(d2, H)) | 0) + ((8191 & (i2 = (i2 = Math.imul(d2, q)) + Math.imul(l2, H) | 0)) << 13) | 0;
            c2 = ((o2 = Math.imul(l2, q)) + (i2 >>> 13) | 0) + (ye >>> 26) | 0, ye &= 67108863, n2 = Math.imul(p2, H), i2 = (i2 = Math.imul(p2, q)) + Math.imul(b2, H) | 0, o2 = Math.imul(b2, q);
            var me = (c2 + (n2 = n2 + Math.imul(d2, G) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(d2, K) | 0) + Math.imul(l2, G) | 0)) << 13) | 0;
            c2 = ((o2 = o2 + Math.imul(l2, K) | 0) + (i2 >>> 13) | 0) + (me >>> 26) | 0, me &= 67108863, n2 = Math.imul(m2, H), i2 = (i2 = Math.imul(m2, q)) + Math.imul(v2, H) | 0, o2 = Math.imul(v2, q), n2 = n2 + Math.imul(p2, G) | 0, i2 = (i2 = i2 + Math.imul(p2, K) | 0) + Math.imul(b2, G) | 0, o2 = o2 + Math.imul(b2, K) | 0;
            var ve = (c2 + (n2 = n2 + Math.imul(d2, J) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(d2, W) | 0) + Math.imul(l2, J) | 0)) << 13) | 0;
            c2 = ((o2 = o2 + Math.imul(l2, W) | 0) + (i2 >>> 13) | 0) + (ve >>> 26) | 0, ve &= 67108863, n2 = Math.imul(w2, H), i2 = (i2 = Math.imul(w2, q)) + Math.imul(A2, H) | 0, o2 = Math.imul(A2, q), n2 = n2 + Math.imul(m2, G) | 0, i2 = (i2 = i2 + Math.imul(m2, K) | 0) + Math.imul(v2, G) | 0, o2 = o2 + Math.imul(v2, K) | 0, n2 = n2 + Math.imul(p2, J) | 0, i2 = (i2 = i2 + Math.imul(p2, W) | 0) + Math.imul(b2, J) | 0, o2 = o2 + Math.imul(b2, W) | 0;
            var ge = (c2 + (n2 = n2 + Math.imul(d2, X) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(d2, Q) | 0) + Math.imul(l2, X) | 0)) << 13) | 0;
            c2 = ((o2 = o2 + Math.imul(l2, Q) | 0) + (i2 >>> 13) | 0) + (ge >>> 26) | 0, ge &= 67108863, n2 = Math.imul(_2, H), i2 = (i2 = Math.imul(_2, q)) + Math.imul(S2, H) | 0, o2 = Math.imul(S2, q), n2 = n2 + Math.imul(w2, G) | 0, i2 = (i2 = i2 + Math.imul(w2, K) | 0) + Math.imul(A2, G) | 0, o2 = o2 + Math.imul(A2, K) | 0, n2 = n2 + Math.imul(m2, J) | 0, i2 = (i2 = i2 + Math.imul(m2, W) | 0) + Math.imul(v2, J) | 0, o2 = o2 + Math.imul(v2, W) | 0, n2 = n2 + Math.imul(p2, X) | 0, i2 = (i2 = i2 + Math.imul(p2, Q) | 0) + Math.imul(b2, X) | 0, o2 = o2 + Math.imul(b2, Q) | 0;
            var we = (c2 + (n2 = n2 + Math.imul(d2, $) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(d2, ee) | 0) + Math.imul(l2, $) | 0)) << 13) | 0;
            c2 = ((o2 = o2 + Math.imul(l2, ee) | 0) + (i2 >>> 13) | 0) + (we >>> 26) | 0, we &= 67108863, n2 = Math.imul(x2, H), i2 = (i2 = Math.imul(x2, q)) + Math.imul(P2, H) | 0, o2 = Math.imul(P2, q), n2 = n2 + Math.imul(_2, G) | 0, i2 = (i2 = i2 + Math.imul(_2, K) | 0) + Math.imul(S2, G) | 0, o2 = o2 + Math.imul(S2, K) | 0, n2 = n2 + Math.imul(w2, J) | 0, i2 = (i2 = i2 + Math.imul(w2, W) | 0) + Math.imul(A2, J) | 0, o2 = o2 + Math.imul(A2, W) | 0, n2 = n2 + Math.imul(m2, X) | 0, i2 = (i2 = i2 + Math.imul(m2, Q) | 0) + Math.imul(v2, X) | 0, o2 = o2 + Math.imul(v2, Q) | 0, n2 = n2 + Math.imul(p2, $) | 0, i2 = (i2 = i2 + Math.imul(p2, ee) | 0) + Math.imul(b2, $) | 0, o2 = o2 + Math.imul(b2, ee) | 0;
            var Ae = (c2 + (n2 = n2 + Math.imul(d2, re) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(d2, ne) | 0) + Math.imul(l2, re) | 0)) << 13) | 0;
            c2 = ((o2 = o2 + Math.imul(l2, ne) | 0) + (i2 >>> 13) | 0) + (Ae >>> 26) | 0, Ae &= 67108863, n2 = Math.imul(B, H), i2 = (i2 = Math.imul(B, q)) + Math.imul(T, H) | 0, o2 = Math.imul(T, q), n2 = n2 + Math.imul(x2, G) | 0, i2 = (i2 = i2 + Math.imul(x2, K) | 0) + Math.imul(P2, G) | 0, o2 = o2 + Math.imul(P2, K) | 0, n2 = n2 + Math.imul(_2, J) | 0, i2 = (i2 = i2 + Math.imul(_2, W) | 0) + Math.imul(S2, J) | 0, o2 = o2 + Math.imul(S2, W) | 0, n2 = n2 + Math.imul(w2, X) | 0, i2 = (i2 = i2 + Math.imul(w2, Q) | 0) + Math.imul(A2, X) | 0, o2 = o2 + Math.imul(A2, Q) | 0, n2 = n2 + Math.imul(m2, $) | 0, i2 = (i2 = i2 + Math.imul(m2, ee) | 0) + Math.imul(v2, $) | 0, o2 = o2 + Math.imul(v2, ee) | 0, n2 = n2 + Math.imul(p2, re) | 0, i2 = (i2 = i2 + Math.imul(p2, ne) | 0) + Math.imul(b2, re) | 0, o2 = o2 + Math.imul(b2, ne) | 0;
            var ke = (c2 + (n2 = n2 + Math.imul(d2, oe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(d2, ae) | 0) + Math.imul(l2, oe) | 0)) << 13) | 0;
            c2 = ((o2 = o2 + Math.imul(l2, ae) | 0) + (i2 >>> 13) | 0) + (ke >>> 26) | 0, ke &= 67108863, n2 = Math.imul(I, H), i2 = (i2 = Math.imul(I, q)) + Math.imul(M, H) | 0, o2 = Math.imul(M, q), n2 = n2 + Math.imul(B, G) | 0, i2 = (i2 = i2 + Math.imul(B, K) | 0) + Math.imul(T, G) | 0, o2 = o2 + Math.imul(T, K) | 0, n2 = n2 + Math.imul(x2, J) | 0, i2 = (i2 = i2 + Math.imul(x2, W) | 0) + Math.imul(P2, J) | 0, o2 = o2 + Math.imul(P2, W) | 0, n2 = n2 + Math.imul(_2, X) | 0, i2 = (i2 = i2 + Math.imul(_2, Q) | 0) + Math.imul(S2, X) | 0, o2 = o2 + Math.imul(S2, Q) | 0, n2 = n2 + Math.imul(w2, $) | 0, i2 = (i2 = i2 + Math.imul(w2, ee) | 0) + Math.imul(A2, $) | 0, o2 = o2 + Math.imul(A2, ee) | 0, n2 = n2 + Math.imul(m2, re) | 0, i2 = (i2 = i2 + Math.imul(m2, ne) | 0) + Math.imul(v2, re) | 0, o2 = o2 + Math.imul(v2, ne) | 0, n2 = n2 + Math.imul(p2, oe) | 0, i2 = (i2 = i2 + Math.imul(p2, ae) | 0) + Math.imul(b2, oe) | 0, o2 = o2 + Math.imul(b2, ae) | 0;
            var _e = (c2 + (n2 = n2 + Math.imul(d2, ue) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(d2, ce) | 0) + Math.imul(l2, ue) | 0)) << 13) | 0;
            c2 = ((o2 = o2 + Math.imul(l2, ce) | 0) + (i2 >>> 13) | 0) + (_e >>> 26) | 0, _e &= 67108863, n2 = Math.imul(R, H), i2 = (i2 = Math.imul(R, q)) + Math.imul(j, H) | 0, o2 = Math.imul(j, q), n2 = n2 + Math.imul(I, G) | 0, i2 = (i2 = i2 + Math.imul(I, K) | 0) + Math.imul(M, G) | 0, o2 = o2 + Math.imul(M, K) | 0, n2 = n2 + Math.imul(B, J) | 0, i2 = (i2 = i2 + Math.imul(B, W) | 0) + Math.imul(T, J) | 0, o2 = o2 + Math.imul(T, W) | 0, n2 = n2 + Math.imul(x2, X) | 0, i2 = (i2 = i2 + Math.imul(x2, Q) | 0) + Math.imul(P2, X) | 0, o2 = o2 + Math.imul(P2, Q) | 0, n2 = n2 + Math.imul(_2, $) | 0, i2 = (i2 = i2 + Math.imul(_2, ee) | 0) + Math.imul(S2, $) | 0, o2 = o2 + Math.imul(S2, ee) | 0, n2 = n2 + Math.imul(w2, re) | 0, i2 = (i2 = i2 + Math.imul(w2, ne) | 0) + Math.imul(A2, re) | 0, o2 = o2 + Math.imul(A2, ne) | 0, n2 = n2 + Math.imul(m2, oe) | 0, i2 = (i2 = i2 + Math.imul(m2, ae) | 0) + Math.imul(v2, oe) | 0, o2 = o2 + Math.imul(v2, ae) | 0, n2 = n2 + Math.imul(p2, ue) | 0, i2 = (i2 = i2 + Math.imul(p2, ce) | 0) + Math.imul(b2, ue) | 0, o2 = o2 + Math.imul(b2, ce) | 0;
            var Se = (c2 + (n2 = n2 + Math.imul(d2, de) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(d2, le) | 0) + Math.imul(l2, de) | 0)) << 13) | 0;
            c2 = ((o2 = o2 + Math.imul(l2, le) | 0) + (i2 >>> 13) | 0) + (Se >>> 26) | 0, Se &= 67108863, n2 = Math.imul(F, H), i2 = (i2 = Math.imul(F, q)) + Math.imul(L, H) | 0, o2 = Math.imul(L, q), n2 = n2 + Math.imul(R, G) | 0, i2 = (i2 = i2 + Math.imul(R, K) | 0) + Math.imul(j, G) | 0, o2 = o2 + Math.imul(j, K) | 0, n2 = n2 + Math.imul(I, J) | 0, i2 = (i2 = i2 + Math.imul(I, W) | 0) + Math.imul(M, J) | 0, o2 = o2 + Math.imul(M, W) | 0, n2 = n2 + Math.imul(B, X) | 0, i2 = (i2 = i2 + Math.imul(B, Q) | 0) + Math.imul(T, X) | 0, o2 = o2 + Math.imul(T, Q) | 0, n2 = n2 + Math.imul(x2, $) | 0, i2 = (i2 = i2 + Math.imul(x2, ee) | 0) + Math.imul(P2, $) | 0, o2 = o2 + Math.imul(P2, ee) | 0, n2 = n2 + Math.imul(_2, re) | 0, i2 = (i2 = i2 + Math.imul(_2, ne) | 0) + Math.imul(S2, re) | 0, o2 = o2 + Math.imul(S2, ne) | 0, n2 = n2 + Math.imul(w2, oe) | 0, i2 = (i2 = i2 + Math.imul(w2, ae) | 0) + Math.imul(A2, oe) | 0, o2 = o2 + Math.imul(A2, ae) | 0, n2 = n2 + Math.imul(m2, ue) | 0, i2 = (i2 = i2 + Math.imul(m2, ce) | 0) + Math.imul(v2, ue) | 0, o2 = o2 + Math.imul(v2, ce) | 0, n2 = n2 + Math.imul(p2, de) | 0, i2 = (i2 = i2 + Math.imul(p2, le) | 0) + Math.imul(b2, de) | 0, o2 = o2 + Math.imul(b2, le) | 0;
            var Ee = (c2 + (n2 = n2 + Math.imul(d2, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(d2, be) | 0) + Math.imul(l2, pe) | 0)) << 13) | 0;
            c2 = ((o2 = o2 + Math.imul(l2, be) | 0) + (i2 >>> 13) | 0) + (Ee >>> 26) | 0, Ee &= 67108863, n2 = Math.imul(F, G), i2 = (i2 = Math.imul(F, K)) + Math.imul(L, G) | 0, o2 = Math.imul(L, K), n2 = n2 + Math.imul(R, J) | 0, i2 = (i2 = i2 + Math.imul(R, W) | 0) + Math.imul(j, J) | 0, o2 = o2 + Math.imul(j, W) | 0, n2 = n2 + Math.imul(I, X) | 0, i2 = (i2 = i2 + Math.imul(I, Q) | 0) + Math.imul(M, X) | 0, o2 = o2 + Math.imul(M, Q) | 0, n2 = n2 + Math.imul(B, $) | 0, i2 = (i2 = i2 + Math.imul(B, ee) | 0) + Math.imul(T, $) | 0, o2 = o2 + Math.imul(T, ee) | 0, n2 = n2 + Math.imul(x2, re) | 0, i2 = (i2 = i2 + Math.imul(x2, ne) | 0) + Math.imul(P2, re) | 0, o2 = o2 + Math.imul(P2, ne) | 0, n2 = n2 + Math.imul(_2, oe) | 0, i2 = (i2 = i2 + Math.imul(_2, ae) | 0) + Math.imul(S2, oe) | 0, o2 = o2 + Math.imul(S2, ae) | 0, n2 = n2 + Math.imul(w2, ue) | 0, i2 = (i2 = i2 + Math.imul(w2, ce) | 0) + Math.imul(A2, ue) | 0, o2 = o2 + Math.imul(A2, ce) | 0, n2 = n2 + Math.imul(m2, de) | 0, i2 = (i2 = i2 + Math.imul(m2, le) | 0) + Math.imul(v2, de) | 0, o2 = o2 + Math.imul(v2, le) | 0;
            var xe = (c2 + (n2 = n2 + Math.imul(p2, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(p2, be) | 0) + Math.imul(b2, pe) | 0)) << 13) | 0;
            c2 = ((o2 = o2 + Math.imul(b2, be) | 0) + (i2 >>> 13) | 0) + (xe >>> 26) | 0, xe &= 67108863, n2 = Math.imul(F, J), i2 = (i2 = Math.imul(F, W)) + Math.imul(L, J) | 0, o2 = Math.imul(L, W), n2 = n2 + Math.imul(R, X) | 0, i2 = (i2 = i2 + Math.imul(R, Q) | 0) + Math.imul(j, X) | 0, o2 = o2 + Math.imul(j, Q) | 0, n2 = n2 + Math.imul(I, $) | 0, i2 = (i2 = i2 + Math.imul(I, ee) | 0) + Math.imul(M, $) | 0, o2 = o2 + Math.imul(M, ee) | 0, n2 = n2 + Math.imul(B, re) | 0, i2 = (i2 = i2 + Math.imul(B, ne) | 0) + Math.imul(T, re) | 0, o2 = o2 + Math.imul(T, ne) | 0, n2 = n2 + Math.imul(x2, oe) | 0, i2 = (i2 = i2 + Math.imul(x2, ae) | 0) + Math.imul(P2, oe) | 0, o2 = o2 + Math.imul(P2, ae) | 0, n2 = n2 + Math.imul(_2, ue) | 0, i2 = (i2 = i2 + Math.imul(_2, ce) | 0) + Math.imul(S2, ue) | 0, o2 = o2 + Math.imul(S2, ce) | 0, n2 = n2 + Math.imul(w2, de) | 0, i2 = (i2 = i2 + Math.imul(w2, le) | 0) + Math.imul(A2, de) | 0, o2 = o2 + Math.imul(A2, le) | 0;
            var Pe = (c2 + (n2 = n2 + Math.imul(m2, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(m2, be) | 0) + Math.imul(v2, pe) | 0)) << 13) | 0;
            c2 = ((o2 = o2 + Math.imul(v2, be) | 0) + (i2 >>> 13) | 0) + (Pe >>> 26) | 0, Pe &= 67108863, n2 = Math.imul(F, X), i2 = (i2 = Math.imul(F, Q)) + Math.imul(L, X) | 0, o2 = Math.imul(L, Q), n2 = n2 + Math.imul(R, $) | 0, i2 = (i2 = i2 + Math.imul(R, ee) | 0) + Math.imul(j, $) | 0, o2 = o2 + Math.imul(j, ee) | 0, n2 = n2 + Math.imul(I, re) | 0, i2 = (i2 = i2 + Math.imul(I, ne) | 0) + Math.imul(M, re) | 0, o2 = o2 + Math.imul(M, ne) | 0, n2 = n2 + Math.imul(B, oe) | 0, i2 = (i2 = i2 + Math.imul(B, ae) | 0) + Math.imul(T, oe) | 0, o2 = o2 + Math.imul(T, ae) | 0, n2 = n2 + Math.imul(x2, ue) | 0, i2 = (i2 = i2 + Math.imul(x2, ce) | 0) + Math.imul(P2, ue) | 0, o2 = o2 + Math.imul(P2, ce) | 0, n2 = n2 + Math.imul(_2, de) | 0, i2 = (i2 = i2 + Math.imul(_2, le) | 0) + Math.imul(S2, de) | 0, o2 = o2 + Math.imul(S2, le) | 0;
            var Oe = (c2 + (n2 = n2 + Math.imul(w2, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(w2, be) | 0) + Math.imul(A2, pe) | 0)) << 13) | 0;
            c2 = ((o2 = o2 + Math.imul(A2, be) | 0) + (i2 >>> 13) | 0) + (Oe >>> 26) | 0, Oe &= 67108863, n2 = Math.imul(F, $), i2 = (i2 = Math.imul(F, ee)) + Math.imul(L, $) | 0, o2 = Math.imul(L, ee), n2 = n2 + Math.imul(R, re) | 0, i2 = (i2 = i2 + Math.imul(R, ne) | 0) + Math.imul(j, re) | 0, o2 = o2 + Math.imul(j, ne) | 0, n2 = n2 + Math.imul(I, oe) | 0, i2 = (i2 = i2 + Math.imul(I, ae) | 0) + Math.imul(M, oe) | 0, o2 = o2 + Math.imul(M, ae) | 0, n2 = n2 + Math.imul(B, ue) | 0, i2 = (i2 = i2 + Math.imul(B, ce) | 0) + Math.imul(T, ue) | 0, o2 = o2 + Math.imul(T, ce) | 0, n2 = n2 + Math.imul(x2, de) | 0, i2 = (i2 = i2 + Math.imul(x2, le) | 0) + Math.imul(P2, de) | 0, o2 = o2 + Math.imul(P2, le) | 0;
            var Be = (c2 + (n2 = n2 + Math.imul(_2, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(_2, be) | 0) + Math.imul(S2, pe) | 0)) << 13) | 0;
            c2 = ((o2 = o2 + Math.imul(S2, be) | 0) + (i2 >>> 13) | 0) + (Be >>> 26) | 0, Be &= 67108863, n2 = Math.imul(F, re), i2 = (i2 = Math.imul(F, ne)) + Math.imul(L, re) | 0, o2 = Math.imul(L, ne), n2 = n2 + Math.imul(R, oe) | 0, i2 = (i2 = i2 + Math.imul(R, ae) | 0) + Math.imul(j, oe) | 0, o2 = o2 + Math.imul(j, ae) | 0, n2 = n2 + Math.imul(I, ue) | 0, i2 = (i2 = i2 + Math.imul(I, ce) | 0) + Math.imul(M, ue) | 0, o2 = o2 + Math.imul(M, ce) | 0, n2 = n2 + Math.imul(B, de) | 0, i2 = (i2 = i2 + Math.imul(B, le) | 0) + Math.imul(T, de) | 0, o2 = o2 + Math.imul(T, le) | 0;
            var Te = (c2 + (n2 = n2 + Math.imul(x2, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(x2, be) | 0) + Math.imul(P2, pe) | 0)) << 13) | 0;
            c2 = ((o2 = o2 + Math.imul(P2, be) | 0) + (i2 >>> 13) | 0) + (Te >>> 26) | 0, Te &= 67108863, n2 = Math.imul(F, oe), i2 = (i2 = Math.imul(F, ae)) + Math.imul(L, oe) | 0, o2 = Math.imul(L, ae), n2 = n2 + Math.imul(R, ue) | 0, i2 = (i2 = i2 + Math.imul(R, ce) | 0) + Math.imul(j, ue) | 0, o2 = o2 + Math.imul(j, ce) | 0, n2 = n2 + Math.imul(I, de) | 0, i2 = (i2 = i2 + Math.imul(I, le) | 0) + Math.imul(M, de) | 0, o2 = o2 + Math.imul(M, le) | 0;
            var Ce = (c2 + (n2 = n2 + Math.imul(B, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(B, be) | 0) + Math.imul(T, pe) | 0)) << 13) | 0;
            c2 = ((o2 = o2 + Math.imul(T, be) | 0) + (i2 >>> 13) | 0) + (Ce >>> 26) | 0, Ce &= 67108863, n2 = Math.imul(F, ue), i2 = (i2 = Math.imul(F, ce)) + Math.imul(L, ue) | 0, o2 = Math.imul(L, ce), n2 = n2 + Math.imul(R, de) | 0, i2 = (i2 = i2 + Math.imul(R, le) | 0) + Math.imul(j, de) | 0, o2 = o2 + Math.imul(j, le) | 0;
            var Ie = (c2 + (n2 = n2 + Math.imul(I, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(I, be) | 0) + Math.imul(M, pe) | 0)) << 13) | 0;
            c2 = ((o2 = o2 + Math.imul(M, be) | 0) + (i2 >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, n2 = Math.imul(F, de), i2 = (i2 = Math.imul(F, le)) + Math.imul(L, de) | 0, o2 = Math.imul(L, le);
            var Me = (c2 + (n2 = n2 + Math.imul(R, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(R, be) | 0) + Math.imul(j, pe) | 0)) << 13) | 0;
            c2 = ((o2 = o2 + Math.imul(j, be) | 0) + (i2 >>> 13) | 0) + (Me >>> 26) | 0, Me &= 67108863;
            var Ue = (c2 + (n2 = Math.imul(F, pe)) | 0) + ((8191 & (i2 = (i2 = Math.imul(F, be)) + Math.imul(L, pe) | 0)) << 13) | 0;
            return c2 = ((o2 = Math.imul(L, be)) + (i2 >>> 13) | 0) + (Ue >>> 26) | 0, Ue &= 67108863, u2[0] = ye, u2[1] = me, u2[2] = ve, u2[3] = ge, u2[4] = we, u2[5] = Ae, u2[6] = ke, u2[7] = _e, u2[8] = Se, u2[9] = Ee, u2[10] = xe, u2[11] = Pe, u2[12] = Oe, u2[13] = Be, u2[14] = Te, u2[15] = Ce, u2[16] = Ie, u2[17] = Me, u2[18] = Ue, 0 !== c2 && (u2[19] = c2, r4.length++), r4;
          };
          function v(e4, t4, r4) {
            r4.negative = t4.negative ^ e4.negative, r4.length = e4.length + t4.length;
            for (var n2 = 0, i2 = 0, o2 = 0; o2 < r4.length - 1; o2++) {
              var a2 = i2;
              i2 = 0;
              for (var s2 = 67108863 & n2, u2 = Math.min(o2, t4.length - 1), c2 = Math.max(0, o2 - e4.length + 1); c2 <= u2; c2++) {
                var f2 = o2 - c2, d2 = (0 | e4.words[f2]) * (0 | t4.words[c2]), l2 = 67108863 & d2;
                s2 = 67108863 & (l2 = l2 + s2 | 0), i2 += (a2 = (a2 = a2 + (d2 / 67108864 | 0) | 0) + (l2 >>> 26) | 0) >>> 26, a2 &= 67108863;
              }
              r4.words[o2] = s2, n2 = a2, a2 = i2;
            }
            return 0 !== n2 ? r4.words[o2] = n2 : r4.length--, r4._strip();
          }
          function g(e4, t4, r4) {
            return v(e4, t4, r4);
          }
          function w(e4, t4) {
            this.x = e4, this.y = t4;
          }
          Math.imul || (m = y), a.prototype.mulTo = function(e4, t4) {
            var r4 = this.length + e4.length;
            return 10 === this.length && 10 === e4.length ? m(this, e4, t4) : r4 < 63 ? y(this, e4, t4) : r4 < 1024 ? v(this, e4, t4) : g(this, e4, t4);
          }, w.prototype.makeRBT = function(e4) {
            for (var t4 = new Array(e4), r4 = a.prototype._countBits(e4) - 1, n2 = 0; n2 < e4; n2++)
              t4[n2] = this.revBin(n2, r4, e4);
            return t4;
          }, w.prototype.revBin = function(e4, t4, r4) {
            if (0 === e4 || e4 === r4 - 1)
              return e4;
            for (var n2 = 0, i2 = 0; i2 < t4; i2++)
              n2 |= (1 & e4) << t4 - i2 - 1, e4 >>= 1;
            return n2;
          }, w.prototype.permute = function(e4, t4, r4, n2, i2, o2) {
            for (var a2 = 0; a2 < o2; a2++)
              n2[a2] = t4[e4[a2]], i2[a2] = r4[e4[a2]];
          }, w.prototype.transform = function(e4, t4, r4, n2, i2, o2) {
            this.permute(o2, e4, t4, r4, n2, i2);
            for (var a2 = 1; a2 < i2; a2 <<= 1)
              for (var s2 = a2 << 1, u2 = Math.cos(2 * Math.PI / s2), c2 = Math.sin(2 * Math.PI / s2), f2 = 0; f2 < i2; f2 += s2)
                for (var d2 = u2, l2 = c2, h2 = 0; h2 < a2; h2++) {
                  var p2 = r4[f2 + h2], b2 = n2[f2 + h2], y2 = r4[f2 + h2 + a2], m2 = n2[f2 + h2 + a2], v2 = d2 * y2 - l2 * m2;
                  m2 = d2 * m2 + l2 * y2, y2 = v2, r4[f2 + h2] = p2 + y2, n2[f2 + h2] = b2 + m2, r4[f2 + h2 + a2] = p2 - y2, n2[f2 + h2 + a2] = b2 - m2, h2 !== s2 && (v2 = u2 * d2 - c2 * l2, l2 = u2 * l2 + c2 * d2, d2 = v2);
                }
          }, w.prototype.guessLen13b = function(e4, t4) {
            var r4 = 1 | Math.max(t4, e4), n2 = 1 & r4, i2 = 0;
            for (r4 = r4 / 2 | 0; r4; r4 >>>= 1)
              i2++;
            return 1 << i2 + 1 + n2;
          }, w.prototype.conjugate = function(e4, t4, r4) {
            if (!(r4 <= 1))
              for (var n2 = 0; n2 < r4 / 2; n2++) {
                var i2 = e4[n2];
                e4[n2] = e4[r4 - n2 - 1], e4[r4 - n2 - 1] = i2, i2 = t4[n2], t4[n2] = -t4[r4 - n2 - 1], t4[r4 - n2 - 1] = -i2;
              }
          }, w.prototype.normalize13b = function(e4, t4) {
            for (var r4 = 0, n2 = 0; n2 < t4 / 2; n2++) {
              var i2 = 8192 * Math.round(e4[2 * n2 + 1] / t4) + Math.round(e4[2 * n2] / t4) + r4;
              e4[n2] = 67108863 & i2, r4 = i2 < 67108864 ? 0 : i2 / 67108864 | 0;
            }
            return e4;
          }, w.prototype.convert13b = function(e4, t4, r4, n2) {
            for (var o2 = 0, a2 = 0; a2 < t4; a2++)
              o2 += 0 | e4[a2], r4[2 * a2] = 8191 & o2, o2 >>>= 13, r4[2 * a2 + 1] = 8191 & o2, o2 >>>= 13;
            for (a2 = 2 * t4; a2 < n2; ++a2)
              r4[a2] = 0;
            i(0 === o2), i(0 == (-8192 & o2));
          }, w.prototype.stub = function(e4) {
            for (var t4 = new Array(e4), r4 = 0; r4 < e4; r4++)
              t4[r4] = 0;
            return t4;
          }, w.prototype.mulp = function(e4, t4, r4) {
            var n2 = 2 * this.guessLen13b(e4.length, t4.length), i2 = this.makeRBT(n2), o2 = this.stub(n2), a2 = new Array(n2), s2 = new Array(n2), u2 = new Array(n2), c2 = new Array(n2), f2 = new Array(n2), d2 = new Array(n2), l2 = r4.words;
            l2.length = n2, this.convert13b(e4.words, e4.length, a2, n2), this.convert13b(t4.words, t4.length, c2, n2), this.transform(a2, o2, s2, u2, n2, i2), this.transform(c2, o2, f2, d2, n2, i2);
            for (var h2 = 0; h2 < n2; h2++) {
              var p2 = s2[h2] * f2[h2] - u2[h2] * d2[h2];
              u2[h2] = s2[h2] * d2[h2] + u2[h2] * f2[h2], s2[h2] = p2;
            }
            return this.conjugate(s2, u2, n2), this.transform(s2, u2, l2, o2, n2, i2), this.conjugate(l2, o2, n2), this.normalize13b(l2, n2), r4.negative = e4.negative ^ t4.negative, r4.length = e4.length + t4.length, r4._strip();
          }, a.prototype.mul = function(e4) {
            var t4 = new a(null);
            return t4.words = new Array(this.length + e4.length), this.mulTo(e4, t4);
          }, a.prototype.mulf = function(e4) {
            var t4 = new a(null);
            return t4.words = new Array(this.length + e4.length), g(this, e4, t4);
          }, a.prototype.imul = function(e4) {
            return this.clone().mulTo(e4, this);
          }, a.prototype.imuln = function(e4) {
            var t4 = e4 < 0;
            t4 && (e4 = -e4), i("number" == typeof e4), i(e4 < 67108864);
            for (var r4 = 0, n2 = 0; n2 < this.length; n2++) {
              var o2 = (0 | this.words[n2]) * e4, a2 = (67108863 & o2) + (67108863 & r4);
              r4 >>= 26, r4 += o2 / 67108864 | 0, r4 += a2 >>> 26, this.words[n2] = 67108863 & a2;
            }
            return 0 !== r4 && (this.words[n2] = r4, this.length++), t4 ? this.ineg() : this;
          }, a.prototype.muln = function(e4) {
            return this.clone().imuln(e4);
          }, a.prototype.sqr = function() {
            return this.mul(this);
          }, a.prototype.isqr = function() {
            return this.imul(this.clone());
          }, a.prototype.pow = function(e4) {
            var t4 = function(e5) {
              for (var t5 = new Array(e5.bitLength()), r5 = 0; r5 < t5.length; r5++) {
                var n3 = r5 / 26 | 0, i3 = r5 % 26;
                t5[r5] = e5.words[n3] >>> i3 & 1;
              }
              return t5;
            }(e4);
            if (0 === t4.length)
              return new a(1);
            for (var r4 = this, n2 = 0; n2 < t4.length && 0 === t4[n2]; n2++, r4 = r4.sqr())
              ;
            if (++n2 < t4.length)
              for (var i2 = r4.sqr(); n2 < t4.length; n2++, i2 = i2.sqr())
                0 !== t4[n2] && (r4 = r4.mul(i2));
            return r4;
          }, a.prototype.iushln = function(e4) {
            i("number" == typeof e4 && e4 >= 0);
            var t4, r4 = e4 % 26, n2 = (e4 - r4) / 26, o2 = 67108863 >>> 26 - r4 << 26 - r4;
            if (0 !== r4) {
              var a2 = 0;
              for (t4 = 0; t4 < this.length; t4++) {
                var s2 = this.words[t4] & o2, u2 = (0 | this.words[t4]) - s2 << r4;
                this.words[t4] = u2 | a2, a2 = s2 >>> 26 - r4;
              }
              a2 && (this.words[t4] = a2, this.length++);
            }
            if (0 !== n2) {
              for (t4 = this.length - 1; t4 >= 0; t4--)
                this.words[t4 + n2] = this.words[t4];
              for (t4 = 0; t4 < n2; t4++)
                this.words[t4] = 0;
              this.length += n2;
            }
            return this._strip();
          }, a.prototype.ishln = function(e4) {
            return i(0 === this.negative), this.iushln(e4);
          }, a.prototype.iushrn = function(e4, t4, r4) {
            var n2;
            i("number" == typeof e4 && e4 >= 0), n2 = t4 ? (t4 - t4 % 26) / 26 : 0;
            var o2 = e4 % 26, a2 = Math.min((e4 - o2) / 26, this.length), s2 = 67108863 ^ 67108863 >>> o2 << o2, u2 = r4;
            if (n2 -= a2, n2 = Math.max(0, n2), u2) {
              for (var c2 = 0; c2 < a2; c2++)
                u2.words[c2] = this.words[c2];
              u2.length = a2;
            }
            if (0 === a2)
              ;
            else if (this.length > a2)
              for (this.length -= a2, c2 = 0; c2 < this.length; c2++)
                this.words[c2] = this.words[c2 + a2];
            else
              this.words[0] = 0, this.length = 1;
            var f2 = 0;
            for (c2 = this.length - 1; c2 >= 0 && (0 !== f2 || c2 >= n2); c2--) {
              var d2 = 0 | this.words[c2];
              this.words[c2] = f2 << 26 - o2 | d2 >>> o2, f2 = d2 & s2;
            }
            return u2 && 0 !== f2 && (u2.words[u2.length++] = f2), 0 === this.length && (this.words[0] = 0, this.length = 1), this._strip();
          }, a.prototype.ishrn = function(e4, t4, r4) {
            return i(0 === this.negative), this.iushrn(e4, t4, r4);
          }, a.prototype.shln = function(e4) {
            return this.clone().ishln(e4);
          }, a.prototype.ushln = function(e4) {
            return this.clone().iushln(e4);
          }, a.prototype.shrn = function(e4) {
            return this.clone().ishrn(e4);
          }, a.prototype.ushrn = function(e4) {
            return this.clone().iushrn(e4);
          }, a.prototype.testn = function(e4) {
            i("number" == typeof e4 && e4 >= 0);
            var t4 = e4 % 26, r4 = (e4 - t4) / 26, n2 = 1 << t4;
            return !(this.length <= r4 || !(this.words[r4] & n2));
          }, a.prototype.imaskn = function(e4) {
            i("number" == typeof e4 && e4 >= 0);
            var t4 = e4 % 26, r4 = (e4 - t4) / 26;
            if (i(0 === this.negative, "imaskn works only with positive numbers"), this.length <= r4)
              return this;
            if (0 !== t4 && r4++, this.length = Math.min(r4, this.length), 0 !== t4) {
              var n2 = 67108863 ^ 67108863 >>> t4 << t4;
              this.words[this.length - 1] &= n2;
            }
            return this._strip();
          }, a.prototype.maskn = function(e4) {
            return this.clone().imaskn(e4);
          }, a.prototype.iaddn = function(e4) {
            return i("number" == typeof e4), i(e4 < 67108864), e4 < 0 ? this.isubn(-e4) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) <= e4 ? (this.words[0] = e4 - (0 | this.words[0]), this.negative = 0, this) : (this.negative = 0, this.isubn(e4), this.negative = 1, this) : this._iaddn(e4);
          }, a.prototype._iaddn = function(e4) {
            this.words[0] += e4;
            for (var t4 = 0; t4 < this.length && this.words[t4] >= 67108864; t4++)
              this.words[t4] -= 67108864, t4 === this.length - 1 ? this.words[t4 + 1] = 1 : this.words[t4 + 1]++;
            return this.length = Math.max(this.length, t4 + 1), this;
          }, a.prototype.isubn = function(e4) {
            if (i("number" == typeof e4), i(e4 < 67108864), e4 < 0)
              return this.iaddn(-e4);
            if (0 !== this.negative)
              return this.negative = 0, this.iaddn(e4), this.negative = 1, this;
            if (this.words[0] -= e4, 1 === this.length && this.words[0] < 0)
              this.words[0] = -this.words[0], this.negative = 1;
            else
              for (var t4 = 0; t4 < this.length && this.words[t4] < 0; t4++)
                this.words[t4] += 67108864, this.words[t4 + 1] -= 1;
            return this._strip();
          }, a.prototype.addn = function(e4) {
            return this.clone().iaddn(e4);
          }, a.prototype.subn = function(e4) {
            return this.clone().isubn(e4);
          }, a.prototype.iabs = function() {
            return this.negative = 0, this;
          }, a.prototype.abs = function() {
            return this.clone().iabs();
          }, a.prototype._ishlnsubmul = function(e4, t4, r4) {
            var n2, o2, a2 = e4.length + r4;
            this._expand(a2);
            var s2 = 0;
            for (n2 = 0; n2 < e4.length; n2++) {
              o2 = (0 | this.words[n2 + r4]) + s2;
              var u2 = (0 | e4.words[n2]) * t4;
              s2 = ((o2 -= 67108863 & u2) >> 26) - (u2 / 67108864 | 0), this.words[n2 + r4] = 67108863 & o2;
            }
            for (; n2 < this.length - r4; n2++)
              s2 = (o2 = (0 | this.words[n2 + r4]) + s2) >> 26, this.words[n2 + r4] = 67108863 & o2;
            if (0 === s2)
              return this._strip();
            for (i(-1 === s2), s2 = 0, n2 = 0; n2 < this.length; n2++)
              s2 = (o2 = -(0 | this.words[n2]) + s2) >> 26, this.words[n2] = 67108863 & o2;
            return this.negative = 1, this._strip();
          }, a.prototype._wordDiv = function(e4, t4) {
            var r4 = (this.length, e4.length), n2 = this.clone(), i2 = e4, o2 = 0 | i2.words[i2.length - 1];
            0 != (r4 = 26 - this._countBits(o2)) && (i2 = i2.ushln(r4), n2.iushln(r4), o2 = 0 | i2.words[i2.length - 1]);
            var s2, u2 = n2.length - i2.length;
            if ("mod" !== t4) {
              (s2 = new a(null)).length = u2 + 1, s2.words = new Array(s2.length);
              for (var c2 = 0; c2 < s2.length; c2++)
                s2.words[c2] = 0;
            }
            var f2 = n2.clone()._ishlnsubmul(i2, 1, u2);
            0 === f2.negative && (n2 = f2, s2 && (s2.words[u2] = 1));
            for (var d2 = u2 - 1; d2 >= 0; d2--) {
              var l2 = 67108864 * (0 | n2.words[i2.length + d2]) + (0 | n2.words[i2.length + d2 - 1]);
              for (l2 = Math.min(l2 / o2 | 0, 67108863), n2._ishlnsubmul(i2, l2, d2); 0 !== n2.negative; )
                l2--, n2.negative = 0, n2._ishlnsubmul(i2, 1, d2), n2.isZero() || (n2.negative ^= 1);
              s2 && (s2.words[d2] = l2);
            }
            return s2 && s2._strip(), n2._strip(), "div" !== t4 && 0 !== r4 && n2.iushrn(r4), { div: s2 || null, mod: n2 };
          }, a.prototype.divmod = function(e4, t4, r4) {
            return i(!e4.isZero()), this.isZero() ? { div: new a(0), mod: new a(0) } : 0 !== this.negative && 0 === e4.negative ? (s2 = this.neg().divmod(e4, t4), "mod" !== t4 && (n2 = s2.div.neg()), "div" !== t4 && (o2 = s2.mod.neg(), r4 && 0 !== o2.negative && o2.iadd(e4)), { div: n2, mod: o2 }) : 0 === this.negative && 0 !== e4.negative ? (s2 = this.divmod(e4.neg(), t4), "mod" !== t4 && (n2 = s2.div.neg()), { div: n2, mod: s2.mod }) : 0 != (this.negative & e4.negative) ? (s2 = this.neg().divmod(e4.neg(), t4), "div" !== t4 && (o2 = s2.mod.neg(), r4 && 0 !== o2.negative && o2.isub(e4)), { div: s2.div, mod: o2 }) : e4.length > this.length || this.cmp(e4) < 0 ? { div: new a(0), mod: this } : 1 === e4.length ? "div" === t4 ? { div: this.divn(e4.words[0]), mod: null } : "mod" === t4 ? { div: null, mod: new a(this.modrn(e4.words[0])) } : { div: this.divn(e4.words[0]), mod: new a(this.modrn(e4.words[0])) } : this._wordDiv(e4, t4);
            var n2, o2, s2;
          }, a.prototype.div = function(e4) {
            return this.divmod(e4, "div", false).div;
          }, a.prototype.mod = function(e4) {
            return this.divmod(e4, "mod", false).mod;
          }, a.prototype.umod = function(e4) {
            return this.divmod(e4, "mod", true).mod;
          }, a.prototype.divRound = function(e4) {
            var t4 = this.divmod(e4);
            if (t4.mod.isZero())
              return t4.div;
            var r4 = 0 !== t4.div.negative ? t4.mod.isub(e4) : t4.mod, n2 = e4.ushrn(1), i2 = e4.andln(1), o2 = r4.cmp(n2);
            return o2 < 0 || 1 === i2 && 0 === o2 ? t4.div : 0 !== t4.div.negative ? t4.div.isubn(1) : t4.div.iaddn(1);
          }, a.prototype.modrn = function(e4) {
            var t4 = e4 < 0;
            t4 && (e4 = -e4), i(e4 <= 67108863);
            for (var r4 = (1 << 26) % e4, n2 = 0, o2 = this.length - 1; o2 >= 0; o2--)
              n2 = (r4 * n2 + (0 | this.words[o2])) % e4;
            return t4 ? -n2 : n2;
          }, a.prototype.modn = function(e4) {
            return this.modrn(e4);
          }, a.prototype.idivn = function(e4) {
            var t4 = e4 < 0;
            t4 && (e4 = -e4), i(e4 <= 67108863);
            for (var r4 = 0, n2 = this.length - 1; n2 >= 0; n2--) {
              var o2 = (0 | this.words[n2]) + 67108864 * r4;
              this.words[n2] = o2 / e4 | 0, r4 = o2 % e4;
            }
            return this._strip(), t4 ? this.ineg() : this;
          }, a.prototype.divn = function(e4) {
            return this.clone().idivn(e4);
          }, a.prototype.egcd = function(e4) {
            i(0 === e4.negative), i(!e4.isZero());
            var t4 = this, r4 = e4.clone();
            t4 = 0 !== t4.negative ? t4.umod(e4) : t4.clone();
            for (var n2 = new a(1), o2 = new a(0), s2 = new a(0), u2 = new a(1), c2 = 0; t4.isEven() && r4.isEven(); )
              t4.iushrn(1), r4.iushrn(1), ++c2;
            for (var f2 = r4.clone(), d2 = t4.clone(); !t4.isZero(); ) {
              for (var l2 = 0, h2 = 1; 0 == (t4.words[0] & h2) && l2 < 26; ++l2, h2 <<= 1)
                ;
              if (l2 > 0)
                for (t4.iushrn(l2); l2-- > 0; )
                  (n2.isOdd() || o2.isOdd()) && (n2.iadd(f2), o2.isub(d2)), n2.iushrn(1), o2.iushrn(1);
              for (var p2 = 0, b2 = 1; 0 == (r4.words[0] & b2) && p2 < 26; ++p2, b2 <<= 1)
                ;
              if (p2 > 0)
                for (r4.iushrn(p2); p2-- > 0; )
                  (s2.isOdd() || u2.isOdd()) && (s2.iadd(f2), u2.isub(d2)), s2.iushrn(1), u2.iushrn(1);
              t4.cmp(r4) >= 0 ? (t4.isub(r4), n2.isub(s2), o2.isub(u2)) : (r4.isub(t4), s2.isub(n2), u2.isub(o2));
            }
            return { a: s2, b: u2, gcd: r4.iushln(c2) };
          }, a.prototype._invmp = function(e4) {
            i(0 === e4.negative), i(!e4.isZero());
            var t4 = this, r4 = e4.clone();
            t4 = 0 !== t4.negative ? t4.umod(e4) : t4.clone();
            for (var n2, o2 = new a(1), s2 = new a(0), u2 = r4.clone(); t4.cmpn(1) > 0 && r4.cmpn(1) > 0; ) {
              for (var c2 = 0, f2 = 1; 0 == (t4.words[0] & f2) && c2 < 26; ++c2, f2 <<= 1)
                ;
              if (c2 > 0)
                for (t4.iushrn(c2); c2-- > 0; )
                  o2.isOdd() && o2.iadd(u2), o2.iushrn(1);
              for (var d2 = 0, l2 = 1; 0 == (r4.words[0] & l2) && d2 < 26; ++d2, l2 <<= 1)
                ;
              if (d2 > 0)
                for (r4.iushrn(d2); d2-- > 0; )
                  s2.isOdd() && s2.iadd(u2), s2.iushrn(1);
              t4.cmp(r4) >= 0 ? (t4.isub(r4), o2.isub(s2)) : (r4.isub(t4), s2.isub(o2));
            }
            return (n2 = 0 === t4.cmpn(1) ? o2 : s2).cmpn(0) < 0 && n2.iadd(e4), n2;
          }, a.prototype.gcd = function(e4) {
            if (this.isZero())
              return e4.abs();
            if (e4.isZero())
              return this.abs();
            var t4 = this.clone(), r4 = e4.clone();
            t4.negative = 0, r4.negative = 0;
            for (var n2 = 0; t4.isEven() && r4.isEven(); n2++)
              t4.iushrn(1), r4.iushrn(1);
            for (; ; ) {
              for (; t4.isEven(); )
                t4.iushrn(1);
              for (; r4.isEven(); )
                r4.iushrn(1);
              var i2 = t4.cmp(r4);
              if (i2 < 0) {
                var o2 = t4;
                t4 = r4, r4 = o2;
              } else if (0 === i2 || 0 === r4.cmpn(1))
                break;
              t4.isub(r4);
            }
            return r4.iushln(n2);
          }, a.prototype.invm = function(e4) {
            return this.egcd(e4).a.umod(e4);
          }, a.prototype.isEven = function() {
            return 0 == (1 & this.words[0]);
          }, a.prototype.isOdd = function() {
            return 1 == (1 & this.words[0]);
          }, a.prototype.andln = function(e4) {
            return this.words[0] & e4;
          }, a.prototype.bincn = function(e4) {
            i("number" == typeof e4);
            var t4 = e4 % 26, r4 = (e4 - t4) / 26, n2 = 1 << t4;
            if (this.length <= r4)
              return this._expand(r4 + 1), this.words[r4] |= n2, this;
            for (var o2 = n2, a2 = r4; 0 !== o2 && a2 < this.length; a2++) {
              var s2 = 0 | this.words[a2];
              o2 = (s2 += o2) >>> 26, s2 &= 67108863, this.words[a2] = s2;
            }
            return 0 !== o2 && (this.words[a2] = o2, this.length++), this;
          }, a.prototype.isZero = function() {
            return 1 === this.length && 0 === this.words[0];
          }, a.prototype.cmpn = function(e4) {
            var t4, r4 = e4 < 0;
            if (0 !== this.negative && !r4)
              return -1;
            if (0 === this.negative && r4)
              return 1;
            if (this._strip(), this.length > 1)
              t4 = 1;
            else {
              r4 && (e4 = -e4), i(e4 <= 67108863, "Number is too big");
              var n2 = 0 | this.words[0];
              t4 = n2 === e4 ? 0 : n2 < e4 ? -1 : 1;
            }
            return 0 !== this.negative ? 0 | -t4 : t4;
          }, a.prototype.cmp = function(e4) {
            if (0 !== this.negative && 0 === e4.negative)
              return -1;
            if (0 === this.negative && 0 !== e4.negative)
              return 1;
            var t4 = this.ucmp(e4);
            return 0 !== this.negative ? 0 | -t4 : t4;
          }, a.prototype.ucmp = function(e4) {
            if (this.length > e4.length)
              return 1;
            if (this.length < e4.length)
              return -1;
            for (var t4 = 0, r4 = this.length - 1; r4 >= 0; r4--) {
              var n2 = 0 | this.words[r4], i2 = 0 | e4.words[r4];
              if (n2 !== i2) {
                n2 < i2 ? t4 = -1 : n2 > i2 && (t4 = 1);
                break;
              }
            }
            return t4;
          }, a.prototype.gtn = function(e4) {
            return 1 === this.cmpn(e4);
          }, a.prototype.gt = function(e4) {
            return 1 === this.cmp(e4);
          }, a.prototype.gten = function(e4) {
            return this.cmpn(e4) >= 0;
          }, a.prototype.gte = function(e4) {
            return this.cmp(e4) >= 0;
          }, a.prototype.ltn = function(e4) {
            return -1 === this.cmpn(e4);
          }, a.prototype.lt = function(e4) {
            return -1 === this.cmp(e4);
          }, a.prototype.lten = function(e4) {
            return this.cmpn(e4) <= 0;
          }, a.prototype.lte = function(e4) {
            return this.cmp(e4) <= 0;
          }, a.prototype.eqn = function(e4) {
            return 0 === this.cmpn(e4);
          }, a.prototype.eq = function(e4) {
            return 0 === this.cmp(e4);
          }, a.red = function(e4) {
            return new P(e4);
          }, a.prototype.toRed = function(e4) {
            return i(!this.red, "Already a number in reduction context"), i(0 === this.negative, "red works only with positives"), e4.convertTo(this)._forceRed(e4);
          }, a.prototype.fromRed = function() {
            return i(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
          }, a.prototype._forceRed = function(e4) {
            return this.red = e4, this;
          }, a.prototype.forceRed = function(e4) {
            return i(!this.red, "Already a number in reduction context"), this._forceRed(e4);
          }, a.prototype.redAdd = function(e4) {
            return i(this.red, "redAdd works only with red numbers"), this.red.add(this, e4);
          }, a.prototype.redIAdd = function(e4) {
            return i(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, e4);
          }, a.prototype.redSub = function(e4) {
            return i(this.red, "redSub works only with red numbers"), this.red.sub(this, e4);
          }, a.prototype.redISub = function(e4) {
            return i(this.red, "redISub works only with red numbers"), this.red.isub(this, e4);
          }, a.prototype.redShl = function(e4) {
            return i(this.red, "redShl works only with red numbers"), this.red.shl(this, e4);
          }, a.prototype.redMul = function(e4) {
            return i(this.red, "redMul works only with red numbers"), this.red._verify2(this, e4), this.red.mul(this, e4);
          }, a.prototype.redIMul = function(e4) {
            return i(this.red, "redMul works only with red numbers"), this.red._verify2(this, e4), this.red.imul(this, e4);
          }, a.prototype.redSqr = function() {
            return i(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
          }, a.prototype.redISqr = function() {
            return i(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
          }, a.prototype.redSqrt = function() {
            return i(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
          }, a.prototype.redInvm = function() {
            return i(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
          }, a.prototype.redNeg = function() {
            return i(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
          }, a.prototype.redPow = function(e4) {
            return i(this.red && !e4.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, e4);
          };
          var A = { k256: null, p224: null, p192: null, p25519: null };
          function k(e4, t4) {
            this.name = e4, this.p = new a(t4, 16), this.n = this.p.bitLength(), this.k = new a(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
          }
          function _() {
            k.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
          }
          function S() {
            k.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
          }
          function E() {
            k.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
          }
          function x() {
            k.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
          }
          function P(e4) {
            if ("string" == typeof e4) {
              var t4 = a._prime(e4);
              this.m = t4.p, this.prime = t4;
            } else
              i(e4.gtn(1), "modulus must be greater than 1"), this.m = e4, this.prime = null;
          }
          function O(e4) {
            P.call(this, e4), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new a(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
          }
          k.prototype._tmp = function() {
            var e4 = new a(null);
            return e4.words = new Array(Math.ceil(this.n / 13)), e4;
          }, k.prototype.ireduce = function(e4) {
            var t4, r4 = e4;
            do {
              this.split(r4, this.tmp), t4 = (r4 = (r4 = this.imulK(r4)).iadd(this.tmp)).bitLength();
            } while (t4 > this.n);
            var n2 = t4 < this.n ? -1 : r4.ucmp(this.p);
            return 0 === n2 ? (r4.words[0] = 0, r4.length = 1) : n2 > 0 ? r4.isub(this.p) : void 0 !== r4.strip ? r4.strip() : r4._strip(), r4;
          }, k.prototype.split = function(e4, t4) {
            e4.iushrn(this.n, 0, t4);
          }, k.prototype.imulK = function(e4) {
            return e4.imul(this.k);
          }, o(_, k), _.prototype.split = function(e4, t4) {
            for (var r4 = 4194303, n2 = Math.min(e4.length, 9), i2 = 0; i2 < n2; i2++)
              t4.words[i2] = e4.words[i2];
            if (t4.length = n2, e4.length <= 9)
              return e4.words[0] = 0, void (e4.length = 1);
            var o2 = e4.words[9];
            for (t4.words[t4.length++] = o2 & r4, i2 = 10; i2 < e4.length; i2++) {
              var a2 = 0 | e4.words[i2];
              e4.words[i2 - 10] = (a2 & r4) << 4 | o2 >>> 22, o2 = a2;
            }
            o2 >>>= 22, e4.words[i2 - 10] = o2, 0 === o2 && e4.length > 10 ? e4.length -= 10 : e4.length -= 9;
          }, _.prototype.imulK = function(e4) {
            e4.words[e4.length] = 0, e4.words[e4.length + 1] = 0, e4.length += 2;
            for (var t4 = 0, r4 = 0; r4 < e4.length; r4++) {
              var n2 = 0 | e4.words[r4];
              t4 += 977 * n2, e4.words[r4] = 67108863 & t4, t4 = 64 * n2 + (t4 / 67108864 | 0);
            }
            return 0 === e4.words[e4.length - 1] && (e4.length--, 0 === e4.words[e4.length - 1] && e4.length--), e4;
          }, o(S, k), o(E, k), o(x, k), x.prototype.imulK = function(e4) {
            for (var t4 = 0, r4 = 0; r4 < e4.length; r4++) {
              var n2 = 19 * (0 | e4.words[r4]) + t4, i2 = 67108863 & n2;
              n2 >>>= 26, e4.words[r4] = i2, t4 = n2;
            }
            return 0 !== t4 && (e4.words[e4.length++] = t4), e4;
          }, a._prime = function(e4) {
            if (A[e4])
              return A[e4];
            var t4;
            if ("k256" === e4)
              t4 = new _();
            else if ("p224" === e4)
              t4 = new S();
            else if ("p192" === e4)
              t4 = new E();
            else {
              if ("p25519" !== e4)
                throw new Error("Unknown prime " + e4);
              t4 = new x();
            }
            return A[e4] = t4, t4;
          }, P.prototype._verify1 = function(e4) {
            i(0 === e4.negative, "red works only with positives"), i(e4.red, "red works only with red numbers");
          }, P.prototype._verify2 = function(e4, t4) {
            i(0 == (e4.negative | t4.negative), "red works only with positives"), i(e4.red && e4.red === t4.red, "red works only with red numbers");
          }, P.prototype.imod = function(e4) {
            return this.prime ? this.prime.ireduce(e4)._forceRed(this) : (d(e4, e4.umod(this.m)._forceRed(this)), e4);
          }, P.prototype.neg = function(e4) {
            return e4.isZero() ? e4.clone() : this.m.sub(e4)._forceRed(this);
          }, P.prototype.add = function(e4, t4) {
            this._verify2(e4, t4);
            var r4 = e4.add(t4);
            return r4.cmp(this.m) >= 0 && r4.isub(this.m), r4._forceRed(this);
          }, P.prototype.iadd = function(e4, t4) {
            this._verify2(e4, t4);
            var r4 = e4.iadd(t4);
            return r4.cmp(this.m) >= 0 && r4.isub(this.m), r4;
          }, P.prototype.sub = function(e4, t4) {
            this._verify2(e4, t4);
            var r4 = e4.sub(t4);
            return r4.cmpn(0) < 0 && r4.iadd(this.m), r4._forceRed(this);
          }, P.prototype.isub = function(e4, t4) {
            this._verify2(e4, t4);
            var r4 = e4.isub(t4);
            return r4.cmpn(0) < 0 && r4.iadd(this.m), r4;
          }, P.prototype.shl = function(e4, t4) {
            return this._verify1(e4), this.imod(e4.ushln(t4));
          }, P.prototype.imul = function(e4, t4) {
            return this._verify2(e4, t4), this.imod(e4.imul(t4));
          }, P.prototype.mul = function(e4, t4) {
            return this._verify2(e4, t4), this.imod(e4.mul(t4));
          }, P.prototype.isqr = function(e4) {
            return this.imul(e4, e4.clone());
          }, P.prototype.sqr = function(e4) {
            return this.mul(e4, e4);
          }, P.prototype.sqrt = function(e4) {
            if (e4.isZero())
              return e4.clone();
            var t4 = this.m.andln(3);
            if (i(t4 % 2 == 1), 3 === t4) {
              var r4 = this.m.add(new a(1)).iushrn(2);
              return this.pow(e4, r4);
            }
            for (var n2 = this.m.subn(1), o2 = 0; !n2.isZero() && 0 === n2.andln(1); )
              o2++, n2.iushrn(1);
            i(!n2.isZero());
            var s2 = new a(1).toRed(this), u2 = s2.redNeg(), c2 = this.m.subn(1).iushrn(1), f2 = this.m.bitLength();
            for (f2 = new a(2 * f2 * f2).toRed(this); 0 !== this.pow(f2, c2).cmp(u2); )
              f2.redIAdd(u2);
            for (var d2 = this.pow(f2, n2), l2 = this.pow(e4, n2.addn(1).iushrn(1)), h2 = this.pow(e4, n2), p2 = o2; 0 !== h2.cmp(s2); ) {
              for (var b2 = h2, y2 = 0; 0 !== b2.cmp(s2); y2++)
                b2 = b2.redSqr();
              i(y2 < p2);
              var m2 = this.pow(d2, new a(1).iushln(p2 - y2 - 1));
              l2 = l2.redMul(m2), d2 = m2.redSqr(), h2 = h2.redMul(d2), p2 = y2;
            }
            return l2;
          }, P.prototype.invm = function(e4) {
            var t4 = e4._invmp(this.m);
            return 0 !== t4.negative ? (t4.negative = 0, this.imod(t4).redNeg()) : this.imod(t4);
          }, P.prototype.pow = function(e4, t4) {
            if (t4.isZero())
              return new a(1).toRed(this);
            if (0 === t4.cmpn(1))
              return e4.clone();
            var r4 = new Array(16);
            r4[0] = new a(1).toRed(this), r4[1] = e4;
            for (var n2 = 2; n2 < r4.length; n2++)
              r4[n2] = this.mul(r4[n2 - 1], e4);
            var i2 = r4[0], o2 = 0, s2 = 0, u2 = t4.bitLength() % 26;
            for (0 === u2 && (u2 = 26), n2 = t4.length - 1; n2 >= 0; n2--) {
              for (var c2 = t4.words[n2], f2 = u2 - 1; f2 >= 0; f2--) {
                var d2 = c2 >> f2 & 1;
                i2 !== r4[0] && (i2 = this.sqr(i2)), 0 !== d2 || 0 !== o2 ? (o2 <<= 1, o2 |= d2, (4 == ++s2 || 0 === n2 && 0 === f2) && (i2 = this.mul(i2, r4[o2]), s2 = 0, o2 = 0)) : s2 = 0;
              }
              u2 = 26;
            }
            return i2;
          }, P.prototype.convertTo = function(e4) {
            var t4 = e4.umod(this.m);
            return t4 === e4 ? t4.clone() : t4;
          }, P.prototype.convertFrom = function(e4) {
            var t4 = e4.clone();
            return t4.red = null, t4;
          }, a.mont = function(e4) {
            return new O(e4);
          }, o(O, P), O.prototype.convertTo = function(e4) {
            return this.imod(e4.ushln(this.shift));
          }, O.prototype.convertFrom = function(e4) {
            var t4 = this.imod(e4.mul(this.rinv));
            return t4.red = null, t4;
          }, O.prototype.imul = function(e4, t4) {
            if (e4.isZero() || t4.isZero())
              return e4.words[0] = 0, e4.length = 1, e4;
            var r4 = e4.imul(t4), n2 = r4.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i2 = r4.isub(n2).iushrn(this.shift), o2 = i2;
            return i2.cmp(this.m) >= 0 ? o2 = i2.isub(this.m) : i2.cmpn(0) < 0 && (o2 = i2.iadd(this.m)), o2._forceRed(this);
          }, O.prototype.mul = function(e4, t4) {
            if (e4.isZero() || t4.isZero())
              return new a(0)._forceRed(this);
            var r4 = e4.mul(t4), n2 = r4.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i2 = r4.isub(n2).iushrn(this.shift), o2 = i2;
            return i2.cmp(this.m) >= 0 ? o2 = i2.isub(this.m) : i2.cmpn(0) < 0 && (o2 = i2.iadd(this.m)), o2._forceRed(this);
          }, O.prototype.invm = function(e4) {
            return this.imod(e4._invmp(this.m).mul(this.r2))._forceRed(this);
          };
        }(e2);
      }, 2202: (e2, t2, r3) => {
        "use strict";
        var n, i = r3(8847)(r3(3355));
        function o(e3) {
          this.rand = e3;
        }
        if (e2.exports = function(e3) {
          return n || (n = new o(null)), n.generate(e3);
        }, e2.exports.Rand = o, o.prototype.generate = function(e3) {
          return this._rand(e3);
        }, o.prototype._rand = function(e3) {
          if (this.rand.getBytes)
            return this.rand.getBytes(e3);
          for (var t3 = new Uint8Array(e3), r4 = 0; r4 < t3.length; r4++)
            t3[r4] = this.rand.getByte();
          return t3;
        }, "object" === ("undefined" == typeof self ? "undefined" : (0, i.default)(self)))
          self.crypto && self.crypto.getRandomValues ? o.prototype._rand = function(e3) {
            var t3 = new Uint8Array(e3);
            return self.crypto.getRandomValues(t3), t3;
          } : self.msCrypto && self.msCrypto.getRandomValues ? o.prototype._rand = function(e3) {
            var t3 = new Uint8Array(e3);
            return self.msCrypto.getRandomValues(t3), t3;
          } : "object" === ("undefined" == typeof window ? "undefined" : (0, i.default)(window)) && (o.prototype._rand = function() {
            throw new Error("Not implemented yet");
          });
        else
          try {
            var a = r3(9214);
            if ("function" != typeof a.randomBytes)
              throw new Error("Not supported");
            o.prototype._rand = function(e3) {
              return a.randomBytes(e3);
            };
          } catch (e3) {
          }
      }, 7494: (e2, t2, r3) => {
        "use strict";
        var n = r3(8850).Buffer;
        function i(e3) {
          n.isBuffer(e3) || (e3 = n.from(e3));
          for (var t3 = e3.length / 4 | 0, r4 = new Array(t3), i2 = 0; i2 < t3; i2++)
            r4[i2] = e3.readUInt32BE(4 * i2);
          return r4;
        }
        function o(e3) {
          for (; 0 < e3.length; e3++)
            e3[0] = 0;
        }
        function a(e3, t3, r4, n2, i2) {
          for (var o2, a2, s2, u2, c2 = r4[0], f = r4[1], d = r4[2], l = r4[3], h = e3[0] ^ t3[0], p = e3[1] ^ t3[1], b = e3[2] ^ t3[2], y = e3[3] ^ t3[3], m = 4, v = 1; v < i2; v++)
            o2 = c2[h >>> 24] ^ f[p >>> 16 & 255] ^ d[b >>> 8 & 255] ^ l[255 & y] ^ t3[m++], a2 = c2[p >>> 24] ^ f[b >>> 16 & 255] ^ d[y >>> 8 & 255] ^ l[255 & h] ^ t3[m++], s2 = c2[b >>> 24] ^ f[y >>> 16 & 255] ^ d[h >>> 8 & 255] ^ l[255 & p] ^ t3[m++], u2 = c2[y >>> 24] ^ f[h >>> 16 & 255] ^ d[p >>> 8 & 255] ^ l[255 & b] ^ t3[m++], h = o2, p = a2, b = s2, y = u2;
          return o2 = (n2[h >>> 24] << 24 | n2[p >>> 16 & 255] << 16 | n2[b >>> 8 & 255] << 8 | n2[255 & y]) ^ t3[m++], a2 = (n2[p >>> 24] << 24 | n2[b >>> 16 & 255] << 16 | n2[y >>> 8 & 255] << 8 | n2[255 & h]) ^ t3[m++], s2 = (n2[b >>> 24] << 24 | n2[y >>> 16 & 255] << 16 | n2[h >>> 8 & 255] << 8 | n2[255 & p]) ^ t3[m++], u2 = (n2[y >>> 24] << 24 | n2[h >>> 16 & 255] << 16 | n2[p >>> 8 & 255] << 8 | n2[255 & b]) ^ t3[m++], [o2 >>>= 0, a2 >>>= 0, s2 >>>= 0, u2 >>>= 0];
        }
        var s = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], u = function() {
          for (var e3 = new Array(256), t3 = 0; t3 < 256; t3++)
            e3[t3] = t3 < 128 ? t3 << 1 : t3 << 1 ^ 283;
          for (var r4 = [], n2 = [], i2 = [[], [], [], []], o2 = [[], [], [], []], a2 = 0, s2 = 0, u2 = 0; u2 < 256; ++u2) {
            var c2 = s2 ^ s2 << 1 ^ s2 << 2 ^ s2 << 3 ^ s2 << 4;
            c2 = c2 >>> 8 ^ 255 & c2 ^ 99, r4[a2] = c2, n2[c2] = a2;
            var f = e3[a2], d = e3[f], l = e3[d], h = 257 * e3[c2] ^ 16843008 * c2;
            i2[0][a2] = h << 24 | h >>> 8, i2[1][a2] = h << 16 | h >>> 16, i2[2][a2] = h << 8 | h >>> 24, i2[3][a2] = h, h = 16843009 * l ^ 65537 * d ^ 257 * f ^ 16843008 * a2, o2[0][c2] = h << 24 | h >>> 8, o2[1][c2] = h << 16 | h >>> 16, o2[2][c2] = h << 8 | h >>> 24, o2[3][c2] = h, 0 === a2 ? a2 = s2 = 1 : (a2 = f ^ e3[e3[e3[l ^ f]]], s2 ^= e3[e3[s2]]);
          }
          return { SBOX: r4, INV_SBOX: n2, SUB_MIX: i2, INV_SUB_MIX: o2 };
        }();
        function c(e3) {
          this._key = i(e3), this._reset();
        }
        c.blockSize = 16, c.keySize = 32, c.prototype.blockSize = c.blockSize, c.prototype.keySize = c.keySize, c.prototype._reset = function() {
          for (var e3 = this._key, t3 = e3.length, r4 = t3 + 6, n2 = 4 * (r4 + 1), i2 = [], o2 = 0; o2 < t3; o2++)
            i2[o2] = e3[o2];
          for (o2 = t3; o2 < n2; o2++) {
            var a2 = i2[o2 - 1];
            o2 % t3 == 0 ? (a2 = a2 << 8 | a2 >>> 24, a2 = u.SBOX[a2 >>> 24] << 24 | u.SBOX[a2 >>> 16 & 255] << 16 | u.SBOX[a2 >>> 8 & 255] << 8 | u.SBOX[255 & a2], a2 ^= s[o2 / t3 | 0] << 24) : t3 > 6 && o2 % t3 == 4 && (a2 = u.SBOX[a2 >>> 24] << 24 | u.SBOX[a2 >>> 16 & 255] << 16 | u.SBOX[a2 >>> 8 & 255] << 8 | u.SBOX[255 & a2]), i2[o2] = i2[o2 - t3] ^ a2;
          }
          for (var c2 = [], f = 0; f < n2; f++) {
            var d = n2 - f, l = i2[d - (f % 4 ? 0 : 4)];
            c2[f] = f < 4 || d <= 4 ? l : u.INV_SUB_MIX[0][u.SBOX[l >>> 24]] ^ u.INV_SUB_MIX[1][u.SBOX[l >>> 16 & 255]] ^ u.INV_SUB_MIX[2][u.SBOX[l >>> 8 & 255]] ^ u.INV_SUB_MIX[3][u.SBOX[255 & l]];
          }
          this._nRounds = r4, this._keySchedule = i2, this._invKeySchedule = c2;
        }, c.prototype.encryptBlockRaw = function(e3) {
          return a(e3 = i(e3), this._keySchedule, u.SUB_MIX, u.SBOX, this._nRounds);
        }, c.prototype.encryptBlock = function(e3) {
          var t3 = this.encryptBlockRaw(e3), r4 = n.allocUnsafe(16);
          return r4.writeUInt32BE(t3[0], 0), r4.writeUInt32BE(t3[1], 4), r4.writeUInt32BE(t3[2], 8), r4.writeUInt32BE(t3[3], 12), r4;
        }, c.prototype.decryptBlock = function(e3) {
          var t3 = (e3 = i(e3))[1];
          e3[1] = e3[3], e3[3] = t3;
          var r4 = a(e3, this._invKeySchedule, u.INV_SUB_MIX, u.INV_SBOX, this._nRounds), o2 = n.allocUnsafe(16);
          return o2.writeUInt32BE(r4[0], 0), o2.writeUInt32BE(r4[3], 4), o2.writeUInt32BE(r4[2], 8), o2.writeUInt32BE(r4[1], 12), o2;
        }, c.prototype.scrub = function() {
          o(this._keySchedule), o(this._invKeySchedule), o(this._key);
        }, e2.exports.AES = c;
      }, 426: (e2, t2, r3) => {
        "use strict";
        var n = r3(7494), i = r3(8850).Buffer, o = r3(3013), a = r3(1736), s = r3(6626), u = r3(6316), c = r3(7557);
        function f(e3, t3, r4, a2) {
          o.call(this);
          var u2 = i.alloc(4, 0);
          this._cipher = new n.AES(t3);
          var f2 = this._cipher.encryptBlock(u2);
          this._ghash = new s(f2), r4 = function(e4, t4, r5) {
            if (12 === t4.length)
              return e4._finID = i.concat([t4, i.from([0, 0, 0, 1])]), i.concat([t4, i.from([0, 0, 0, 2])]);
            var n2 = new s(r5), o2 = t4.length, a3 = o2 % 16;
            n2.update(t4), a3 && (a3 = 16 - a3, n2.update(i.alloc(a3, 0))), n2.update(i.alloc(8, 0));
            var u3 = 8 * o2, f3 = i.alloc(8);
            f3.writeUIntBE(u3, 0, 8), n2.update(f3), e4._finID = n2.state;
            var d = i.from(e4._finID);
            return c(d), d;
          }(this, r4, f2), this._prev = i.from(r4), this._cache = i.allocUnsafe(0), this._secCache = i.allocUnsafe(0), this._decrypt = a2, this._alen = 0, this._len = 0, this._mode = e3, this._authTag = null, this._called = false;
        }
        a(f, o), f.prototype._update = function(e3) {
          if (!this._called && this._alen) {
            var t3 = 16 - this._alen % 16;
            t3 < 16 && (t3 = i.alloc(t3, 0), this._ghash.update(t3));
          }
          this._called = true;
          var r4 = this._mode.encrypt(this, e3);
          return this._decrypt ? this._ghash.update(e3) : this._ghash.update(r4), this._len += e3.length, r4;
        }, f.prototype._final = function() {
          if (this._decrypt && !this._authTag)
            throw new Error("Unsupported state or unable to authenticate data");
          var e3 = u(this._ghash.final(8 * this._alen, 8 * this._len), this._cipher.encryptBlock(this._finID));
          if (this._decrypt && function(e4, t3) {
            var r4 = 0;
            e4.length !== t3.length && r4++;
            for (var n2 = Math.min(e4.length, t3.length), i2 = 0; i2 < n2; ++i2)
              r4 += e4[i2] ^ t3[i2];
            return r4;
          }(e3, this._authTag))
            throw new Error("Unsupported state or unable to authenticate data");
          this._authTag = e3, this._cipher.scrub();
        }, f.prototype.getAuthTag = function() {
          if (this._decrypt || !i.isBuffer(this._authTag))
            throw new Error("Attempting to get auth tag in unsupported state");
          return this._authTag;
        }, f.prototype.setAuthTag = function(e3) {
          if (!this._decrypt)
            throw new Error("Attempting to set auth tag in unsupported state");
          this._authTag = e3;
        }, f.prototype.setAAD = function(e3) {
          if (this._called)
            throw new Error("Attempting to set AAD in unsupported state");
          this._ghash.update(e3), this._alen += e3.length;
        }, e2.exports = f;
      }, 8073: (e2, t2, r3) => {
        "use strict";
        var n = r3(5478), i = r3(2184), o = r3(4946);
        t2.createCipher = t2.Cipher = n.createCipher, t2.createCipheriv = t2.Cipheriv = n.createCipheriv, t2.createDecipher = t2.Decipher = i.createDecipher, t2.createDecipheriv = t2.Decipheriv = i.createDecipheriv, t2.listCiphers = t2.getCiphers = function() {
          return Object.keys(o);
        };
      }, 2184: (e2, t2, r3) => {
        "use strict";
        var n = r3(426), i = r3(8850).Buffer, o = r3(8408), a = r3(1408), s = r3(3013), u = r3(7494), c = r3(7085);
        function f(e3, t3, r4) {
          s.call(this), this._cache = new d(), this._last = void 0, this._cipher = new u.AES(t3), this._prev = i.from(r4), this._mode = e3, this._autopadding = true;
        }
        function d() {
          this.cache = i.allocUnsafe(0);
        }
        function l(e3, t3, r4) {
          var s2 = o[e3.toLowerCase()];
          if (!s2)
            throw new TypeError("invalid suite type");
          if ("string" == typeof r4 && (r4 = i.from(r4)), "GCM" !== s2.mode && r4.length !== s2.iv)
            throw new TypeError("invalid iv length " + r4.length);
          if ("string" == typeof t3 && (t3 = i.from(t3)), t3.length !== s2.key / 8)
            throw new TypeError("invalid key length " + t3.length);
          return "stream" === s2.type ? new a(s2.module, t3, r4, true) : "auth" === s2.type ? new n(s2.module, t3, r4, true) : new f(s2.module, t3, r4);
        }
        r3(1736)(f, s), f.prototype._update = function(e3) {
          var t3, r4;
          this._cache.add(e3);
          for (var n2 = []; t3 = this._cache.get(this._autopadding); )
            r4 = this._mode.decrypt(this, t3), n2.push(r4);
          return i.concat(n2);
        }, f.prototype._final = function() {
          var e3 = this._cache.flush();
          if (this._autopadding)
            return function(e4) {
              var t3 = e4[15];
              if (t3 < 1 || t3 > 16)
                throw new Error("unable to decrypt data");
              for (var r4 = -1; ++r4 < t3; )
                if (e4[r4 + (16 - t3)] !== t3)
                  throw new Error("unable to decrypt data");
              if (16 !== t3)
                return e4.slice(0, 16 - t3);
            }(this._mode.decrypt(this, e3));
          if (e3)
            throw new Error("data not multiple of block length");
        }, f.prototype.setAutoPadding = function(e3) {
          return this._autopadding = !!e3, this;
        }, d.prototype.add = function(e3) {
          this.cache = i.concat([this.cache, e3]);
        }, d.prototype.get = function(e3) {
          var t3;
          if (e3) {
            if (this.cache.length > 16)
              return t3 = this.cache.slice(0, 16), this.cache = this.cache.slice(16), t3;
          } else if (this.cache.length >= 16)
            return t3 = this.cache.slice(0, 16), this.cache = this.cache.slice(16), t3;
          return null;
        }, d.prototype.flush = function() {
          if (this.cache.length)
            return this.cache;
        }, t2.createDecipher = function(e3, t3) {
          var r4 = o[e3.toLowerCase()];
          if (!r4)
            throw new TypeError("invalid suite type");
          var n2 = c(t3, false, r4.key, r4.iv);
          return l(e3, n2.key, n2.iv);
        }, t2.createDecipheriv = l;
      }, 5478: (e2, t2, r3) => {
        "use strict";
        var n = r3(8408), i = r3(426), o = r3(8850).Buffer, a = r3(1408), s = r3(3013), u = r3(7494), c = r3(7085);
        function f(e3, t3, r4) {
          s.call(this), this._cache = new l(), this._cipher = new u.AES(t3), this._prev = o.from(r4), this._mode = e3, this._autopadding = true;
        }
        r3(1736)(f, s), f.prototype._update = function(e3) {
          var t3, r4;
          this._cache.add(e3);
          for (var n2 = []; t3 = this._cache.get(); )
            r4 = this._mode.encrypt(this, t3), n2.push(r4);
          return o.concat(n2);
        };
        var d = o.alloc(16, 16);
        function l() {
          this.cache = o.allocUnsafe(0);
        }
        function h(e3, t3, r4) {
          var s2 = n[e3.toLowerCase()];
          if (!s2)
            throw new TypeError("invalid suite type");
          if ("string" == typeof t3 && (t3 = o.from(t3)), t3.length !== s2.key / 8)
            throw new TypeError("invalid key length " + t3.length);
          if ("string" == typeof r4 && (r4 = o.from(r4)), "GCM" !== s2.mode && r4.length !== s2.iv)
            throw new TypeError("invalid iv length " + r4.length);
          return "stream" === s2.type ? new a(s2.module, t3, r4) : "auth" === s2.type ? new i(s2.module, t3, r4) : new f(s2.module, t3, r4);
        }
        f.prototype._final = function() {
          var e3 = this._cache.flush();
          if (this._autopadding)
            return e3 = this._mode.encrypt(this, e3), this._cipher.scrub(), e3;
          if (!e3.equals(d))
            throw this._cipher.scrub(), new Error("data not multiple of block length");
        }, f.prototype.setAutoPadding = function(e3) {
          return this._autopadding = !!e3, this;
        }, l.prototype.add = function(e3) {
          this.cache = o.concat([this.cache, e3]);
        }, l.prototype.get = function() {
          if (this.cache.length > 15) {
            var e3 = this.cache.slice(0, 16);
            return this.cache = this.cache.slice(16), e3;
          }
          return null;
        }, l.prototype.flush = function() {
          for (var e3 = 16 - this.cache.length, t3 = o.allocUnsafe(e3), r4 = -1; ++r4 < e3; )
            t3.writeUInt8(e3, r4);
          return o.concat([this.cache, t3]);
        }, t2.createCipheriv = h, t2.createCipher = function(e3, t3) {
          var r4 = n[e3.toLowerCase()];
          if (!r4)
            throw new TypeError("invalid suite type");
          var i2 = c(t3, false, r4.key, r4.iv);
          return h(e3, i2.key, i2.iv);
        };
      }, 6626: (e2, t2, r3) => {
        "use strict";
        var n = r3(8850).Buffer, i = n.alloc(16, 0);
        function o(e3) {
          var t3 = n.allocUnsafe(16);
          return t3.writeUInt32BE(e3[0] >>> 0, 0), t3.writeUInt32BE(e3[1] >>> 0, 4), t3.writeUInt32BE(e3[2] >>> 0, 8), t3.writeUInt32BE(e3[3] >>> 0, 12), t3;
        }
        function a(e3) {
          this.h = e3, this.state = n.alloc(16, 0), this.cache = n.allocUnsafe(0);
        }
        a.prototype.ghash = function(e3) {
          for (var t3 = -1; ++t3 < e3.length; )
            this.state[t3] ^= e3[t3];
          this._multiply();
        }, a.prototype._multiply = function() {
          for (var e3, t3, r4, n2 = [(e3 = this.h).readUInt32BE(0), e3.readUInt32BE(4), e3.readUInt32BE(8), e3.readUInt32BE(12)], i2 = [0, 0, 0, 0], a2 = -1; ++a2 < 128; ) {
            for (0 != (this.state[~~(a2 / 8)] & 1 << 7 - a2 % 8) && (i2[0] ^= n2[0], i2[1] ^= n2[1], i2[2] ^= n2[2], i2[3] ^= n2[3]), r4 = 0 != (1 & n2[3]), t3 = 3; t3 > 0; t3--)
              n2[t3] = n2[t3] >>> 1 | (1 & n2[t3 - 1]) << 31;
            n2[0] = n2[0] >>> 1, r4 && (n2[0] = n2[0] ^ 225 << 24);
          }
          this.state = o(i2);
        }, a.prototype.update = function(e3) {
          var t3;
          for (this.cache = n.concat([this.cache, e3]); this.cache.length >= 16; )
            t3 = this.cache.slice(0, 16), this.cache = this.cache.slice(16), this.ghash(t3);
        }, a.prototype.final = function(e3, t3) {
          return this.cache.length && this.ghash(n.concat([this.cache, i], 16)), this.ghash(o([0, e3, 0, t3])), this.state;
        }, e2.exports = a;
      }, 7557: (e2) => {
        "use strict";
        e2.exports = function(e3) {
          for (var t2, r3 = e3.length; r3--; ) {
            if (255 !== (t2 = e3.readUInt8(r3))) {
              t2++, e3.writeUInt8(t2, r3);
              break;
            }
            e3.writeUInt8(0, r3);
          }
        };
      }, 7427: (e2, t2, r3) => {
        "use strict";
        var n = r3(6316);
        t2.encrypt = function(e3, t3) {
          var r4 = n(t3, e3._prev);
          return e3._prev = e3._cipher.encryptBlock(r4), e3._prev;
        }, t2.decrypt = function(e3, t3) {
          var r4 = e3._prev;
          e3._prev = t3;
          var i = e3._cipher.decryptBlock(t3);
          return n(i, r4);
        };
      }, 4030: (e2, t2, r3) => {
        "use strict";
        var n = r3(8850).Buffer, i = r3(6316);
        function o(e3, t3, r4) {
          var o2 = t3.length, a = i(t3, e3._cache);
          return e3._cache = e3._cache.slice(o2), e3._prev = n.concat([e3._prev, r4 ? t3 : a]), a;
        }
        t2.encrypt = function(e3, t3, r4) {
          for (var i2, a = n.allocUnsafe(0); t3.length; ) {
            if (0 === e3._cache.length && (e3._cache = e3._cipher.encryptBlock(e3._prev), e3._prev = n.allocUnsafe(0)), !(e3._cache.length <= t3.length)) {
              a = n.concat([a, o(e3, t3, r4)]);
              break;
            }
            i2 = e3._cache.length, a = n.concat([a, o(e3, t3.slice(0, i2), r4)]), t3 = t3.slice(i2);
          }
          return a;
        };
      }, 3206: (e2, t2, r3) => {
        "use strict";
        var n = r3(8850).Buffer;
        function i(e3, t3, r4) {
          for (var n2, i2, a = -1, s = 0; ++a < 8; )
            n2 = t3 & 1 << 7 - a ? 128 : 0, s += (128 & (i2 = e3._cipher.encryptBlock(e3._prev)[0] ^ n2)) >> a % 8, e3._prev = o(e3._prev, r4 ? n2 : i2);
          return s;
        }
        function o(e3, t3) {
          var r4 = e3.length, i2 = -1, o2 = n.allocUnsafe(e3.length);
          for (e3 = n.concat([e3, n.from([t3])]); ++i2 < r4; )
            o2[i2] = e3[i2] << 1 | e3[i2 + 1] >> 7;
          return o2;
        }
        t2.encrypt = function(e3, t3, r4) {
          for (var o2 = t3.length, a = n.allocUnsafe(o2), s = -1; ++s < o2; )
            a[s] = i(e3, t3[s], r4);
          return a;
        };
      }, 4726: (e2, t2, r3) => {
        "use strict";
        var n = r3(8850).Buffer;
        function i(e3, t3, r4) {
          var i2 = e3._cipher.encryptBlock(e3._prev)[0] ^ t3;
          return e3._prev = n.concat([e3._prev.slice(1), n.from([r4 ? t3 : i2])]), i2;
        }
        t2.encrypt = function(e3, t3, r4) {
          for (var o = t3.length, a = n.allocUnsafe(o), s = -1; ++s < o; )
            a[s] = i(e3, t3[s], r4);
          return a;
        };
      }, 2802: (e2, t2, r3) => {
        "use strict";
        var n = r3(6316), i = r3(8850).Buffer, o = r3(7557);
        function a(e3) {
          var t3 = e3._cipher.encryptBlockRaw(e3._prev);
          return o(e3._prev), t3;
        }
        t2.encrypt = function(e3, t3) {
          var r4 = Math.ceil(t3.length / 16), o2 = e3._cache.length;
          e3._cache = i.concat([e3._cache, i.allocUnsafe(16 * r4)]);
          for (var s = 0; s < r4; s++) {
            var u = a(e3), c = o2 + 16 * s;
            e3._cache.writeUInt32BE(u[0], c + 0), e3._cache.writeUInt32BE(u[1], c + 4), e3._cache.writeUInt32BE(u[2], c + 8), e3._cache.writeUInt32BE(u[3], c + 12);
          }
          var f = e3._cache.slice(0, t3.length);
          return e3._cache = e3._cache.slice(t3.length), n(t3, f);
        };
      }, 9297: (e2, t2) => {
        "use strict";
        t2.encrypt = function(e3, t3) {
          return e3._cipher.encryptBlock(t3);
        }, t2.decrypt = function(e3, t3) {
          return e3._cipher.decryptBlock(t3);
        };
      }, 8408: (e2, t2, r3) => {
        "use strict";
        var n = { ECB: r3(9297), CBC: r3(7427), CFB: r3(4030), CFB8: r3(4726), CFB1: r3(3206), OFB: r3(1962), CTR: r3(2802), GCM: r3(2802) }, i = r3(4946);
        for (var o in i)
          i[o].module = n[i[o].mode];
        e2.exports = i;
      }, 1962: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(6316);
        function o(e3) {
          return e3._prev = e3._cipher.encryptBlock(e3._prev), e3._prev;
        }
        t2.encrypt = function(e3, t3) {
          for (; e3._cache.length < t3.length; )
            e3._cache = n.concat([e3._cache, o(e3)]);
          var r4 = e3._cache.slice(0, t3.length);
          return e3._cache = e3._cache.slice(t3.length), i(t3, r4);
        };
      }, 1408: (e2, t2, r3) => {
        "use strict";
        var n = r3(7494), i = r3(8850).Buffer, o = r3(3013);
        function a(e3, t3, r4, a2) {
          o.call(this), this._cipher = new n.AES(t3), this._prev = i.from(r4), this._cache = i.allocUnsafe(0), this._secCache = i.allocUnsafe(0), this._decrypt = a2, this._mode = e3;
        }
        r3(1736)(a, o), a.prototype._update = function(e3) {
          return this._mode.encrypt(this, e3, this._decrypt);
        }, a.prototype._final = function() {
          this._cipher.scrub();
        }, e2.exports = a;
      }, 6805: (e2, t2, r3) => {
        "use strict";
        var n = r3(9120), i = r3(8073), o = r3(8408), a = r3(867), s = r3(7085);
        function u(e3, t3, r4) {
          if (e3 = e3.toLowerCase(), o[e3])
            return i.createCipheriv(e3, t3, r4);
          if (a[e3])
            return new n({ key: t3, iv: r4, mode: e3 });
          throw new TypeError("invalid suite type");
        }
        function c(e3, t3, r4) {
          if (e3 = e3.toLowerCase(), o[e3])
            return i.createDecipheriv(e3, t3, r4);
          if (a[e3])
            return new n({ key: t3, iv: r4, mode: e3, decrypt: true });
          throw new TypeError("invalid suite type");
        }
        t2.createCipher = t2.Cipher = function(e3, t3) {
          var r4, n2;
          if (e3 = e3.toLowerCase(), o[e3])
            r4 = o[e3].key, n2 = o[e3].iv;
          else {
            if (!a[e3])
              throw new TypeError("invalid suite type");
            r4 = 8 * a[e3].key, n2 = a[e3].iv;
          }
          var i2 = s(t3, false, r4, n2);
          return u(e3, i2.key, i2.iv);
        }, t2.createCipheriv = t2.Cipheriv = u, t2.createDecipher = t2.Decipher = function(e3, t3) {
          var r4, n2;
          if (e3 = e3.toLowerCase(), o[e3])
            r4 = o[e3].key, n2 = o[e3].iv;
          else {
            if (!a[e3])
              throw new TypeError("invalid suite type");
            r4 = 8 * a[e3].key, n2 = a[e3].iv;
          }
          var i2 = s(t3, false, r4, n2);
          return c(e3, i2.key, i2.iv);
        }, t2.createDecipheriv = t2.Decipheriv = c, t2.listCiphers = t2.getCiphers = function() {
          return Object.keys(a).concat(i.getCiphers());
        };
      }, 9120: (e2, t2, r3) => {
        "use strict";
        var n = r3(3013), i = r3(5626), o = r3(1736), a = r3(8850).Buffer, s = { "des-ede3-cbc": i.CBC.instantiate(i.EDE), "des-ede3": i.EDE, "des-ede-cbc": i.CBC.instantiate(i.EDE), "des-ede": i.EDE, "des-cbc": i.CBC.instantiate(i.DES), "des-ecb": i.DES };
        function u(e3) {
          n.call(this);
          var t3, r4 = e3.mode.toLowerCase(), i2 = s[r4];
          t3 = e3.decrypt ? "decrypt" : "encrypt";
          var o2 = e3.key;
          a.isBuffer(o2) || (o2 = a.from(o2)), "des-ede" !== r4 && "des-ede-cbc" !== r4 || (o2 = a.concat([o2, o2.slice(0, 8)]));
          var u2 = e3.iv;
          a.isBuffer(u2) || (u2 = a.from(u2)), this._des = i2.create({ key: o2, iv: u2, type: t3 });
        }
        s.des = s["des-cbc"], s.des3 = s["des-ede3-cbc"], e2.exports = u, o(u, n), u.prototype._update = function(e3) {
          return a.from(this._des.update(e3));
        }, u.prototype._final = function() {
          return a.from(this._des.final());
        };
      }, 867: (e2, t2) => {
        "use strict";
        t2["des-ecb"] = { key: 8, iv: 0 }, t2["des-cbc"] = t2.des = { key: 8, iv: 8 }, t2["des-ede3-cbc"] = t2.des3 = { key: 24, iv: 8 }, t2["des-ede3"] = { key: 24, iv: 0 }, t2["des-ede-cbc"] = { key: 16, iv: 8 }, t2["des-ede"] = { key: 16, iv: 0 };
      }, 9782: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(1734), o = r3(5010);
        function a(e3) {
          var t3, r4 = e3.modulus.byteLength();
          do {
            t3 = new i(o(r4));
          } while (t3.cmp(e3.modulus) >= 0 || !t3.umod(e3.prime1) || !t3.umod(e3.prime2));
          return t3;
        }
        function s(e3, t3) {
          var r4 = function(e4) {
            var t4 = a(e4);
            return { blinder: t4.toRed(i.mont(e4.modulus)).redPow(new i(e4.publicExponent)).fromRed(), unblinder: t4.invm(e4.modulus) };
          }(t3), o2 = t3.modulus.byteLength(), s2 = new i(e3).mul(r4.blinder).umod(t3.modulus), u = s2.toRed(i.mont(t3.prime1)), c = s2.toRed(i.mont(t3.prime2)), f = t3.coefficient, d = t3.prime1, l = t3.prime2, h = u.redPow(t3.exponent1).fromRed(), p = c.redPow(t3.exponent2).fromRed(), b = h.isub(p).imul(f).umod(d).imul(l);
          return p.iadd(b).imul(r4.unblinder).umod(t3.modulus).toArrayLike(n, "be", o2);
        }
        s.getr = a, e2.exports = s;
      }, 6561: (e2, t2, r3) => {
        "use strict";
        e2.exports = r3(5207);
      }, 9527: (e2, t2, r3) => {
        "use strict";
        var n = r3(8850).Buffer, i = r3(5866), o = r3(6505), a = r3(1736), s = r3(1628), u = r3(5410), c = r3(5207);
        function f(e3) {
          o.Writable.call(this);
          var t3 = c[e3];
          if (!t3)
            throw new Error("Unknown message digest");
          this._hashType = t3.hash, this._hash = i(t3.hash), this._tag = t3.id, this._signType = t3.sign;
        }
        function d(e3) {
          o.Writable.call(this);
          var t3 = c[e3];
          if (!t3)
            throw new Error("Unknown message digest");
          this._hash = i(t3.hash), this._tag = t3.id, this._signType = t3.sign;
        }
        function l(e3) {
          return new f(e3);
        }
        function h(e3) {
          return new d(e3);
        }
        Object.keys(c).forEach(function(e3) {
          c[e3].id = n.from(c[e3].id, "hex"), c[e3.toLowerCase()] = c[e3];
        }), a(f, o.Writable), f.prototype._write = function(e3, t3, r4) {
          this._hash.update(e3), r4();
        }, f.prototype.update = function(e3, t3) {
          return "string" == typeof e3 && (e3 = n.from(e3, t3)), this._hash.update(e3), this;
        }, f.prototype.sign = function(e3, t3) {
          this.end();
          var r4 = this._hash.digest(), n2 = s(r4, e3, this._hashType, this._signType, this._tag);
          return t3 ? n2.toString(t3) : n2;
        }, a(d, o.Writable), d.prototype._write = function(e3, t3, r4) {
          this._hash.update(e3), r4();
        }, d.prototype.update = function(e3, t3) {
          return "string" == typeof e3 && (e3 = n.from(e3, t3)), this._hash.update(e3), this;
        }, d.prototype.verify = function(e3, t3, r4) {
          "string" == typeof t3 && (t3 = n.from(t3, r4)), this.end();
          var i2 = this._hash.digest();
          return u(t3, i2, e3, this._signType, this._tag);
        }, e2.exports = { Sign: l, Verify: h, createSign: l, createVerify: h };
      }, 1628: (e2, t2, r3) => {
        "use strict";
        var n = r3(8850).Buffer, i = r3(4424), o = r3(9782), a = r3(6597).ec, s = r3(1734), u = r3(7552), c = r3(1308);
        function f(e3, t3, r4, o2) {
          if ((e3 = n.from(e3.toArray())).length < t3.byteLength()) {
            var a2 = n.alloc(t3.byteLength() - e3.length);
            e3 = n.concat([a2, e3]);
          }
          var s2 = r4.length, u2 = function(e4, t4) {
            e4 = (e4 = d(e4, t4)).mod(t4);
            var r5 = n.from(e4.toArray());
            if (r5.length < t4.byteLength()) {
              var i2 = n.alloc(t4.byteLength() - r5.length);
              r5 = n.concat([i2, r5]);
            }
            return r5;
          }(r4, t3), c2 = n.alloc(s2);
          c2.fill(1);
          var f2 = n.alloc(s2);
          return f2 = i(o2, f2).update(c2).update(n.from([0])).update(e3).update(u2).digest(), c2 = i(o2, f2).update(c2).digest(), { k: f2 = i(o2, f2).update(c2).update(n.from([1])).update(e3).update(u2).digest(), v: c2 = i(o2, f2).update(c2).digest() };
        }
        function d(e3, t3) {
          var r4 = new s(e3), n2 = (e3.length << 3) - t3.bitLength();
          return n2 > 0 && r4.ishrn(n2), r4;
        }
        function l(e3, t3, r4) {
          var o2, a2;
          do {
            for (o2 = n.alloc(0); 8 * o2.length < e3.bitLength(); )
              t3.v = i(r4, t3.k).update(t3.v).digest(), o2 = n.concat([o2, t3.v]);
            a2 = d(o2, e3), t3.k = i(r4, t3.k).update(t3.v).update(n.from([0])).digest(), t3.v = i(r4, t3.k).update(t3.v).digest();
          } while (-1 !== a2.cmp(e3));
          return a2;
        }
        function h(e3, t3, r4, n2) {
          return e3.toRed(s.mont(r4)).redPow(t3).fromRed().mod(n2);
        }
        e2.exports = function(e3, t3, r4, i2, p) {
          var b = u(t3);
          if (b.curve) {
            if ("ecdsa" !== i2 && "ecdsa/rsa" !== i2)
              throw new Error("wrong private key type");
            return function(e4, t4) {
              var r5 = c[t4.curve.join(".")];
              if (!r5)
                throw new Error("unknown curve " + t4.curve.join("."));
              var i3 = new a(r5).keyFromPrivate(t4.privateKey).sign(e4);
              return n.from(i3.toDER());
            }(e3, b);
          }
          if ("dsa" === b.type) {
            if ("dsa" !== i2)
              throw new Error("wrong private key type");
            return function(e4, t4, r5) {
              for (var i3, o2 = t4.params.priv_key, a2 = t4.params.p, u2 = t4.params.q, c2 = t4.params.g, p2 = new s(0), b2 = d(e4, u2).mod(u2), y2 = false, m2 = f(o2, u2, e4, r5); false === y2; )
                p2 = h(c2, i3 = l(u2, m2, r5), a2, u2), 0 === (y2 = i3.invm(u2).imul(b2.add(o2.mul(p2))).mod(u2)).cmpn(0) && (y2 = false, p2 = new s(0));
              return function(e5, t5) {
                e5 = e5.toArray(), t5 = t5.toArray(), 128 & e5[0] && (e5 = [0].concat(e5)), 128 & t5[0] && (t5 = [0].concat(t5));
                var r6 = [48, e5.length + t5.length + 4, 2, e5.length];
                return r6 = r6.concat(e5, [2, t5.length], t5), n.from(r6);
              }(p2, y2);
            }(e3, b, r4);
          }
          if ("rsa" !== i2 && "ecdsa/rsa" !== i2)
            throw new Error("wrong private key type");
          e3 = n.concat([p, e3]);
          for (var y = b.modulus.byteLength(), m = [0, 1]; e3.length + m.length + 1 < y; )
            m.push(255);
          m.push(0);
          for (var v = -1; ++v < e3.length; )
            m.push(e3[v]);
          return o(m, b);
        }, e2.exports.getKey = f, e2.exports.makeKey = l;
      }, 5410: (e2, t2, r3) => {
        "use strict";
        var n = r3(8850).Buffer, i = r3(1734), o = r3(6597).ec, a = r3(7552), s = r3(1308);
        function u(e3, t3) {
          if (e3.cmpn(0) <= 0)
            throw new Error("invalid sig");
          if (e3.cmp(t3) >= t3)
            throw new Error("invalid sig");
        }
        e2.exports = function(e3, t3, r4, c, f) {
          var d = a(r4);
          if ("ec" === d.type) {
            if ("ecdsa" !== c && "ecdsa/rsa" !== c)
              throw new Error("wrong public key type");
            return function(e4, t4, r5) {
              var n2 = s[r5.data.algorithm.curve.join(".")];
              if (!n2)
                throw new Error("unknown curve " + r5.data.algorithm.curve.join("."));
              var i2 = new o(n2), a2 = r5.data.subjectPrivateKey.data;
              return i2.verify(t4, e4, a2);
            }(e3, t3, d);
          }
          if ("dsa" === d.type) {
            if ("dsa" !== c)
              throw new Error("wrong public key type");
            return function(e4, t4, r5) {
              var n2 = r5.data.p, o2 = r5.data.q, s2 = r5.data.g, c2 = r5.data.pub_key, f2 = a.signature.decode(e4, "der"), d2 = f2.s, l2 = f2.r;
              u(d2, o2), u(l2, o2);
              var h2 = i.mont(n2), p2 = d2.invm(o2);
              return 0 === s2.toRed(h2).redPow(new i(t4).mul(p2).mod(o2)).fromRed().mul(c2.toRed(h2).redPow(l2.mul(p2).mod(o2)).fromRed()).mod(n2).mod(o2).cmp(l2);
            }(e3, t3, d);
          }
          if ("rsa" !== c && "ecdsa/rsa" !== c)
            throw new Error("wrong public key type");
          t3 = n.concat([f, t3]);
          for (var l = d.modulus.byteLength(), h = [1], p = 0; t3.length + h.length + 2 < l; )
            h.push(255), p++;
          h.push(0);
          for (var b = -1; ++b < t3.length; )
            h.push(t3[b]);
          h = n.from(h);
          var y = i.mont(d.modulus);
          e3 = (e3 = new i(e3).toRed(y)).redPow(new i(d.publicExponent)), e3 = n.from(e3.fromRed().toArray());
          var m = p < 8 ? 1 : 0;
          for (l = Math.min(e3.length, h.length), e3.length !== h.length && (m = 1), b = -1; ++b < l; )
            m |= e3[b] ^ h[b];
          return 0 === m;
        };
      }, 6316: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer;
        e2.exports = function(e3, t3) {
          for (var r4 = Math.min(e3.length, t3.length), i = new n(r4), o = 0; o < r4; ++o)
            i[o] = e3[o] ^ t3[o];
          return i;
        };
      }, 9033: (e2, t2, r3) => {
        "use strict";
        var n = r3(4919), i = r3(3226), o = r3(9484);
        function a() {
          return u.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
        }
        function s(e3, t3) {
          if (a() < t3)
            throw new RangeError("Invalid typed array length");
          return u.TYPED_ARRAY_SUPPORT ? (e3 = new Uint8Array(t3)).__proto__ = u.prototype : (null === e3 && (e3 = new u(t3)), e3.length = t3), e3;
        }
        function u(e3, t3, r4) {
          if (!(u.TYPED_ARRAY_SUPPORT || this instanceof u))
            return new u(e3, t3, r4);
          if ("number" == typeof e3) {
            if ("string" == typeof t3)
              throw new Error("If encoding is specified then the first argument must be a string");
            return d(this, e3);
          }
          return c(this, e3, t3, r4);
        }
        function c(e3, t3, r4, n2) {
          if ("number" == typeof t3)
            throw new TypeError('"value" argument must not be a number');
          return "undefined" != typeof ArrayBuffer && t3 instanceof ArrayBuffer ? function(e4, t4, r5, n3) {
            if (t4.byteLength, r5 < 0 || t4.byteLength < r5)
              throw new RangeError("'offset' is out of bounds");
            if (t4.byteLength < r5 + (n3 || 0))
              throw new RangeError("'length' is out of bounds");
            return t4 = void 0 === r5 && void 0 === n3 ? new Uint8Array(t4) : void 0 === n3 ? new Uint8Array(t4, r5) : new Uint8Array(t4, r5, n3), u.TYPED_ARRAY_SUPPORT ? (e4 = t4).__proto__ = u.prototype : e4 = l(e4, t4), e4;
          }(e3, t3, r4, n2) : "string" == typeof t3 ? function(e4, t4, r5) {
            if ("string" == typeof r5 && "" !== r5 || (r5 = "utf8"), !u.isEncoding(r5))
              throw new TypeError('"encoding" must be a valid string encoding');
            var n3 = 0 | p(t4, r5), i2 = (e4 = s(e4, n3)).write(t4, r5);
            return i2 !== n3 && (e4 = e4.slice(0, i2)), e4;
          }(e3, t3, r4) : function(e4, t4) {
            if (u.isBuffer(t4)) {
              var r5 = 0 | h(t4.length);
              return 0 === (e4 = s(e4, r5)).length || t4.copy(e4, 0, 0, r5), e4;
            }
            if (t4) {
              if ("undefined" != typeof ArrayBuffer && t4.buffer instanceof ArrayBuffer || "length" in t4)
                return "number" != typeof t4.length || (n3 = t4.length) != n3 ? s(e4, 0) : l(e4, t4);
              if ("Buffer" === t4.type && o(t4.data))
                return l(e4, t4.data);
            }
            var n3;
            throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
          }(e3, t3);
        }
        function f(e3) {
          if ("number" != typeof e3)
            throw new TypeError('"size" argument must be a number');
          if (e3 < 0)
            throw new RangeError('"size" argument must not be negative');
        }
        function d(e3, t3) {
          if (f(t3), e3 = s(e3, t3 < 0 ? 0 : 0 | h(t3)), !u.TYPED_ARRAY_SUPPORT)
            for (var r4 = 0; r4 < t3; ++r4)
              e3[r4] = 0;
          return e3;
        }
        function l(e3, t3) {
          var r4 = t3.length < 0 ? 0 : 0 | h(t3.length);
          e3 = s(e3, r4);
          for (var n2 = 0; n2 < r4; n2 += 1)
            e3[n2] = 255 & t3[n2];
          return e3;
        }
        function h(e3) {
          if (e3 >= a())
            throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + a().toString(16) + " bytes");
          return 0 | e3;
        }
        function p(e3, t3) {
          if (u.isBuffer(e3))
            return e3.length;
          if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(e3) || e3 instanceof ArrayBuffer))
            return e3.byteLength;
          "string" != typeof e3 && (e3 = "" + e3);
          var r4 = e3.length;
          if (0 === r4)
            return 0;
          for (var n2 = false; ; )
            switch (t3) {
              case "ascii":
              case "latin1":
              case "binary":
                return r4;
              case "utf8":
              case "utf-8":
              case void 0:
                return D(e3).length;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return 2 * r4;
              case "hex":
                return r4 >>> 1;
              case "base64":
                return H(e3).length;
              default:
                if (n2)
                  return D(e3).length;
                t3 = ("" + t3).toLowerCase(), n2 = true;
            }
        }
        function b(e3, t3, r4) {
          var n2 = false;
          if ((void 0 === t3 || t3 < 0) && (t3 = 0), t3 > this.length)
            return "";
          if ((void 0 === r4 || r4 > this.length) && (r4 = this.length), r4 <= 0)
            return "";
          if ((r4 >>>= 0) <= (t3 >>>= 0))
            return "";
          for (e3 || (e3 = "utf8"); ; )
            switch (e3) {
              case "hex":
                return T(this, t3, r4);
              case "utf8":
              case "utf-8":
                return x(this, t3, r4);
              case "ascii":
                return O(this, t3, r4);
              case "latin1":
              case "binary":
                return B(this, t3, r4);
              case "base64":
                return E(this, t3, r4);
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return C(this, t3, r4);
              default:
                if (n2)
                  throw new TypeError("Unknown encoding: " + e3);
                e3 = (e3 + "").toLowerCase(), n2 = true;
            }
        }
        function y(e3, t3, r4) {
          var n2 = e3[t3];
          e3[t3] = e3[r4], e3[r4] = n2;
        }
        function m(e3, t3, r4, n2, i2) {
          if (0 === e3.length)
            return -1;
          if ("string" == typeof r4 ? (n2 = r4, r4 = 0) : r4 > 2147483647 ? r4 = 2147483647 : r4 < -2147483648 && (r4 = -2147483648), r4 = +r4, isNaN(r4) && (r4 = i2 ? 0 : e3.length - 1), r4 < 0 && (r4 = e3.length + r4), r4 >= e3.length) {
            if (i2)
              return -1;
            r4 = e3.length - 1;
          } else if (r4 < 0) {
            if (!i2)
              return -1;
            r4 = 0;
          }
          if ("string" == typeof t3 && (t3 = u.from(t3, n2)), u.isBuffer(t3))
            return 0 === t3.length ? -1 : v(e3, t3, r4, n2, i2);
          if ("number" == typeof t3)
            return t3 &= 255, u.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? i2 ? Uint8Array.prototype.indexOf.call(e3, t3, r4) : Uint8Array.prototype.lastIndexOf.call(e3, t3, r4) : v(e3, [t3], r4, n2, i2);
          throw new TypeError("val must be string, number or Buffer");
        }
        function v(e3, t3, r4, n2, i2) {
          var o2, a2 = 1, s2 = e3.length, u2 = t3.length;
          if (void 0 !== n2 && ("ucs2" === (n2 = String(n2).toLowerCase()) || "ucs-2" === n2 || "utf16le" === n2 || "utf-16le" === n2)) {
            if (e3.length < 2 || t3.length < 2)
              return -1;
            a2 = 2, s2 /= 2, u2 /= 2, r4 /= 2;
          }
          function c2(e4, t4) {
            return 1 === a2 ? e4[t4] : e4.readUInt16BE(t4 * a2);
          }
          if (i2) {
            var f2 = -1;
            for (o2 = r4; o2 < s2; o2++)
              if (c2(e3, o2) === c2(t3, -1 === f2 ? 0 : o2 - f2)) {
                if (-1 === f2 && (f2 = o2), o2 - f2 + 1 === u2)
                  return f2 * a2;
              } else
                -1 !== f2 && (o2 -= o2 - f2), f2 = -1;
          } else
            for (r4 + u2 > s2 && (r4 = s2 - u2), o2 = r4; o2 >= 0; o2--) {
              for (var d2 = true, l2 = 0; l2 < u2; l2++)
                if (c2(e3, o2 + l2) !== c2(t3, l2)) {
                  d2 = false;
                  break;
                }
              if (d2)
                return o2;
            }
          return -1;
        }
        function g(e3, t3, r4, n2) {
          r4 = Number(r4) || 0;
          var i2 = e3.length - r4;
          n2 ? (n2 = Number(n2)) > i2 && (n2 = i2) : n2 = i2;
          var o2 = t3.length;
          if (o2 % 2 != 0)
            throw new TypeError("Invalid hex string");
          n2 > o2 / 2 && (n2 = o2 / 2);
          for (var a2 = 0; a2 < n2; ++a2) {
            var s2 = parseInt(t3.substr(2 * a2, 2), 16);
            if (isNaN(s2))
              return a2;
            e3[r4 + a2] = s2;
          }
          return a2;
        }
        function w(e3, t3, r4, n2) {
          return q(D(t3, e3.length - r4), e3, r4, n2);
        }
        function A(e3, t3, r4, n2) {
          return q(function(e4) {
            for (var t4 = [], r5 = 0; r5 < e4.length; ++r5)
              t4.push(255 & e4.charCodeAt(r5));
            return t4;
          }(t3), e3, r4, n2);
        }
        function k(e3, t3, r4, n2) {
          return A(e3, t3, r4, n2);
        }
        function _(e3, t3, r4, n2) {
          return q(H(t3), e3, r4, n2);
        }
        function S(e3, t3, r4, n2) {
          return q(function(e4, t4) {
            for (var r5, n3, i2, o2 = [], a2 = 0; a2 < e4.length && !((t4 -= 2) < 0); ++a2)
              n3 = (r5 = e4.charCodeAt(a2)) >> 8, i2 = r5 % 256, o2.push(i2), o2.push(n3);
            return o2;
          }(t3, e3.length - r4), e3, r4, n2);
        }
        function E(e3, t3, r4) {
          return 0 === t3 && r4 === e3.length ? n.fromByteArray(e3) : n.fromByteArray(e3.slice(t3, r4));
        }
        function x(e3, t3, r4) {
          r4 = Math.min(e3.length, r4);
          for (var n2 = [], i2 = t3; i2 < r4; ) {
            var o2, a2, s2, u2, c2 = e3[i2], f2 = null, d2 = c2 > 239 ? 4 : c2 > 223 ? 3 : c2 > 191 ? 2 : 1;
            if (i2 + d2 <= r4)
              switch (d2) {
                case 1:
                  c2 < 128 && (f2 = c2);
                  break;
                case 2:
                  128 == (192 & (o2 = e3[i2 + 1])) && (u2 = (31 & c2) << 6 | 63 & o2) > 127 && (f2 = u2);
                  break;
                case 3:
                  o2 = e3[i2 + 1], a2 = e3[i2 + 2], 128 == (192 & o2) && 128 == (192 & a2) && (u2 = (15 & c2) << 12 | (63 & o2) << 6 | 63 & a2) > 2047 && (u2 < 55296 || u2 > 57343) && (f2 = u2);
                  break;
                case 4:
                  o2 = e3[i2 + 1], a2 = e3[i2 + 2], s2 = e3[i2 + 3], 128 == (192 & o2) && 128 == (192 & a2) && 128 == (192 & s2) && (u2 = (15 & c2) << 18 | (63 & o2) << 12 | (63 & a2) << 6 | 63 & s2) > 65535 && u2 < 1114112 && (f2 = u2);
              }
            null === f2 ? (f2 = 65533, d2 = 1) : f2 > 65535 && (f2 -= 65536, n2.push(f2 >>> 10 & 1023 | 55296), f2 = 56320 | 1023 & f2), n2.push(f2), i2 += d2;
          }
          return function(e4) {
            var t4 = e4.length;
            if (t4 <= P)
              return String.fromCharCode.apply(String, e4);
            for (var r5 = "", n3 = 0; n3 < t4; )
              r5 += String.fromCharCode.apply(String, e4.slice(n3, n3 += P));
            return r5;
          }(n2);
        }
        t2.Buffer = u, t2.SlowBuffer = function(e3) {
          return +e3 != e3 && (e3 = 0), u.alloc(+e3);
        }, t2.INSPECT_MAX_BYTES = 50, u.TYPED_ARRAY_SUPPORT = void 0 !== r3.g.TYPED_ARRAY_SUPPORT ? r3.g.TYPED_ARRAY_SUPPORT : function() {
          try {
            var e3 = new Uint8Array(1);
            return e3.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
              return 42;
            } }, 42 === e3.foo() && "function" == typeof e3.subarray && 0 === e3.subarray(1, 1).byteLength;
          } catch (e4) {
            return false;
          }
        }(), t2.kMaxLength = a(), u.poolSize = 8192, u._augment = function(e3) {
          return e3.__proto__ = u.prototype, e3;
        }, u.from = function(e3, t3, r4) {
          return c(null, e3, t3, r4);
        }, u.TYPED_ARRAY_SUPPORT && (u.prototype.__proto__ = Uint8Array.prototype, u.__proto__ = Uint8Array, "undefined" != typeof Symbol && Symbol.species && u[Symbol.species] === u && Object.defineProperty(u, Symbol.species, { value: null, configurable: true })), u.alloc = function(e3, t3, r4) {
          return function(e4, t4, r5, n2) {
            return f(t4), t4 <= 0 ? s(e4, t4) : void 0 !== r5 ? "string" == typeof n2 ? s(e4, t4).fill(r5, n2) : s(e4, t4).fill(r5) : s(e4, t4);
          }(null, e3, t3, r4);
        }, u.allocUnsafe = function(e3) {
          return d(null, e3);
        }, u.allocUnsafeSlow = function(e3) {
          return d(null, e3);
        }, u.isBuffer = function(e3) {
          return !(null == e3 || !e3._isBuffer);
        }, u.compare = function(e3, t3) {
          if (!u.isBuffer(e3) || !u.isBuffer(t3))
            throw new TypeError("Arguments must be Buffers");
          if (e3 === t3)
            return 0;
          for (var r4 = e3.length, n2 = t3.length, i2 = 0, o2 = Math.min(r4, n2); i2 < o2; ++i2)
            if (e3[i2] !== t3[i2]) {
              r4 = e3[i2], n2 = t3[i2];
              break;
            }
          return r4 < n2 ? -1 : n2 < r4 ? 1 : 0;
        }, u.isEncoding = function(e3) {
          switch (String(e3).toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "latin1":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return true;
            default:
              return false;
          }
        }, u.concat = function(e3, t3) {
          if (!o(e3))
            throw new TypeError('"list" argument must be an Array of Buffers');
          if (0 === e3.length)
            return u.alloc(0);
          var r4;
          if (void 0 === t3)
            for (t3 = 0, r4 = 0; r4 < e3.length; ++r4)
              t3 += e3[r4].length;
          var n2 = u.allocUnsafe(t3), i2 = 0;
          for (r4 = 0; r4 < e3.length; ++r4) {
            var a2 = e3[r4];
            if (!u.isBuffer(a2))
              throw new TypeError('"list" argument must be an Array of Buffers');
            a2.copy(n2, i2), i2 += a2.length;
          }
          return n2;
        }, u.byteLength = p, u.prototype._isBuffer = true, u.prototype.swap16 = function() {
          var e3 = this.length;
          if (e3 % 2 != 0)
            throw new RangeError("Buffer size must be a multiple of 16-bits");
          for (var t3 = 0; t3 < e3; t3 += 2)
            y(this, t3, t3 + 1);
          return this;
        }, u.prototype.swap32 = function() {
          var e3 = this.length;
          if (e3 % 4 != 0)
            throw new RangeError("Buffer size must be a multiple of 32-bits");
          for (var t3 = 0; t3 < e3; t3 += 4)
            y(this, t3, t3 + 3), y(this, t3 + 1, t3 + 2);
          return this;
        }, u.prototype.swap64 = function() {
          var e3 = this.length;
          if (e3 % 8 != 0)
            throw new RangeError("Buffer size must be a multiple of 64-bits");
          for (var t3 = 0; t3 < e3; t3 += 8)
            y(this, t3, t3 + 7), y(this, t3 + 1, t3 + 6), y(this, t3 + 2, t3 + 5), y(this, t3 + 3, t3 + 4);
          return this;
        }, u.prototype.toString = function() {
          var e3 = 0 | this.length;
          return 0 === e3 ? "" : 0 === arguments.length ? x(this, 0, e3) : b.apply(this, arguments);
        }, u.prototype.equals = function(e3) {
          if (!u.isBuffer(e3))
            throw new TypeError("Argument must be a Buffer");
          return this === e3 || 0 === u.compare(this, e3);
        }, u.prototype.inspect = function() {
          var e3 = "", r4 = t2.INSPECT_MAX_BYTES;
          return this.length > 0 && (e3 = this.toString("hex", 0, r4).match(/.{2}/g).join(" "), this.length > r4 && (e3 += " ... ")), "<Buffer " + e3 + ">";
        }, u.prototype.compare = function(e3, t3, r4, n2, i2) {
          if (!u.isBuffer(e3))
            throw new TypeError("Argument must be a Buffer");
          if (void 0 === t3 && (t3 = 0), void 0 === r4 && (r4 = e3 ? e3.length : 0), void 0 === n2 && (n2 = 0), void 0 === i2 && (i2 = this.length), t3 < 0 || r4 > e3.length || n2 < 0 || i2 > this.length)
            throw new RangeError("out of range index");
          if (n2 >= i2 && t3 >= r4)
            return 0;
          if (n2 >= i2)
            return -1;
          if (t3 >= r4)
            return 1;
          if (this === e3)
            return 0;
          for (var o2 = (i2 >>>= 0) - (n2 >>>= 0), a2 = (r4 >>>= 0) - (t3 >>>= 0), s2 = Math.min(o2, a2), c2 = this.slice(n2, i2), f2 = e3.slice(t3, r4), d2 = 0; d2 < s2; ++d2)
            if (c2[d2] !== f2[d2]) {
              o2 = c2[d2], a2 = f2[d2];
              break;
            }
          return o2 < a2 ? -1 : a2 < o2 ? 1 : 0;
        }, u.prototype.includes = function(e3, t3, r4) {
          return -1 !== this.indexOf(e3, t3, r4);
        }, u.prototype.indexOf = function(e3, t3, r4) {
          return m(this, e3, t3, r4, true);
        }, u.prototype.lastIndexOf = function(e3, t3, r4) {
          return m(this, e3, t3, r4, false);
        }, u.prototype.write = function(e3, t3, r4, n2) {
          if (void 0 === t3)
            n2 = "utf8", r4 = this.length, t3 = 0;
          else if (void 0 === r4 && "string" == typeof t3)
            n2 = t3, r4 = this.length, t3 = 0;
          else {
            if (!isFinite(t3))
              throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
            t3 |= 0, isFinite(r4) ? (r4 |= 0, void 0 === n2 && (n2 = "utf8")) : (n2 = r4, r4 = void 0);
          }
          var i2 = this.length - t3;
          if ((void 0 === r4 || r4 > i2) && (r4 = i2), e3.length > 0 && (r4 < 0 || t3 < 0) || t3 > this.length)
            throw new RangeError("Attempt to write outside buffer bounds");
          n2 || (n2 = "utf8");
          for (var o2 = false; ; )
            switch (n2) {
              case "hex":
                return g(this, e3, t3, r4);
              case "utf8":
              case "utf-8":
                return w(this, e3, t3, r4);
              case "ascii":
                return A(this, e3, t3, r4);
              case "latin1":
              case "binary":
                return k(this, e3, t3, r4);
              case "base64":
                return _(this, e3, t3, r4);
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return S(this, e3, t3, r4);
              default:
                if (o2)
                  throw new TypeError("Unknown encoding: " + n2);
                n2 = ("" + n2).toLowerCase(), o2 = true;
            }
        }, u.prototype.toJSON = function() {
          return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
        };
        var P = 4096;
        function O(e3, t3, r4) {
          var n2 = "";
          r4 = Math.min(e3.length, r4);
          for (var i2 = t3; i2 < r4; ++i2)
            n2 += String.fromCharCode(127 & e3[i2]);
          return n2;
        }
        function B(e3, t3, r4) {
          var n2 = "";
          r4 = Math.min(e3.length, r4);
          for (var i2 = t3; i2 < r4; ++i2)
            n2 += String.fromCharCode(e3[i2]);
          return n2;
        }
        function T(e3, t3, r4) {
          var n2, i2 = e3.length;
          (!t3 || t3 < 0) && (t3 = 0), (!r4 || r4 < 0 || r4 > i2) && (r4 = i2);
          for (var o2 = "", a2 = t3; a2 < r4; ++a2)
            o2 += (n2 = e3[a2]) < 16 ? "0" + n2.toString(16) : n2.toString(16);
          return o2;
        }
        function C(e3, t3, r4) {
          for (var n2 = e3.slice(t3, r4), i2 = "", o2 = 0; o2 < n2.length; o2 += 2)
            i2 += String.fromCharCode(n2[o2] + 256 * n2[o2 + 1]);
          return i2;
        }
        function I(e3, t3, r4) {
          if (e3 % 1 != 0 || e3 < 0)
            throw new RangeError("offset is not uint");
          if (e3 + t3 > r4)
            throw new RangeError("Trying to access beyond buffer length");
        }
        function M(e3, t3, r4, n2, i2, o2) {
          if (!u.isBuffer(e3))
            throw new TypeError('"buffer" argument must be a Buffer instance');
          if (t3 > i2 || t3 < o2)
            throw new RangeError('"value" argument is out of bounds');
          if (r4 + n2 > e3.length)
            throw new RangeError("Index out of range");
        }
        function U(e3, t3, r4, n2) {
          t3 < 0 && (t3 = 65535 + t3 + 1);
          for (var i2 = 0, o2 = Math.min(e3.length - r4, 2); i2 < o2; ++i2)
            e3[r4 + i2] = (t3 & 255 << 8 * (n2 ? i2 : 1 - i2)) >>> 8 * (n2 ? i2 : 1 - i2);
        }
        function R(e3, t3, r4, n2) {
          t3 < 0 && (t3 = 4294967295 + t3 + 1);
          for (var i2 = 0, o2 = Math.min(e3.length - r4, 4); i2 < o2; ++i2)
            e3[r4 + i2] = t3 >>> 8 * (n2 ? i2 : 3 - i2) & 255;
        }
        function j(e3, t3, r4, n2, i2, o2) {
          if (r4 + n2 > e3.length)
            throw new RangeError("Index out of range");
          if (r4 < 0)
            throw new RangeError("Index out of range");
        }
        function N(e3, t3, r4, n2, o2) {
          return o2 || j(e3, 0, r4, 4), i.write(e3, t3, r4, n2, 23, 4), r4 + 4;
        }
        function F(e3, t3, r4, n2, o2) {
          return o2 || j(e3, 0, r4, 8), i.write(e3, t3, r4, n2, 52, 8), r4 + 8;
        }
        u.prototype.slice = function(e3, t3) {
          var r4, n2 = this.length;
          if ((e3 = ~~e3) < 0 ? (e3 += n2) < 0 && (e3 = 0) : e3 > n2 && (e3 = n2), (t3 = void 0 === t3 ? n2 : ~~t3) < 0 ? (t3 += n2) < 0 && (t3 = 0) : t3 > n2 && (t3 = n2), t3 < e3 && (t3 = e3), u.TYPED_ARRAY_SUPPORT)
            (r4 = this.subarray(e3, t3)).__proto__ = u.prototype;
          else {
            var i2 = t3 - e3;
            r4 = new u(i2, void 0);
            for (var o2 = 0; o2 < i2; ++o2)
              r4[o2] = this[o2 + e3];
          }
          return r4;
        }, u.prototype.readUIntLE = function(e3, t3, r4) {
          e3 |= 0, t3 |= 0, r4 || I(e3, t3, this.length);
          for (var n2 = this[e3], i2 = 1, o2 = 0; ++o2 < t3 && (i2 *= 256); )
            n2 += this[e3 + o2] * i2;
          return n2;
        }, u.prototype.readUIntBE = function(e3, t3, r4) {
          e3 |= 0, t3 |= 0, r4 || I(e3, t3, this.length);
          for (var n2 = this[e3 + --t3], i2 = 1; t3 > 0 && (i2 *= 256); )
            n2 += this[e3 + --t3] * i2;
          return n2;
        }, u.prototype.readUInt8 = function(e3, t3) {
          return t3 || I(e3, 1, this.length), this[e3];
        }, u.prototype.readUInt16LE = function(e3, t3) {
          return t3 || I(e3, 2, this.length), this[e3] | this[e3 + 1] << 8;
        }, u.prototype.readUInt16BE = function(e3, t3) {
          return t3 || I(e3, 2, this.length), this[e3] << 8 | this[e3 + 1];
        }, u.prototype.readUInt32LE = function(e3, t3) {
          return t3 || I(e3, 4, this.length), (this[e3] | this[e3 + 1] << 8 | this[e3 + 2] << 16) + 16777216 * this[e3 + 3];
        }, u.prototype.readUInt32BE = function(e3, t3) {
          return t3 || I(e3, 4, this.length), 16777216 * this[e3] + (this[e3 + 1] << 16 | this[e3 + 2] << 8 | this[e3 + 3]);
        }, u.prototype.readIntLE = function(e3, t3, r4) {
          e3 |= 0, t3 |= 0, r4 || I(e3, t3, this.length);
          for (var n2 = this[e3], i2 = 1, o2 = 0; ++o2 < t3 && (i2 *= 256); )
            n2 += this[e3 + o2] * i2;
          return n2 >= (i2 *= 128) && (n2 -= Math.pow(2, 8 * t3)), n2;
        }, u.prototype.readIntBE = function(e3, t3, r4) {
          e3 |= 0, t3 |= 0, r4 || I(e3, t3, this.length);
          for (var n2 = t3, i2 = 1, o2 = this[e3 + --n2]; n2 > 0 && (i2 *= 256); )
            o2 += this[e3 + --n2] * i2;
          return o2 >= (i2 *= 128) && (o2 -= Math.pow(2, 8 * t3)), o2;
        }, u.prototype.readInt8 = function(e3, t3) {
          return t3 || I(e3, 1, this.length), 128 & this[e3] ? -1 * (255 - this[e3] + 1) : this[e3];
        }, u.prototype.readInt16LE = function(e3, t3) {
          t3 || I(e3, 2, this.length);
          var r4 = this[e3] | this[e3 + 1] << 8;
          return 32768 & r4 ? 4294901760 | r4 : r4;
        }, u.prototype.readInt16BE = function(e3, t3) {
          t3 || I(e3, 2, this.length);
          var r4 = this[e3 + 1] | this[e3] << 8;
          return 32768 & r4 ? 4294901760 | r4 : r4;
        }, u.prototype.readInt32LE = function(e3, t3) {
          return t3 || I(e3, 4, this.length), this[e3] | this[e3 + 1] << 8 | this[e3 + 2] << 16 | this[e3 + 3] << 24;
        }, u.prototype.readInt32BE = function(e3, t3) {
          return t3 || I(e3, 4, this.length), this[e3] << 24 | this[e3 + 1] << 16 | this[e3 + 2] << 8 | this[e3 + 3];
        }, u.prototype.readFloatLE = function(e3, t3) {
          return t3 || I(e3, 4, this.length), i.read(this, e3, true, 23, 4);
        }, u.prototype.readFloatBE = function(e3, t3) {
          return t3 || I(e3, 4, this.length), i.read(this, e3, false, 23, 4);
        }, u.prototype.readDoubleLE = function(e3, t3) {
          return t3 || I(e3, 8, this.length), i.read(this, e3, true, 52, 8);
        }, u.prototype.readDoubleBE = function(e3, t3) {
          return t3 || I(e3, 8, this.length), i.read(this, e3, false, 52, 8);
        }, u.prototype.writeUIntLE = function(e3, t3, r4, n2) {
          e3 = +e3, t3 |= 0, r4 |= 0, n2 || M(this, e3, t3, r4, Math.pow(2, 8 * r4) - 1, 0);
          var i2 = 1, o2 = 0;
          for (this[t3] = 255 & e3; ++o2 < r4 && (i2 *= 256); )
            this[t3 + o2] = e3 / i2 & 255;
          return t3 + r4;
        }, u.prototype.writeUIntBE = function(e3, t3, r4, n2) {
          e3 = +e3, t3 |= 0, r4 |= 0, n2 || M(this, e3, t3, r4, Math.pow(2, 8 * r4) - 1, 0);
          var i2 = r4 - 1, o2 = 1;
          for (this[t3 + i2] = 255 & e3; --i2 >= 0 && (o2 *= 256); )
            this[t3 + i2] = e3 / o2 & 255;
          return t3 + r4;
        }, u.prototype.writeUInt8 = function(e3, t3, r4) {
          return e3 = +e3, t3 |= 0, r4 || M(this, e3, t3, 1, 255, 0), u.TYPED_ARRAY_SUPPORT || (e3 = Math.floor(e3)), this[t3] = 255 & e3, t3 + 1;
        }, u.prototype.writeUInt16LE = function(e3, t3, r4) {
          return e3 = +e3, t3 |= 0, r4 || M(this, e3, t3, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[t3] = 255 & e3, this[t3 + 1] = e3 >>> 8) : U(this, e3, t3, true), t3 + 2;
        }, u.prototype.writeUInt16BE = function(e3, t3, r4) {
          return e3 = +e3, t3 |= 0, r4 || M(this, e3, t3, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[t3] = e3 >>> 8, this[t3 + 1] = 255 & e3) : U(this, e3, t3, false), t3 + 2;
        }, u.prototype.writeUInt32LE = function(e3, t3, r4) {
          return e3 = +e3, t3 |= 0, r4 || M(this, e3, t3, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[t3 + 3] = e3 >>> 24, this[t3 + 2] = e3 >>> 16, this[t3 + 1] = e3 >>> 8, this[t3] = 255 & e3) : R(this, e3, t3, true), t3 + 4;
        }, u.prototype.writeUInt32BE = function(e3, t3, r4) {
          return e3 = +e3, t3 |= 0, r4 || M(this, e3, t3, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[t3] = e3 >>> 24, this[t3 + 1] = e3 >>> 16, this[t3 + 2] = e3 >>> 8, this[t3 + 3] = 255 & e3) : R(this, e3, t3, false), t3 + 4;
        }, u.prototype.writeIntLE = function(e3, t3, r4, n2) {
          if (e3 = +e3, t3 |= 0, !n2) {
            var i2 = Math.pow(2, 8 * r4 - 1);
            M(this, e3, t3, r4, i2 - 1, -i2);
          }
          var o2 = 0, a2 = 1, s2 = 0;
          for (this[t3] = 255 & e3; ++o2 < r4 && (a2 *= 256); )
            e3 < 0 && 0 === s2 && 0 !== this[t3 + o2 - 1] && (s2 = 1), this[t3 + o2] = (e3 / a2 >> 0) - s2 & 255;
          return t3 + r4;
        }, u.prototype.writeIntBE = function(e3, t3, r4, n2) {
          if (e3 = +e3, t3 |= 0, !n2) {
            var i2 = Math.pow(2, 8 * r4 - 1);
            M(this, e3, t3, r4, i2 - 1, -i2);
          }
          var o2 = r4 - 1, a2 = 1, s2 = 0;
          for (this[t3 + o2] = 255 & e3; --o2 >= 0 && (a2 *= 256); )
            e3 < 0 && 0 === s2 && 0 !== this[t3 + o2 + 1] && (s2 = 1), this[t3 + o2] = (e3 / a2 >> 0) - s2 & 255;
          return t3 + r4;
        }, u.prototype.writeInt8 = function(e3, t3, r4) {
          return e3 = +e3, t3 |= 0, r4 || M(this, e3, t3, 1, 127, -128), u.TYPED_ARRAY_SUPPORT || (e3 = Math.floor(e3)), e3 < 0 && (e3 = 255 + e3 + 1), this[t3] = 255 & e3, t3 + 1;
        }, u.prototype.writeInt16LE = function(e3, t3, r4) {
          return e3 = +e3, t3 |= 0, r4 || M(this, e3, t3, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[t3] = 255 & e3, this[t3 + 1] = e3 >>> 8) : U(this, e3, t3, true), t3 + 2;
        }, u.prototype.writeInt16BE = function(e3, t3, r4) {
          return e3 = +e3, t3 |= 0, r4 || M(this, e3, t3, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[t3] = e3 >>> 8, this[t3 + 1] = 255 & e3) : U(this, e3, t3, false), t3 + 2;
        }, u.prototype.writeInt32LE = function(e3, t3, r4) {
          return e3 = +e3, t3 |= 0, r4 || M(this, e3, t3, 4, 2147483647, -2147483648), u.TYPED_ARRAY_SUPPORT ? (this[t3] = 255 & e3, this[t3 + 1] = e3 >>> 8, this[t3 + 2] = e3 >>> 16, this[t3 + 3] = e3 >>> 24) : R(this, e3, t3, true), t3 + 4;
        }, u.prototype.writeInt32BE = function(e3, t3, r4) {
          return e3 = +e3, t3 |= 0, r4 || M(this, e3, t3, 4, 2147483647, -2147483648), e3 < 0 && (e3 = 4294967295 + e3 + 1), u.TYPED_ARRAY_SUPPORT ? (this[t3] = e3 >>> 24, this[t3 + 1] = e3 >>> 16, this[t3 + 2] = e3 >>> 8, this[t3 + 3] = 255 & e3) : R(this, e3, t3, false), t3 + 4;
        }, u.prototype.writeFloatLE = function(e3, t3, r4) {
          return N(this, e3, t3, true, r4);
        }, u.prototype.writeFloatBE = function(e3, t3, r4) {
          return N(this, e3, t3, false, r4);
        }, u.prototype.writeDoubleLE = function(e3, t3, r4) {
          return F(this, e3, t3, true, r4);
        }, u.prototype.writeDoubleBE = function(e3, t3, r4) {
          return F(this, e3, t3, false, r4);
        }, u.prototype.copy = function(e3, t3, r4, n2) {
          if (r4 || (r4 = 0), n2 || 0 === n2 || (n2 = this.length), t3 >= e3.length && (t3 = e3.length), t3 || (t3 = 0), n2 > 0 && n2 < r4 && (n2 = r4), n2 === r4)
            return 0;
          if (0 === e3.length || 0 === this.length)
            return 0;
          if (t3 < 0)
            throw new RangeError("targetStart out of bounds");
          if (r4 < 0 || r4 >= this.length)
            throw new RangeError("sourceStart out of bounds");
          if (n2 < 0)
            throw new RangeError("sourceEnd out of bounds");
          n2 > this.length && (n2 = this.length), e3.length - t3 < n2 - r4 && (n2 = e3.length - t3 + r4);
          var i2, o2 = n2 - r4;
          if (this === e3 && r4 < t3 && t3 < n2)
            for (i2 = o2 - 1; i2 >= 0; --i2)
              e3[i2 + t3] = this[i2 + r4];
          else if (o2 < 1e3 || !u.TYPED_ARRAY_SUPPORT)
            for (i2 = 0; i2 < o2; ++i2)
              e3[i2 + t3] = this[i2 + r4];
          else
            Uint8Array.prototype.set.call(e3, this.subarray(r4, r4 + o2), t3);
          return o2;
        }, u.prototype.fill = function(e3, t3, r4, n2) {
          if ("string" == typeof e3) {
            if ("string" == typeof t3 ? (n2 = t3, t3 = 0, r4 = this.length) : "string" == typeof r4 && (n2 = r4, r4 = this.length), 1 === e3.length) {
              var i2 = e3.charCodeAt(0);
              i2 < 256 && (e3 = i2);
            }
            if (void 0 !== n2 && "string" != typeof n2)
              throw new TypeError("encoding must be a string");
            if ("string" == typeof n2 && !u.isEncoding(n2))
              throw new TypeError("Unknown encoding: " + n2);
          } else
            "number" == typeof e3 && (e3 &= 255);
          if (t3 < 0 || this.length < t3 || this.length < r4)
            throw new RangeError("Out of range index");
          if (r4 <= t3)
            return this;
          var o2;
          if (t3 >>>= 0, r4 = void 0 === r4 ? this.length : r4 >>> 0, e3 || (e3 = 0), "number" == typeof e3)
            for (o2 = t3; o2 < r4; ++o2)
              this[o2] = e3;
          else {
            var a2 = u.isBuffer(e3) ? e3 : D(new u(e3, n2).toString()), s2 = a2.length;
            for (o2 = 0; o2 < r4 - t3; ++o2)
              this[o2 + t3] = a2[o2 % s2];
          }
          return this;
        };
        var L = /[^+\/0-9A-Za-z-_]/g;
        function D(e3, t3) {
          var r4;
          t3 = t3 || 1 / 0;
          for (var n2 = e3.length, i2 = null, o2 = [], a2 = 0; a2 < n2; ++a2) {
            if ((r4 = e3.charCodeAt(a2)) > 55295 && r4 < 57344) {
              if (!i2) {
                if (r4 > 56319) {
                  (t3 -= 3) > -1 && o2.push(239, 191, 189);
                  continue;
                }
                if (a2 + 1 === n2) {
                  (t3 -= 3) > -1 && o2.push(239, 191, 189);
                  continue;
                }
                i2 = r4;
                continue;
              }
              if (r4 < 56320) {
                (t3 -= 3) > -1 && o2.push(239, 191, 189), i2 = r4;
                continue;
              }
              r4 = 65536 + (i2 - 55296 << 10 | r4 - 56320);
            } else
              i2 && (t3 -= 3) > -1 && o2.push(239, 191, 189);
            if (i2 = null, r4 < 128) {
              if ((t3 -= 1) < 0)
                break;
              o2.push(r4);
            } else if (r4 < 2048) {
              if ((t3 -= 2) < 0)
                break;
              o2.push(r4 >> 6 | 192, 63 & r4 | 128);
            } else if (r4 < 65536) {
              if ((t3 -= 3) < 0)
                break;
              o2.push(r4 >> 12 | 224, r4 >> 6 & 63 | 128, 63 & r4 | 128);
            } else {
              if (!(r4 < 1114112))
                throw new Error("Invalid code point");
              if ((t3 -= 4) < 0)
                break;
              o2.push(r4 >> 18 | 240, r4 >> 12 & 63 | 128, r4 >> 6 & 63 | 128, 63 & r4 | 128);
            }
          }
          return o2;
        }
        function H(e3) {
          return n.toByteArray(function(e4) {
            if ((e4 = function(e5) {
              return e5.trim ? e5.trim() : e5.replace(/^\s+|\s+$/g, "");
            }(e4).replace(L, "")).length < 2)
              return "";
            for (; e4.length % 4 != 0; )
              e4 += "=";
            return e4;
          }(e3));
        }
        function q(e3, t3, r4, n2) {
          for (var i2 = 0; i2 < n2 && !(i2 + r4 >= t3.length || i2 >= e3.length); ++i2)
            t3[i2 + r4] = e3[i2];
          return i2;
        }
      }, 3675: (e2) => {
        "use strict";
        e2.exports = { 100: "Continue", 101: "Switching Protocols", 102: "Processing", 200: "OK", 201: "Created", 202: "Accepted", 203: "Non-Authoritative Information", 204: "No Content", 205: "Reset Content", 206: "Partial Content", 207: "Multi-Status", 208: "Already Reported", 226: "IM Used", 300: "Multiple Choices", 301: "Moved Permanently", 302: "Found", 303: "See Other", 304: "Not Modified", 305: "Use Proxy", 307: "Temporary Redirect", 308: "Permanent Redirect", 400: "Bad Request", 401: "Unauthorized", 402: "Payment Required", 403: "Forbidden", 404: "Not Found", 405: "Method Not Allowed", 406: "Not Acceptable", 407: "Proxy Authentication Required", 408: "Request Timeout", 409: "Conflict", 410: "Gone", 411: "Length Required", 412: "Precondition Failed", 413: "Payload Too Large", 414: "URI Too Long", 415: "Unsupported Media Type", 416: "Range Not Satisfiable", 417: "Expectation Failed", 418: "I'm a teapot", 421: "Misdirected Request", 422: "Unprocessable Entity", 423: "Locked", 424: "Failed Dependency", 425: "Unordered Collection", 426: "Upgrade Required", 428: "Precondition Required", 429: "Too Many Requests", 431: "Request Header Fields Too Large", 451: "Unavailable For Legal Reasons", 500: "Internal Server Error", 501: "Not Implemented", 502: "Bad Gateway", 503: "Service Unavailable", 504: "Gateway Timeout", 505: "HTTP Version Not Supported", 506: "Variant Also Negotiates", 507: "Insufficient Storage", 508: "Loop Detected", 509: "Bandwidth Limit Exceeded", 510: "Not Extended", 511: "Network Authentication Required" };
      }, 593: (e2, t2, r3) => {
        "use strict";
        var n = r3(7701), i = r3(4373), o = i(n("String.prototype.indexOf"));
        e2.exports = function(e3, t3) {
          var r4 = n(e3, !!t3);
          return "function" == typeof r4 && o(e3, ".prototype.") > -1 ? i(r4) : r4;
        };
      }, 4373: (e2, t2, r3) => {
        "use strict";
        var n = r3(3767), i = r3(7701), o = i("%Function.prototype.apply%"), a = i("%Function.prototype.call%"), s = i("%Reflect.apply%", true) || n.call(a, o), u = i("%Object.getOwnPropertyDescriptor%", true), c = i("%Object.defineProperty%", true), f = i("%Math.max%");
        if (c)
          try {
            c({}, "a", { value: 1 });
          } catch (e3) {
            c = null;
          }
        e2.exports = function(e3) {
          var t3 = s(n, a, arguments);
          return u && c && u(t3, "length").configurable && c(t3, "length", { value: 1 + f(0, e3.length - (arguments.length - 1)) }), t3;
        };
        var d = function() {
          return s(n, o, arguments);
        };
        c ? c(e2.exports, "apply", { value: d }) : e2.exports.apply = d;
      }, 7759: (e2, t2, r3) => {
        "use strict";
        for (var n = r3(8847)(r3(4519)), i = r3(3630), o = {}, a = 0, s = Object.entries(i); a < s.length; a++) {
          var u = (0, n.default)(s[a], 2), c = u[0], f = u[1];
          o[c.toUpperCase().replace(/-/g, "_")] = f;
        }
        e2.exports = Object.freeze(o);
      }, 7223: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(6657), o = r3(5262), a = r3(1842), s = r3(779);
        (t2 = e2.exports).addPrefix = function(e3, t3) {
          var r4;
          if (n.isBuffer(e3))
            r4 = s.varintBufferEncode(e3);
          else {
            if (!a[e3])
              throw new Error("multicodec not recognized");
            r4 = a[e3];
          }
          return n.concat([r4, t3]);
        }, t2.rmPrefix = function(e3) {
          return i.decode(e3), e3.slice(i.decode.bytes);
        }, t2.getCodec = function(e3) {
          var t3 = i.decode(e3), r4 = o.get(t3);
          if (void 0 === r4)
            throw new Error("Code ".concat(t3, " not found"));
          return r4;
        }, t2.getName = function(e3) {
          return o.get(e3);
        }, t2.getNumber = function(e3) {
          var t3 = a[e3];
          if (void 0 === t3)
            throw new Error("Codec `" + e3 + "` not found");
          return s.varintBufferDecode(t3)[0];
        }, t2.getCode = function(e3) {
          return i.decode(e3);
        }, t2.getCodeVarint = function(e3) {
          var t3 = a[e3];
          if (void 0 === t3)
            throw new Error("Codec `" + e3 + "` not found");
          return t3;
        }, t2.getVarint = function(e3) {
          return i.encode(e3);
        };
        var u = r3(7759);
        Object.assign(t2, u), t2.print = r3(9268);
      }, 5262: (e2, t2, r3) => {
        "use strict";
        var n = r3(3630), i = /* @__PURE__ */ new Map();
        for (var o in n) {
          var a = n[o];
          i.set(a, o);
        }
        e2.exports = Object.freeze(i);
      }, 9268: (e2, t2, r3) => {
        "use strict";
        for (var n = r3(8847)(r3(4519)), i = r3(3630), o = {}, a = 0, s = Object.entries(i); a < s.length; a++) {
          var u = (0, n.default)(s[a], 2), c = u[0], f = u[1];
          void 0 === o[f] && (o[f] = c);
        }
        e2.exports = Object.freeze(o);
      }, 779: (e2, t2, r3) => {
        "use strict";
        var n = r3(6657), i = r3(9033).Buffer;
        function o(e3) {
          return parseInt(e3.toString("hex"), 16);
        }
        function a(e3) {
          var t3 = e3.toString(16);
          return t3.length % 2 == 1 && (t3 = "0" + t3), i.from(t3, "hex");
        }
        e2.exports = { numberToBuffer: a, bufferToNumber: o, varintBufferEncode: function(e3) {
          return i.from(n.encode(o(e3)));
        }, varintBufferDecode: function(e3) {
          return a(n.decode(e3));
        }, varintEncode: function(e3) {
          return i.from(n.encode(e3));
        } };
      }, 1842: (e2, t2, r3) => {
        "use strict";
        var n = r3(3630), i = r3(779).varintEncode, o = {};
        for (var a in n) {
          var s = n[a];
          o[a] = i(s);
        }
        e2.exports = Object.freeze(o);
      }, 9976: (e2, t2, r3) => {
        "use strict";
        var n = r3(7748), i = r3(9033).Buffer, o = { checkCIDComponents: function(e3) {
          if (null == e3)
            return "null values are not valid CIDs";
          if (0 !== e3.version && 1 !== e3.version)
            return "Invalid version, must be a number equal to 1 or 0";
          if ("string" != typeof e3.codec)
            return "codec must be string";
          if (0 === e3.version) {
            if ("dag-pb" !== e3.codec)
              return "codec must be 'dag-pb' for CIDv0";
            if ("base58btc" !== e3.multibaseName)
              return "multibaseName must be 'base58btc' for CIDv0";
          }
          if (!i.isBuffer(e3.multihash))
            return "multihash must be a Buffer";
          try {
            n.validate(e3.multihash);
          } catch (e4) {
            var t3 = e4.message;
            return t3 || (t3 = "Multihash validation failed"), t3;
          }
        } };
        e2.exports = o;
      }, 2753: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847), i = n(r3(9721)), o = n(r3(8985)), a = r3(9033).Buffer, s = r3(7748), u = r3(6086), c = r3(7223), f = r3(3630), d = r3(9976), l = r3(3162)(function(e3) {
          function t3(e4, r4, n2, o2) {
            if ((0, i.default)(this, t3), l.isCID(e4)) {
              var f2 = e4;
              return this.version = f2.version, this.codec = f2.codec, this.multihash = a.from(f2.multihash), void (this.multibaseName = f2.multibaseName || (0 === f2.version ? "base58btc" : "base32"));
            }
            if ("string" == typeof e4) {
              var d2 = u.isEncoded(e4);
              if (d2) {
                var h = u.decode(e4);
                this.version = parseInt(h.slice(0, 1).toString("hex"), 16), this.codec = c.getCodec(h.slice(1)), this.multihash = c.rmPrefix(h.slice(1)), this.multibaseName = d2;
              } else
                this.version = 0, this.codec = "dag-pb", this.multihash = s.fromB58String(e4), this.multibaseName = "base58btc";
              return t3.validateCID(this), void Object.defineProperty(this, "string", { value: e4 });
            }
            if (a.isBuffer(e4)) {
              var p = e4.slice(0, 1), b = parseInt(p.toString("hex"), 16);
              if (1 === b) {
                var y = e4;
                this.version = b, this.codec = c.getCodec(y.slice(1)), this.multihash = c.rmPrefix(y.slice(1)), this.multibaseName = "base32";
              } else
                this.version = 0, this.codec = "dag-pb", this.multihash = e4, this.multibaseName = "base58btc";
              t3.validateCID(this);
            } else
              this.version = e4, this.codec = r4, this.multihash = n2, this.multibaseName = o2 || (0 === e4 ? "base58btc" : "base32"), t3.validateCID(this);
          }
          return (0, o.default)(t3, [{ key: "buffer", get: function() {
            var e4 = this._buffer;
            if (!e4) {
              if (0 === this.version)
                e4 = this.multihash;
              else {
                if (1 !== this.version)
                  throw new Error("unsupported version");
                e4 = a.concat([a.from("01", "hex"), c.getCodeVarint(this.codec), this.multihash]);
              }
              Object.defineProperty(this, "_buffer", { value: e4 });
            }
            return e4;
          } }, { key: "prefix", get: function() {
            return a.concat([a.from("0".concat(this.version), "hex"), c.getCodeVarint(this.codec), s.prefix(this.multihash)]);
          } }, { key: "toV0", value: function() {
            if ("dag-pb" !== this.codec)
              throw new Error("Cannot convert a non dag-pb CID to CIDv0");
            var e4 = s.decode(this.multihash), t4 = e4.name, r4 = e4.length;
            if ("sha2-256" !== t4)
              throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
            if (32 !== r4)
              throw new Error("Cannot convert non 32 byte multihash CID to CIDv0");
            return new l(0, this.codec, this.multihash);
          } }, { key: "toV1", value: function() {
            return new l(1, this.codec, this.multihash);
          } }, { key: "toBaseEncodedString", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.multibaseName;
            if (this.string && e4 === this.multibaseName)
              return this.string;
            var t4 = null;
            if (0 === this.version) {
              if ("base58btc" !== e4)
                throw new Error("not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()");
              t4 = s.toB58String(this.multihash);
            } else {
              if (1 !== this.version)
                throw new Error("unsupported version");
              t4 = u.encode(e4, this.buffer).toString();
            }
            return e4 === this.multibaseName && Object.defineProperty(this, "string", { value: t4 }), t4;
          } }, { key: e3, value: function() {
            return "CID(" + this.toString() + ")";
          } }, { key: "toString", value: function(e4) {
            return this.toBaseEncodedString(e4);
          } }, { key: "toJSON", value: function() {
            return { codec: this.codec, version: this.version, hash: this.multihash };
          } }, { key: "equals", value: function(e4) {
            return this.codec === e4.codec && this.version === e4.version && this.multihash.equals(e4.multihash);
          } }], [{ key: "validateCID", value: function(e4) {
            var t4 = d.checkCIDComponents(e4);
            if (t4)
              throw new Error(t4);
          } }]), t3;
        }(Symbol.for("nodejs.util.inspect.custom")), { className: "CID", symbolName: "@ipld/js-cid/CID" });
        l.codecs = f, e2.exports = l;
      }, 3013: (e2, t2, r3) => {
        "use strict";
        var n = r3(8850).Buffer, i = r3(7245).Transform, o = r3(3462).s;
        function a(e3) {
          i.call(this), this.hashMode = "string" == typeof e3, this.hashMode ? this[e3] = this._finalOrDigest : this.final = this._finalOrDigest, this._final && (this.__final = this._final, this._final = null), this._decoder = null, this._encoding = null;
        }
        r3(1736)(a, i), a.prototype.update = function(e3, t3, r4) {
          "string" == typeof e3 && (e3 = n.from(e3, t3));
          var i2 = this._update(e3);
          return this.hashMode ? this : (r4 && (i2 = this._toString(i2, r4)), i2);
        }, a.prototype.setAutoPadding = function() {
        }, a.prototype.getAuthTag = function() {
          throw new Error("trying to get auth tag in unsupported state");
        }, a.prototype.setAuthTag = function() {
          throw new Error("trying to set auth tag in unsupported state");
        }, a.prototype.setAAD = function() {
          throw new Error("trying to set aad in unsupported state");
        }, a.prototype._transform = function(e3, t3, r4) {
          var n2;
          try {
            this.hashMode ? this._update(e3) : this.push(this._update(e3));
          } catch (e4) {
            n2 = e4;
          } finally {
            r4(n2);
          }
        }, a.prototype._flush = function(e3) {
          var t3;
          try {
            this.push(this.__final());
          } catch (e4) {
            t3 = e4;
          }
          e3(t3);
        }, a.prototype._finalOrDigest = function(e3) {
          var t3 = this.__final() || n.alloc(0);
          return e3 && (t3 = this._toString(t3, e3, true)), t3;
        }, a.prototype._toString = function(e3, t3, r4) {
          if (this._decoder || (this._decoder = new o(t3), this._encoding = t3), this._encoding !== t3)
            throw new Error("can't switch encodings");
          var n2 = this._decoder.write(e3);
          return r4 && (n2 += this._decoder.end()), n2;
        }, e2.exports = a;
      }, 3162: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847), i = n(r3(4727)), o = n(r3(775)), a = n(r3(9721)), s = n(r3(8985)), u = n(r3(8975)), c = n(r3(5163)), f = n(r3(4650)), d = n(r3(1949));
        e2.exports = function(e3, t3) {
          var r4 = t3.className, n2 = t3.symbolName, i2 = Symbol.for(n2), l = (0, o.default)({}, r4, function(e4, t4) {
            (0, c.default)(h, e4);
            var n3, o2, l2 = (n3 = h, o2 = function() {
              if ("undefined" == typeof Reflect || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if ("function" == typeof Proxy)
                return true;
              try {
                return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                })), true;
              } catch (e5) {
                return false;
              }
            }(), function() {
              var e5, t5 = (0, d.default)(n3);
              if (o2) {
                var r5 = (0, d.default)(this).constructor;
                e5 = Reflect.construct(t5, arguments, r5);
              } else
                e5 = t5.apply(this, arguments);
              return (0, f.default)(this, e5);
            });
            function h() {
              var e5;
              (0, a.default)(this, h);
              for (var t5 = arguments.length, r5 = new Array(t5), n4 = 0; n4 < t5; n4++)
                r5[n4] = arguments[n4];
              return e5 = l2.call.apply(l2, [this].concat(r5)), Object.defineProperty((0, u.default)(e5), i2, { value: true }), e5;
            }
            return (0, s.default)(h, [{ key: t4, get: function() {
              return r4;
            } }]), h;
          }(e3, Symbol.toStringTag))[r4];
          return l["is".concat(r4)] = function(e4) {
            return !(!e4 || !e4[i2]);
          }, l;
        }, e2.exports.proto = function(e3, t3) {
          var r4 = t3.className, n2 = t3.symbolName, a2 = t3.withoutNew, s2 = Symbol.for(n2), u2 = (0, o.default)({}, r4, function() {
            for (var t4 = arguments.length, r5 = new Array(t4), n3 = 0; n3 < t4; n3++)
              r5[n3] = arguments[n3];
            if (a2 && !(this instanceof u2))
              return (0, i.default)(u2, r5);
            var o2 = e3.call.apply(e3, [this].concat(r5)) || this;
            return o2 && !o2[s2] && Object.defineProperty(o2, s2, { value: true }), o2;
          })[r4];
          return u2.prototype = Object.create(e3.prototype), u2.prototype.constructor = u2, Object.defineProperty(u2.prototype, Symbol.toStringTag, { get: function() {
            return r4;
          } }), u2["is".concat(r4)] = function(e4) {
            return !(!e4 || !e4[s2]);
          }, u2;
        };
      }, 6834: (e2, t2, r3) => {
        "use strict";
        var n = r3(2753);
        t2.cidV0ToV1Base32 = function(e3) {
          var t3 = new n(e3);
          return 0 === t3.version && (t3 = t3.toV1()), t3.toString("base32");
        };
      }, 4308: (e2, t2, r3) => {
        "use strict";
        var n = r3(9206), i = r3(9512), o = i.hexStringToBuffer, a = i.profiles, s = r3(6834).cidV0ToV1Base32;
        e2.exports = { helpers: { cidV0ToV1Base32: s }, decode: function(e3) {
          var t3 = o(e3), r4 = n.getCodec(t3), i2 = n.rmPrefix(t3), s2 = a[r4];
          return s2 || (s2 = a.default), s2.decode(i2);
        }, fromIpfs: function(e3) {
          return this.encode("ipfs-ns", e3);
        }, fromSwarm: function(e3) {
          return this.encode("swarm-ns", e3);
        }, encode: function(e3, t3) {
          var r4 = a[e3];
          r4 || (r4 = a.default);
          var i2 = r4.encode(t3);
          return n.addPrefix(e3, i2).toString("hex");
        }, getCodec: function(e3) {
          var t3 = o(e3);
          return n.getCodec(t3);
        } };
      }, 9512: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(2753), o = r3(7748), a = function(e3) {
          var t3, r4 = e3.slice(0, 2), n2 = e3.slice(2);
          return t3 = "0x" === r4 ? n2 : e3, o.fromHexString(t3);
        }, s = { swarm: function(e3) {
          var t3 = o.encode(a(e3), "keccak-256");
          return new i(1, "swarm-manifest", t3).buffer;
        }, ipfs: function(e3) {
          var t3 = o.fromB58String(e3);
          return new i(1, "dag-pb", t3).buffer;
        }, utf8: function(e3) {
          return n.from(e3, "utf8");
        } }, u = { hexMultiHash: function(e3) {
          var t3 = new i(e3);
          return o.decode(t3.multihash).digest.toString("hex");
        }, b58MultiHash: function(e3) {
          var t3 = new i(e3);
          return o.toB58String(t3.multihash);
        }, utf8: function(e3) {
          return e3.toString("utf8");
        } }, c = { "swarm-ns": { encode: s.swarm, decode: u.hexMultiHash }, "ipfs-ns": { encode: s.ipfs, decode: u.b58MultiHash }, "ipns-ns": { encode: s.ipfs, decode: u.b58MultiHash }, default: { encode: s.utf8, decode: u.utf8 } };
        t2.hexStringToBuffer = a, t2.profiles = c;
      }, 4628: (e2, t2, r3) => {
        "use strict";
        var n, i, o = r3(8847)(r3(3355));
        i = function(e3) {
          e3.version = "1.2.2";
          var t3 = function() {
            for (var e4 = 0, t4 = new Array(256), r5 = 0; 256 != r5; ++r5)
              e4 = 1 & (e4 = 1 & (e4 = 1 & (e4 = 1 & (e4 = 1 & (e4 = 1 & (e4 = 1 & (e4 = 1 & (e4 = r5) ? -306674912 ^ e4 >>> 1 : e4 >>> 1) ? -306674912 ^ e4 >>> 1 : e4 >>> 1) ? -306674912 ^ e4 >>> 1 : e4 >>> 1) ? -306674912 ^ e4 >>> 1 : e4 >>> 1) ? -306674912 ^ e4 >>> 1 : e4 >>> 1) ? -306674912 ^ e4 >>> 1 : e4 >>> 1) ? -306674912 ^ e4 >>> 1 : e4 >>> 1) ? -306674912 ^ e4 >>> 1 : e4 >>> 1, t4[r5] = e4;
            return "undefined" != typeof Int32Array ? new Int32Array(t4) : t4;
          }(), r4 = function(e4) {
            var t4 = 0, r5 = 0, n3 = 0, i3 = "undefined" != typeof Int32Array ? new Int32Array(4096) : new Array(4096);
            for (n3 = 0; 256 != n3; ++n3)
              i3[n3] = e4[n3];
            for (n3 = 0; 256 != n3; ++n3)
              for (r5 = e4[n3], t4 = 256 + n3; t4 < 4096; t4 += 256)
                r5 = i3[t4] = r5 >>> 8 ^ e4[255 & r5];
            var o3 = [];
            for (n3 = 1; 16 != n3; ++n3)
              o3[n3 - 1] = "undefined" != typeof Int32Array ? i3.subarray(256 * n3, 256 * n3 + 256) : i3.slice(256 * n3, 256 * n3 + 256);
            return o3;
          }(t3), n2 = r4[0], i2 = r4[1], o2 = r4[2], a = r4[3], s = r4[4], u = r4[5], c = r4[6], f = r4[7], d = r4[8], l = r4[9], h = r4[10], p = r4[11], b = r4[12], y = r4[13], m = r4[14];
          e3.table = t3, e3.bstr = function(e4, r5) {
            for (var n3 = -1 ^ r5, i3 = 0, o3 = e4.length; i3 < o3; )
              n3 = n3 >>> 8 ^ t3[255 & (n3 ^ e4.charCodeAt(i3++))];
            return ~n3;
          }, e3.buf = function(e4, r5) {
            for (var v = -1 ^ r5, g = e4.length - 15, w = 0; w < g; )
              v = m[e4[w++] ^ 255 & v] ^ y[e4[w++] ^ v >> 8 & 255] ^ b[e4[w++] ^ v >> 16 & 255] ^ p[e4[w++] ^ v >>> 24] ^ h[e4[w++]] ^ l[e4[w++]] ^ d[e4[w++]] ^ f[e4[w++]] ^ c[e4[w++]] ^ u[e4[w++]] ^ s[e4[w++]] ^ a[e4[w++]] ^ o2[e4[w++]] ^ i2[e4[w++]] ^ n2[e4[w++]] ^ t3[e4[w++]];
            for (g += 15; w < g; )
              v = v >>> 8 ^ t3[255 & (v ^ e4[w++])];
            return ~v;
          }, e3.str = function(e4, r5) {
            for (var n3 = -1 ^ r5, i3 = 0, o3 = e4.length, a2 = 0, s2 = 0; i3 < o3; )
              (a2 = e4.charCodeAt(i3++)) < 128 ? n3 = n3 >>> 8 ^ t3[255 & (n3 ^ a2)] : a2 < 2048 ? n3 = (n3 = n3 >>> 8 ^ t3[255 & (n3 ^ (192 | a2 >> 6 & 31))]) >>> 8 ^ t3[255 & (n3 ^ (128 | 63 & a2))] : a2 >= 55296 && a2 < 57344 ? (a2 = 64 + (1023 & a2), s2 = 1023 & e4.charCodeAt(i3++), n3 = (n3 = (n3 = (n3 = n3 >>> 8 ^ t3[255 & (n3 ^ (240 | a2 >> 8 & 7))]) >>> 8 ^ t3[255 & (n3 ^ (128 | a2 >> 2 & 63))]) >>> 8 ^ t3[255 & (n3 ^ (128 | s2 >> 6 & 15 | (3 & a2) << 4))]) >>> 8 ^ t3[255 & (n3 ^ (128 | 63 & s2))]) : n3 = (n3 = (n3 = n3 >>> 8 ^ t3[255 & (n3 ^ (224 | a2 >> 12 & 15))]) >>> 8 ^ t3[255 & (n3 ^ (128 | a2 >> 6 & 63))]) >>> 8 ^ t3[255 & (n3 ^ (128 | 63 & a2))];
            return ~n3;
          };
        }, "undefined" == typeof DO_NOT_EXPORT_CRC ? "object" === (0, o.default)(t2) ? i(t2) : (n = (function() {
          var e3 = {};
          return i(e3), e3;
        }).call(t2, r3, t2, e2), void 0 === n || (e2.exports = n)) : i({});
      }, 5102: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(6597), o = r3(1734);
        e2.exports = function(e3) {
          return new s(e3);
        };
        var a = { secp256k1: { name: "secp256k1", byteLength: 32 }, secp224r1: { name: "p224", byteLength: 28 }, prime256v1: { name: "p256", byteLength: 32 }, prime192v1: { name: "p192", byteLength: 24 }, ed25519: { name: "ed25519", byteLength: 32 }, secp384r1: { name: "p384", byteLength: 48 }, secp521r1: { name: "p521", byteLength: 66 } };
        function s(e3) {
          this.curveType = a[e3], this.curveType || (this.curveType = { name: e3 }), this.curve = new i.ec(this.curveType.name), this.keys = void 0;
        }
        function u(e3, t3, r4) {
          Array.isArray(e3) || (e3 = e3.toArray());
          var i2 = new n(e3);
          if (r4 && i2.length < r4) {
            var o2 = new n(r4 - i2.length);
            o2.fill(0), i2 = n.concat([o2, i2]);
          }
          return t3 ? i2.toString(t3) : i2;
        }
        a.p224 = a.secp224r1, a.p256 = a.secp256r1 = a.prime256v1, a.p192 = a.secp192r1 = a.prime192v1, a.p384 = a.secp384r1, a.p521 = a.secp521r1, s.prototype.generateKeys = function(e3, t3) {
          return this.keys = this.curve.genKeyPair(), this.getPublicKey(e3, t3);
        }, s.prototype.computeSecret = function(e3, t3, r4) {
          return t3 = t3 || "utf8", n.isBuffer(e3) || (e3 = new n(e3, t3)), u(this.curve.keyFromPublic(e3).getPublic().mul(this.keys.getPrivate()).getX(), r4, this.curveType.byteLength);
        }, s.prototype.getPublicKey = function(e3, t3) {
          var r4 = this.keys.getPublic("compressed" === t3, true);
          return "hybrid" === t3 && (r4[r4.length - 1] % 2 ? r4[0] = 7 : r4[0] = 6), u(r4, e3);
        }, s.prototype.getPrivateKey = function(e3) {
          return u(this.keys.getPrivate(), e3);
        }, s.prototype.setPublicKey = function(e3, t3) {
          return t3 = t3 || "utf8", n.isBuffer(e3) || (e3 = new n(e3, t3)), this.keys._importPublic(e3), this;
        }, s.prototype.setPrivateKey = function(e3, t3) {
          t3 = t3 || "utf8", n.isBuffer(e3) || (e3 = new n(e3, t3));
          var r4 = new o(e3);
          return r4 = r4.toString(16), this.keys = this.curve.genKeyPair(), this.keys._importPrivate(r4), this;
        };
      }, 5866: (e2, t2, r3) => {
        "use strict";
        var n = r3(1736), i = r3(807), o = r3(6707), a = r3(1708), s = r3(3013);
        function u(e3) {
          s.call(this, "digest"), this._hash = e3;
        }
        n(u, s), u.prototype._update = function(e3) {
          this._hash.update(e3);
        }, u.prototype._final = function() {
          return this._hash.digest();
        }, e2.exports = function(e3) {
          return "md5" === (e3 = e3.toLowerCase()) ? new i() : "rmd160" === e3 || "ripemd160" === e3 ? new o() : new u(a(e3));
        };
      }, 5349: (e2, t2, r3) => {
        "use strict";
        var n = r3(807);
        e2.exports = function(e3) {
          return new n().update(e3).digest();
        };
      }, 4424: (e2, t2, r3) => {
        "use strict";
        var n = r3(1736), i = r3(9956), o = r3(3013), a = r3(8850).Buffer, s = r3(5349), u = r3(6707), c = r3(1708), f = a.alloc(128);
        function d(e3, t3) {
          o.call(this, "digest"), "string" == typeof t3 && (t3 = a.from(t3));
          var r4 = "sha512" === e3 || "sha384" === e3 ? 128 : 64;
          this._alg = e3, this._key = t3, t3.length > r4 ? t3 = ("rmd160" === e3 ? new u() : c(e3)).update(t3).digest() : t3.length < r4 && (t3 = a.concat([t3, f], r4));
          for (var n2 = this._ipad = a.allocUnsafe(r4), i2 = this._opad = a.allocUnsafe(r4), s2 = 0; s2 < r4; s2++)
            n2[s2] = 54 ^ t3[s2], i2[s2] = 92 ^ t3[s2];
          this._hash = "rmd160" === e3 ? new u() : c(e3), this._hash.update(n2);
        }
        n(d, o), d.prototype._update = function(e3) {
          this._hash.update(e3);
        }, d.prototype._final = function() {
          var e3 = this._hash.digest();
          return ("rmd160" === this._alg ? new u() : c(this._alg)).update(this._opad).update(e3).digest();
        }, e2.exports = function(e3, t3) {
          return "rmd160" === (e3 = e3.toLowerCase()) || "ripemd160" === e3 ? new d("rmd160", t3) : "md5" === e3 ? new i(s, t3) : new d(e3, t3);
        };
      }, 9956: (e2, t2, r3) => {
        "use strict";
        var n = r3(1736), i = r3(8850).Buffer, o = r3(3013), a = i.alloc(128), s = 64;
        function u(e3, t3) {
          o.call(this, "digest"), "string" == typeof t3 && (t3 = i.from(t3)), this._alg = e3, this._key = t3, t3.length > s ? t3 = e3(t3) : t3.length < s && (t3 = i.concat([t3, a], s));
          for (var r4 = this._ipad = i.allocUnsafe(s), n2 = this._opad = i.allocUnsafe(s), u2 = 0; u2 < s; u2++)
            r4[u2] = 54 ^ t3[u2], n2[u2] = 92 ^ t3[u2];
          this._hash = [r4];
        }
        n(u, o), u.prototype._update = function(e3) {
          this._hash.push(e3);
        }, u.prototype._final = function() {
          var e3 = this._alg(i.concat(this._hash));
          return this._alg(i.concat([this._opad, e3]));
        }, e2.exports = u;
      }, 2439: () => {
        "use strict";
        !function(e2) {
          !function(t2) {
            var r3 = { searchParams: "URLSearchParams" in e2, iterable: "Symbol" in e2 && "iterator" in Symbol, blob: "FileReader" in e2 && "Blob" in e2 && function() {
              try {
                return new Blob(), true;
              } catch (e3) {
                return false;
              }
            }(), formData: "FormData" in e2, arrayBuffer: "ArrayBuffer" in e2 };
            if (r3.arrayBuffer)
              var n = ["[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]"], i = ArrayBuffer.isView || function(e3) {
                return e3 && n.indexOf(Object.prototype.toString.call(e3)) > -1;
              };
            function o(e3) {
              if ("string" != typeof e3 && (e3 = String(e3)), /[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e3))
                throw new TypeError("Invalid character in header field name");
              return e3.toLowerCase();
            }
            function a(e3) {
              return "string" != typeof e3 && (e3 = String(e3)), e3;
            }
            function s(e3) {
              var t3 = { next: function() {
                var t4 = e3.shift();
                return { done: void 0 === t4, value: t4 };
              } };
              return r3.iterable && (t3[Symbol.iterator] = function() {
                return t3;
              }), t3;
            }
            function u(e3) {
              this.map = {}, e3 instanceof u ? e3.forEach(function(e4, t3) {
                this.append(t3, e4);
              }, this) : Array.isArray(e3) ? e3.forEach(function(e4) {
                this.append(e4[0], e4[1]);
              }, this) : e3 && Object.getOwnPropertyNames(e3).forEach(function(t3) {
                this.append(t3, e3[t3]);
              }, this);
            }
            function c(e3) {
              if (e3.bodyUsed)
                return Promise.reject(new TypeError("Already read"));
              e3.bodyUsed = true;
            }
            function f(e3) {
              return new Promise(function(t3, r4) {
                e3.onload = function() {
                  t3(e3.result);
                }, e3.onerror = function() {
                  r4(e3.error);
                };
              });
            }
            function d(e3) {
              var t3 = new FileReader(), r4 = f(t3);
              return t3.readAsArrayBuffer(e3), r4;
            }
            function l(e3) {
              if (e3.slice)
                return e3.slice(0);
              var t3 = new Uint8Array(e3.byteLength);
              return t3.set(new Uint8Array(e3)), t3.buffer;
            }
            function h() {
              return this.bodyUsed = false, this._initBody = function(e3) {
                var t3;
                this._bodyInit = e3, e3 ? "string" == typeof e3 ? this._bodyText = e3 : r3.blob && Blob.prototype.isPrototypeOf(e3) ? this._bodyBlob = e3 : r3.formData && FormData.prototype.isPrototypeOf(e3) ? this._bodyFormData = e3 : r3.searchParams && URLSearchParams.prototype.isPrototypeOf(e3) ? this._bodyText = e3.toString() : r3.arrayBuffer && r3.blob && (t3 = e3) && DataView.prototype.isPrototypeOf(t3) ? (this._bodyArrayBuffer = l(e3.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer])) : r3.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(e3) || i(e3)) ? this._bodyArrayBuffer = l(e3) : this._bodyText = e3 = Object.prototype.toString.call(e3) : this._bodyText = "", this.headers.get("content-type") || ("string" == typeof e3 ? this.headers.set("content-type", "text/plain;charset=UTF-8") : this._bodyBlob && this._bodyBlob.type ? this.headers.set("content-type", this._bodyBlob.type) : r3.searchParams && URLSearchParams.prototype.isPrototypeOf(e3) && this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"));
              }, r3.blob && (this.blob = function() {
                var e3 = c(this);
                if (e3)
                  return e3;
                if (this._bodyBlob)
                  return Promise.resolve(this._bodyBlob);
                if (this._bodyArrayBuffer)
                  return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                if (this._bodyFormData)
                  throw new Error("could not read FormData body as blob");
                return Promise.resolve(new Blob([this._bodyText]));
              }, this.arrayBuffer = function() {
                return this._bodyArrayBuffer ? c(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(d);
              }), this.text = function() {
                var e3, t3, r4, n2 = c(this);
                if (n2)
                  return n2;
                if (this._bodyBlob)
                  return e3 = this._bodyBlob, r4 = f(t3 = new FileReader()), t3.readAsText(e3), r4;
                if (this._bodyArrayBuffer)
                  return Promise.resolve(function(e4) {
                    for (var t4 = new Uint8Array(e4), r5 = new Array(t4.length), n3 = 0; n3 < t4.length; n3++)
                      r5[n3] = String.fromCharCode(t4[n3]);
                    return r5.join("");
                  }(this._bodyArrayBuffer));
                if (this._bodyFormData)
                  throw new Error("could not read FormData body as text");
                return Promise.resolve(this._bodyText);
              }, r3.formData && (this.formData = function() {
                return this.text().then(y);
              }), this.json = function() {
                return this.text().then(JSON.parse);
              }, this;
            }
            u.prototype.append = function(e3, t3) {
              e3 = o(e3), t3 = a(t3);
              var r4 = this.map[e3];
              this.map[e3] = r4 ? r4 + ", " + t3 : t3;
            }, u.prototype.delete = function(e3) {
              delete this.map[o(e3)];
            }, u.prototype.get = function(e3) {
              return e3 = o(e3), this.has(e3) ? this.map[e3] : null;
            }, u.prototype.has = function(e3) {
              return this.map.hasOwnProperty(o(e3));
            }, u.prototype.set = function(e3, t3) {
              this.map[o(e3)] = a(t3);
            }, u.prototype.forEach = function(e3, t3) {
              for (var r4 in this.map)
                this.map.hasOwnProperty(r4) && e3.call(t3, this.map[r4], r4, this);
            }, u.prototype.keys = function() {
              var e3 = [];
              return this.forEach(function(t3, r4) {
                e3.push(r4);
              }), s(e3);
            }, u.prototype.values = function() {
              var e3 = [];
              return this.forEach(function(t3) {
                e3.push(t3);
              }), s(e3);
            }, u.prototype.entries = function() {
              var e3 = [];
              return this.forEach(function(t3, r4) {
                e3.push([r4, t3]);
              }), s(e3);
            }, r3.iterable && (u.prototype[Symbol.iterator] = u.prototype.entries);
            var p = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
            function b(e3, t3) {
              var r4, n2, i2 = (t3 = t3 || {}).body;
              if (e3 instanceof b) {
                if (e3.bodyUsed)
                  throw new TypeError("Already read");
                this.url = e3.url, this.credentials = e3.credentials, t3.headers || (this.headers = new u(e3.headers)), this.method = e3.method, this.mode = e3.mode, this.signal = e3.signal, i2 || null == e3._bodyInit || (i2 = e3._bodyInit, e3.bodyUsed = true);
              } else
                this.url = String(e3);
              if (this.credentials = t3.credentials || this.credentials || "same-origin", !t3.headers && this.headers || (this.headers = new u(t3.headers)), this.method = (n2 = (r4 = t3.method || this.method || "GET").toUpperCase(), p.indexOf(n2) > -1 ? n2 : r4), this.mode = t3.mode || this.mode || null, this.signal = t3.signal || this.signal, this.referrer = null, ("GET" === this.method || "HEAD" === this.method) && i2)
                throw new TypeError("Body not allowed for GET or HEAD requests");
              this._initBody(i2);
            }
            function y(e3) {
              var t3 = new FormData();
              return e3.trim().split("&").forEach(function(e4) {
                if (e4) {
                  var r4 = e4.split("="), n2 = r4.shift().replace(/\+/g, " "), i2 = r4.join("=").replace(/\+/g, " ");
                  t3.append(decodeURIComponent(n2), decodeURIComponent(i2));
                }
              }), t3;
            }
            function m(e3, t3) {
              t3 || (t3 = {}), this.type = "default", this.status = void 0 === t3.status ? 200 : t3.status, this.ok = this.status >= 200 && this.status < 300, this.statusText = "statusText" in t3 ? t3.statusText : "OK", this.headers = new u(t3.headers), this.url = t3.url || "", this._initBody(e3);
            }
            b.prototype.clone = function() {
              return new b(this, { body: this._bodyInit });
            }, h.call(b.prototype), h.call(m.prototype), m.prototype.clone = function() {
              return new m(this._bodyInit, { status: this.status, statusText: this.statusText, headers: new u(this.headers), url: this.url });
            }, m.error = function() {
              var e3 = new m(null, { status: 0, statusText: "" });
              return e3.type = "error", e3;
            };
            var v = [301, 302, 303, 307, 308];
            m.redirect = function(e3, t3) {
              if (-1 === v.indexOf(t3))
                throw new RangeError("Invalid status code");
              return new m(null, { status: t3, headers: { location: e3 } });
            }, t2.DOMException = e2.DOMException;
            try {
              new t2.DOMException();
            } catch (e3) {
              t2.DOMException = function(e4, t3) {
                this.message = e4, this.name = t3;
                var r4 = Error(e4);
                this.stack = r4.stack;
              }, t2.DOMException.prototype = Object.create(Error.prototype), t2.DOMException.prototype.constructor = t2.DOMException;
            }
            function g(e3, n2) {
              return new Promise(function(i2, o2) {
                var a2 = new b(e3, n2);
                if (a2.signal && a2.signal.aborted)
                  return o2(new t2.DOMException("Aborted", "AbortError"));
                var s2 = new XMLHttpRequest();
                function c2() {
                  s2.abort();
                }
                s2.onload = function() {
                  var e4, t3, r4 = { status: s2.status, statusText: s2.statusText, headers: (e4 = s2.getAllResponseHeaders() || "", t3 = new u(), e4.replace(/\r?\n[\t ]+/g, " ").split(/\r?\n/).forEach(function(e5) {
                    var r5 = e5.split(":"), n4 = r5.shift().trim();
                    if (n4) {
                      var i3 = r5.join(":").trim();
                      t3.append(n4, i3);
                    }
                  }), t3) };
                  r4.url = "responseURL" in s2 ? s2.responseURL : r4.headers.get("X-Request-URL");
                  var n3 = "response" in s2 ? s2.response : s2.responseText;
                  i2(new m(n3, r4));
                }, s2.onerror = function() {
                  o2(new TypeError("Network request failed"));
                }, s2.ontimeout = function() {
                  o2(new TypeError("Network request failed"));
                }, s2.onabort = function() {
                  o2(new t2.DOMException("Aborted", "AbortError"));
                }, s2.open(a2.method, a2.url, true), "include" === a2.credentials ? s2.withCredentials = true : "omit" === a2.credentials && (s2.withCredentials = false), "responseType" in s2 && r3.blob && (s2.responseType = "blob"), a2.headers.forEach(function(e4, t3) {
                  s2.setRequestHeader(t3, e4);
                }), a2.signal && (a2.signal.addEventListener("abort", c2), s2.onreadystatechange = function() {
                  4 === s2.readyState && a2.signal.removeEventListener("abort", c2);
                }), s2.send(void 0 === a2._bodyInit ? null : a2._bodyInit);
              });
            }
            g.polyfill = true, e2.fetch || (e2.fetch = g, e2.Headers = u, e2.Request = b, e2.Response = m), t2.Headers = u, t2.Request = b, t2.Response = m, t2.fetch = g, Object.defineProperty(t2, "__esModule", { value: true });
          }({});
        }("undefined" != typeof self ? self : void 0);
      }, 4293: (e2, t2, r3) => {
        "use strict";
        t2.randomBytes = t2.rng = t2.pseudoRandomBytes = t2.prng = r3(5010), t2.createHash = t2.Hash = r3(5866), t2.createHmac = t2.Hmac = r3(4424);
        var n = r3(6561), i = Object.keys(n), o = ["sha1", "sha224", "sha256", "sha384", "sha512", "md5", "rmd160"].concat(i);
        t2.getHashes = function() {
          return o;
        };
        var a = r3(4192);
        t2.pbkdf2 = a.pbkdf2, t2.pbkdf2Sync = a.pbkdf2Sync;
        var s = r3(6805);
        t2.Cipher = s.Cipher, t2.createCipher = s.createCipher, t2.Cipheriv = s.Cipheriv, t2.createCipheriv = s.createCipheriv, t2.Decipher = s.Decipher, t2.createDecipher = s.createDecipher, t2.Decipheriv = s.Decipheriv, t2.createDecipheriv = s.createDecipheriv, t2.getCiphers = s.getCiphers, t2.listCiphers = s.listCiphers;
        var u = r3(8333);
        t2.DiffieHellmanGroup = u.DiffieHellmanGroup, t2.createDiffieHellmanGroup = u.createDiffieHellmanGroup, t2.getDiffieHellman = u.getDiffieHellman, t2.createDiffieHellman = u.createDiffieHellman, t2.DiffieHellman = u.DiffieHellman;
        var c = r3(9527);
        t2.createSign = c.createSign, t2.Sign = c.Sign, t2.createVerify = c.createVerify, t2.Verify = c.Verify, t2.createECDH = r3(5102);
        var f = r3(6991);
        t2.publicEncrypt = f.publicEncrypt, t2.privateEncrypt = f.privateEncrypt, t2.publicDecrypt = f.publicDecrypt, t2.privateDecrypt = f.privateDecrypt;
        var d = r3(6509);
        t2.randomFill = d.randomFill, t2.randomFillSync = d.randomFillSync, t2.createCredentials = function() {
          throw new Error(["sorry, createCredentials is not implemented yet", "we accept pull requests", "https://github.com/crypto-browserify/crypto-browserify"].join("\n"));
        }, t2.constants = { DH_CHECK_P_NOT_SAFE_PRIME: 2, DH_CHECK_P_NOT_PRIME: 1, DH_UNABLE_TO_CHECK_GENERATOR: 4, DH_NOT_SUITABLE_GENERATOR: 8, NPN_ENABLED: 1, ALPN_ENABLED: 1, RSA_PKCS1_PADDING: 1, RSA_SSLV23_PADDING: 2, RSA_NO_PADDING: 3, RSA_PKCS1_OAEP_PADDING: 4, RSA_X931_PADDING: 5, RSA_PKCS1_PSS_PADDING: 6, POINT_CONVERSION_COMPRESSED: 2, POINT_CONVERSION_UNCOMPRESSED: 4, POINT_CONVERSION_HYBRID: 6 };
      }, 34: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = "%[a-f0-9]{2}", o = new RegExp("(" + i + ")|([^%]+?)", "gi"), a = new RegExp("(" + i + ")+", "gi");
        function s(e3, t3) {
          try {
            return [decodeURIComponent(e3.join(""))];
          } catch (e4) {
          }
          if (1 === e3.length)
            return e3;
          t3 = t3 || 1;
          var r4 = e3.slice(0, t3), n2 = e3.slice(t3);
          return Array.prototype.concat.call([], s(r4), s(n2));
        }
        function u(e3) {
          try {
            return decodeURIComponent(e3);
          } catch (n2) {
            for (var t3 = e3.match(o) || [], r4 = 1; r4 < t3.length; r4++)
              t3 = (e3 = s(t3, r4).join("")).match(o) || [];
            return e3;
          }
        }
        e2.exports = function(e3) {
          if ("string" != typeof e3)
            throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + (0, n.default)(e3) + "`");
          try {
            return e3 = e3.replace(/\+/g, " "), decodeURIComponent(e3);
          } catch (t3) {
            return function(e4) {
              for (var t4 = { "%FE%FF": "��", "%FF%FE": "��" }, r4 = a.exec(e4); r4; ) {
                try {
                  t4[r4[0]] = decodeURIComponent(r4[0]);
                } catch (e5) {
                  var n2 = u(r4[0]);
                  n2 !== r4[0] && (t4[r4[0]] = n2);
                }
                r4 = a.exec(e4);
              }
              t4["%C2"] = "�";
              for (var i2 = Object.keys(t4), o2 = 0; o2 < i2.length; o2++) {
                var s2 = i2[o2];
                e4 = e4.replace(new RegExp(s2, "g"), t4[s2]);
              }
              return e4;
            }(e3);
          }
        };
      }, 5626: (e2, t2, r3) => {
        "use strict";
        t2.utils = r3(319), t2.Cipher = r3(9591), t2.DES = r3(3049), t2.CBC = r3(4375), t2.EDE = r3(9413);
      }, 4375: (e2, t2, r3) => {
        "use strict";
        var n = r3(4504), i = r3(1736), o = {};
        function a(e3) {
          n.equal(e3.length, 8, "Invalid IV length"), this.iv = new Array(8);
          for (var t3 = 0; t3 < this.iv.length; t3++)
            this.iv[t3] = e3[t3];
        }
        t2.instantiate = function(e3) {
          function t3(t4) {
            e3.call(this, t4), this._cbcInit();
          }
          i(t3, e3);
          for (var r4 = Object.keys(o), n2 = 0; n2 < r4.length; n2++) {
            var a2 = r4[n2];
            t3.prototype[a2] = o[a2];
          }
          return t3.create = function(e4) {
            return new t3(e4);
          }, t3;
        }, o._cbcInit = function() {
          var e3 = new a(this.options.iv);
          this._cbcState = e3;
        }, o._update = function(e3, t3, r4, n2) {
          var i2 = this._cbcState, o2 = this.constructor.super_.prototype, a2 = i2.iv;
          if ("encrypt" === this.type) {
            for (var s = 0; s < this.blockSize; s++)
              a2[s] ^= e3[t3 + s];
            for (o2._update.call(this, a2, 0, r4, n2), s = 0; s < this.blockSize; s++)
              a2[s] = r4[n2 + s];
          } else {
            for (o2._update.call(this, e3, t3, r4, n2), s = 0; s < this.blockSize; s++)
              r4[n2 + s] ^= a2[s];
            for (s = 0; s < this.blockSize; s++)
              a2[s] = e3[t3 + s];
          }
        };
      }, 9591: (e2, t2, r3) => {
        "use strict";
        var n = r3(4504);
        function i(e3) {
          this.options = e3, this.type = this.options.type, this.blockSize = 8, this._init(), this.buffer = new Array(this.blockSize), this.bufferOff = 0;
        }
        e2.exports = i, i.prototype._init = function() {
        }, i.prototype.update = function(e3) {
          return 0 === e3.length ? [] : "decrypt" === this.type ? this._updateDecrypt(e3) : this._updateEncrypt(e3);
        }, i.prototype._buffer = function(e3, t3) {
          for (var r4 = Math.min(this.buffer.length - this.bufferOff, e3.length - t3), n2 = 0; n2 < r4; n2++)
            this.buffer[this.bufferOff + n2] = e3[t3 + n2];
          return this.bufferOff += r4, r4;
        }, i.prototype._flushBuffer = function(e3, t3) {
          return this._update(this.buffer, 0, e3, t3), this.bufferOff = 0, this.blockSize;
        }, i.prototype._updateEncrypt = function(e3) {
          var t3 = 0, r4 = 0, n2 = (this.bufferOff + e3.length) / this.blockSize | 0, i2 = new Array(n2 * this.blockSize);
          0 !== this.bufferOff && (t3 += this._buffer(e3, t3), this.bufferOff === this.buffer.length && (r4 += this._flushBuffer(i2, r4)));
          for (var o = e3.length - (e3.length - t3) % this.blockSize; t3 < o; t3 += this.blockSize)
            this._update(e3, t3, i2, r4), r4 += this.blockSize;
          for (; t3 < e3.length; t3++, this.bufferOff++)
            this.buffer[this.bufferOff] = e3[t3];
          return i2;
        }, i.prototype._updateDecrypt = function(e3) {
          for (var t3 = 0, r4 = 0, n2 = Math.ceil((this.bufferOff + e3.length) / this.blockSize) - 1, i2 = new Array(n2 * this.blockSize); n2 > 0; n2--)
            t3 += this._buffer(e3, t3), r4 += this._flushBuffer(i2, r4);
          return t3 += this._buffer(e3, t3), i2;
        }, i.prototype.final = function(e3) {
          var t3, r4;
          return e3 && (t3 = this.update(e3)), r4 = "encrypt" === this.type ? this._finalEncrypt() : this._finalDecrypt(), t3 ? t3.concat(r4) : r4;
        }, i.prototype._pad = function(e3, t3) {
          if (0 === t3)
            return false;
          for (; t3 < e3.length; )
            e3[t3++] = 0;
          return true;
        }, i.prototype._finalEncrypt = function() {
          if (!this._pad(this.buffer, this.bufferOff))
            return [];
          var e3 = new Array(this.blockSize);
          return this._update(this.buffer, 0, e3, 0), e3;
        }, i.prototype._unpad = function(e3) {
          return e3;
        }, i.prototype._finalDecrypt = function() {
          n.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
          var e3 = new Array(this.blockSize);
          return this._flushBuffer(e3, 0), this._unpad(e3);
        };
      }, 3049: (e2, t2, r3) => {
        "use strict";
        var n = r3(4504), i = r3(1736), o = r3(319), a = r3(9591);
        function s() {
          this.tmp = new Array(2), this.keys = null;
        }
        function u(e3) {
          a.call(this, e3);
          var t3 = new s();
          this._desState = t3, this.deriveKeys(t3, e3.key);
        }
        i(u, a), e2.exports = u, u.create = function(e3) {
          return new u(e3);
        };
        var c = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];
        u.prototype.deriveKeys = function(e3, t3) {
          e3.keys = new Array(32), n.equal(t3.length, this.blockSize, "Invalid key length");
          var r4 = o.readUInt32BE(t3, 0), i2 = o.readUInt32BE(t3, 4);
          o.pc1(r4, i2, e3.tmp, 0), r4 = e3.tmp[0], i2 = e3.tmp[1];
          for (var a2 = 0; a2 < e3.keys.length; a2 += 2) {
            var s2 = c[a2 >>> 1];
            r4 = o.r28shl(r4, s2), i2 = o.r28shl(i2, s2), o.pc2(r4, i2, e3.keys, a2);
          }
        }, u.prototype._update = function(e3, t3, r4, n2) {
          var i2 = this._desState, a2 = o.readUInt32BE(e3, t3), s2 = o.readUInt32BE(e3, t3 + 4);
          o.ip(a2, s2, i2.tmp, 0), a2 = i2.tmp[0], s2 = i2.tmp[1], "encrypt" === this.type ? this._encrypt(i2, a2, s2, i2.tmp, 0) : this._decrypt(i2, a2, s2, i2.tmp, 0), a2 = i2.tmp[0], s2 = i2.tmp[1], o.writeUInt32BE(r4, a2, n2), o.writeUInt32BE(r4, s2, n2 + 4);
        }, u.prototype._pad = function(e3, t3) {
          for (var r4 = e3.length - t3, n2 = t3; n2 < e3.length; n2++)
            e3[n2] = r4;
          return true;
        }, u.prototype._unpad = function(e3) {
          for (var t3 = e3[e3.length - 1], r4 = e3.length - t3; r4 < e3.length; r4++)
            n.equal(e3[r4], t3);
          return e3.slice(0, e3.length - t3);
        }, u.prototype._encrypt = function(e3, t3, r4, n2, i2) {
          for (var a2 = t3, s2 = r4, u2 = 0; u2 < e3.keys.length; u2 += 2) {
            var c2 = e3.keys[u2], f = e3.keys[u2 + 1];
            o.expand(s2, e3.tmp, 0), c2 ^= e3.tmp[0], f ^= e3.tmp[1];
            var d = o.substitute(c2, f), l = s2;
            s2 = (a2 ^ o.permute(d)) >>> 0, a2 = l;
          }
          o.rip(s2, a2, n2, i2);
        }, u.prototype._decrypt = function(e3, t3, r4, n2, i2) {
          for (var a2 = r4, s2 = t3, u2 = e3.keys.length - 2; u2 >= 0; u2 -= 2) {
            var c2 = e3.keys[u2], f = e3.keys[u2 + 1];
            o.expand(a2, e3.tmp, 0), c2 ^= e3.tmp[0], f ^= e3.tmp[1];
            var d = o.substitute(c2, f), l = a2;
            a2 = (s2 ^ o.permute(d)) >>> 0, s2 = l;
          }
          o.rip(a2, s2, n2, i2);
        };
      }, 9413: (e2, t2, r3) => {
        "use strict";
        var n = r3(4504), i = r3(1736), o = r3(9591), a = r3(3049);
        function s(e3, t3) {
          n.equal(t3.length, 24, "Invalid key length");
          var r4 = t3.slice(0, 8), i2 = t3.slice(8, 16), o2 = t3.slice(16, 24);
          this.ciphers = "encrypt" === e3 ? [a.create({ type: "encrypt", key: r4 }), a.create({ type: "decrypt", key: i2 }), a.create({ type: "encrypt", key: o2 })] : [a.create({ type: "decrypt", key: o2 }), a.create({ type: "encrypt", key: i2 }), a.create({ type: "decrypt", key: r4 })];
        }
        function u(e3) {
          o.call(this, e3);
          var t3 = new s(this.type, this.options.key);
          this._edeState = t3;
        }
        i(u, o), e2.exports = u, u.create = function(e3) {
          return new u(e3);
        }, u.prototype._update = function(e3, t3, r4, n2) {
          var i2 = this._edeState;
          i2.ciphers[0]._update(e3, t3, r4, n2), i2.ciphers[1]._update(r4, n2, r4, n2), i2.ciphers[2]._update(r4, n2, r4, n2);
        }, u.prototype._pad = a.prototype._pad, u.prototype._unpad = a.prototype._unpad;
      }, 319: (e2, t2) => {
        "use strict";
        t2.readUInt32BE = function(e3, t3) {
          return (e3[0 + t3] << 24 | e3[1 + t3] << 16 | e3[2 + t3] << 8 | e3[3 + t3]) >>> 0;
        }, t2.writeUInt32BE = function(e3, t3, r4) {
          e3[0 + r4] = t3 >>> 24, e3[1 + r4] = t3 >>> 16 & 255, e3[2 + r4] = t3 >>> 8 & 255, e3[3 + r4] = 255 & t3;
        }, t2.ip = function(e3, t3, r4, n2) {
          for (var i2 = 0, o = 0, a = 6; a >= 0; a -= 2) {
            for (var s = 0; s <= 24; s += 8)
              i2 <<= 1, i2 |= t3 >>> s + a & 1;
            for (s = 0; s <= 24; s += 8)
              i2 <<= 1, i2 |= e3 >>> s + a & 1;
          }
          for (a = 6; a >= 0; a -= 2) {
            for (s = 1; s <= 25; s += 8)
              o <<= 1, o |= t3 >>> s + a & 1;
            for (s = 1; s <= 25; s += 8)
              o <<= 1, o |= e3 >>> s + a & 1;
          }
          r4[n2 + 0] = i2 >>> 0, r4[n2 + 1] = o >>> 0;
        }, t2.rip = function(e3, t3, r4, n2) {
          for (var i2 = 0, o = 0, a = 0; a < 4; a++)
            for (var s = 24; s >= 0; s -= 8)
              i2 <<= 1, i2 |= t3 >>> s + a & 1, i2 <<= 1, i2 |= e3 >>> s + a & 1;
          for (a = 4; a < 8; a++)
            for (s = 24; s >= 0; s -= 8)
              o <<= 1, o |= t3 >>> s + a & 1, o <<= 1, o |= e3 >>> s + a & 1;
          r4[n2 + 0] = i2 >>> 0, r4[n2 + 1] = o >>> 0;
        }, t2.pc1 = function(e3, t3, r4, n2) {
          for (var i2 = 0, o = 0, a = 7; a >= 5; a--) {
            for (var s = 0; s <= 24; s += 8)
              i2 <<= 1, i2 |= t3 >> s + a & 1;
            for (s = 0; s <= 24; s += 8)
              i2 <<= 1, i2 |= e3 >> s + a & 1;
          }
          for (s = 0; s <= 24; s += 8)
            i2 <<= 1, i2 |= t3 >> s + a & 1;
          for (a = 1; a <= 3; a++) {
            for (s = 0; s <= 24; s += 8)
              o <<= 1, o |= t3 >> s + a & 1;
            for (s = 0; s <= 24; s += 8)
              o <<= 1, o |= e3 >> s + a & 1;
          }
          for (s = 0; s <= 24; s += 8)
            o <<= 1, o |= e3 >> s + a & 1;
          r4[n2 + 0] = i2 >>> 0, r4[n2 + 1] = o >>> 0;
        }, t2.r28shl = function(e3, t3) {
          return e3 << t3 & 268435455 | e3 >>> 28 - t3;
        };
        var r3 = [14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26, 15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];
        t2.pc2 = function(e3, t3, n2, i2) {
          for (var o = 0, a = 0, s = r3.length >>> 1, u = 0; u < s; u++)
            o <<= 1, o |= e3 >>> r3[u] & 1;
          for (u = s; u < r3.length; u++)
            a <<= 1, a |= t3 >>> r3[u] & 1;
          n2[i2 + 0] = o >>> 0, n2[i2 + 1] = a >>> 0;
        }, t2.expand = function(e3, t3, r4) {
          var n2 = 0, i2 = 0;
          n2 = (1 & e3) << 5 | e3 >>> 27;
          for (var o = 23; o >= 15; o -= 4)
            n2 <<= 6, n2 |= e3 >>> o & 63;
          for (o = 11; o >= 3; o -= 4)
            i2 |= e3 >>> o & 63, i2 <<= 6;
          i2 |= (31 & e3) << 1 | e3 >>> 31, t3[r4 + 0] = n2 >>> 0, t3[r4 + 1] = i2 >>> 0;
        };
        var n = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];
        t2.substitute = function(e3, t3) {
          for (var r4 = 0, i2 = 0; i2 < 4; i2++)
            r4 <<= 4, r4 |= n[64 * i2 + (e3 >>> 18 - 6 * i2 & 63)];
          for (i2 = 0; i2 < 4; i2++)
            r4 <<= 4, r4 |= n[256 + 64 * i2 + (t3 >>> 18 - 6 * i2 & 63)];
          return r4 >>> 0;
        };
        var i = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];
        t2.permute = function(e3) {
          for (var t3 = 0, r4 = 0; r4 < i.length; r4++)
            t3 <<= 1, t3 |= e3 >>> i[r4] & 1;
          return t3 >>> 0;
        }, t2.padSplit = function(e3, t3, r4) {
          for (var n2 = e3.toString(2); n2.length < t3; )
            n2 = "0" + n2;
          for (var i2 = [], o = 0; o < t3; o += r4)
            i2.push(n2.slice(o, o + r4));
          return i2.join(" ");
        };
      }, 8333: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(8557), o = r3(9799), a = r3(1592), s = { binary: true, hex: true, base64: true };
        t2.DiffieHellmanGroup = t2.createDiffieHellmanGroup = t2.getDiffieHellman = function(e3) {
          var t3 = new n(o[e3].prime, "hex"), r4 = new n(o[e3].gen, "hex");
          return new a(t3, r4);
        }, t2.createDiffieHellman = t2.DiffieHellman = function e3(t3, r4, o2, u) {
          return n.isBuffer(r4) || void 0 === s[r4] ? e3(t3, "binary", r4, o2) : (r4 = r4 || "binary", u = u || "binary", o2 = o2 || new n([2]), n.isBuffer(o2) || (o2 = new n(o2, u)), "number" == typeof t3 ? new a(i(t3, o2), o2, true) : (n.isBuffer(t3) || (t3 = new n(t3, r4)), new a(t3, o2, true)));
        };
      }, 1592: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(1734), o = new (r3(137))(), a = new i(24), s = new i(11), u = new i(10), c = new i(3), f = new i(7), d = r3(8557), l = r3(5010);
        function h(e3, t3) {
          return t3 = t3 || "utf8", n.isBuffer(e3) || (e3 = new n(e3, t3)), this._pub = new i(e3), this;
        }
        function p(e3, t3) {
          return t3 = t3 || "utf8", n.isBuffer(e3) || (e3 = new n(e3, t3)), this._priv = new i(e3), this;
        }
        e2.exports = y;
        var b = {};
        function y(e3, t3, r4) {
          this.setGenerator(t3), this.__prime = new i(e3), this._prime = i.mont(this.__prime), this._primeLen = e3.length, this._pub = void 0, this._priv = void 0, this._primeCode = void 0, r4 ? (this.setPublicKey = h, this.setPrivateKey = p) : this._primeCode = 8;
        }
        function m(e3, t3) {
          var r4 = new n(e3.toArray());
          return t3 ? r4.toString(t3) : r4;
        }
        Object.defineProperty(y.prototype, "verifyError", { enumerable: true, get: function() {
          return "number" != typeof this._primeCode && (this._primeCode = function(e3, t3) {
            var r4 = t3.toString("hex"), n2 = [r4, e3.toString(16)].join("_");
            if (n2 in b)
              return b[n2];
            var i2, l2 = 0;
            if (e3.isEven() || !d.simpleSieve || !d.fermatTest(e3) || !o.test(e3))
              return l2 += 1, l2 += "02" === r4 || "05" === r4 ? 8 : 4, b[n2] = l2, l2;
            switch (o.test(e3.shrn(1)) || (l2 += 2), r4) {
              case "02":
                e3.mod(a).cmp(s) && (l2 += 8);
                break;
              case "05":
                (i2 = e3.mod(u)).cmp(c) && i2.cmp(f) && (l2 += 8);
                break;
              default:
                l2 += 4;
            }
            return b[n2] = l2, l2;
          }(this.__prime, this.__gen)), this._primeCode;
        } }), y.prototype.generateKeys = function() {
          return this._priv || (this._priv = new i(l(this._primeLen))), this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed(), this.getPublicKey();
        }, y.prototype.computeSecret = function(e3) {
          var t3 = (e3 = (e3 = new i(e3)).toRed(this._prime)).redPow(this._priv).fromRed(), r4 = new n(t3.toArray()), o2 = this.getPrime();
          if (r4.length < o2.length) {
            var a2 = new n(o2.length - r4.length);
            a2.fill(0), r4 = n.concat([a2, r4]);
          }
          return r4;
        }, y.prototype.getPublicKey = function(e3) {
          return m(this._pub, e3);
        }, y.prototype.getPrivateKey = function(e3) {
          return m(this._priv, e3);
        }, y.prototype.getPrime = function(e3) {
          return m(this.__prime, e3);
        }, y.prototype.getGenerator = function(e3) {
          return m(this._gen, e3);
        }, y.prototype.setGenerator = function(e3, t3) {
          return t3 = t3 || "utf8", n.isBuffer(e3) || (e3 = new n(e3, t3)), this.__gen = e3, this._gen = new i(e3), this;
        };
      }, 8557: (e2, t2, r3) => {
        "use strict";
        var n = r3(5010);
        e2.exports = v, v.simpleSieve = y, v.fermatTest = m;
        var i = r3(1734), o = new i(24), a = new (r3(137))(), s = new i(1), u = new i(2), c = new i(5), f = (new i(16), new i(8), new i(10)), d = new i(3), l = (new i(7), new i(11)), h = new i(4), p = (new i(12), null);
        function b() {
          if (null !== p)
            return p;
          var e3 = [];
          e3[0] = 2;
          for (var t3 = 1, r4 = 3; r4 < 1048576; r4 += 2) {
            for (var n2 = Math.ceil(Math.sqrt(r4)), i2 = 0; i2 < t3 && e3[i2] <= n2 && r4 % e3[i2] != 0; i2++)
              ;
            t3 !== i2 && e3[i2] <= n2 || (e3[t3++] = r4);
          }
          return p = e3, e3;
        }
        function y(e3) {
          for (var t3 = b(), r4 = 0; r4 < t3.length; r4++)
            if (0 === e3.modn(t3[r4]))
              return 0 === e3.cmpn(t3[r4]);
          return true;
        }
        function m(e3) {
          var t3 = i.mont(e3);
          return 0 === u.toRed(t3).redPow(e3.subn(1)).fromRed().cmpn(1);
        }
        function v(e3, t3) {
          if (e3 < 16)
            return new i(2 === t3 || 5 === t3 ? [140, 123] : [140, 39]);
          var r4, p2;
          for (t3 = new i(t3); ; ) {
            for (r4 = new i(n(Math.ceil(e3 / 8))); r4.bitLength() > e3; )
              r4.ishrn(1);
            if (r4.isEven() && r4.iadd(s), r4.testn(1) || r4.iadd(u), t3.cmp(u)) {
              if (!t3.cmp(c))
                for (; r4.mod(f).cmp(d); )
                  r4.iadd(h);
            } else
              for (; r4.mod(o).cmp(l); )
                r4.iadd(h);
            if (y(p2 = r4.shrn(1)) && y(r4) && m(p2) && m(r4) && a.test(p2) && a.test(r4))
              return r4;
          }
        }
      }, 6597: (e2, t2, r3) => {
        "use strict";
        var n = t2;
        n.version = r3(8597).i8, n.utils = r3(7528), n.rand = r3(2202), n.curve = r3(6063), n.curves = r3(506), n.ec = r3(8320), n.eddsa = r3(8027);
      }, 1249: (e2, t2, r3) => {
        "use strict";
        var n = r3(1734), i = r3(7528), o = i.getNAF, a = i.getJSF, s = i.assert;
        function u(e3, t3) {
          this.type = e3, this.p = new n(t3.p, 16), this.red = t3.prime ? n.red(t3.prime) : n.mont(this.p), this.zero = new n(0).toRed(this.red), this.one = new n(1).toRed(this.red), this.two = new n(2).toRed(this.red), this.n = t3.n && new n(t3.n, 16), this.g = t3.g && this.pointFromJSON(t3.g, t3.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
          var r4 = this.n && this.p.div(this.n);
          !r4 || r4.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = true, this.redN = this.n.toRed(this.red));
        }
        function c(e3, t3) {
          this.curve = e3, this.type = t3, this.precomputed = null;
        }
        e2.exports = u, u.prototype.point = function() {
          throw new Error("Not implemented");
        }, u.prototype.validate = function() {
          throw new Error("Not implemented");
        }, u.prototype._fixedNafMul = function(e3, t3) {
          s(e3.precomputed);
          var r4 = e3._getDoubles(), n2 = o(t3, 1, this._bitLength), i2 = (1 << r4.step + 1) - (r4.step % 2 == 0 ? 2 : 1);
          i2 /= 3;
          var a2, u2, c2 = [];
          for (a2 = 0; a2 < n2.length; a2 += r4.step) {
            u2 = 0;
            for (var f = a2 + r4.step - 1; f >= a2; f--)
              u2 = (u2 << 1) + n2[f];
            c2.push(u2);
          }
          for (var d = this.jpoint(null, null, null), l = this.jpoint(null, null, null), h = i2; h > 0; h--) {
            for (a2 = 0; a2 < c2.length; a2++)
              (u2 = c2[a2]) === h ? l = l.mixedAdd(r4.points[a2]) : u2 === -h && (l = l.mixedAdd(r4.points[a2].neg()));
            d = d.add(l);
          }
          return d.toP();
        }, u.prototype._wnafMul = function(e3, t3) {
          var r4 = 4, n2 = e3._getNAFPoints(r4);
          r4 = n2.wnd;
          for (var i2 = n2.points, a2 = o(t3, r4, this._bitLength), u2 = this.jpoint(null, null, null), c2 = a2.length - 1; c2 >= 0; c2--) {
            for (var f = 0; c2 >= 0 && 0 === a2[c2]; c2--)
              f++;
            if (c2 >= 0 && f++, u2 = u2.dblp(f), c2 < 0)
              break;
            var d = a2[c2];
            s(0 !== d), u2 = "affine" === e3.type ? d > 0 ? u2.mixedAdd(i2[d - 1 >> 1]) : u2.mixedAdd(i2[-d - 1 >> 1].neg()) : d > 0 ? u2.add(i2[d - 1 >> 1]) : u2.add(i2[-d - 1 >> 1].neg());
          }
          return "affine" === e3.type ? u2.toP() : u2;
        }, u.prototype._wnafMulAdd = function(e3, t3, r4, n2, i2) {
          var s2, u2, c2, f = this._wnafT1, d = this._wnafT2, l = this._wnafT3, h = 0;
          for (s2 = 0; s2 < n2; s2++) {
            var p = (c2 = t3[s2])._getNAFPoints(e3);
            f[s2] = p.wnd, d[s2] = p.points;
          }
          for (s2 = n2 - 1; s2 >= 1; s2 -= 2) {
            var b = s2 - 1, y = s2;
            if (1 === f[b] && 1 === f[y]) {
              var m = [t3[b], null, null, t3[y]];
              0 === t3[b].y.cmp(t3[y].y) ? (m[1] = t3[b].add(t3[y]), m[2] = t3[b].toJ().mixedAdd(t3[y].neg())) : 0 === t3[b].y.cmp(t3[y].y.redNeg()) ? (m[1] = t3[b].toJ().mixedAdd(t3[y]), m[2] = t3[b].add(t3[y].neg())) : (m[1] = t3[b].toJ().mixedAdd(t3[y]), m[2] = t3[b].toJ().mixedAdd(t3[y].neg()));
              var v = [-3, -1, -5, -7, 0, 7, 5, 1, 3], g = a(r4[b], r4[y]);
              for (h = Math.max(g[0].length, h), l[b] = new Array(h), l[y] = new Array(h), u2 = 0; u2 < h; u2++) {
                var w = 0 | g[0][u2], A = 0 | g[1][u2];
                l[b][u2] = v[3 * (w + 1) + (A + 1)], l[y][u2] = 0, d[b] = m;
              }
            } else
              l[b] = o(r4[b], f[b], this._bitLength), l[y] = o(r4[y], f[y], this._bitLength), h = Math.max(l[b].length, h), h = Math.max(l[y].length, h);
          }
          var k = this.jpoint(null, null, null), _ = this._wnafT4;
          for (s2 = h; s2 >= 0; s2--) {
            for (var S = 0; s2 >= 0; ) {
              var E = true;
              for (u2 = 0; u2 < n2; u2++)
                _[u2] = 0 | l[u2][s2], 0 !== _[u2] && (E = false);
              if (!E)
                break;
              S++, s2--;
            }
            if (s2 >= 0 && S++, k = k.dblp(S), s2 < 0)
              break;
            for (u2 = 0; u2 < n2; u2++) {
              var x = _[u2];
              0 !== x && (x > 0 ? c2 = d[u2][x - 1 >> 1] : x < 0 && (c2 = d[u2][-x - 1 >> 1].neg()), k = "affine" === c2.type ? k.mixedAdd(c2) : k.add(c2));
            }
          }
          for (s2 = 0; s2 < n2; s2++)
            d[s2] = null;
          return i2 ? k : k.toP();
        }, u.BasePoint = c, c.prototype.eq = function() {
          throw new Error("Not implemented");
        }, c.prototype.validate = function() {
          return this.curve.validate(this);
        }, u.prototype.decodePoint = function(e3, t3) {
          e3 = i.toArray(e3, t3);
          var r4 = this.p.byteLength();
          if ((4 === e3[0] || 6 === e3[0] || 7 === e3[0]) && e3.length - 1 == 2 * r4)
            return 6 === e3[0] ? s(e3[e3.length - 1] % 2 == 0) : 7 === e3[0] && s(e3[e3.length - 1] % 2 == 1), this.point(e3.slice(1, 1 + r4), e3.slice(1 + r4, 1 + 2 * r4));
          if ((2 === e3[0] || 3 === e3[0]) && e3.length - 1 === r4)
            return this.pointFromX(e3.slice(1, 1 + r4), 3 === e3[0]);
          throw new Error("Unknown point format");
        }, c.prototype.encodeCompressed = function(e3) {
          return this.encode(e3, true);
        }, c.prototype._encode = function(e3) {
          var t3 = this.curve.p.byteLength(), r4 = this.getX().toArray("be", t3);
          return e3 ? [this.getY().isEven() ? 2 : 3].concat(r4) : [4].concat(r4, this.getY().toArray("be", t3));
        }, c.prototype.encode = function(e3, t3) {
          return i.encode(this._encode(t3), e3);
        }, c.prototype.precompute = function(e3) {
          if (this.precomputed)
            return this;
          var t3 = { doubles: null, naf: null, beta: null };
          return t3.naf = this._getNAFPoints(8), t3.doubles = this._getDoubles(4, e3), t3.beta = this._getBeta(), this.precomputed = t3, this;
        }, c.prototype._hasDoubles = function(e3) {
          if (!this.precomputed)
            return false;
          var t3 = this.precomputed.doubles;
          return !!t3 && t3.points.length >= Math.ceil((e3.bitLength() + 1) / t3.step);
        }, c.prototype._getDoubles = function(e3, t3) {
          if (this.precomputed && this.precomputed.doubles)
            return this.precomputed.doubles;
          for (var r4 = [this], n2 = this, i2 = 0; i2 < t3; i2 += e3) {
            for (var o2 = 0; o2 < e3; o2++)
              n2 = n2.dbl();
            r4.push(n2);
          }
          return { step: e3, points: r4 };
        }, c.prototype._getNAFPoints = function(e3) {
          if (this.precomputed && this.precomputed.naf)
            return this.precomputed.naf;
          for (var t3 = [this], r4 = (1 << e3) - 1, n2 = 1 === r4 ? null : this.dbl(), i2 = 1; i2 < r4; i2++)
            t3[i2] = t3[i2 - 1].add(n2);
          return { wnd: e3, points: t3 };
        }, c.prototype._getBeta = function() {
          return null;
        }, c.prototype.dblp = function(e3) {
          for (var t3 = this, r4 = 0; r4 < e3; r4++)
            t3 = t3.dbl();
          return t3;
        };
      }, 1123: (e2, t2, r3) => {
        "use strict";
        var n = r3(7528), i = r3(1734), o = r3(1736), a = r3(1249), s = n.assert;
        function u(e3) {
          this.twisted = 1 != (0 | e3.a), this.mOneA = this.twisted && -1 == (0 | e3.a), this.extended = this.mOneA, a.call(this, "edwards", e3), this.a = new i(e3.a, 16).umod(this.red.m), this.a = this.a.toRed(this.red), this.c = new i(e3.c, 16).toRed(this.red), this.c2 = this.c.redSqr(), this.d = new i(e3.d, 16).toRed(this.red), this.dd = this.d.redAdd(this.d), s(!this.twisted || 0 === this.c.fromRed().cmpn(1)), this.oneC = 1 == (0 | e3.c);
        }
        function c(e3, t3, r4, n2, o2) {
          a.BasePoint.call(this, e3, "projective"), null === t3 && null === r4 && null === n2 ? (this.x = this.curve.zero, this.y = this.curve.one, this.z = this.curve.one, this.t = this.curve.zero, this.zOne = true) : (this.x = new i(t3, 16), this.y = new i(r4, 16), this.z = n2 ? new i(n2, 16) : this.curve.one, this.t = o2 && new i(o2, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)), this.zOne = this.z === this.curve.one, this.curve.extended && !this.t && (this.t = this.x.redMul(this.y), this.zOne || (this.t = this.t.redMul(this.z.redInvm()))));
        }
        o(u, a), e2.exports = u, u.prototype._mulA = function(e3) {
          return this.mOneA ? e3.redNeg() : this.a.redMul(e3);
        }, u.prototype._mulC = function(e3) {
          return this.oneC ? e3 : this.c.redMul(e3);
        }, u.prototype.jpoint = function(e3, t3, r4, n2) {
          return this.point(e3, t3, r4, n2);
        }, u.prototype.pointFromX = function(e3, t3) {
          (e3 = new i(e3, 16)).red || (e3 = e3.toRed(this.red));
          var r4 = e3.redSqr(), n2 = this.c2.redSub(this.a.redMul(r4)), o2 = this.one.redSub(this.c2.redMul(this.d).redMul(r4)), a2 = n2.redMul(o2.redInvm()), s2 = a2.redSqrt();
          if (0 !== s2.redSqr().redSub(a2).cmp(this.zero))
            throw new Error("invalid point");
          var u2 = s2.fromRed().isOdd();
          return (t3 && !u2 || !t3 && u2) && (s2 = s2.redNeg()), this.point(e3, s2);
        }, u.prototype.pointFromY = function(e3, t3) {
          (e3 = new i(e3, 16)).red || (e3 = e3.toRed(this.red));
          var r4 = e3.redSqr(), n2 = r4.redSub(this.c2), o2 = r4.redMul(this.d).redMul(this.c2).redSub(this.a), a2 = n2.redMul(o2.redInvm());
          if (0 === a2.cmp(this.zero)) {
            if (t3)
              throw new Error("invalid point");
            return this.point(this.zero, e3);
          }
          var s2 = a2.redSqrt();
          if (0 !== s2.redSqr().redSub(a2).cmp(this.zero))
            throw new Error("invalid point");
          return s2.fromRed().isOdd() !== t3 && (s2 = s2.redNeg()), this.point(s2, e3);
        }, u.prototype.validate = function(e3) {
          if (e3.isInfinity())
            return true;
          e3.normalize();
          var t3 = e3.x.redSqr(), r4 = e3.y.redSqr(), n2 = t3.redMul(this.a).redAdd(r4), i2 = this.c2.redMul(this.one.redAdd(this.d.redMul(t3).redMul(r4)));
          return 0 === n2.cmp(i2);
        }, o(c, a.BasePoint), u.prototype.pointFromJSON = function(e3) {
          return c.fromJSON(this, e3);
        }, u.prototype.point = function(e3, t3, r4, n2) {
          return new c(this, e3, t3, r4, n2);
        }, c.fromJSON = function(e3, t3) {
          return new c(e3, t3[0], t3[1], t3[2]);
        }, c.prototype.inspect = function() {
          return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
        }, c.prototype.isInfinity = function() {
          return 0 === this.x.cmpn(0) && (0 === this.y.cmp(this.z) || this.zOne && 0 === this.y.cmp(this.curve.c));
        }, c.prototype._extDbl = function() {
          var e3 = this.x.redSqr(), t3 = this.y.redSqr(), r4 = this.z.redSqr();
          r4 = r4.redIAdd(r4);
          var n2 = this.curve._mulA(e3), i2 = this.x.redAdd(this.y).redSqr().redISub(e3).redISub(t3), o2 = n2.redAdd(t3), a2 = o2.redSub(r4), s2 = n2.redSub(t3), u2 = i2.redMul(a2), c2 = o2.redMul(s2), f = i2.redMul(s2), d = a2.redMul(o2);
          return this.curve.point(u2, c2, d, f);
        }, c.prototype._projDbl = function() {
          var e3, t3, r4, n2, i2, o2, a2 = this.x.redAdd(this.y).redSqr(), s2 = this.x.redSqr(), u2 = this.y.redSqr();
          if (this.curve.twisted) {
            var c2 = (n2 = this.curve._mulA(s2)).redAdd(u2);
            this.zOne ? (e3 = a2.redSub(s2).redSub(u2).redMul(c2.redSub(this.curve.two)), t3 = c2.redMul(n2.redSub(u2)), r4 = c2.redSqr().redSub(c2).redSub(c2)) : (i2 = this.z.redSqr(), o2 = c2.redSub(i2).redISub(i2), e3 = a2.redSub(s2).redISub(u2).redMul(o2), t3 = c2.redMul(n2.redSub(u2)), r4 = c2.redMul(o2));
          } else
            n2 = s2.redAdd(u2), i2 = this.curve._mulC(this.z).redSqr(), o2 = n2.redSub(i2).redSub(i2), e3 = this.curve._mulC(a2.redISub(n2)).redMul(o2), t3 = this.curve._mulC(n2).redMul(s2.redISub(u2)), r4 = n2.redMul(o2);
          return this.curve.point(e3, t3, r4);
        }, c.prototype.dbl = function() {
          return this.isInfinity() ? this : this.curve.extended ? this._extDbl() : this._projDbl();
        }, c.prototype._extAdd = function(e3) {
          var t3 = this.y.redSub(this.x).redMul(e3.y.redSub(e3.x)), r4 = this.y.redAdd(this.x).redMul(e3.y.redAdd(e3.x)), n2 = this.t.redMul(this.curve.dd).redMul(e3.t), i2 = this.z.redMul(e3.z.redAdd(e3.z)), o2 = r4.redSub(t3), a2 = i2.redSub(n2), s2 = i2.redAdd(n2), u2 = r4.redAdd(t3), c2 = o2.redMul(a2), f = s2.redMul(u2), d = o2.redMul(u2), l = a2.redMul(s2);
          return this.curve.point(c2, f, l, d);
        }, c.prototype._projAdd = function(e3) {
          var t3, r4, n2 = this.z.redMul(e3.z), i2 = n2.redSqr(), o2 = this.x.redMul(e3.x), a2 = this.y.redMul(e3.y), s2 = this.curve.d.redMul(o2).redMul(a2), u2 = i2.redSub(s2), c2 = i2.redAdd(s2), f = this.x.redAdd(this.y).redMul(e3.x.redAdd(e3.y)).redISub(o2).redISub(a2), d = n2.redMul(u2).redMul(f);
          return this.curve.twisted ? (t3 = n2.redMul(c2).redMul(a2.redSub(this.curve._mulA(o2))), r4 = u2.redMul(c2)) : (t3 = n2.redMul(c2).redMul(a2.redSub(o2)), r4 = this.curve._mulC(u2).redMul(c2)), this.curve.point(d, t3, r4);
        }, c.prototype.add = function(e3) {
          return this.isInfinity() ? e3 : e3.isInfinity() ? this : this.curve.extended ? this._extAdd(e3) : this._projAdd(e3);
        }, c.prototype.mul = function(e3) {
          return this._hasDoubles(e3) ? this.curve._fixedNafMul(this, e3) : this.curve._wnafMul(this, e3);
        }, c.prototype.mulAdd = function(e3, t3, r4) {
          return this.curve._wnafMulAdd(1, [this, t3], [e3, r4], 2, false);
        }, c.prototype.jmulAdd = function(e3, t3, r4) {
          return this.curve._wnafMulAdd(1, [this, t3], [e3, r4], 2, true);
        }, c.prototype.normalize = function() {
          if (this.zOne)
            return this;
          var e3 = this.z.redInvm();
          return this.x = this.x.redMul(e3), this.y = this.y.redMul(e3), this.t && (this.t = this.t.redMul(e3)), this.z = this.curve.one, this.zOne = true, this;
        }, c.prototype.neg = function() {
          return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
        }, c.prototype.getX = function() {
          return this.normalize(), this.x.fromRed();
        }, c.prototype.getY = function() {
          return this.normalize(), this.y.fromRed();
        }, c.prototype.eq = function(e3) {
          return this === e3 || 0 === this.getX().cmp(e3.getX()) && 0 === this.getY().cmp(e3.getY());
        }, c.prototype.eqXToP = function(e3) {
          var t3 = e3.toRed(this.curve.red).redMul(this.z);
          if (0 === this.x.cmp(t3))
            return true;
          for (var r4 = e3.clone(), n2 = this.curve.redN.redMul(this.z); ; ) {
            if (r4.iadd(this.curve.n), r4.cmp(this.curve.p) >= 0)
              return false;
            if (t3.redIAdd(n2), 0 === this.x.cmp(t3))
              return true;
          }
        }, c.prototype.toP = c.prototype.normalize, c.prototype.mixedAdd = c.prototype.add;
      }, 6063: (e2, t2, r3) => {
        "use strict";
        var n = t2;
        n.base = r3(1249), n.short = r3(3148), n.mont = r3(1105), n.edwards = r3(1123);
      }, 1105: (e2, t2, r3) => {
        "use strict";
        var n = r3(1734), i = r3(1736), o = r3(1249), a = r3(7528);
        function s(e3) {
          o.call(this, "mont", e3), this.a = new n(e3.a, 16).toRed(this.red), this.b = new n(e3.b, 16).toRed(this.red), this.i4 = new n(4).toRed(this.red).redInvm(), this.two = new n(2).toRed(this.red), this.a24 = this.i4.redMul(this.a.redAdd(this.two));
        }
        function u(e3, t3, r4) {
          o.BasePoint.call(this, e3, "projective"), null === t3 && null === r4 ? (this.x = this.curve.one, this.z = this.curve.zero) : (this.x = new n(t3, 16), this.z = new n(r4, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)));
        }
        i(s, o), e2.exports = s, s.prototype.validate = function(e3) {
          var t3 = e3.normalize().x, r4 = t3.redSqr(), n2 = r4.redMul(t3).redAdd(r4.redMul(this.a)).redAdd(t3);
          return 0 === n2.redSqrt().redSqr().cmp(n2);
        }, i(u, o.BasePoint), s.prototype.decodePoint = function(e3, t3) {
          return this.point(a.toArray(e3, t3), 1);
        }, s.prototype.point = function(e3, t3) {
          return new u(this, e3, t3);
        }, s.prototype.pointFromJSON = function(e3) {
          return u.fromJSON(this, e3);
        }, u.prototype.precompute = function() {
        }, u.prototype._encode = function() {
          return this.getX().toArray("be", this.curve.p.byteLength());
        }, u.fromJSON = function(e3, t3) {
          return new u(e3, t3[0], t3[1] || e3.one);
        }, u.prototype.inspect = function() {
          return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
        }, u.prototype.isInfinity = function() {
          return 0 === this.z.cmpn(0);
        }, u.prototype.dbl = function() {
          var e3 = this.x.redAdd(this.z).redSqr(), t3 = this.x.redSub(this.z).redSqr(), r4 = e3.redSub(t3), n2 = e3.redMul(t3), i2 = r4.redMul(t3.redAdd(this.curve.a24.redMul(r4)));
          return this.curve.point(n2, i2);
        }, u.prototype.add = function() {
          throw new Error("Not supported on Montgomery curve");
        }, u.prototype.diffAdd = function(e3, t3) {
          var r4 = this.x.redAdd(this.z), n2 = this.x.redSub(this.z), i2 = e3.x.redAdd(e3.z), o2 = e3.x.redSub(e3.z).redMul(r4), a2 = i2.redMul(n2), s2 = t3.z.redMul(o2.redAdd(a2).redSqr()), u2 = t3.x.redMul(o2.redISub(a2).redSqr());
          return this.curve.point(s2, u2);
        }, u.prototype.mul = function(e3) {
          for (var t3 = e3.clone(), r4 = this, n2 = this.curve.point(null, null), i2 = []; 0 !== t3.cmpn(0); t3.iushrn(1))
            i2.push(t3.andln(1));
          for (var o2 = i2.length - 1; o2 >= 0; o2--)
            0 === i2[o2] ? (r4 = r4.diffAdd(n2, this), n2 = n2.dbl()) : (n2 = r4.diffAdd(n2, this), r4 = r4.dbl());
          return n2;
        }, u.prototype.mulAdd = function() {
          throw new Error("Not supported on Montgomery curve");
        }, u.prototype.jumlAdd = function() {
          throw new Error("Not supported on Montgomery curve");
        }, u.prototype.eq = function(e3) {
          return 0 === this.getX().cmp(e3.getX());
        }, u.prototype.normalize = function() {
          return this.x = this.x.redMul(this.z.redInvm()), this.z = this.curve.one, this;
        }, u.prototype.getX = function() {
          return this.normalize(), this.x.fromRed();
        };
      }, 3148: (e2, t2, r3) => {
        "use strict";
        var n = r3(7528), i = r3(1734), o = r3(1736), a = r3(1249), s = n.assert;
        function u(e3) {
          a.call(this, "short", e3), this.a = new i(e3.a, 16).toRed(this.red), this.b = new i(e3.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(e3), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
        }
        function c(e3, t3, r4, n2) {
          a.BasePoint.call(this, e3, "affine"), null === t3 && null === r4 ? (this.x = null, this.y = null, this.inf = true) : (this.x = new i(t3, 16), this.y = new i(r4, 16), n2 && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = false);
        }
        function f(e3, t3, r4, n2) {
          a.BasePoint.call(this, e3, "jacobian"), null === t3 && null === r4 && null === n2 ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new i(0)) : (this.x = new i(t3, 16), this.y = new i(r4, 16), this.z = new i(n2, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
        }
        o(u, a), e2.exports = u, u.prototype._getEndomorphism = function(e3) {
          if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
            var t3, r4;
            if (e3.beta)
              t3 = new i(e3.beta, 16).toRed(this.red);
            else {
              var n2 = this._getEndoRoots(this.p);
              t3 = (t3 = n2[0].cmp(n2[1]) < 0 ? n2[0] : n2[1]).toRed(this.red);
            }
            if (e3.lambda)
              r4 = new i(e3.lambda, 16);
            else {
              var o2 = this._getEndoRoots(this.n);
              0 === this.g.mul(o2[0]).x.cmp(this.g.x.redMul(t3)) ? r4 = o2[0] : (r4 = o2[1], s(0 === this.g.mul(r4).x.cmp(this.g.x.redMul(t3))));
            }
            return { beta: t3, lambda: r4, basis: e3.basis ? e3.basis.map(function(e4) {
              return { a: new i(e4.a, 16), b: new i(e4.b, 16) };
            }) : this._getEndoBasis(r4) };
          }
        }, u.prototype._getEndoRoots = function(e3) {
          var t3 = e3 === this.p ? this.red : i.mont(e3), r4 = new i(2).toRed(t3).redInvm(), n2 = r4.redNeg(), o2 = new i(3).toRed(t3).redNeg().redSqrt().redMul(r4);
          return [n2.redAdd(o2).fromRed(), n2.redSub(o2).fromRed()];
        }, u.prototype._getEndoBasis = function(e3) {
          for (var t3, r4, n2, o2, a2, s2, u2, c2, f2, d = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), l = e3, h = this.n.clone(), p = new i(1), b = new i(0), y = new i(0), m = new i(1), v = 0; 0 !== l.cmpn(0); ) {
            var g = h.div(l);
            c2 = h.sub(g.mul(l)), f2 = y.sub(g.mul(p));
            var w = m.sub(g.mul(b));
            if (!n2 && c2.cmp(d) < 0)
              t3 = u2.neg(), r4 = p, n2 = c2.neg(), o2 = f2;
            else if (n2 && 2 == ++v)
              break;
            u2 = c2, h = l, l = c2, y = p, p = f2, m = b, b = w;
          }
          a2 = c2.neg(), s2 = f2;
          var A = n2.sqr().add(o2.sqr());
          return a2.sqr().add(s2.sqr()).cmp(A) >= 0 && (a2 = t3, s2 = r4), n2.negative && (n2 = n2.neg(), o2 = o2.neg()), a2.negative && (a2 = a2.neg(), s2 = s2.neg()), [{ a: n2, b: o2 }, { a: a2, b: s2 }];
        }, u.prototype._endoSplit = function(e3) {
          var t3 = this.endo.basis, r4 = t3[0], n2 = t3[1], i2 = n2.b.mul(e3).divRound(this.n), o2 = r4.b.neg().mul(e3).divRound(this.n), a2 = i2.mul(r4.a), s2 = o2.mul(n2.a), u2 = i2.mul(r4.b), c2 = o2.mul(n2.b);
          return { k1: e3.sub(a2).sub(s2), k2: u2.add(c2).neg() };
        }, u.prototype.pointFromX = function(e3, t3) {
          (e3 = new i(e3, 16)).red || (e3 = e3.toRed(this.red));
          var r4 = e3.redSqr().redMul(e3).redIAdd(e3.redMul(this.a)).redIAdd(this.b), n2 = r4.redSqrt();
          if (0 !== n2.redSqr().redSub(r4).cmp(this.zero))
            throw new Error("invalid point");
          var o2 = n2.fromRed().isOdd();
          return (t3 && !o2 || !t3 && o2) && (n2 = n2.redNeg()), this.point(e3, n2);
        }, u.prototype.validate = function(e3) {
          if (e3.inf)
            return true;
          var t3 = e3.x, r4 = e3.y, n2 = this.a.redMul(t3), i2 = t3.redSqr().redMul(t3).redIAdd(n2).redIAdd(this.b);
          return 0 === r4.redSqr().redISub(i2).cmpn(0);
        }, u.prototype._endoWnafMulAdd = function(e3, t3, r4) {
          for (var n2 = this._endoWnafT1, i2 = this._endoWnafT2, o2 = 0; o2 < e3.length; o2++) {
            var a2 = this._endoSplit(t3[o2]), s2 = e3[o2], u2 = s2._getBeta();
            a2.k1.negative && (a2.k1.ineg(), s2 = s2.neg(true)), a2.k2.negative && (a2.k2.ineg(), u2 = u2.neg(true)), n2[2 * o2] = s2, n2[2 * o2 + 1] = u2, i2[2 * o2] = a2.k1, i2[2 * o2 + 1] = a2.k2;
          }
          for (var c2 = this._wnafMulAdd(1, n2, i2, 2 * o2, r4), f2 = 0; f2 < 2 * o2; f2++)
            n2[f2] = null, i2[f2] = null;
          return c2;
        }, o(c, a.BasePoint), u.prototype.point = function(e3, t3, r4) {
          return new c(this, e3, t3, r4);
        }, u.prototype.pointFromJSON = function(e3, t3) {
          return c.fromJSON(this, e3, t3);
        }, c.prototype._getBeta = function() {
          if (this.curve.endo) {
            var e3 = this.precomputed;
            if (e3 && e3.beta)
              return e3.beta;
            var t3 = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
            if (e3) {
              var r4 = this.curve, n2 = function(e4) {
                return r4.point(e4.x.redMul(r4.endo.beta), e4.y);
              };
              e3.beta = t3, t3.precomputed = { beta: null, naf: e3.naf && { wnd: e3.naf.wnd, points: e3.naf.points.map(n2) }, doubles: e3.doubles && { step: e3.doubles.step, points: e3.doubles.points.map(n2) } };
            }
            return t3;
          }
        }, c.prototype.toJSON = function() {
          return this.precomputed ? [this.x, this.y, this.precomputed && { doubles: this.precomputed.doubles && { step: this.precomputed.doubles.step, points: this.precomputed.doubles.points.slice(1) }, naf: this.precomputed.naf && { wnd: this.precomputed.naf.wnd, points: this.precomputed.naf.points.slice(1) } }] : [this.x, this.y];
        }, c.fromJSON = function(e3, t3, r4) {
          "string" == typeof t3 && (t3 = JSON.parse(t3));
          var n2 = e3.point(t3[0], t3[1], r4);
          if (!t3[2])
            return n2;
          function i2(t4) {
            return e3.point(t4[0], t4[1], r4);
          }
          var o2 = t3[2];
          return n2.precomputed = { beta: null, doubles: o2.doubles && { step: o2.doubles.step, points: [n2].concat(o2.doubles.points.map(i2)) }, naf: o2.naf && { wnd: o2.naf.wnd, points: [n2].concat(o2.naf.points.map(i2)) } }, n2;
        }, c.prototype.inspect = function() {
          return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
        }, c.prototype.isInfinity = function() {
          return this.inf;
        }, c.prototype.add = function(e3) {
          if (this.inf)
            return e3;
          if (e3.inf)
            return this;
          if (this.eq(e3))
            return this.dbl();
          if (this.neg().eq(e3))
            return this.curve.point(null, null);
          if (0 === this.x.cmp(e3.x))
            return this.curve.point(null, null);
          var t3 = this.y.redSub(e3.y);
          0 !== t3.cmpn(0) && (t3 = t3.redMul(this.x.redSub(e3.x).redInvm()));
          var r4 = t3.redSqr().redISub(this.x).redISub(e3.x), n2 = t3.redMul(this.x.redSub(r4)).redISub(this.y);
          return this.curve.point(r4, n2);
        }, c.prototype.dbl = function() {
          if (this.inf)
            return this;
          var e3 = this.y.redAdd(this.y);
          if (0 === e3.cmpn(0))
            return this.curve.point(null, null);
          var t3 = this.curve.a, r4 = this.x.redSqr(), n2 = e3.redInvm(), i2 = r4.redAdd(r4).redIAdd(r4).redIAdd(t3).redMul(n2), o2 = i2.redSqr().redISub(this.x.redAdd(this.x)), a2 = i2.redMul(this.x.redSub(o2)).redISub(this.y);
          return this.curve.point(o2, a2);
        }, c.prototype.getX = function() {
          return this.x.fromRed();
        }, c.prototype.getY = function() {
          return this.y.fromRed();
        }, c.prototype.mul = function(e3) {
          return e3 = new i(e3, 16), this.isInfinity() ? this : this._hasDoubles(e3) ? this.curve._fixedNafMul(this, e3) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [e3]) : this.curve._wnafMul(this, e3);
        }, c.prototype.mulAdd = function(e3, t3, r4) {
          var n2 = [this, t3], i2 = [e3, r4];
          return this.curve.endo ? this.curve._endoWnafMulAdd(n2, i2) : this.curve._wnafMulAdd(1, n2, i2, 2);
        }, c.prototype.jmulAdd = function(e3, t3, r4) {
          var n2 = [this, t3], i2 = [e3, r4];
          return this.curve.endo ? this.curve._endoWnafMulAdd(n2, i2, true) : this.curve._wnafMulAdd(1, n2, i2, 2, true);
        }, c.prototype.eq = function(e3) {
          return this === e3 || this.inf === e3.inf && (this.inf || 0 === this.x.cmp(e3.x) && 0 === this.y.cmp(e3.y));
        }, c.prototype.neg = function(e3) {
          if (this.inf)
            return this;
          var t3 = this.curve.point(this.x, this.y.redNeg());
          if (e3 && this.precomputed) {
            var r4 = this.precomputed, n2 = function(e4) {
              return e4.neg();
            };
            t3.precomputed = { naf: r4.naf && { wnd: r4.naf.wnd, points: r4.naf.points.map(n2) }, doubles: r4.doubles && { step: r4.doubles.step, points: r4.doubles.points.map(n2) } };
          }
          return t3;
        }, c.prototype.toJ = function() {
          return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
        }, o(f, a.BasePoint), u.prototype.jpoint = function(e3, t3, r4) {
          return new f(this, e3, t3, r4);
        }, f.prototype.toP = function() {
          if (this.isInfinity())
            return this.curve.point(null, null);
          var e3 = this.z.redInvm(), t3 = e3.redSqr(), r4 = this.x.redMul(t3), n2 = this.y.redMul(t3).redMul(e3);
          return this.curve.point(r4, n2);
        }, f.prototype.neg = function() {
          return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
        }, f.prototype.add = function(e3) {
          if (this.isInfinity())
            return e3;
          if (e3.isInfinity())
            return this;
          var t3 = e3.z.redSqr(), r4 = this.z.redSqr(), n2 = this.x.redMul(t3), i2 = e3.x.redMul(r4), o2 = this.y.redMul(t3.redMul(e3.z)), a2 = e3.y.redMul(r4.redMul(this.z)), s2 = n2.redSub(i2), u2 = o2.redSub(a2);
          if (0 === s2.cmpn(0))
            return 0 !== u2.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
          var c2 = s2.redSqr(), f2 = c2.redMul(s2), d = n2.redMul(c2), l = u2.redSqr().redIAdd(f2).redISub(d).redISub(d), h = u2.redMul(d.redISub(l)).redISub(o2.redMul(f2)), p = this.z.redMul(e3.z).redMul(s2);
          return this.curve.jpoint(l, h, p);
        }, f.prototype.mixedAdd = function(e3) {
          if (this.isInfinity())
            return e3.toJ();
          if (e3.isInfinity())
            return this;
          var t3 = this.z.redSqr(), r4 = this.x, n2 = e3.x.redMul(t3), i2 = this.y, o2 = e3.y.redMul(t3).redMul(this.z), a2 = r4.redSub(n2), s2 = i2.redSub(o2);
          if (0 === a2.cmpn(0))
            return 0 !== s2.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
          var u2 = a2.redSqr(), c2 = u2.redMul(a2), f2 = r4.redMul(u2), d = s2.redSqr().redIAdd(c2).redISub(f2).redISub(f2), l = s2.redMul(f2.redISub(d)).redISub(i2.redMul(c2)), h = this.z.redMul(a2);
          return this.curve.jpoint(d, l, h);
        }, f.prototype.dblp = function(e3) {
          if (0 === e3)
            return this;
          if (this.isInfinity())
            return this;
          if (!e3)
            return this.dbl();
          var t3;
          if (this.curve.zeroA || this.curve.threeA) {
            var r4 = this;
            for (t3 = 0; t3 < e3; t3++)
              r4 = r4.dbl();
            return r4;
          }
          var n2 = this.curve.a, i2 = this.curve.tinv, o2 = this.x, a2 = this.y, s2 = this.z, u2 = s2.redSqr().redSqr(), c2 = a2.redAdd(a2);
          for (t3 = 0; t3 < e3; t3++) {
            var f2 = o2.redSqr(), d = c2.redSqr(), l = d.redSqr(), h = f2.redAdd(f2).redIAdd(f2).redIAdd(n2.redMul(u2)), p = o2.redMul(d), b = h.redSqr().redISub(p.redAdd(p)), y = p.redISub(b), m = h.redMul(y);
            m = m.redIAdd(m).redISub(l);
            var v = c2.redMul(s2);
            t3 + 1 < e3 && (u2 = u2.redMul(l)), o2 = b, s2 = v, c2 = m;
          }
          return this.curve.jpoint(o2, c2.redMul(i2), s2);
        }, f.prototype.dbl = function() {
          return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
        }, f.prototype._zeroDbl = function() {
          var e3, t3, r4;
          if (this.zOne) {
            var n2 = this.x.redSqr(), i2 = this.y.redSqr(), o2 = i2.redSqr(), a2 = this.x.redAdd(i2).redSqr().redISub(n2).redISub(o2);
            a2 = a2.redIAdd(a2);
            var s2 = n2.redAdd(n2).redIAdd(n2), u2 = s2.redSqr().redISub(a2).redISub(a2), c2 = o2.redIAdd(o2);
            c2 = (c2 = c2.redIAdd(c2)).redIAdd(c2), e3 = u2, t3 = s2.redMul(a2.redISub(u2)).redISub(c2), r4 = this.y.redAdd(this.y);
          } else {
            var f2 = this.x.redSqr(), d = this.y.redSqr(), l = d.redSqr(), h = this.x.redAdd(d).redSqr().redISub(f2).redISub(l);
            h = h.redIAdd(h);
            var p = f2.redAdd(f2).redIAdd(f2), b = p.redSqr(), y = l.redIAdd(l);
            y = (y = y.redIAdd(y)).redIAdd(y), e3 = b.redISub(h).redISub(h), t3 = p.redMul(h.redISub(e3)).redISub(y), r4 = (r4 = this.y.redMul(this.z)).redIAdd(r4);
          }
          return this.curve.jpoint(e3, t3, r4);
        }, f.prototype._threeDbl = function() {
          var e3, t3, r4;
          if (this.zOne) {
            var n2 = this.x.redSqr(), i2 = this.y.redSqr(), o2 = i2.redSqr(), a2 = this.x.redAdd(i2).redSqr().redISub(n2).redISub(o2);
            a2 = a2.redIAdd(a2);
            var s2 = n2.redAdd(n2).redIAdd(n2).redIAdd(this.curve.a), u2 = s2.redSqr().redISub(a2).redISub(a2);
            e3 = u2;
            var c2 = o2.redIAdd(o2);
            c2 = (c2 = c2.redIAdd(c2)).redIAdd(c2), t3 = s2.redMul(a2.redISub(u2)).redISub(c2), r4 = this.y.redAdd(this.y);
          } else {
            var f2 = this.z.redSqr(), d = this.y.redSqr(), l = this.x.redMul(d), h = this.x.redSub(f2).redMul(this.x.redAdd(f2));
            h = h.redAdd(h).redIAdd(h);
            var p = l.redIAdd(l), b = (p = p.redIAdd(p)).redAdd(p);
            e3 = h.redSqr().redISub(b), r4 = this.y.redAdd(this.z).redSqr().redISub(d).redISub(f2);
            var y = d.redSqr();
            y = (y = (y = y.redIAdd(y)).redIAdd(y)).redIAdd(y), t3 = h.redMul(p.redISub(e3)).redISub(y);
          }
          return this.curve.jpoint(e3, t3, r4);
        }, f.prototype._dbl = function() {
          var e3 = this.curve.a, t3 = this.x, r4 = this.y, n2 = this.z, i2 = n2.redSqr().redSqr(), o2 = t3.redSqr(), a2 = r4.redSqr(), s2 = o2.redAdd(o2).redIAdd(o2).redIAdd(e3.redMul(i2)), u2 = t3.redAdd(t3), c2 = (u2 = u2.redIAdd(u2)).redMul(a2), f2 = s2.redSqr().redISub(c2.redAdd(c2)), d = c2.redISub(f2), l = a2.redSqr();
          l = (l = (l = l.redIAdd(l)).redIAdd(l)).redIAdd(l);
          var h = s2.redMul(d).redISub(l), p = r4.redAdd(r4).redMul(n2);
          return this.curve.jpoint(f2, h, p);
        }, f.prototype.trpl = function() {
          if (!this.curve.zeroA)
            return this.dbl().add(this);
          var e3 = this.x.redSqr(), t3 = this.y.redSqr(), r4 = this.z.redSqr(), n2 = t3.redSqr(), i2 = e3.redAdd(e3).redIAdd(e3), o2 = i2.redSqr(), a2 = this.x.redAdd(t3).redSqr().redISub(e3).redISub(n2), s2 = (a2 = (a2 = (a2 = a2.redIAdd(a2)).redAdd(a2).redIAdd(a2)).redISub(o2)).redSqr(), u2 = n2.redIAdd(n2);
          u2 = (u2 = (u2 = u2.redIAdd(u2)).redIAdd(u2)).redIAdd(u2);
          var c2 = i2.redIAdd(a2).redSqr().redISub(o2).redISub(s2).redISub(u2), f2 = t3.redMul(c2);
          f2 = (f2 = f2.redIAdd(f2)).redIAdd(f2);
          var d = this.x.redMul(s2).redISub(f2);
          d = (d = d.redIAdd(d)).redIAdd(d);
          var l = this.y.redMul(c2.redMul(u2.redISub(c2)).redISub(a2.redMul(s2)));
          l = (l = (l = l.redIAdd(l)).redIAdd(l)).redIAdd(l);
          var h = this.z.redAdd(a2).redSqr().redISub(r4).redISub(s2);
          return this.curve.jpoint(d, l, h);
        }, f.prototype.mul = function(e3, t3) {
          return e3 = new i(e3, t3), this.curve._wnafMul(this, e3);
        }, f.prototype.eq = function(e3) {
          if ("affine" === e3.type)
            return this.eq(e3.toJ());
          if (this === e3)
            return true;
          var t3 = this.z.redSqr(), r4 = e3.z.redSqr();
          if (0 !== this.x.redMul(r4).redISub(e3.x.redMul(t3)).cmpn(0))
            return false;
          var n2 = t3.redMul(this.z), i2 = r4.redMul(e3.z);
          return 0 === this.y.redMul(i2).redISub(e3.y.redMul(n2)).cmpn(0);
        }, f.prototype.eqXToP = function(e3) {
          var t3 = this.z.redSqr(), r4 = e3.toRed(this.curve.red).redMul(t3);
          if (0 === this.x.cmp(r4))
            return true;
          for (var n2 = e3.clone(), i2 = this.curve.redN.redMul(t3); ; ) {
            if (n2.iadd(this.curve.n), n2.cmp(this.curve.p) >= 0)
              return false;
            if (r4.redIAdd(i2), 0 === this.x.cmp(r4))
              return true;
          }
        }, f.prototype.inspect = function() {
          return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
        }, f.prototype.isInfinity = function() {
          return 0 === this.z.cmpn(0);
        };
      }, 506: (e2, t2, r3) => {
        "use strict";
        var n, i = t2, o = r3(7198), a = r3(6063), s = r3(7528).assert;
        function u(e3) {
          "short" === e3.type ? this.curve = new a.short(e3) : "edwards" === e3.type ? this.curve = new a.edwards(e3) : this.curve = new a.mont(e3), this.g = this.curve.g, this.n = this.curve.n, this.hash = e3.hash, s(this.g.validate(), "Invalid curve"), s(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
        }
        function c(e3, t3) {
          Object.defineProperty(i, e3, { configurable: true, enumerable: true, get: function() {
            var r4 = new u(t3);
            return Object.defineProperty(i, e3, { configurable: true, enumerable: true, value: r4 }), r4;
          } });
        }
        i.PresetCurve = u, c("p192", { type: "short", prime: "p192", p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff", a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc", b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1", n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831", hash: o.sha256, gRed: false, g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"] }), c("p224", { type: "short", prime: "p224", p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001", a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe", b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4", n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d", hash: o.sha256, gRed: false, g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"] }), c("p256", { type: "short", prime: null, p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff", a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc", b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b", n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551", hash: o.sha256, gRed: false, g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"] }), c("p384", { type: "short", prime: null, p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff", a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc", b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef", n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973", hash: o.sha384, gRed: false, g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"] }), c("p521", { type: "short", prime: null, p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff", a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc", b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00", n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409", hash: o.sha512, gRed: false, g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"] }), c("curve25519", { type: "mont", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "76d06", b: "1", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: o.sha256, gRed: false, g: ["9"] }), c("ed25519", { type: "edwards", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "-1", c: "1", d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: o.sha256, gRed: false, g: ["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658"] });
        try {
          n = r3(6401);
        } catch (e3) {
          n = void 0;
        }
        c("secp256k1", { type: "short", prime: "k256", p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f", a: "0", b: "7", n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141", h: "1", hash: o.sha256, beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee", lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72", basis: [{ a: "3086d221a7d46bcde86c90e49284eb15", b: "-e4437ed6010e88286f547fa90abfe4c3" }, { a: "114ca50f7a8e2f3f657c1108d9d44cfd8", b: "3086d221a7d46bcde86c90e49284eb15" }], gRed: false, g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", n] });
      }, 8320: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(1734), o = r3(9410), a = r3(7528), s = r3(506), u = r3(2202), c = a.assert, f = r3(7791), d = r3(488);
        function l(e3) {
          if (!(this instanceof l))
            return new l(e3);
          "string" == typeof e3 && (c(Object.prototype.hasOwnProperty.call(s, e3), "Unknown curve " + e3), e3 = s[e3]), e3 instanceof s.PresetCurve && (e3 = { curve: e3 }), this.curve = e3.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e3.curve.g, this.g.precompute(e3.curve.n.bitLength() + 1), this.hash = e3.hash || e3.curve.hash;
        }
        e2.exports = l, l.prototype.keyPair = function(e3) {
          return new f(this, e3);
        }, l.prototype.keyFromPrivate = function(e3, t3) {
          return f.fromPrivate(this, e3, t3);
        }, l.prototype.keyFromPublic = function(e3, t3) {
          return f.fromPublic(this, e3, t3);
        }, l.prototype.genKeyPair = function(e3) {
          e3 || (e3 = {});
          for (var t3 = new o({ hash: this.hash, pers: e3.pers, persEnc: e3.persEnc || "utf8", entropy: e3.entropy || u(this.hash.hmacStrength), entropyEnc: e3.entropy && e3.entropyEnc || "utf8", nonce: this.n.toArray() }), r4 = this.n.byteLength(), n2 = this.n.sub(new i(2)); ; ) {
            var a2 = new i(t3.generate(r4));
            if (!(a2.cmp(n2) > 0))
              return a2.iaddn(1), this.keyFromPrivate(a2);
          }
        }, l.prototype._truncateToN = function(e3, t3) {
          var r4 = 8 * e3.byteLength() - this.n.bitLength();
          return r4 > 0 && (e3 = e3.ushrn(r4)), !t3 && e3.cmp(this.n) >= 0 ? e3.sub(this.n) : e3;
        }, l.prototype.sign = function(e3, t3, r4, a2) {
          "object" === (0, n.default)(r4) && (a2 = r4, r4 = null), a2 || (a2 = {}), t3 = this.keyFromPrivate(t3, r4), e3 = this._truncateToN(new i(e3, 16));
          for (var s2 = this.n.byteLength(), u2 = t3.getPrivate().toArray("be", s2), c2 = e3.toArray("be", s2), f2 = new o({ hash: this.hash, entropy: u2, nonce: c2, pers: a2.pers, persEnc: a2.persEnc || "utf8" }), l2 = this.n.sub(new i(1)), h = 0; ; h++) {
            var p = a2.k ? a2.k(h) : new i(f2.generate(this.n.byteLength()));
            if (!((p = this._truncateToN(p, true)).cmpn(1) <= 0 || p.cmp(l2) >= 0)) {
              var b = this.g.mul(p);
              if (!b.isInfinity()) {
                var y = b.getX(), m = y.umod(this.n);
                if (0 !== m.cmpn(0)) {
                  var v = p.invm(this.n).mul(m.mul(t3.getPrivate()).iadd(e3));
                  if (0 !== (v = v.umod(this.n)).cmpn(0)) {
                    var g = (b.getY().isOdd() ? 1 : 0) | (0 !== y.cmp(m) ? 2 : 0);
                    return a2.canonical && v.cmp(this.nh) > 0 && (v = this.n.sub(v), g ^= 1), new d({ r: m, s: v, recoveryParam: g });
                  }
                }
              }
            }
          }
        }, l.prototype.verify = function(e3, t3, r4, n2) {
          e3 = this._truncateToN(new i(e3, 16)), r4 = this.keyFromPublic(r4, n2);
          var o2 = (t3 = new d(t3, "hex")).r, a2 = t3.s;
          if (o2.cmpn(1) < 0 || o2.cmp(this.n) >= 0)
            return false;
          if (a2.cmpn(1) < 0 || a2.cmp(this.n) >= 0)
            return false;
          var s2, u2 = a2.invm(this.n), c2 = u2.mul(e3).umod(this.n), f2 = u2.mul(o2).umod(this.n);
          return this.curve._maxwellTrick ? !(s2 = this.g.jmulAdd(c2, r4.getPublic(), f2)).isInfinity() && s2.eqXToP(o2) : !(s2 = this.g.mulAdd(c2, r4.getPublic(), f2)).isInfinity() && 0 === s2.getX().umod(this.n).cmp(o2);
        }, l.prototype.recoverPubKey = function(e3, t3, r4, n2) {
          c((3 & r4) === r4, "The recovery param is more than two bits"), t3 = new d(t3, n2);
          var o2 = this.n, a2 = new i(e3), s2 = t3.r, u2 = t3.s, f2 = 1 & r4, l2 = r4 >> 1;
          if (s2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && l2)
            throw new Error("Unable to find sencond key candinate");
          s2 = l2 ? this.curve.pointFromX(s2.add(this.curve.n), f2) : this.curve.pointFromX(s2, f2);
          var h = t3.r.invm(o2), p = o2.sub(a2).mul(h).umod(o2), b = u2.mul(h).umod(o2);
          return this.g.mulAdd(p, s2, b);
        }, l.prototype.getKeyRecoveryParam = function(e3, t3, r4, n2) {
          if (null !== (t3 = new d(t3, n2)).recoveryParam)
            return t3.recoveryParam;
          for (var i2 = 0; i2 < 4; i2++) {
            var o2;
            try {
              o2 = this.recoverPubKey(e3, t3, i2);
            } catch (e4) {
              continue;
            }
            if (o2.eq(r4))
              return i2;
          }
          throw new Error("Unable to find valid recovery factor");
        };
      }, 7791: (e2, t2, r3) => {
        "use strict";
        var n = r3(1734), i = r3(7528).assert;
        function o(e3, t3) {
          this.ec = e3, this.priv = null, this.pub = null, t3.priv && this._importPrivate(t3.priv, t3.privEnc), t3.pub && this._importPublic(t3.pub, t3.pubEnc);
        }
        e2.exports = o, o.fromPublic = function(e3, t3, r4) {
          return t3 instanceof o ? t3 : new o(e3, { pub: t3, pubEnc: r4 });
        }, o.fromPrivate = function(e3, t3, r4) {
          return t3 instanceof o ? t3 : new o(e3, { priv: t3, privEnc: r4 });
        }, o.prototype.validate = function() {
          var e3 = this.getPublic();
          return e3.isInfinity() ? { result: false, reason: "Invalid public key" } : e3.validate() ? e3.mul(this.ec.curve.n).isInfinity() ? { result: true, reason: null } : { result: false, reason: "Public key * N != O" } : { result: false, reason: "Public key is not a point" };
        }, o.prototype.getPublic = function(e3, t3) {
          return "string" == typeof e3 && (t3 = e3, e3 = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), t3 ? this.pub.encode(t3, e3) : this.pub;
        }, o.prototype.getPrivate = function(e3) {
          return "hex" === e3 ? this.priv.toString(16, 2) : this.priv;
        }, o.prototype._importPrivate = function(e3, t3) {
          this.priv = new n(e3, t3 || 16), this.priv = this.priv.umod(this.ec.curve.n);
        }, o.prototype._importPublic = function(e3, t3) {
          if (e3.x || e3.y)
            return "mont" === this.ec.curve.type ? i(e3.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || i(e3.x && e3.y, "Need both x and y coordinate"), void (this.pub = this.ec.curve.point(e3.x, e3.y));
          this.pub = this.ec.curve.decodePoint(e3, t3);
        }, o.prototype.derive = function(e3) {
          return e3.validate() || i(e3.validate(), "public point not validated"), e3.mul(this.priv).getX();
        }, o.prototype.sign = function(e3, t3, r4) {
          return this.ec.sign(e3, this, t3, r4);
        }, o.prototype.verify = function(e3, t3) {
          return this.ec.verify(e3, t3, this);
        }, o.prototype.inspect = function() {
          return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
        };
      }, 488: (e2, t2, r3) => {
        "use strict";
        var n = r3(1734), i = r3(7528), o = i.assert;
        function a(e3, t3) {
          if (e3 instanceof a)
            return e3;
          this._importDER(e3, t3) || (o(e3.r && e3.s, "Signature without r or s"), this.r = new n(e3.r, 16), this.s = new n(e3.s, 16), void 0 === e3.recoveryParam ? this.recoveryParam = null : this.recoveryParam = e3.recoveryParam);
        }
        function s() {
          this.place = 0;
        }
        function u(e3, t3) {
          var r4 = e3[t3.place++];
          if (!(128 & r4))
            return r4;
          var n2 = 15 & r4;
          if (0 === n2 || n2 > 4)
            return false;
          for (var i2 = 0, o2 = 0, a2 = t3.place; o2 < n2; o2++, a2++)
            i2 <<= 8, i2 |= e3[a2], i2 >>>= 0;
          return !(i2 <= 127) && (t3.place = a2, i2);
        }
        function c(e3) {
          for (var t3 = 0, r4 = e3.length - 1; !e3[t3] && !(128 & e3[t3 + 1]) && t3 < r4; )
            t3++;
          return 0 === t3 ? e3 : e3.slice(t3);
        }
        function f(e3, t3) {
          if (t3 < 128)
            e3.push(t3);
          else {
            var r4 = 1 + (Math.log(t3) / Math.LN2 >>> 3);
            for (e3.push(128 | r4); --r4; )
              e3.push(t3 >>> (r4 << 3) & 255);
            e3.push(t3);
          }
        }
        e2.exports = a, a.prototype._importDER = function(e3, t3) {
          e3 = i.toArray(e3, t3);
          var r4 = new s();
          if (48 !== e3[r4.place++])
            return false;
          var o2 = u(e3, r4);
          if (false === o2)
            return false;
          if (o2 + r4.place !== e3.length)
            return false;
          if (2 !== e3[r4.place++])
            return false;
          var a2 = u(e3, r4);
          if (false === a2)
            return false;
          var c2 = e3.slice(r4.place, a2 + r4.place);
          if (r4.place += a2, 2 !== e3[r4.place++])
            return false;
          var f2 = u(e3, r4);
          if (false === f2)
            return false;
          if (e3.length !== f2 + r4.place)
            return false;
          var d = e3.slice(r4.place, f2 + r4.place);
          if (0 === c2[0]) {
            if (!(128 & c2[1]))
              return false;
            c2 = c2.slice(1);
          }
          if (0 === d[0]) {
            if (!(128 & d[1]))
              return false;
            d = d.slice(1);
          }
          return this.r = new n(c2), this.s = new n(d), this.recoveryParam = null, true;
        }, a.prototype.toDER = function(e3) {
          var t3 = this.r.toArray(), r4 = this.s.toArray();
          for (128 & t3[0] && (t3 = [0].concat(t3)), 128 & r4[0] && (r4 = [0].concat(r4)), t3 = c(t3), r4 = c(r4); !(r4[0] || 128 & r4[1]); )
            r4 = r4.slice(1);
          var n2 = [2];
          f(n2, t3.length), (n2 = n2.concat(t3)).push(2), f(n2, r4.length);
          var o2 = n2.concat(r4), a2 = [48];
          return f(a2, o2.length), a2 = a2.concat(o2), i.encode(a2, e3);
        };
      }, 8027: (e2, t2, r3) => {
        "use strict";
        var n = r3(7198), i = r3(506), o = r3(7528), a = o.assert, s = o.parseBytes, u = r3(7303), c = r3(6646);
        function f(e3) {
          if (a("ed25519" === e3, "only tested with ed25519 so far"), !(this instanceof f))
            return new f(e3);
          e3 = i[e3].curve, this.curve = e3, this.g = e3.g, this.g.precompute(e3.n.bitLength() + 1), this.pointClass = e3.point().constructor, this.encodingLength = Math.ceil(e3.n.bitLength() / 8), this.hash = n.sha512;
        }
        e2.exports = f, f.prototype.sign = function(e3, t3) {
          e3 = s(e3);
          var r4 = this.keyFromSecret(t3), n2 = this.hashInt(r4.messagePrefix(), e3), i2 = this.g.mul(n2), o2 = this.encodePoint(i2), a2 = this.hashInt(o2, r4.pubBytes(), e3).mul(r4.priv()), u2 = n2.add(a2).umod(this.curve.n);
          return this.makeSignature({ R: i2, S: u2, Rencoded: o2 });
        }, f.prototype.verify = function(e3, t3, r4) {
          e3 = s(e3), t3 = this.makeSignature(t3);
          var n2 = this.keyFromPublic(r4), i2 = this.hashInt(t3.Rencoded(), n2.pubBytes(), e3), o2 = this.g.mul(t3.S());
          return t3.R().add(n2.pub().mul(i2)).eq(o2);
        }, f.prototype.hashInt = function() {
          for (var e3 = this.hash(), t3 = 0; t3 < arguments.length; t3++)
            e3.update(arguments[t3]);
          return o.intFromLE(e3.digest()).umod(this.curve.n);
        }, f.prototype.keyFromPublic = function(e3) {
          return u.fromPublic(this, e3);
        }, f.prototype.keyFromSecret = function(e3) {
          return u.fromSecret(this, e3);
        }, f.prototype.makeSignature = function(e3) {
          return e3 instanceof c ? e3 : new c(this, e3);
        }, f.prototype.encodePoint = function(e3) {
          var t3 = e3.getY().toArray("le", this.encodingLength);
          return t3[this.encodingLength - 1] |= e3.getX().isOdd() ? 128 : 0, t3;
        }, f.prototype.decodePoint = function(e3) {
          var t3 = (e3 = o.parseBytes(e3)).length - 1, r4 = e3.slice(0, t3).concat(-129 & e3[t3]), n2 = 0 != (128 & e3[t3]), i2 = o.intFromLE(r4);
          return this.curve.pointFromY(i2, n2);
        }, f.prototype.encodeInt = function(e3) {
          return e3.toArray("le", this.encodingLength);
        }, f.prototype.decodeInt = function(e3) {
          return o.intFromLE(e3);
        }, f.prototype.isPoint = function(e3) {
          return e3 instanceof this.pointClass;
        };
      }, 7303: (e2, t2, r3) => {
        "use strict";
        var n = r3(7528), i = n.assert, o = n.parseBytes, a = n.cachedProperty;
        function s(e3, t3) {
          this.eddsa = e3, this._secret = o(t3.secret), e3.isPoint(t3.pub) ? this._pub = t3.pub : this._pubBytes = o(t3.pub);
        }
        s.fromPublic = function(e3, t3) {
          return t3 instanceof s ? t3 : new s(e3, { pub: t3 });
        }, s.fromSecret = function(e3, t3) {
          return t3 instanceof s ? t3 : new s(e3, { secret: t3 });
        }, s.prototype.secret = function() {
          return this._secret;
        }, a(s, "pubBytes", function() {
          return this.eddsa.encodePoint(this.pub());
        }), a(s, "pub", function() {
          return this._pubBytes ? this.eddsa.decodePoint(this._pubBytes) : this.eddsa.g.mul(this.priv());
        }), a(s, "privBytes", function() {
          var e3 = this.eddsa, t3 = this.hash(), r4 = e3.encodingLength - 1, n2 = t3.slice(0, e3.encodingLength);
          return n2[0] &= 248, n2[r4] &= 127, n2[r4] |= 64, n2;
        }), a(s, "priv", function() {
          return this.eddsa.decodeInt(this.privBytes());
        }), a(s, "hash", function() {
          return this.eddsa.hash().update(this.secret()).digest();
        }), a(s, "messagePrefix", function() {
          return this.hash().slice(this.eddsa.encodingLength);
        }), s.prototype.sign = function(e3) {
          return i(this._secret, "KeyPair can only verify"), this.eddsa.sign(e3, this);
        }, s.prototype.verify = function(e3, t3) {
          return this.eddsa.verify(e3, t3, this);
        }, s.prototype.getSecret = function(e3) {
          return i(this._secret, "KeyPair is public only"), n.encode(this.secret(), e3);
        }, s.prototype.getPublic = function(e3) {
          return n.encode(this.pubBytes(), e3);
        }, e2.exports = s;
      }, 6646: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(1734), o = r3(7528), a = o.assert, s = o.cachedProperty, u = o.parseBytes;
        function c(e3, t3) {
          this.eddsa = e3, "object" !== (0, n.default)(t3) && (t3 = u(t3)), Array.isArray(t3) && (t3 = { R: t3.slice(0, e3.encodingLength), S: t3.slice(e3.encodingLength) }), a(t3.R && t3.S, "Signature without R or S"), e3.isPoint(t3.R) && (this._R = t3.R), t3.S instanceof i && (this._S = t3.S), this._Rencoded = Array.isArray(t3.R) ? t3.R : t3.Rencoded, this._Sencoded = Array.isArray(t3.S) ? t3.S : t3.Sencoded;
        }
        s(c, "S", function() {
          return this.eddsa.decodeInt(this.Sencoded());
        }), s(c, "R", function() {
          return this.eddsa.decodePoint(this.Rencoded());
        }), s(c, "Rencoded", function() {
          return this.eddsa.encodePoint(this.R());
        }), s(c, "Sencoded", function() {
          return this.eddsa.encodeInt(this.S());
        }), c.prototype.toBytes = function() {
          return this.Rencoded().concat(this.Sencoded());
        }, c.prototype.toHex = function() {
          return o.encode(this.toBytes(), "hex").toUpperCase();
        }, e2.exports = c;
      }, 6401: (e2) => {
        "use strict";
        e2.exports = { doubles: { step: 4, points: [["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"], ["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"], ["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"], ["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"], ["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"], ["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"], ["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"], ["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"], ["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"], ["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"], ["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"], ["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"], ["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"], ["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"], ["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"], ["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"], ["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"], ["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"], ["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"], ["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"], ["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"], ["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"], ["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"], ["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"], ["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"], ["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"], ["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"], ["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"], ["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"], ["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"], ["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"], ["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"], ["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"], ["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"], ["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"], ["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"], ["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"], ["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"], ["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"], ["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"], ["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"], ["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"], ["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"], ["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"], ["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"], ["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"], ["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"], ["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"], ["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"], ["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"], ["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"], ["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"], ["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"], ["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"], ["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"], ["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"], ["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"], ["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"], ["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"], ["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"], ["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"], ["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"], ["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"], ["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"], ["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]] }, naf: { wnd: 7, points: [["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"], ["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"], ["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"], ["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"], ["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"], ["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"], ["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"], ["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"], ["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"], ["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"], ["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"], ["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"], ["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"], ["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"], ["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"], ["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"], ["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"], ["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"], ["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"], ["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"], ["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"], ["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"], ["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"], ["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"], ["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"], ["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"], ["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"], ["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"], ["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"], ["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"], ["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"], ["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"], ["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"], ["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"], ["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"], ["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"], ["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"], ["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"], ["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"], ["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"], ["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"], ["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"], ["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"], ["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"], ["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"], ["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"], ["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"], ["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"], ["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"], ["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"], ["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"], ["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"], ["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"], ["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"], ["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"], ["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"], ["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"], ["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"], ["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"], ["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"], ["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"], ["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"], ["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"], ["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"], ["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"], ["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"], ["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"], ["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"], ["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"], ["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"], ["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"], ["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"], ["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"], ["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"], ["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"], ["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"], ["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"], ["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"], ["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"], ["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"], ["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"], ["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"], ["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"], ["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"], ["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"], ["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"], ["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"], ["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"], ["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"], ["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"], ["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"], ["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"], ["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"], ["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"], ["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"], ["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"], ["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"], ["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"], ["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"], ["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"], ["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"], ["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"], ["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"], ["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"], ["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"], ["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"], ["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"], ["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"], ["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"], ["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"], ["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"], ["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"], ["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"], ["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"], ["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"], ["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"], ["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"], ["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"], ["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"], ["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"], ["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"], ["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"], ["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"], ["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"], ["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"], ["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"], ["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]] } };
      }, 7528: (e2, t2, r3) => {
        "use strict";
        var n = t2, i = r3(1734), o = r3(4504), a = r3(6580);
        n.assert = o, n.toArray = a.toArray, n.zero2 = a.zero2, n.toHex = a.toHex, n.encode = a.encode, n.getNAF = function(e3, t3, r4) {
          var n2 = new Array(Math.max(e3.bitLength(), r4) + 1);
          n2.fill(0);
          for (var i2 = 1 << t3 + 1, o2 = e3.clone(), a2 = 0; a2 < n2.length; a2++) {
            var s, u = o2.andln(i2 - 1);
            o2.isOdd() ? (s = u > (i2 >> 1) - 1 ? (i2 >> 1) - u : u, o2.isubn(s)) : s = 0, n2[a2] = s, o2.iushrn(1);
          }
          return n2;
        }, n.getJSF = function(e3, t3) {
          var r4 = [[], []];
          e3 = e3.clone(), t3 = t3.clone();
          for (var n2, i2 = 0, o2 = 0; e3.cmpn(-i2) > 0 || t3.cmpn(-o2) > 0; ) {
            var a2, s, u = e3.andln(3) + i2 & 3, c = t3.andln(3) + o2 & 3;
            3 === u && (u = -1), 3 === c && (c = -1), a2 = 0 == (1 & u) ? 0 : 3 != (n2 = e3.andln(7) + i2 & 7) && 5 !== n2 || 2 !== c ? u : -u, r4[0].push(a2), s = 0 == (1 & c) ? 0 : 3 != (n2 = t3.andln(7) + o2 & 7) && 5 !== n2 || 2 !== u ? c : -c, r4[1].push(s), 2 * i2 === a2 + 1 && (i2 = 1 - i2), 2 * o2 === s + 1 && (o2 = 1 - o2), e3.iushrn(1), t3.iushrn(1);
          }
          return r4;
        }, n.cachedProperty = function(e3, t3, r4) {
          var n2 = "_" + t3;
          e3.prototype[t3] = function() {
            return void 0 !== this[n2] ? this[n2] : this[n2] = r4.call(this);
          };
        }, n.parseBytes = function(e3) {
          return "string" == typeof e3 ? n.toArray(e3, "hex") : e3;
        }, n.intFromLE = function(e3) {
          return new i(e3, "hex", "le");
        };
      }, 6464: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = function() {
          if ("object" === ("undefined" == typeof self ? "undefined" : (0, n.default)(self)) && self)
            return self;
          if ("object" === ("undefined" == typeof window ? "undefined" : (0, n.default)(window)) && window)
            return window;
          throw new Error("Unable to resolve global `this`");
        };
        e2.exports = function() {
          if (this)
            return this;
          if ("object" === ("undefined" == typeof globalThis ? "undefined" : (0, n.default)(globalThis)) && globalThis)
            return globalThis;
          try {
            Object.defineProperty(Object.prototype, "__global__", { get: function() {
              return this;
            }, configurable: true });
          } catch (e3) {
            return i();
          }
          try {
            return __global__ || i();
          } finally {
            delete Object.prototype.__global__;
          }
        }();
      }, 4258: (e2, t2, r3) => {
        "use strict";
        var n, i, o, a = r3(9142), s = r3(8847)(r3(3355));
        o = function() {
          function e3(e4) {
            return "function" == typeof e4;
          }
          var t3 = Array.isArray ? Array.isArray : function(e4) {
            return "[object Array]" === Object.prototype.toString.call(e4);
          }, n2 = 0, i2 = void 0, o2 = void 0, u = function(e4, t4) {
            b[n2] = e4, b[n2 + 1] = t4, 2 === (n2 += 2) && (o2 ? o2(y) : A());
          }, c = "undefined" != typeof window ? window : void 0, f = c || {}, d = f.MutationObserver || f.WebKitMutationObserver, l = "undefined" == typeof self && void 0 !== a && "[object process]" === {}.toString.call(a), h = "undefined" != typeof Uint8ClampedArray && "undefined" != typeof importScripts && "undefined" != typeof MessageChannel;
          function p() {
            var e4 = setTimeout;
            return function() {
              return e4(y, 1);
            };
          }
          var b = new Array(1e3);
          function y() {
            for (var e4 = 0; e4 < n2; e4 += 2)
              (0, b[e4])(b[e4 + 1]), b[e4] = void 0, b[e4 + 1] = void 0;
            n2 = 0;
          }
          var m, v, g, w, A = void 0;
          function k(e4, t4) {
            var r4 = this, n3 = new this.constructor(E);
            void 0 === n3[S] && F(n3);
            var i3 = r4._state;
            if (i3) {
              var o3 = arguments[i3 - 1];
              u(function() {
                return j(i3, n3, o3, r4._result);
              });
            } else
              U(r4, n3, e4, t4);
            return n3;
          }
          function _(e4) {
            if (e4 && "object" === (0, s.default)(e4) && e4.constructor === this)
              return e4;
            var t4 = new this(E);
            return T(t4, e4), t4;
          }
          l ? A = function() {
            return a.nextTick(y);
          } : d ? (v = 0, g = new d(y), w = document.createTextNode(""), g.observe(w, { characterData: true }), A = function() {
            w.data = v = ++v % 2;
          }) : h ? ((m = new MessageChannel()).port1.onmessage = y, A = function() {
            return m.port2.postMessage(0);
          }) : A = void 0 === c ? function() {
            try {
              var e4 = Function("return this")().require("vertx");
              return void 0 !== (i2 = e4.runOnLoop || e4.runOnContext) ? function() {
                i2(y);
              } : p();
            } catch (e5) {
              return p();
            }
          }() : p();
          var S = Math.random().toString(36).substring(2);
          function E() {
          }
          var x = void 0, P = 1, O = 2;
          function B(t4, r4, n3) {
            r4.constructor === t4.constructor && n3 === k && r4.constructor.resolve === _ ? function(e4, t5) {
              t5._state === P ? I(e4, t5._result) : t5._state === O ? M(e4, t5._result) : U(t5, void 0, function(t6) {
                return T(e4, t6);
              }, function(t6) {
                return M(e4, t6);
              });
            }(t4, r4) : void 0 === n3 ? I(t4, r4) : e3(n3) ? function(e4, t5, r5) {
              u(function(e5) {
                var n4 = false, i3 = function(r6, i4, o3, a2) {
                  try {
                    r6.call(i4, function(r7) {
                      n4 || (n4 = true, t5 !== r7 ? T(e5, r7) : I(e5, r7));
                    }, function(t6) {
                      n4 || (n4 = true, M(e5, t6));
                    });
                  } catch (e6) {
                    return e6;
                  }
                }(r5, t5, 0, 0, e5._label);
                !n4 && i3 && (n4 = true, M(e5, i3));
              }, e4);
            }(t4, r4, n3) : I(t4, r4);
          }
          function T(e4, t4) {
            if (e4 === t4)
              M(e4, new TypeError("You cannot resolve a promise with itself"));
            else if (n3 = t4, i3 = (0, s.default)(n3), null === n3 || "object" !== i3 && "function" !== i3)
              I(e4, t4);
            else {
              var r4 = void 0;
              try {
                r4 = t4.then;
              } catch (t5) {
                return void M(e4, t5);
              }
              B(e4, t4, r4);
            }
            var n3, i3;
          }
          function C(e4) {
            e4._onerror && e4._onerror(e4._result), R(e4);
          }
          function I(e4, t4) {
            e4._state === x && (e4._result = t4, e4._state = P, 0 !== e4._subscribers.length && u(R, e4));
          }
          function M(e4, t4) {
            e4._state === x && (e4._state = O, e4._result = t4, u(C, e4));
          }
          function U(e4, t4, r4, n3) {
            var i3 = e4._subscribers, o3 = i3.length;
            e4._onerror = null, i3[o3] = t4, i3[o3 + P] = r4, i3[o3 + O] = n3, 0 === o3 && e4._state && u(R, e4);
          }
          function R(e4) {
            var t4 = e4._subscribers, r4 = e4._state;
            if (0 !== t4.length) {
              for (var n3 = void 0, i3 = void 0, o3 = e4._result, a2 = 0; a2 < t4.length; a2 += 3)
                n3 = t4[a2], i3 = t4[a2 + r4], n3 ? j(r4, n3, i3, o3) : i3(o3);
              e4._subscribers.length = 0;
            }
          }
          function j(t4, r4, n3, i3) {
            var o3 = e3(n3), a2 = void 0, s2 = void 0, u2 = true;
            if (o3) {
              try {
                a2 = n3(i3);
              } catch (e4) {
                u2 = false, s2 = e4;
              }
              if (r4 === a2)
                return void M(r4, new TypeError("A promises callback cannot return that same promise."));
            } else
              a2 = i3;
            r4._state !== x || (o3 && u2 ? T(r4, a2) : false === u2 ? M(r4, s2) : t4 === P ? I(r4, a2) : t4 === O && M(r4, a2));
          }
          var N = 0;
          function F(e4) {
            e4[S] = N++, e4._state = void 0, e4._result = void 0, e4._subscribers = [];
          }
          var L = function() {
            function e4(e5, r4) {
              this._instanceConstructor = e5, this.promise = new e5(E), this.promise[S] || F(this.promise), t3(r4) ? (this.length = r4.length, this._remaining = r4.length, this._result = new Array(this.length), 0 === this.length ? I(this.promise, this._result) : (this.length = this.length || 0, this._enumerate(r4), 0 === this._remaining && I(this.promise, this._result))) : M(this.promise, new Error("Array Methods must be provided an Array"));
            }
            return e4.prototype._enumerate = function(e5) {
              for (var t4 = 0; this._state === x && t4 < e5.length; t4++)
                this._eachEntry(e5[t4], t4);
            }, e4.prototype._eachEntry = function(e5, t4) {
              var r4 = this._instanceConstructor, n3 = r4.resolve;
              if (n3 === _) {
                var i3 = void 0, o3 = void 0, a2 = false;
                try {
                  i3 = e5.then;
                } catch (e6) {
                  a2 = true, o3 = e6;
                }
                if (i3 === k && e5._state !== x)
                  this._settledAt(e5._state, t4, e5._result);
                else if ("function" != typeof i3)
                  this._remaining--, this._result[t4] = e5;
                else if (r4 === D) {
                  var s2 = new r4(E);
                  a2 ? M(s2, o3) : B(s2, e5, i3), this._willSettleAt(s2, t4);
                } else
                  this._willSettleAt(new r4(function(t5) {
                    return t5(e5);
                  }), t4);
              } else
                this._willSettleAt(n3(e5), t4);
            }, e4.prototype._settledAt = function(e5, t4, r4) {
              var n3 = this.promise;
              n3._state === x && (this._remaining--, e5 === O ? M(n3, r4) : this._result[t4] = r4), 0 === this._remaining && I(n3, this._result);
            }, e4.prototype._willSettleAt = function(e5, t4) {
              var r4 = this;
              U(e5, void 0, function(e6) {
                return r4._settledAt(P, t4, e6);
              }, function(e6) {
                return r4._settledAt(O, t4, e6);
              });
            }, e4;
          }(), D = function() {
            function t4(e4) {
              this[S] = N++, this._result = this._state = void 0, this._subscribers = [], E !== e4 && ("function" != typeof e4 && function() {
                throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
              }(), this instanceof t4 ? function(e5, t5) {
                try {
                  t5(function(t6) {
                    T(e5, t6);
                  }, function(t6) {
                    M(e5, t6);
                  });
                } catch (t6) {
                  M(e5, t6);
                }
              }(this, e4) : function() {
                throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
              }());
            }
            return t4.prototype.catch = function(e4) {
              return this.then(null, e4);
            }, t4.prototype.finally = function(t5) {
              var r4 = this, n3 = r4.constructor;
              return e3(t5) ? r4.then(function(e4) {
                return n3.resolve(t5()).then(function() {
                  return e4;
                });
              }, function(e4) {
                return n3.resolve(t5()).then(function() {
                  throw e4;
                });
              }) : r4.then(t5, t5);
            }, t4;
          }();
          return D.prototype.then = k, D.all = function(e4) {
            return new L(this, e4).promise;
          }, D.race = function(e4) {
            var r4 = this;
            return t3(e4) ? new r4(function(t4, n3) {
              for (var i3 = e4.length, o3 = 0; o3 < i3; o3++)
                r4.resolve(e4[o3]).then(t4, n3);
            }) : new r4(function(e5, t4) {
              return t4(new TypeError("You must pass an array to race."));
            });
          }, D.resolve = _, D.reject = function(e4) {
            var t4 = new this(E);
            return M(t4, e4), t4;
          }, D._setScheduler = function(e4) {
            o2 = e4;
          }, D._setAsap = function(e4) {
            u = e4;
          }, D._asap = u, D.polyfill = function() {
            var e4 = void 0;
            if (void 0 !== r3.g)
              e4 = r3.g;
            else if ("undefined" != typeof self)
              e4 = self;
            else
              try {
                e4 = Function("return this")();
              } catch (e5) {
                throw new Error("polyfill failed because global object is unavailable in this environment");
              }
            var t4 = e4.Promise;
            if (t4) {
              var n3 = null;
              try {
                n3 = Object.prototype.toString.call(t4.resolve());
              } catch (e5) {
              }
              if ("[object Promise]" === n3 && !t4.cast)
                return;
            }
            e4.Promise = D;
          }, D.Promise = D, D;
        }, "object" === (0, s.default)(t2) ? e2.exports = o() : void 0 === (i = "function" == typeof (n = o) ? n.call(t2, r3, t2, e2) : n) || (e2.exports = i);
      }, 1006: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(4858).keccak_256, o = r3(3956);
        function a(e3) {
          return e3 ? o.toUnicode(e3, { useStd3ASCII: true, transitional: false }) : e3;
        }
        t2.hash = function(e3) {
          for (var t3 = "", r4 = 0; r4 < 32; r4++)
            t3 += "00";
          if (name = a(e3), name) {
            var o2 = name.split(".");
            for (r4 = o2.length - 1; r4 >= 0; r4--) {
              var s = i(o2[r4]);
              t3 = i(new n(t3 + s, "hex"));
            }
          }
          return "0x" + t3;
        }, t2.normalize = a;
      }, 3058: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(8847)(r3(4519)), o = r3(6851), a = r3(9733), s = r3(6597), u = (r3(6740), new s.ec("secp256k1")), c = r3(2922), f = c.keccak256, d = c.keccak256s, l = function(e3) {
          for (var t3 = d(e3.slice(2)), r4 = "0x", n2 = 0; n2 < 40; n2++)
            r4 += parseInt(t3[n2 + 2], 16) > 7 ? e3[n2 + 2].toUpperCase() : e3[n2 + 2];
          return r4;
        }, h = function(e3) {
          var t3 = new n(e3.slice(2), "hex"), r4 = "0x" + u.keyFromPrivate(t3).getPublic(false, "hex").slice(2), i2 = f(r4);
          return { address: l("0x" + i2.slice(-40)), privateKey: e3 };
        }, p = function(e3) {
          var t3 = (0, i.default)(e3, 3), r4 = t3[0], n2 = t3[1], a2 = t3[2];
          return o.flatten([n2, a2, r4]);
        }, b = function(e3) {
          return [o.slice(64, o.length(e3), e3), o.slice(0, 32, e3), o.slice(32, 64, e3)];
        }, y = function(e3) {
          return function(t3, r4) {
            var i2 = u.keyFromPrivate(new n(r4.slice(2), "hex")).sign(new n(t3.slice(2), "hex"), { canonical: true });
            return p([a.fromString(o.fromNumber(e3 + i2.recoveryParam)), o.pad(32, o.fromNat("0x" + i2.r.toString(16))), o.pad(32, o.fromNat("0x" + i2.s.toString(16)))]);
          };
        }, m = y(27);
        e2.exports = { create: function(e3) {
          var t3 = f(o.concat(o.random(32), e3 || o.random(32))), r4 = o.concat(o.concat(o.random(32), t3), o.random(32)), n2 = f(r4);
          return h(n2);
        }, toChecksum: l, fromPrivate: h, sign: m, makeSigner: y, recover: function(e3, t3) {
          var r4 = b(t3), i2 = { v: o.toNumber(r4[0]), r: r4[1].slice(2), s: r4[2].slice(2) }, a2 = "0x" + u.recoverPubKey(new n(e3.slice(2), "hex"), i2, i2.v < 2 ? i2.v : 1 - i2.v % 2).encode("hex", false).slice(2), s2 = f(a2);
          return l("0x" + s2.slice(-40));
        }, encodeSignature: p, decodeSignature: b };
      }, 1376: (e2) => {
        "use strict";
        var t2 = function(e3, t3) {
          for (var r3 = [], n = 0; n < e3; ++n)
            r3.push(t3(n));
          return r3;
        };
        e2.exports = { generate: t2, replicate: function(e3, r3) {
          return t2(e3, function() {
            return r3;
          });
        }, concat: function(e3, t3) {
          return e3.concat(t3);
        }, flatten: function(e3) {
          for (var t3 = [], r3 = 0, n = e3.length; r3 < n; ++r3)
            for (var i = 0, o = e3[r3].length; i < o; ++i)
              t3.push(e3[r3][i]);
          return t3;
        }, chunksOf: function(e3, t3) {
          for (var r3 = [], n = 0, i = t3.length; n < i; n += e3)
            r3.push(t3.slice(n, n + e3));
          return r3;
        } };
      }, 6851: (e2, t2, r3) => {
        "use strict";
        r3(1376);
        var n = function(e3, t3) {
          return parseInt(e3.slice(2 * t3 + 2, 2 * t3 + 4), 16);
        }, i = function(e3) {
          return (e3.length - 2) / 2;
        }, o = function(e3) {
          for (var t3 = [], r4 = 2, n2 = e3.length; r4 < n2; r4 += 2)
            t3.push(parseInt(e3.slice(r4, r4 + 2), 16));
          return t3;
        }, a = function(e3) {
          for (var t3 = "0x", r4 = 0, n2 = e3.length; r4 < n2; ++r4) {
            var i2 = e3[r4];
            t3 += (i2 < 16 ? "0" : "") + i2.toString(16);
          }
          return t3;
        };
        e2.exports = { random: function(e3) {
          var t3;
          t3 = "undefined" != typeof window && window.crypto && window.crypto.getRandomValues ? window.crypto.getRandomValues(new Uint8Array(e3)) : r3(4293).randomBytes(e3);
          for (var n2 = "0x", i2 = 0; i2 < e3; ++i2)
            n2 += ("00" + t3[i2].toString(16)).slice(-2);
          return n2;
        }, length: i, concat: function(e3, t3) {
          return e3.concat(t3.slice(2));
        }, flatten: function(e3) {
          return "0x" + e3.reduce(function(e4, t3) {
            return e4 + t3.slice(2);
          }, "");
        }, slice: function(e3, t3, r4) {
          return "0x" + r4.slice(2 * e3 + 2, 2 * t3 + 2);
        }, reverse: function(e3) {
          for (var t3 = "0x", r4 = 0, n2 = i(e3); r4 < n2; ++r4)
            t3 += e3.slice(2 * (n2 - r4), 2 * (n2 - r4 + 1));
          return t3;
        }, pad: function e3(t3, r4) {
          return r4.length === 2 * t3 + 2 ? r4 : e3(t3, "0x0" + r4.slice(2));
        }, padRight: function e3(t3, r4) {
          return r4.length === 2 * t3 + 2 ? r4 : e3(t3, r4 + "0");
        }, fromAscii: function(e3) {
          for (var t3 = "0x", r4 = 0; r4 < e3.length; ++r4)
            t3 += ("00" + e3.charCodeAt(r4).toString(16)).slice(-2);
          return t3;
        }, toAscii: function(e3) {
          for (var t3 = "", r4 = 2; r4 < e3.length; r4 += 2)
            t3 += String.fromCharCode(parseInt(e3.slice(r4, r4 + 2), 16));
          return t3;
        }, fromString: function(e3) {
          for (var t3 = function(e4) {
            var t4 = e4.toString(16);
            return t4.length < 2 ? "0" + t4 : t4;
          }, r4 = "0x", n2 = 0; n2 != e3.length; n2++) {
            var i2 = e3.charCodeAt(n2);
            if (i2 < 128)
              r4 += t3(i2);
            else {
              if (i2 < 2048)
                r4 += t3(i2 >> 6 | 192);
              else {
                if (i2 > 55295 && i2 < 56320) {
                  if (++n2 == e3.length)
                    return null;
                  var o2 = e3.charCodeAt(n2);
                  if (o2 < 56320 || o2 > 57343)
                    return null;
                  r4 += t3((i2 = 65536 + ((1023 & i2) << 10) + (1023 & o2)) >> 18 | 240), r4 += t3(i2 >> 12 & 63 | 128);
                } else
                  r4 += t3(i2 >> 12 | 224);
                r4 += t3(i2 >> 6 & 63 | 128);
              }
              r4 += t3(63 & i2 | 128);
            }
          }
          return r4;
        }, toString: function(e3) {
          for (var t3 = "", r4 = 0, o2 = i(e3); r4 < o2; ) {
            var a2 = n(e3, r4++);
            if (a2 > 127) {
              if (a2 > 191 && a2 < 224) {
                if (r4 >= o2)
                  return null;
                a2 = (31 & a2) << 6 | 63 & n(e3, r4);
              } else if (a2 > 223 && a2 < 240) {
                if (r4 + 1 >= o2)
                  return null;
                a2 = (15 & a2) << 12 | (63 & n(e3, r4)) << 6 | 63 & n(e3, ++r4);
              } else {
                if (!(a2 > 239 && a2 < 248))
                  return null;
                if (r4 + 2 >= o2)
                  return null;
                a2 = (7 & a2) << 18 | (63 & n(e3, r4)) << 12 | (63 & n(e3, ++r4)) << 6 | 63 & n(e3, ++r4);
              }
              ++r4;
            }
            if (a2 <= 65535)
              t3 += String.fromCharCode(a2);
            else {
              if (!(a2 <= 1114111))
                return null;
              a2 -= 65536, t3 += String.fromCharCode(a2 >> 10 | 55296), t3 += String.fromCharCode(1023 & a2 | 56320);
            }
          }
          return t3;
        }, fromNumber: function(e3) {
          var t3 = e3.toString(16);
          return t3.length % 2 == 0 ? "0x" + t3 : "0x0" + t3;
        }, toNumber: function(e3) {
          return parseInt(e3.slice(2), 16);
        }, fromNat: function(e3) {
          return "0x0" === e3 ? "0x" : e3.length % 2 == 0 ? e3 : "0x0" + e3.slice(2);
        }, toNat: function(e3) {
          return "0" === e3[2] ? "0x" + e3.slice(3) : e3;
        }, fromArray: a, toArray: o, fromUint8Array: function(e3) {
          return a([].slice.call(e3, 0));
        }, toUint8Array: function(e3) {
          return new Uint8Array(o(e3));
        } };
      }, 2922: (e2) => {
        "use strict";
        var t2 = "0123456789abcdef".split(""), r3 = [1, 256, 65536, 16777216], n = [0, 8, 16, 24], i = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648], o = function(e3) {
          var t3, r4, n2, o2, a2, s, u, c, f, d, l, h, p, b, y, m, v, g, w, A, k, _, S, E, x, P, O, B, T, C, I, M, U, R, j, N, F, L, D, H, q, z, G, K, V, J, W, Y, X, Q, Z, $, ee, te, re, ne, ie, oe, ae, se, ue, ce, fe;
          for (n2 = 0; n2 < 48; n2 += 2)
            o2 = e3[0] ^ e3[10] ^ e3[20] ^ e3[30] ^ e3[40], a2 = e3[1] ^ e3[11] ^ e3[21] ^ e3[31] ^ e3[41], s = e3[2] ^ e3[12] ^ e3[22] ^ e3[32] ^ e3[42], u = e3[3] ^ e3[13] ^ e3[23] ^ e3[33] ^ e3[43], c = e3[4] ^ e3[14] ^ e3[24] ^ e3[34] ^ e3[44], f = e3[5] ^ e3[15] ^ e3[25] ^ e3[35] ^ e3[45], d = e3[6] ^ e3[16] ^ e3[26] ^ e3[36] ^ e3[46], l = e3[7] ^ e3[17] ^ e3[27] ^ e3[37] ^ e3[47], t3 = (h = e3[8] ^ e3[18] ^ e3[28] ^ e3[38] ^ e3[48]) ^ (s << 1 | u >>> 31), r4 = (p = e3[9] ^ e3[19] ^ e3[29] ^ e3[39] ^ e3[49]) ^ (u << 1 | s >>> 31), e3[0] ^= t3, e3[1] ^= r4, e3[10] ^= t3, e3[11] ^= r4, e3[20] ^= t3, e3[21] ^= r4, e3[30] ^= t3, e3[31] ^= r4, e3[40] ^= t3, e3[41] ^= r4, t3 = o2 ^ (c << 1 | f >>> 31), r4 = a2 ^ (f << 1 | c >>> 31), e3[2] ^= t3, e3[3] ^= r4, e3[12] ^= t3, e3[13] ^= r4, e3[22] ^= t3, e3[23] ^= r4, e3[32] ^= t3, e3[33] ^= r4, e3[42] ^= t3, e3[43] ^= r4, t3 = s ^ (d << 1 | l >>> 31), r4 = u ^ (l << 1 | d >>> 31), e3[4] ^= t3, e3[5] ^= r4, e3[14] ^= t3, e3[15] ^= r4, e3[24] ^= t3, e3[25] ^= r4, e3[34] ^= t3, e3[35] ^= r4, e3[44] ^= t3, e3[45] ^= r4, t3 = c ^ (h << 1 | p >>> 31), r4 = f ^ (p << 1 | h >>> 31), e3[6] ^= t3, e3[7] ^= r4, e3[16] ^= t3, e3[17] ^= r4, e3[26] ^= t3, e3[27] ^= r4, e3[36] ^= t3, e3[37] ^= r4, e3[46] ^= t3, e3[47] ^= r4, t3 = d ^ (o2 << 1 | a2 >>> 31), r4 = l ^ (a2 << 1 | o2 >>> 31), e3[8] ^= t3, e3[9] ^= r4, e3[18] ^= t3, e3[19] ^= r4, e3[28] ^= t3, e3[29] ^= r4, e3[38] ^= t3, e3[39] ^= r4, e3[48] ^= t3, e3[49] ^= r4, b = e3[0], y = e3[1], J = e3[11] << 4 | e3[10] >>> 28, W = e3[10] << 4 | e3[11] >>> 28, B = e3[20] << 3 | e3[21] >>> 29, T = e3[21] << 3 | e3[20] >>> 29, se = e3[31] << 9 | e3[30] >>> 23, ue = e3[30] << 9 | e3[31] >>> 23, z = e3[40] << 18 | e3[41] >>> 14, G = e3[41] << 18 | e3[40] >>> 14, R = e3[2] << 1 | e3[3] >>> 31, j = e3[3] << 1 | e3[2] >>> 31, m = e3[13] << 12 | e3[12] >>> 20, v = e3[12] << 12 | e3[13] >>> 20, Y = e3[22] << 10 | e3[23] >>> 22, X = e3[23] << 10 | e3[22] >>> 22, C = e3[33] << 13 | e3[32] >>> 19, I = e3[32] << 13 | e3[33] >>> 19, ce = e3[42] << 2 | e3[43] >>> 30, fe = e3[43] << 2 | e3[42] >>> 30, te = e3[5] << 30 | e3[4] >>> 2, re = e3[4] << 30 | e3[5] >>> 2, N = e3[14] << 6 | e3[15] >>> 26, F = e3[15] << 6 | e3[14] >>> 26, g = e3[25] << 11 | e3[24] >>> 21, w = e3[24] << 11 | e3[25] >>> 21, Q = e3[34] << 15 | e3[35] >>> 17, Z = e3[35] << 15 | e3[34] >>> 17, M = e3[45] << 29 | e3[44] >>> 3, U = e3[44] << 29 | e3[45] >>> 3, E = e3[6] << 28 | e3[7] >>> 4, x = e3[7] << 28 | e3[6] >>> 4, ne = e3[17] << 23 | e3[16] >>> 9, ie = e3[16] << 23 | e3[17] >>> 9, L = e3[26] << 25 | e3[27] >>> 7, D = e3[27] << 25 | e3[26] >>> 7, A = e3[36] << 21 | e3[37] >>> 11, k = e3[37] << 21 | e3[36] >>> 11, $ = e3[47] << 24 | e3[46] >>> 8, ee = e3[46] << 24 | e3[47] >>> 8, K = e3[8] << 27 | e3[9] >>> 5, V = e3[9] << 27 | e3[8] >>> 5, P = e3[18] << 20 | e3[19] >>> 12, O = e3[19] << 20 | e3[18] >>> 12, oe = e3[29] << 7 | e3[28] >>> 25, ae = e3[28] << 7 | e3[29] >>> 25, H = e3[38] << 8 | e3[39] >>> 24, q = e3[39] << 8 | e3[38] >>> 24, _ = e3[48] << 14 | e3[49] >>> 18, S = e3[49] << 14 | e3[48] >>> 18, e3[0] = b ^ ~m & g, e3[1] = y ^ ~v & w, e3[10] = E ^ ~P & B, e3[11] = x ^ ~O & T, e3[20] = R ^ ~N & L, e3[21] = j ^ ~F & D, e3[30] = K ^ ~J & Y, e3[31] = V ^ ~W & X, e3[40] = te ^ ~ne & oe, e3[41] = re ^ ~ie & ae, e3[2] = m ^ ~g & A, e3[3] = v ^ ~w & k, e3[12] = P ^ ~B & C, e3[13] = O ^ ~T & I, e3[22] = N ^ ~L & H, e3[23] = F ^ ~D & q, e3[32] = J ^ ~Y & Q, e3[33] = W ^ ~X & Z, e3[42] = ne ^ ~oe & se, e3[43] = ie ^ ~ae & ue, e3[4] = g ^ ~A & _, e3[5] = w ^ ~k & S, e3[14] = B ^ ~C & M, e3[15] = T ^ ~I & U, e3[24] = L ^ ~H & z, e3[25] = D ^ ~q & G, e3[34] = Y ^ ~Q & $, e3[35] = X ^ ~Z & ee, e3[44] = oe ^ ~se & ce, e3[45] = ae ^ ~ue & fe, e3[6] = A ^ ~_ & b, e3[7] = k ^ ~S & y, e3[16] = C ^ ~M & E, e3[17] = I ^ ~U & x, e3[26] = H ^ ~z & R, e3[27] = q ^ ~G & j, e3[36] = Q ^ ~$ & K, e3[37] = Z ^ ~ee & V, e3[46] = se ^ ~ce & te, e3[47] = ue ^ ~fe & re, e3[8] = _ ^ ~b & m, e3[9] = S ^ ~y & v, e3[18] = M ^ ~E & P, e3[19] = U ^ ~x & O, e3[28] = z ^ ~R & N, e3[29] = G ^ ~j & F, e3[38] = $ ^ ~K & J, e3[39] = ee ^ ~V & W, e3[48] = ce ^ ~te & ne, e3[49] = fe ^ ~re & ie, e3[0] ^= i[n2], e3[1] ^= i[n2 + 1];
        }, a = function(e3) {
          return function(i2) {
            var a2;
            if ("0x" === i2.slice(0, 2)) {
              a2 = [];
              for (var s = 2, u = i2.length; s < u; s += 2)
                a2.push(parseInt(i2.slice(s, s + 2), 16));
            } else
              a2 = i2;
            return function(e4, i3) {
              for (var a3, s2 = i3.length, u2 = e4.blocks, c = e4.blockCount << 2, f = e4.blockCount, d = e4.outputBlocks, l = e4.s, h = 0; h < s2; ) {
                if (e4.reset)
                  for (e4.reset = false, u2[0] = e4.block, y = 1; y < f + 1; ++y)
                    u2[y] = 0;
                if ("string" != typeof i3)
                  for (y = e4.start; h < s2 && y < c; ++h)
                    u2[y >> 2] |= i3[h] << n[3 & y++];
                else
                  for (y = e4.start; h < s2 && y < c; ++h)
                    (a3 = i3.charCodeAt(h)) < 128 ? u2[y >> 2] |= a3 << n[3 & y++] : a3 < 2048 ? (u2[y >> 2] |= (192 | a3 >> 6) << n[3 & y++], u2[y >> 2] |= (128 | 63 & a3) << n[3 & y++]) : a3 < 55296 || a3 >= 57344 ? (u2[y >> 2] |= (224 | a3 >> 12) << n[3 & y++], u2[y >> 2] |= (128 | a3 >> 6 & 63) << n[3 & y++], u2[y >> 2] |= (128 | 63 & a3) << n[3 & y++]) : (a3 = 65536 + ((1023 & a3) << 10 | 1023 & i3.charCodeAt(++h)), u2[y >> 2] |= (240 | a3 >> 18) << n[3 & y++], u2[y >> 2] |= (128 | a3 >> 12 & 63) << n[3 & y++], u2[y >> 2] |= (128 | a3 >> 6 & 63) << n[3 & y++], u2[y >> 2] |= (128 | 63 & a3) << n[3 & y++]);
                if (e4.lastByteIndex = y, y >= c) {
                  for (e4.start = y - c, e4.block = u2[f], y = 0; y < f; ++y)
                    l[y] ^= u2[y];
                  o(l), e4.reset = true;
                } else
                  e4.start = y;
              }
              if (u2[(y = e4.lastByteIndex) >> 2] |= r3[3 & y], e4.lastByteIndex === c)
                for (u2[0] = u2[f], y = 1; y < f + 1; ++y)
                  u2[y] = 0;
              for (u2[f - 1] |= 2147483648, y = 0; y < f; ++y)
                l[y] ^= u2[y];
              o(l);
              for (var p, b = "", y = 0, m = 0; m < d; ) {
                for (y = 0; y < f && m < d; ++y, ++m)
                  p = l[y], b += t2[p >> 4 & 15] + t2[15 & p] + t2[p >> 12 & 15] + t2[p >> 8 & 15] + t2[p >> 20 & 15] + t2[p >> 16 & 15] + t2[p >> 28 & 15] + t2[p >> 24 & 15];
                m % f == 0 && (o(l), y = 0);
              }
              return "0x" + b;
            }(function(e4) {
              return { blocks: [], reset: true, block: 0, start: 0, blockCount: 1600 - (e4 << 1) >> 5, outputBlocks: e4 >> 5, s: (t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [].concat(t3, t3, t3, t3, t3)) };
              var t3;
            }(e3), a2);
          };
        };
        e2.exports = { keccak256: a(256), keccak512: a(512), keccak256s: a(256), keccak512s: a(512) };
      }, 9733: (e2, t2, r3) => {
        "use strict";
        var n = r3(1734), i = r3(6851), o = function(e3) {
          return new n(e3.slice(2), 16);
        }, a = function(e3) {
          var t3 = "0x" + ("0x" === e3.slice(0, 2) ? new n(e3.slice(2), 16) : new n(e3, 10)).toString("hex");
          return "0x0" === t3 ? "0x" : t3;
        }, s = function(e3) {
          return "string" == typeof e3 ? /^0x/.test(e3) ? e3 : "0x" + e3 : "0x" + new n(e3).toString("hex");
        }, u = function(e3) {
          return o(e3).toNumber();
        }, c = function(e3) {
          return function(t3, r4) {
            return "0x" + o(t3)[e3](o(r4)).toString("hex");
          };
        }, f = c("add"), d = c("mul"), l = c("div"), h = c("sub");
        e2.exports = { toString: function(e3) {
          return o(e3).toString(10);
        }, fromString: a, toNumber: u, fromNumber: s, toEther: function(e3) {
          return u(l(e3, a("10000000000"))) / 1e8;
        }, fromEther: function(e3) {
          return d(s(Math.floor(1e8 * e3)), a("10000000000"));
        }, toUint256: function(e3) {
          return i.pad(32, e3);
        }, add: f, mul: d, div: l, sub: h };
      }, 6740: (e2) => {
        "use strict";
        e2.exports = { encode: function(e3) {
          var t2 = function(e4) {
            return (t3 = e4.toString(16)).length % 2 == 0 ? t3 : "0" + t3;
            var t3;
          }, r3 = function(e4, r4) {
            return e4 < 56 ? t2(r4 + e4) : t2(r4 + t2(e4).length / 2 + 55) + t2(e4);
          };
          return "0x" + function e4(t3) {
            if ("string" == typeof t3) {
              var n = t3.slice(2);
              return (2 != n.length || n >= "80" ? r3(n.length / 2, 128) : "") + n;
            }
            var i = t3.map(e4).join("");
            return r3(i.length / 2, 192) + i;
          }(e3);
        }, decode: function(e3) {
          var t2 = 2, r3 = function() {
            if (t2 >= e3.length)
              throw "";
            var r4 = e3.slice(t2, t2 + 2);
            return r4 < "80" ? (t2 += 2, "0x" + r4) : r4 < "c0" ? i() : o();
          }, n = function() {
            var r4 = parseInt(e3.slice(t2, t2 += 2), 16) % 64;
            return r4 < 56 ? r4 : parseInt(e3.slice(t2, t2 += 2 * (r4 - 55)), 16);
          }, i = function() {
            var r4 = n();
            return "0x" + e3.slice(t2, t2 += 2 * r4);
          }, o = function() {
            for (var e4 = 2 * n() + t2, i2 = []; t2 < e4; )
              i2.push(r3());
            return i2;
          };
          try {
            return r3();
          } catch (e4) {
            return [];
          }
        } };
      }, 9313: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355));
        Object.defineProperty(t2, "__esModule", { value: true });
        var i = r3(8179);
        function o(e3) {
          return !("string" != typeof e3 || !/^(0x)?[0-9a-f]{512}$/i.test(e3) || !/^(0x)?[0-9a-f]{512}$/.test(e3) && !/^(0x)?[0-9A-F]{512}$/.test(e3));
        }
        function a(e3, t3) {
          "object" === (0, n.default)(t3) && t3.constructor === Uint8Array && (t3 = i.bytesToHex(t3));
          for (var r4 = i.keccak256(t3).replace("0x", ""), o2 = 0; o2 < 12; o2 += 4) {
            var a2 = (parseInt(r4.substr(o2, 2), 16) << 8) + parseInt(r4.substr(o2 + 2, 2), 16) & 2047, u2 = 1 << a2 % 4;
            if ((s(e3.charCodeAt(e3.length - 1 - Math.floor(a2 / 4))) & u2) !== u2)
              return false;
          }
          return true;
        }
        function s(e3) {
          if (e3 >= 48 && e3 <= 57)
            return e3 - 48;
          if (e3 >= 65 && e3 <= 70)
            return e3 - 55;
          if (e3 >= 97 && e3 <= 102)
            return e3 - 87;
          throw new Error("invalid bloom");
        }
        function u(e3) {
          return !("string" != typeof e3 || !/^(0x)?[0-9a-f]{64}$/i.test(e3) || !/^(0x)?[0-9a-f]{64}$/.test(e3) && !/^(0x)?[0-9A-F]{64}$/.test(e3));
        }
        function c(e3) {
          return !("string" != typeof e3 || !e3.match(/^(0x)?[0-9a-fA-F]{40}$/) && !e3.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/));
        }
        t2.isBloom = o, t2.isInBloom = a, t2.isUserEthereumAddressInBloom = function(e3, t3) {
          if (!o(e3))
            throw new Error("Invalid bloom given");
          if (!c(t3))
            throw new Error('Invalid ethereum address given: "'.concat(t3, '"'));
          return a(e3, i.padLeft(t3, 64));
        }, t2.isContractAddressInBloom = function(e3, t3) {
          if (!o(e3))
            throw new Error("Invalid bloom given");
          if (!c(t3))
            throw new Error('Invalid contract address given: "'.concat(t3, '"'));
          return a(e3, t3);
        }, t2.isTopicInBloom = function(e3, t3) {
          if (!o(e3))
            throw new Error("Invalid bloom given");
          if (!u(t3))
            throw new Error("Invalid topic");
          return a(e3, t3);
        }, t2.isTopic = u, t2.isAddress = c;
      }, 8179: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r3(7286);
        function i(e3) {
          if (null == e3)
            throw new Error("cannot convert null value to array");
          if ("string" == typeof e3) {
            var t3 = e3.match(/^(0x)?[0-9a-fA-F]*$/);
            if (!t3)
              throw new Error("invalid hexidecimal string");
            if ("0x" !== t3[1])
              throw new Error("hex string must have 0x prefix");
            (e3 = e3.substring(2)).length % 2 && (e3 = "0" + e3);
            for (var r4 = [], n2 = 0; n2 < e3.length; n2 += 2)
              r4.push(parseInt(e3.substr(n2, 2), 16));
            return o(new Uint8Array(r4));
          }
          if (function(e4) {
            if (!e4 || parseInt(String(e4.length)) != e4.length || "string" == typeof e4)
              return false;
            for (var t4 = 0; t4 < e4.length; t4++) {
              var r5 = e4[t4];
              if (r5 < 0 || r5 >= 256 || parseInt(String(r5)) != r5)
                return false;
            }
            return true;
          }(e3))
            return o(new Uint8Array(e3));
          throw new Error("invalid arrayify value");
        }
        function o(e3) {
          var t3 = arguments;
          return void 0 !== e3.slice || (e3.slice = function() {
            var r4 = Array.prototype.slice.call(t3);
            return o(new Uint8Array(Array.prototype.slice.apply(e3, r4)));
          }), e3;
        }
        t2.keccak256 = function(e3) {
          return "0x" + n.keccak_256(i(e3));
        }, t2.padLeft = function(e3, t3) {
          var r4 = /^0x/i.test(e3) || "number" == typeof e3, n2 = t3 - (e3 = e3.toString().replace(/^0x/i, "")).length + 1 >= 0 ? t3 - e3.length + 1 : 0;
          return (r4 ? "0x" : "") + new Array(n2).join("0") + e3;
        }, t2.bytesToHex = function(e3) {
          for (var t3 = [], r4 = 0; r4 < e3.length; r4++)
            t3.push((e3[r4] >>> 4).toString(16)), t3.push((15 & e3[r4]).toString(16));
          return "0x".concat(t3.join("").replace(/^0+/, ""));
        }, t2.toByteArray = i;
      }, 7286: (e2, t2, r3) => {
        "use strict";
        e2 = r3.nmd(e2);
        var n, i = r3(9142), o = r3(8847)(r3(3355));
        !function() {
          var a = "input is invalid type", s = "object" === ("undefined" == typeof window ? "undefined" : (0, o.default)(window)), u = s ? window : {};
          u.JS_SHA3_NO_WINDOW && (s = false);
          var c = !s && "object" === ("undefined" == typeof self ? "undefined" : (0, o.default)(self));
          !u.JS_SHA3_NO_NODE_JS && "object" === (void 0 === i ? "undefined" : (0, o.default)(i)) && i.versions && i.versions.node ? u = r3.g : c && (u = self);
          var f = !u.JS_SHA3_NO_COMMON_JS && "object" === (0, o.default)(e2) && e2.exports, d = r3.amdO, l = !u.JS_SHA3_NO_ARRAY_BUFFER && "undefined" != typeof ArrayBuffer, h = "0123456789abcdef".split(""), p = [4, 1024, 262144, 67108864], b = [0, 8, 16, 24], y = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648], m = [224, 256, 384, 512], v = [128, 256], g = ["hex", "buffer", "arrayBuffer", "array", "digest"], w = { 128: 168, 256: 136 };
          !u.JS_SHA3_NO_NODE_JS && Array.isArray || (Array.isArray = function(e3) {
            return "[object Array]" === Object.prototype.toString.call(e3);
          }), !l || !u.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW && ArrayBuffer.isView || (ArrayBuffer.isView = function(e3) {
            return "object" === (0, o.default)(e3) && e3.buffer && e3.buffer.constructor === ArrayBuffer;
          });
          for (var A = function(e3, t3, r4) {
            return function(n2) {
              return new j(e3, t3, e3).update(n2)[r4]();
            };
          }, k = function(e3, t3, r4) {
            return function(n2, i2) {
              return new j(e3, t3, i2).update(n2)[r4]();
            };
          }, _ = function(e3, t3, r4) {
            return function(t4, n2, i2, o2) {
              return O["cshake" + e3].update(t4, n2, i2, o2)[r4]();
            };
          }, S = function(e3, t3, r4) {
            return function(t4, n2, i2, o2) {
              return O["kmac" + e3].update(t4, n2, i2, o2)[r4]();
            };
          }, E = function(e3, t3, r4, n2) {
            for (var i2 = 0; i2 < g.length; ++i2) {
              var o2 = g[i2];
              e3[o2] = t3(r4, n2, o2);
            }
            return e3;
          }, x = function(e3, t3) {
            var r4 = A(e3, t3, "hex");
            return r4.create = function() {
              return new j(e3, t3, e3);
            }, r4.update = function(e4) {
              return r4.create().update(e4);
            }, E(r4, A, e3, t3);
          }, P = [{ name: "keccak", padding: [1, 256, 65536, 16777216], bits: m, createMethod: x }, { name: "sha3", padding: [6, 1536, 393216, 100663296], bits: m, createMethod: x }, { name: "shake", padding: [31, 7936, 2031616, 520093696], bits: v, createMethod: function(e3, t3) {
            var r4 = k(e3, t3, "hex");
            return r4.create = function(r5) {
              return new j(e3, t3, r5);
            }, r4.update = function(e4, t4) {
              return r4.create(t4).update(e4);
            }, E(r4, k, e3, t3);
          } }, { name: "cshake", padding: p, bits: v, createMethod: function(e3, t3) {
            var r4 = w[e3], n2 = _(e3, 0, "hex");
            return n2.create = function(n3, i2, o2) {
              return i2 || o2 ? new j(e3, t3, n3).bytepad([i2, o2], r4) : O["shake" + e3].create(n3);
            }, n2.update = function(e4, t4, r5, i2) {
              return n2.create(t4, r5, i2).update(e4);
            }, E(n2, _, e3, t3);
          } }, { name: "kmac", padding: p, bits: v, createMethod: function(e3, t3) {
            var r4 = w[e3], n2 = S(e3, 0, "hex");
            return n2.create = function(n3, i2, o2) {
              return new N(e3, t3, i2).bytepad(["KMAC", o2], r4).bytepad([n3], r4);
            }, n2.update = function(e4, t4, r5, i2) {
              return n2.create(e4, r5, i2).update(t4);
            }, E(n2, S, e3, t3);
          } }], O = {}, B = [], T = 0; T < P.length; ++T)
            for (var C = P[T], I = C.bits, M = 0; M < I.length; ++M) {
              var U = C.name + "_" + I[M];
              if (B.push(U), O[U] = C.createMethod(I[M], C.padding), "sha3" !== C.name) {
                var R = C.name + I[M];
                B.push(R), O[R] = O[U];
              }
            }
          function j(e3, t3, r4) {
            this.blocks = [], this.s = [], this.padding = t3, this.outputBits = r4, this.reset = true, this.finalized = false, this.block = 0, this.start = 0, this.blockCount = 1600 - (e3 << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = r4 >> 5, this.extraBytes = (31 & r4) >> 3;
            for (var n2 = 0; n2 < 50; ++n2)
              this.s[n2] = 0;
          }
          function N(e3, t3, r4) {
            j.call(this, e3, t3, r4);
          }
          j.prototype.update = function(e3) {
            if (this.finalized)
              throw new Error("finalize already called");
            var t3, r4 = (0, o.default)(e3);
            if ("string" !== r4) {
              if ("object" !== r4)
                throw new Error(a);
              if (null === e3)
                throw new Error(a);
              if (l && e3.constructor === ArrayBuffer)
                e3 = new Uint8Array(e3);
              else if (!(Array.isArray(e3) || l && ArrayBuffer.isView(e3)))
                throw new Error(a);
              t3 = true;
            }
            for (var n2, i2, s2 = this.blocks, u2 = this.byteCount, c2 = e3.length, f2 = this.blockCount, d2 = 0, h2 = this.s; d2 < c2; ) {
              if (this.reset)
                for (this.reset = false, s2[0] = this.block, n2 = 1; n2 < f2 + 1; ++n2)
                  s2[n2] = 0;
              if (t3)
                for (n2 = this.start; d2 < c2 && n2 < u2; ++d2)
                  s2[n2 >> 2] |= e3[d2] << b[3 & n2++];
              else
                for (n2 = this.start; d2 < c2 && n2 < u2; ++d2)
                  (i2 = e3.charCodeAt(d2)) < 128 ? s2[n2 >> 2] |= i2 << b[3 & n2++] : i2 < 2048 ? (s2[n2 >> 2] |= (192 | i2 >> 6) << b[3 & n2++], s2[n2 >> 2] |= (128 | 63 & i2) << b[3 & n2++]) : i2 < 55296 || i2 >= 57344 ? (s2[n2 >> 2] |= (224 | i2 >> 12) << b[3 & n2++], s2[n2 >> 2] |= (128 | i2 >> 6 & 63) << b[3 & n2++], s2[n2 >> 2] |= (128 | 63 & i2) << b[3 & n2++]) : (i2 = 65536 + ((1023 & i2) << 10 | 1023 & e3.charCodeAt(++d2)), s2[n2 >> 2] |= (240 | i2 >> 18) << b[3 & n2++], s2[n2 >> 2] |= (128 | i2 >> 12 & 63) << b[3 & n2++], s2[n2 >> 2] |= (128 | i2 >> 6 & 63) << b[3 & n2++], s2[n2 >> 2] |= (128 | 63 & i2) << b[3 & n2++]);
              if (this.lastByteIndex = n2, n2 >= u2) {
                for (this.start = n2 - u2, this.block = s2[f2], n2 = 0; n2 < f2; ++n2)
                  h2[n2] ^= s2[n2];
                F(h2), this.reset = true;
              } else
                this.start = n2;
            }
            return this;
          }, j.prototype.encode = function(e3, t3) {
            var r4 = 255 & e3, n2 = 1, i2 = [r4];
            for (r4 = 255 & (e3 >>= 8); r4 > 0; )
              i2.unshift(r4), r4 = 255 & (e3 >>= 8), ++n2;
            return t3 ? i2.push(n2) : i2.unshift(n2), this.update(i2), i2.length;
          }, j.prototype.encodeString = function(e3) {
            var t3, r4 = (0, o.default)(e3);
            if ("string" !== r4) {
              if ("object" !== r4)
                throw new Error(a);
              if (null === e3)
                throw new Error(a);
              if (l && e3.constructor === ArrayBuffer)
                e3 = new Uint8Array(e3);
              else if (!(Array.isArray(e3) || l && ArrayBuffer.isView(e3)))
                throw new Error(a);
              t3 = true;
            }
            var n2 = 0, i2 = e3.length;
            if (t3)
              n2 = i2;
            else
              for (var s2 = 0; s2 < e3.length; ++s2) {
                var u2 = e3.charCodeAt(s2);
                u2 < 128 ? n2 += 1 : u2 < 2048 ? n2 += 2 : u2 < 55296 || u2 >= 57344 ? n2 += 3 : (u2 = 65536 + ((1023 & u2) << 10 | 1023 & e3.charCodeAt(++s2)), n2 += 4);
              }
            return n2 += this.encode(8 * n2), this.update(e3), n2;
          }, j.prototype.bytepad = function(e3, t3) {
            for (var r4 = this.encode(t3), n2 = 0; n2 < e3.length; ++n2)
              r4 += this.encodeString(e3[n2]);
            var i2 = t3 - r4 % t3, o2 = [];
            return o2.length = i2, this.update(o2), this;
          }, j.prototype.finalize = function() {
            if (!this.finalized) {
              this.finalized = true;
              var e3 = this.blocks, t3 = this.lastByteIndex, r4 = this.blockCount, n2 = this.s;
              if (e3[t3 >> 2] |= this.padding[3 & t3], this.lastByteIndex === this.byteCount)
                for (e3[0] = e3[r4], t3 = 1; t3 < r4 + 1; ++t3)
                  e3[t3] = 0;
              for (e3[r4 - 1] |= 2147483648, t3 = 0; t3 < r4; ++t3)
                n2[t3] ^= e3[t3];
              F(n2);
            }
          }, j.prototype.toString = j.prototype.hex = function() {
            this.finalize();
            for (var e3, t3 = this.blockCount, r4 = this.s, n2 = this.outputBlocks, i2 = this.extraBytes, o2 = 0, a2 = 0, s2 = ""; a2 < n2; ) {
              for (o2 = 0; o2 < t3 && a2 < n2; ++o2, ++a2)
                e3 = r4[o2], s2 += h[e3 >> 4 & 15] + h[15 & e3] + h[e3 >> 12 & 15] + h[e3 >> 8 & 15] + h[e3 >> 20 & 15] + h[e3 >> 16 & 15] + h[e3 >> 28 & 15] + h[e3 >> 24 & 15];
              a2 % t3 == 0 && (F(r4), o2 = 0);
            }
            return i2 && (e3 = r4[o2], s2 += h[e3 >> 4 & 15] + h[15 & e3], i2 > 1 && (s2 += h[e3 >> 12 & 15] + h[e3 >> 8 & 15]), i2 > 2 && (s2 += h[e3 >> 20 & 15] + h[e3 >> 16 & 15])), s2;
          }, j.prototype.arrayBuffer = function() {
            this.finalize();
            var e3, t3 = this.blockCount, r4 = this.s, n2 = this.outputBlocks, i2 = this.extraBytes, o2 = 0, a2 = 0, s2 = this.outputBits >> 3;
            e3 = i2 ? new ArrayBuffer(n2 + 1 << 2) : new ArrayBuffer(s2);
            for (var u2 = new Uint32Array(e3); a2 < n2; ) {
              for (o2 = 0; o2 < t3 && a2 < n2; ++o2, ++a2)
                u2[a2] = r4[o2];
              a2 % t3 == 0 && F(r4);
            }
            return i2 && (u2[o2] = r4[o2], e3 = e3.slice(0, s2)), e3;
          }, j.prototype.buffer = j.prototype.arrayBuffer, j.prototype.digest = j.prototype.array = function() {
            this.finalize();
            for (var e3, t3, r4 = this.blockCount, n2 = this.s, i2 = this.outputBlocks, o2 = this.extraBytes, a2 = 0, s2 = 0, u2 = []; s2 < i2; ) {
              for (a2 = 0; a2 < r4 && s2 < i2; ++a2, ++s2)
                e3 = s2 << 2, t3 = n2[a2], u2[e3] = 255 & t3, u2[e3 + 1] = t3 >> 8 & 255, u2[e3 + 2] = t3 >> 16 & 255, u2[e3 + 3] = t3 >> 24 & 255;
              s2 % r4 == 0 && F(n2);
            }
            return o2 && (e3 = s2 << 2, t3 = n2[a2], u2[e3] = 255 & t3, o2 > 1 && (u2[e3 + 1] = t3 >> 8 & 255), o2 > 2 && (u2[e3 + 2] = t3 >> 16 & 255)), u2;
          }, N.prototype = new j(), N.prototype.finalize = function() {
            return this.encode(this.outputBits, true), j.prototype.finalize.call(this);
          };
          var F = function(e3) {
            var t3, r4, n2, i2, o2, a2, s2, u2, c2, f2, d2, l2, h2, p2, b2, m2, v2, g2, w2, A2, k2, _2, S2, E2, x2, P2, O2, B2, T2, C2, I2, M2, U2, R2, j2, N2, F2, L, D, H, q, z, G, K, V, J, W, Y, X, Q, Z, $, ee, te, re, ne, ie, oe, ae, se, ue, ce, fe;
            for (n2 = 0; n2 < 48; n2 += 2)
              i2 = e3[0] ^ e3[10] ^ e3[20] ^ e3[30] ^ e3[40], o2 = e3[1] ^ e3[11] ^ e3[21] ^ e3[31] ^ e3[41], a2 = e3[2] ^ e3[12] ^ e3[22] ^ e3[32] ^ e3[42], s2 = e3[3] ^ e3[13] ^ e3[23] ^ e3[33] ^ e3[43], u2 = e3[4] ^ e3[14] ^ e3[24] ^ e3[34] ^ e3[44], c2 = e3[5] ^ e3[15] ^ e3[25] ^ e3[35] ^ e3[45], f2 = e3[6] ^ e3[16] ^ e3[26] ^ e3[36] ^ e3[46], d2 = e3[7] ^ e3[17] ^ e3[27] ^ e3[37] ^ e3[47], t3 = (l2 = e3[8] ^ e3[18] ^ e3[28] ^ e3[38] ^ e3[48]) ^ (a2 << 1 | s2 >>> 31), r4 = (h2 = e3[9] ^ e3[19] ^ e3[29] ^ e3[39] ^ e3[49]) ^ (s2 << 1 | a2 >>> 31), e3[0] ^= t3, e3[1] ^= r4, e3[10] ^= t3, e3[11] ^= r4, e3[20] ^= t3, e3[21] ^= r4, e3[30] ^= t3, e3[31] ^= r4, e3[40] ^= t3, e3[41] ^= r4, t3 = i2 ^ (u2 << 1 | c2 >>> 31), r4 = o2 ^ (c2 << 1 | u2 >>> 31), e3[2] ^= t3, e3[3] ^= r4, e3[12] ^= t3, e3[13] ^= r4, e3[22] ^= t3, e3[23] ^= r4, e3[32] ^= t3, e3[33] ^= r4, e3[42] ^= t3, e3[43] ^= r4, t3 = a2 ^ (f2 << 1 | d2 >>> 31), r4 = s2 ^ (d2 << 1 | f2 >>> 31), e3[4] ^= t3, e3[5] ^= r4, e3[14] ^= t3, e3[15] ^= r4, e3[24] ^= t3, e3[25] ^= r4, e3[34] ^= t3, e3[35] ^= r4, e3[44] ^= t3, e3[45] ^= r4, t3 = u2 ^ (l2 << 1 | h2 >>> 31), r4 = c2 ^ (h2 << 1 | l2 >>> 31), e3[6] ^= t3, e3[7] ^= r4, e3[16] ^= t3, e3[17] ^= r4, e3[26] ^= t3, e3[27] ^= r4, e3[36] ^= t3, e3[37] ^= r4, e3[46] ^= t3, e3[47] ^= r4, t3 = f2 ^ (i2 << 1 | o2 >>> 31), r4 = d2 ^ (o2 << 1 | i2 >>> 31), e3[8] ^= t3, e3[9] ^= r4, e3[18] ^= t3, e3[19] ^= r4, e3[28] ^= t3, e3[29] ^= r4, e3[38] ^= t3, e3[39] ^= r4, e3[48] ^= t3, e3[49] ^= r4, p2 = e3[0], b2 = e3[1], J = e3[11] << 4 | e3[10] >>> 28, W = e3[10] << 4 | e3[11] >>> 28, B2 = e3[20] << 3 | e3[21] >>> 29, T2 = e3[21] << 3 | e3[20] >>> 29, se = e3[31] << 9 | e3[30] >>> 23, ue = e3[30] << 9 | e3[31] >>> 23, z = e3[40] << 18 | e3[41] >>> 14, G = e3[41] << 18 | e3[40] >>> 14, R2 = e3[2] << 1 | e3[3] >>> 31, j2 = e3[3] << 1 | e3[2] >>> 31, m2 = e3[13] << 12 | e3[12] >>> 20, v2 = e3[12] << 12 | e3[13] >>> 20, Y = e3[22] << 10 | e3[23] >>> 22, X = e3[23] << 10 | e3[22] >>> 22, C2 = e3[33] << 13 | e3[32] >>> 19, I2 = e3[32] << 13 | e3[33] >>> 19, ce = e3[42] << 2 | e3[43] >>> 30, fe = e3[43] << 2 | e3[42] >>> 30, te = e3[5] << 30 | e3[4] >>> 2, re = e3[4] << 30 | e3[5] >>> 2, N2 = e3[14] << 6 | e3[15] >>> 26, F2 = e3[15] << 6 | e3[14] >>> 26, g2 = e3[25] << 11 | e3[24] >>> 21, w2 = e3[24] << 11 | e3[25] >>> 21, Q = e3[34] << 15 | e3[35] >>> 17, Z = e3[35] << 15 | e3[34] >>> 17, M2 = e3[45] << 29 | e3[44] >>> 3, U2 = e3[44] << 29 | e3[45] >>> 3, E2 = e3[6] << 28 | e3[7] >>> 4, x2 = e3[7] << 28 | e3[6] >>> 4, ne = e3[17] << 23 | e3[16] >>> 9, ie = e3[16] << 23 | e3[17] >>> 9, L = e3[26] << 25 | e3[27] >>> 7, D = e3[27] << 25 | e3[26] >>> 7, A2 = e3[36] << 21 | e3[37] >>> 11, k2 = e3[37] << 21 | e3[36] >>> 11, $ = e3[47] << 24 | e3[46] >>> 8, ee = e3[46] << 24 | e3[47] >>> 8, K = e3[8] << 27 | e3[9] >>> 5, V = e3[9] << 27 | e3[8] >>> 5, P2 = e3[18] << 20 | e3[19] >>> 12, O2 = e3[19] << 20 | e3[18] >>> 12, oe = e3[29] << 7 | e3[28] >>> 25, ae = e3[28] << 7 | e3[29] >>> 25, H = e3[38] << 8 | e3[39] >>> 24, q = e3[39] << 8 | e3[38] >>> 24, _2 = e3[48] << 14 | e3[49] >>> 18, S2 = e3[49] << 14 | e3[48] >>> 18, e3[0] = p2 ^ ~m2 & g2, e3[1] = b2 ^ ~v2 & w2, e3[10] = E2 ^ ~P2 & B2, e3[11] = x2 ^ ~O2 & T2, e3[20] = R2 ^ ~N2 & L, e3[21] = j2 ^ ~F2 & D, e3[30] = K ^ ~J & Y, e3[31] = V ^ ~W & X, e3[40] = te ^ ~ne & oe, e3[41] = re ^ ~ie & ae, e3[2] = m2 ^ ~g2 & A2, e3[3] = v2 ^ ~w2 & k2, e3[12] = P2 ^ ~B2 & C2, e3[13] = O2 ^ ~T2 & I2, e3[22] = N2 ^ ~L & H, e3[23] = F2 ^ ~D & q, e3[32] = J ^ ~Y & Q, e3[33] = W ^ ~X & Z, e3[42] = ne ^ ~oe & se, e3[43] = ie ^ ~ae & ue, e3[4] = g2 ^ ~A2 & _2, e3[5] = w2 ^ ~k2 & S2, e3[14] = B2 ^ ~C2 & M2, e3[15] = T2 ^ ~I2 & U2, e3[24] = L ^ ~H & z, e3[25] = D ^ ~q & G, e3[34] = Y ^ ~Q & $, e3[35] = X ^ ~Z & ee, e3[44] = oe ^ ~se & ce, e3[45] = ae ^ ~ue & fe, e3[6] = A2 ^ ~_2 & p2, e3[7] = k2 ^ ~S2 & b2, e3[16] = C2 ^ ~M2 & E2, e3[17] = I2 ^ ~U2 & x2, e3[26] = H ^ ~z & R2, e3[27] = q ^ ~G & j2, e3[36] = Q ^ ~$ & K, e3[37] = Z ^ ~ee & V, e3[46] = se ^ ~ce & te, e3[47] = ue ^ ~fe & re, e3[8] = _2 ^ ~p2 & m2, e3[9] = S2 ^ ~b2 & v2, e3[18] = M2 ^ ~E2 & P2, e3[19] = U2 ^ ~x2 & O2, e3[28] = z ^ ~R2 & N2, e3[29] = G ^ ~j2 & F2, e3[38] = $ ^ ~K & J, e3[39] = ee ^ ~V & W, e3[48] = ce ^ ~te & ne, e3[49] = fe ^ ~re & ie, e3[0] ^= y[n2], e3[1] ^= y[n2 + 1];
          };
          if (f)
            e2.exports = O;
          else {
            for (T = 0; T < B.length; ++T)
              u[B[T]] = O[B[T]];
            d && (void 0 === (n = (function() {
              return O;
            }).call(t2, r3, t2, e2)) || (e2.exports = n));
          }
        }();
      }, 9989: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer;
        Object.defineProperty(t2, "__esModule", { value: true }), t2.createHashFunction = function(e3) {
          return function(t3) {
            var r4 = e3();
            return r4.update(t3), n.from(r4.digest());
          };
        };
      }, 1243: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r3(9989), i = r3(3135);
        t2.keccak224 = n.createHashFunction(function() {
          return i("keccak224");
        }), t2.keccak256 = n.createHashFunction(function() {
          return i("keccak256");
        }), t2.keccak384 = n.createHashFunction(function() {
          return i("keccak384");
        }), t2.keccak512 = n.createHashFunction(function() {
          return i("keccak512");
        });
      }, 4893: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r3(5010);
        t2.getRandomBytes = function(e3) {
          return new Promise(function(t3, r4) {
            n(e3, function(e4, n2) {
              e4 ? r4(e4) : t3(n2);
            });
          });
        }, t2.getRandomBytesSync = function(e3) {
          return n(e3);
        };
      }, 6992: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true });
        var n = r3(7902), i = r3(4893);
        t2.createPrivateKey = function() {
          return e3 = this, t3 = void 0, o = function() {
            var e4;
            return function(e5, t4) {
              var r5, n2, i2, o2, a = { label: 0, sent: function() {
                if (1 & i2[0])
                  throw i2[1];
                return i2[1];
              }, trys: [], ops: [] };
              return o2 = { next: s(0), throw: s(1), return: s(2) }, "function" == typeof Symbol && (o2[Symbol.iterator] = function() {
                return this;
              }), o2;
              function s(o3) {
                return function(s2) {
                  return function(o4) {
                    if (r5)
                      throw new TypeError("Generator is already executing.");
                    for (; a; )
                      try {
                        if (r5 = 1, n2 && (i2 = 2 & o4[0] ? n2.return : o4[0] ? n2.throw || ((i2 = n2.return) && i2.call(n2), 0) : n2.next) && !(i2 = i2.call(n2, o4[1])).done)
                          return i2;
                        switch (n2 = 0, i2 && (o4 = [2 & o4[0], i2.value]), o4[0]) {
                          case 0:
                          case 1:
                            i2 = o4;
                            break;
                          case 4:
                            return a.label++, { value: o4[1], done: false };
                          case 5:
                            a.label++, n2 = o4[1], o4 = [0];
                            continue;
                          case 7:
                            o4 = a.ops.pop(), a.trys.pop();
                            continue;
                          default:
                            if (!((i2 = (i2 = a.trys).length > 0 && i2[i2.length - 1]) || 6 !== o4[0] && 2 !== o4[0])) {
                              a = 0;
                              continue;
                            }
                            if (3 === o4[0] && (!i2 || o4[1] > i2[0] && o4[1] < i2[3])) {
                              a.label = o4[1];
                              break;
                            }
                            if (6 === o4[0] && a.label < i2[1]) {
                              a.label = i2[1], i2 = o4;
                              break;
                            }
                            if (i2 && a.label < i2[2]) {
                              a.label = i2[2], a.ops.push(o4);
                              break;
                            }
                            i2[2] && a.ops.pop(), a.trys.pop();
                            continue;
                        }
                        o4 = t4.call(e5, a);
                      } catch (e6) {
                        o4 = [6, e6], n2 = 0;
                      } finally {
                        r5 = i2 = 0;
                      }
                    if (5 & o4[0])
                      throw o4[1];
                    return { value: o4[0] ? o4[1] : void 0, done: true };
                  }([o3, s2]);
                };
              }
            }(this, function(t4) {
              switch (t4.label) {
                case 0:
                  return [4, i.getRandomBytes(32)];
                case 1:
                  return e4 = t4.sent(), n.privateKeyVerify(e4) ? [2, e4] : [3, 0];
                case 2:
                  return [2];
              }
            });
          }, new ((r4 = void 0) || (r4 = Promise))(function(n2, i2) {
            function a(e4) {
              try {
                u(o.next(e4));
              } catch (e5) {
                i2(e5);
              }
            }
            function s(e4) {
              try {
                u(o.throw(e4));
              } catch (e5) {
                i2(e5);
              }
            }
            function u(e4) {
              var t4;
              e4.done ? n2(e4.value) : (t4 = e4.value, t4 instanceof r4 ? t4 : new r4(function(e5) {
                e5(t4);
              })).then(a, s);
            }
            u((o = o.apply(e3, t3 || [])).next());
          });
          var e3, t3, r4, o;
        }, t2.createPrivateKeySync = function() {
          for (; ; ) {
            var e3 = i.getRandomBytesSync(32);
            if (n.privateKeyVerify(e3))
              return e3;
          }
        }, function(e3) {
          for (var r4 in e3)
            t2.hasOwnProperty(r4) || (t2[r4] = e3[r4]);
        }(r3(7902));
      }, 1968: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer;
        Object.defineProperty(t2, "__esModule", { value: true }), t2.isZeroAddress = t2.zeroAddress = t2.importPublic = t2.privateToAddress = t2.privateToPublic = t2.publicToAddress = t2.pubToAddress = t2.isValidPublic = t2.isValidPrivate = t2.generateAddress2 = t2.generateAddress = t2.isValidChecksumAddress = t2.toChecksumAddress = t2.isValidAddress = t2.Account = void 0;
        var i, o = (i = r3(3894)) && i.__esModule ? i : { default: i }, a = r3(9100), s = r3(6992), u = r3(3271), c = r3(986), f = r3(3464), d = r3(9808), l = r3(5725), h = r3(5513), p = function() {
          function e3(e4, t3, r4, n2) {
            void 0 === e4 && (e4 = new a.BN(0)), void 0 === t3 && (t3 = new a.BN(0)), void 0 === r4 && (r4 = c.KECCAK256_RLP), void 0 === n2 && (n2 = c.KECCAK256_NULL), this.nonce = e4, this.balance = t3, this.stateRoot = r4, this.codeHash = n2, this._validate();
          }
          return e3.fromAccountData = function(t3) {
            var r4 = t3.nonce, n2 = t3.balance, i2 = t3.stateRoot, o2 = t3.codeHash;
            return new e3(r4 ? new a.BN((0, f.toBuffer)(r4)) : void 0, n2 ? new a.BN((0, f.toBuffer)(n2)) : void 0, i2 ? (0, f.toBuffer)(i2) : void 0, o2 ? (0, f.toBuffer)(o2) : void 0);
          }, e3.fromRlpSerializedAccount = function(e4) {
            var t3 = a.rlp.decode(e4);
            if (!Array.isArray(t3))
              throw new Error("Invalid serialized account input. Must be array");
            return this.fromValuesArray(t3);
          }, e3.fromValuesArray = function(t3) {
            var r4 = function(e4, t4) {
              var r5 = "function" == typeof Symbol && e4[Symbol.iterator];
              if (!r5)
                return e4;
              var n3, i3, o3 = r5.call(e4), a2 = [];
              try {
                for (; (void 0 === t4 || t4-- > 0) && !(n3 = o3.next()).done; )
                  a2.push(n3.value);
              } catch (e5) {
                i3 = { error: e5 };
              } finally {
                try {
                  n3 && !n3.done && (r5 = o3.return) && r5.call(o3);
                } finally {
                  if (i3)
                    throw i3.error;
                }
              }
              return a2;
            }(t3, 4), n2 = r4[0], i2 = r4[1], o2 = r4[2], s2 = r4[3];
            return new e3(new a.BN(n2), new a.BN(i2), o2, s2);
          }, e3.prototype._validate = function() {
            if (this.nonce.lt(new a.BN(0)))
              throw new Error("nonce must be greater than zero");
            if (this.balance.lt(new a.BN(0)))
              throw new Error("balance must be greater than zero");
            if (32 !== this.stateRoot.length)
              throw new Error("stateRoot must have a length of 32");
            if (32 !== this.codeHash.length)
              throw new Error("codeHash must have a length of 32");
          }, e3.prototype.raw = function() {
            return [(0, h.bnToUnpaddedBuffer)(this.nonce), (0, h.bnToUnpaddedBuffer)(this.balance), this.stateRoot, this.codeHash];
          }, e3.prototype.serialize = function() {
            return a.rlp.encode(this.raw());
          }, e3.prototype.isContract = function() {
            return !this.codeHash.equals(c.KECCAK256_NULL);
          }, e3.prototype.isEmpty = function() {
            return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(c.KECCAK256_NULL);
          }, e3;
        }();
        t2.Account = p, t2.isValidAddress = function(e3) {
          try {
            (0, l.assertIsString)(e3);
          } catch (e4) {
            return false;
          }
          return /^0x[0-9a-fA-F]{40}$/.test(e3);
        }, t2.toChecksumAddress = function(e3, t3) {
          (0, l.assertIsHexString)(e3);
          var r4 = (0, u.stripHexPrefix)(e3).toLowerCase(), n2 = "";
          t3 && (n2 = (0, h.toType)(t3, h.TypeOutput.BN).toString() + "0x");
          for (var i2 = (0, d.keccakFromString)(n2 + r4).toString("hex"), o2 = "0x", a2 = 0; a2 < r4.length; a2++)
            parseInt(i2[a2], 16) >= 8 ? o2 += r4[a2].toUpperCase() : o2 += r4[a2];
          return o2;
        }, t2.isValidChecksumAddress = function(e3, r4) {
          return (0, t2.isValidAddress)(e3) && (0, t2.toChecksumAddress)(e3, r4) === e3;
        }, t2.generateAddress = function(e3, t3) {
          (0, l.assertIsBuffer)(e3), (0, l.assertIsBuffer)(t3);
          var r4 = new a.BN(t3);
          return r4.isZero() ? (0, d.rlphash)([e3, null]).slice(-20) : (0, d.rlphash)([e3, n.from(r4.toArray())]).slice(-20);
        }, t2.generateAddress2 = function(e3, t3, r4) {
          return (0, l.assertIsBuffer)(e3), (0, l.assertIsBuffer)(t3), (0, l.assertIsBuffer)(r4), (0, o.default)(20 === e3.length), (0, o.default)(32 === t3.length), (0, d.keccak256)(n.concat([n.from("ff", "hex"), e3, t3, (0, d.keccak256)(r4)])).slice(-20);
        }, t2.isValidPrivate = function(e3) {
          return (0, s.privateKeyVerify)(e3);
        }, t2.isValidPublic = function(e3, t3) {
          return void 0 === t3 && (t3 = false), (0, l.assertIsBuffer)(e3), 64 === e3.length ? (0, s.publicKeyVerify)(n.concat([n.from([4]), e3])) : !!t3 && (0, s.publicKeyVerify)(e3);
        }, t2.pubToAddress = function(e3, t3) {
          return void 0 === t3 && (t3 = false), (0, l.assertIsBuffer)(e3), t3 && 64 !== e3.length && (e3 = n.from((0, s.publicKeyConvert)(e3, false).slice(1))), (0, o.default)(64 === e3.length), (0, d.keccak)(e3).slice(-20);
        }, t2.publicToAddress = t2.pubToAddress, t2.privateToPublic = function(e3) {
          return (0, l.assertIsBuffer)(e3), n.from((0, s.publicKeyCreate)(e3, false)).slice(1);
        }, t2.privateToAddress = function(e3) {
          return (0, t2.publicToAddress)((0, t2.privateToPublic)(e3));
        }, t2.importPublic = function(e3) {
          return (0, l.assertIsBuffer)(e3), 64 !== e3.length && (e3 = n.from((0, s.publicKeyConvert)(e3, false).slice(1))), e3;
        }, t2.zeroAddress = function() {
          var e3 = (0, f.zeros)(20);
          return (0, f.bufferToHex)(e3);
        }, t2.isZeroAddress = function(e3) {
          try {
            (0, l.assertIsString)(e3);
          } catch (e4) {
            return false;
          }
          return (0, t2.zeroAddress)() === e3;
        };
      }, 1984: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer;
        Object.defineProperty(t2, "__esModule", { value: true }), t2.Address = void 0;
        var i, o = (i = r3(3894)) && i.__esModule ? i : { default: i }, a = r3(9100), s = r3(3464), u = r3(1968), c = function() {
          function e3(e4) {
            (0, o.default)(20 === e4.length, "Invalid address length"), this.buf = e4;
          }
          return e3.zero = function() {
            return new e3((0, s.zeros)(20));
          }, e3.fromString = function(t3) {
            return (0, o.default)((0, u.isValidAddress)(t3), "Invalid address"), new e3((0, s.toBuffer)(t3));
          }, e3.fromPublicKey = function(t3) {
            return (0, o.default)(n.isBuffer(t3), "Public key should be Buffer"), new e3((0, u.pubToAddress)(t3));
          }, e3.fromPrivateKey = function(t3) {
            return (0, o.default)(n.isBuffer(t3), "Private key should be Buffer"), new e3((0, u.privateToAddress)(t3));
          }, e3.generate = function(t3, r4) {
            return (0, o.default)(a.BN.isBN(r4)), new e3((0, u.generateAddress)(t3.buf, r4.toArrayLike(n)));
          }, e3.generate2 = function(t3, r4, i2) {
            return (0, o.default)(n.isBuffer(r4)), (0, o.default)(n.isBuffer(i2)), new e3((0, u.generateAddress2)(t3.buf, r4, i2));
          }, e3.prototype.equals = function(e4) {
            return this.buf.equals(e4.buf);
          }, e3.prototype.isZero = function() {
            return this.equals(e3.zero());
          }, e3.prototype.isPrecompileOrSystemAddress = function() {
            var e4 = new a.BN(this.buf), t3 = new a.BN(0), r4 = new a.BN("ffff", "hex");
            return e4.gte(t3) && e4.lte(r4);
          }, e3.prototype.toString = function() {
            return "0x" + this.buf.toString("hex");
          }, e3.prototype.toBuffer = function() {
            return n.from(this.buf);
          }, e3;
        }();
        t2.Address = c;
      }, 3464: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = function(e3, t3) {
          var r4 = "function" == typeof Symbol && e3[Symbol.iterator];
          if (!r4)
            return e3;
          var n2, i2, o2 = r4.call(e3), a2 = [];
          try {
            for (; (void 0 === t3 || t3-- > 0) && !(n2 = o2.next()).done; )
              a2.push(n2.value);
          } catch (e4) {
            i2 = { error: e4 };
          } finally {
            try {
              n2 && !n2.done && (r4 = o2.return) && r4.call(o2);
            } finally {
              if (i2)
                throw i2.error;
            }
          }
          return a2;
        };
        Object.defineProperty(t2, "__esModule", { value: true }), t2.bufArrToArr = t2.arrToBufArr = t2.validateNoLeadingZeroes = t2.baToJSON = t2.toUtf8 = t2.addHexPrefix = t2.toUnsigned = t2.fromSigned = t2.bufferToHex = t2.bufferToInt = t2.toBuffer = t2.unpadHexString = t2.unpadArray = t2.unpadBuffer = t2.setLengthRight = t2.setLengthLeft = t2.zeros = t2.intToBuffer = t2.intToHex = void 0;
        var o = r3(9100), a = r3(3271), s = r3(5725);
        t2.intToHex = function(e3) {
          if (!Number.isSafeInteger(e3) || e3 < 0)
            throw new Error("Received an invalid integer type: ".concat(e3));
          return "0x".concat(e3.toString(16));
        }, t2.intToBuffer = function(e3) {
          var r4 = (0, t2.intToHex)(e3);
          return n.from((0, a.padToEven)(r4.slice(2)), "hex");
        }, t2.zeros = function(e3) {
          return n.allocUnsafe(e3).fill(0);
        };
        var u = function(e3, r4, n2) {
          var i2 = (0, t2.zeros)(r4);
          return n2 ? e3.length < r4 ? (e3.copy(i2), i2) : e3.slice(0, r4) : e3.length < r4 ? (e3.copy(i2, r4 - e3.length), i2) : e3.slice(-r4);
        };
        t2.setLengthLeft = function(e3, t3) {
          return (0, s.assertIsBuffer)(e3), u(e3, t3, false);
        }, t2.setLengthRight = function(e3, t3) {
          return (0, s.assertIsBuffer)(e3), u(e3, t3, true);
        };
        var c = function(e3) {
          for (var t3 = e3[0]; e3.length > 0 && "0" === t3.toString(); )
            t3 = (e3 = e3.slice(1))[0];
          return e3;
        };
        t2.unpadBuffer = function(e3) {
          return (0, s.assertIsBuffer)(e3), c(e3);
        }, t2.unpadArray = function(e3) {
          return (0, s.assertIsArray)(e3), c(e3);
        }, t2.unpadHexString = function(e3) {
          return (0, s.assertIsHexString)(e3), e3 = (0, a.stripHexPrefix)(e3), c(e3);
        }, t2.toBuffer = function(e3) {
          if (null == e3)
            return n.allocUnsafe(0);
          if (n.isBuffer(e3))
            return n.from(e3);
          if (Array.isArray(e3) || e3 instanceof Uint8Array)
            return n.from(e3);
          if ("string" == typeof e3) {
            if (!(0, a.isHexString)(e3))
              throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(e3));
            return n.from((0, a.padToEven)((0, a.stripHexPrefix)(e3)), "hex");
          }
          if ("number" == typeof e3)
            return (0, t2.intToBuffer)(e3);
          if (o.BN.isBN(e3)) {
            if (e3.isNeg())
              throw new Error("Cannot convert negative BN to buffer. Given: ".concat(e3));
            return e3.toArrayLike(n);
          }
          if (e3.toArray)
            return n.from(e3.toArray());
          if (e3.toBuffer)
            return n.from(e3.toBuffer());
          throw new Error("invalid type");
        }, t2.bufferToInt = function(e3) {
          return new o.BN((0, t2.toBuffer)(e3)).toNumber();
        }, t2.bufferToHex = function(e3) {
          return "0x" + (e3 = (0, t2.toBuffer)(e3)).toString("hex");
        }, t2.fromSigned = function(e3) {
          return new o.BN(e3).fromTwos(256);
        }, t2.toUnsigned = function(e3) {
          return n.from(e3.toTwos(256).toArray());
        }, t2.addHexPrefix = function(e3) {
          return "string" != typeof e3 || (0, a.isHexPrefixed)(e3) ? e3 : "0x" + e3;
        }, t2.toUtf8 = function(e3) {
          if ((e3 = (0, a.stripHexPrefix)(e3)).length % 2 != 0)
            throw new Error("Invalid non-even hex string input for toUtf8() provided");
          return n.from(e3.replace(/^(00)+|(00)+$/g, ""), "hex").toString("utf8");
        }, t2.baToJSON = function(e3) {
          if (n.isBuffer(e3))
            return "0x".concat(e3.toString("hex"));
          if (e3 instanceof Array) {
            for (var r4 = [], i2 = 0; i2 < e3.length; i2++)
              r4.push((0, t2.baToJSON)(e3[i2]));
            return r4;
          }
        }, t2.validateNoLeadingZeroes = function(e3) {
          var t3, r4;
          try {
            for (var n2 = function(e4) {
              var t4 = "function" == typeof Symbol && Symbol.iterator, r5 = t4 && e4[t4], n3 = 0;
              if (r5)
                return r5.call(e4);
              if (e4 && "number" == typeof e4.length)
                return { next: function() {
                  return e4 && n3 >= e4.length && (e4 = void 0), { value: e4 && e4[n3++], done: !e4 };
                } };
              throw new TypeError(t4 ? "Object is not iterable." : "Symbol.iterator is not defined.");
            }(Object.entries(e3)), o2 = n2.next(); !o2.done; o2 = n2.next()) {
              var a2 = i(o2.value, 2), s2 = a2[0], u2 = a2[1];
              if (void 0 !== u2 && u2.length > 0 && 0 === u2[0])
                throw new Error("".concat(s2, " cannot have leading zeroes, received: ").concat(u2.toString("hex")));
            }
          } catch (e4) {
            t3 = { error: e4 };
          } finally {
            try {
              o2 && !o2.done && (r4 = n2.return) && r4.call(n2);
            } finally {
              if (t3)
                throw t3.error;
            }
          }
        }, t2.arrToBufArr = function e3(t3) {
          return Array.isArray(t3) ? t3.map(function(t4) {
            return e3(t4);
          }) : n.from(t3);
        }, t2.bufArrToArr = function e3(t3) {
          return Array.isArray(t3) ? t3.map(function(t4) {
            return e3(t4);
          }) : Uint8Array.from(null != t3 ? t3 : []);
        };
      }, 986: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.KECCAK256_RLP = t2.KECCAK256_RLP_S = t2.KECCAK256_RLP_ARRAY = t2.KECCAK256_RLP_ARRAY_S = t2.KECCAK256_NULL = t2.KECCAK256_NULL_S = t2.TWO_POW256 = t2.MAX_INTEGER = t2.MAX_UINT64 = void 0;
        var n = r3(9033), i = r3(9100);
        t2.MAX_UINT64 = new i.BN("ffffffffffffffff", 16), t2.MAX_INTEGER = new i.BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16), t2.TWO_POW256 = new i.BN("10000000000000000000000000000000000000000000000000000000000000000", 16), t2.KECCAK256_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470", t2.KECCAK256_NULL = n.Buffer.from(t2.KECCAK256_NULL_S, "hex"), t2.KECCAK256_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347", t2.KECCAK256_RLP_ARRAY = n.Buffer.from(t2.KECCAK256_RLP_ARRAY_S, "hex"), t2.KECCAK256_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421", t2.KECCAK256_RLP = n.Buffer.from(t2.KECCAK256_RLP_S, "hex");
      }, 9100: (e2, t2, r3) => {
        "use strict";
        var n = Object.create ? function(e3, t3, r4, n2) {
          void 0 === n2 && (n2 = r4);
          var i2 = Object.getOwnPropertyDescriptor(t3, r4);
          i2 && !("get" in i2 ? !t3.__esModule : i2.writable || i2.configurable) || (i2 = { enumerable: true, get: function() {
            return t3[r4];
          } }), Object.defineProperty(e3, n2, i2);
        } : function(e3, t3, r4, n2) {
          void 0 === n2 && (n2 = r4), e3[n2] = t3[r4];
        }, i = Object.create ? function(e3, t3) {
          Object.defineProperty(e3, "default", { enumerable: true, value: t3 });
        } : function(e3, t3) {
          e3.default = t3;
        };
        Object.defineProperty(t2, "__esModule", { value: true }), t2.rlp = t2.BN = void 0;
        var o, a = (o = r3(1734)) && o.__esModule ? o : { default: o };
        t2.BN = a.default;
        var s = function(e3) {
          if (e3 && e3.__esModule)
            return e3;
          var t3 = {};
          if (null != e3)
            for (var r4 in e3)
              "default" !== r4 && Object.prototype.hasOwnProperty.call(e3, r4) && n(t3, e3, r4);
          return i(t3, e3), t3;
        }(r3(6905));
        t2.rlp = s;
      }, 9808: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer;
        Object.defineProperty(t2, "__esModule", { value: true }), t2.rlphash = t2.ripemd160FromArray = t2.ripemd160FromString = t2.ripemd160 = t2.sha256FromArray = t2.sha256FromString = t2.sha256 = t2.keccakFromArray = t2.keccakFromHexString = t2.keccakFromString = t2.keccak256 = t2.keccak = void 0;
        var i = r3(1243), o = r3(5866), a = r3(9100), s = r3(3464), u = r3(5725);
        t2.keccak = function(e3, t3) {
          switch (void 0 === t3 && (t3 = 256), (0, u.assertIsBuffer)(e3), t3) {
            case 224:
              return (0, i.keccak224)(e3);
            case 256:
              return (0, i.keccak256)(e3);
            case 384:
              return (0, i.keccak384)(e3);
            case 512:
              return (0, i.keccak512)(e3);
            default:
              throw new Error("Invald algorithm: keccak".concat(t3));
          }
        }, t2.keccak256 = function(e3) {
          return (0, t2.keccak)(e3);
        }, t2.keccakFromString = function(e3, r4) {
          void 0 === r4 && (r4 = 256), (0, u.assertIsString)(e3);
          var i2 = n.from(e3, "utf8");
          return (0, t2.keccak)(i2, r4);
        }, t2.keccakFromHexString = function(e3, r4) {
          return void 0 === r4 && (r4 = 256), (0, u.assertIsHexString)(e3), (0, t2.keccak)((0, s.toBuffer)(e3), r4);
        }, t2.keccakFromArray = function(e3, r4) {
          return void 0 === r4 && (r4 = 256), (0, u.assertIsArray)(e3), (0, t2.keccak)((0, s.toBuffer)(e3), r4);
        };
        var c = function(e3) {
          return e3 = (0, s.toBuffer)(e3), o("sha256").update(e3).digest();
        };
        t2.sha256 = function(e3) {
          return (0, u.assertIsBuffer)(e3), c(e3);
        }, t2.sha256FromString = function(e3) {
          return (0, u.assertIsString)(e3), c(e3);
        }, t2.sha256FromArray = function(e3) {
          return (0, u.assertIsArray)(e3), c(e3);
        };
        var f = function(e3, t3) {
          e3 = (0, s.toBuffer)(e3);
          var r4 = o("rmd160").update(e3).digest();
          return true === t3 ? (0, s.setLengthLeft)(r4, 32) : r4;
        };
        t2.ripemd160 = function(e3, t3) {
          return (0, u.assertIsBuffer)(e3), f(e3, t3);
        }, t2.ripemd160FromString = function(e3, t3) {
          return (0, u.assertIsString)(e3), f(e3, t3);
        }, t2.ripemd160FromArray = function(e3, t3) {
          return (0, u.assertIsArray)(e3), f(e3, t3);
        }, t2.rlphash = function(e3) {
          return (0, t2.keccak)(a.rlp.encode(e3));
        };
      }, 5725: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer;
        Object.defineProperty(t2, "__esModule", { value: true }), t2.assertIsString = t2.assertIsArray = t2.assertIsBuffer = t2.assertIsHexString = void 0;
        var i = r3(3271);
        t2.assertIsHexString = function(e3) {
          if (!(0, i.isHexString)(e3)) {
            var t3 = "This method only supports 0x-prefixed hex strings but input was: ".concat(e3);
            throw new Error(t3);
          }
        }, t2.assertIsBuffer = function(e3) {
          if (!n.isBuffer(e3)) {
            var t3 = "This method only supports Buffer but input was: ".concat(e3);
            throw new Error(t3);
          }
        }, t2.assertIsArray = function(e3) {
          if (!Array.isArray(e3)) {
            var t3 = "This method only supports number arrays but input was: ".concat(e3);
            throw new Error(t3);
          }
        }, t2.assertIsString = function(e3) {
          if ("string" != typeof e3) {
            var t3 = "This method only supports strings but input was: ".concat(e3);
            throw new Error(t3);
          }
        };
      }, 3062: (e2, t2, r3) => {
        "use strict";
        var n = Object.create ? function(e3, t3, r4, n2) {
          void 0 === n2 && (n2 = r4);
          var i2 = Object.getOwnPropertyDescriptor(t3, r4);
          i2 && !("get" in i2 ? !t3.__esModule : i2.writable || i2.configurable) || (i2 = { enumerable: true, get: function() {
            return t3[r4];
          } }), Object.defineProperty(e3, n2, i2);
        } : function(e3, t3, r4, n2) {
          void 0 === n2 && (n2 = r4), e3[n2] = t3[r4];
        }, i = function(e3, t3) {
          for (var r4 in e3)
            "default" === r4 || Object.prototype.hasOwnProperty.call(t3, r4) || n(t3, e3, r4);
        };
        Object.defineProperty(t2, "__esModule", { value: true }), t2.isHexString = t2.getKeys = t2.fromAscii = t2.fromUtf8 = t2.toAscii = t2.arrayContainsArray = t2.getBinarySize = t2.padToEven = t2.stripHexPrefix = t2.isHexPrefixed = void 0, i(r3(986), t2), i(r3(1968), t2), i(r3(1984), t2), i(r3(9808), t2), i(r3(6081), t2), i(r3(3464), t2), i(r3(1677), t2), i(r3(9100), t2), i(r3(5513), t2);
        var o = r3(3271);
        Object.defineProperty(t2, "isHexPrefixed", { enumerable: true, get: function() {
          return o.isHexPrefixed;
        } }), Object.defineProperty(t2, "stripHexPrefix", { enumerable: true, get: function() {
          return o.stripHexPrefix;
        } }), Object.defineProperty(t2, "padToEven", { enumerable: true, get: function() {
          return o.padToEven;
        } }), Object.defineProperty(t2, "getBinarySize", { enumerable: true, get: function() {
          return o.getBinarySize;
        } }), Object.defineProperty(t2, "arrayContainsArray", { enumerable: true, get: function() {
          return o.arrayContainsArray;
        } }), Object.defineProperty(t2, "toAscii", { enumerable: true, get: function() {
          return o.toAscii;
        } }), Object.defineProperty(t2, "fromUtf8", { enumerable: true, get: function() {
          return o.fromUtf8;
        } }), Object.defineProperty(t2, "fromAscii", { enumerable: true, get: function() {
          return o.fromAscii;
        } }), Object.defineProperty(t2, "getKeys", { enumerable: true, get: function() {
          return o.getKeys;
        } }), Object.defineProperty(t2, "isHexString", { enumerable: true, get: function() {
          return o.isHexString;
        } });
      }, 3271: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(8847)(r3(3355));
        function o(e3) {
          if ("string" != typeof e3)
            throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat((0, i.default)(e3)));
          return "0" === e3[0] && "x" === e3[1];
        }
        function a(e3) {
          var t3 = e3;
          if ("string" != typeof t3)
            throw new Error("[padToEven] value must be type 'string', received ".concat((0, i.default)(t3)));
          return t3.length % 2 && (t3 = "0".concat(t3)), t3;
        }
        Object.defineProperty(t2, "__esModule", { value: true }), t2.isHexString = t2.getKeys = t2.fromAscii = t2.fromUtf8 = t2.toAscii = t2.arrayContainsArray = t2.getBinarySize = t2.padToEven = t2.stripHexPrefix = t2.isHexPrefixed = void 0, t2.isHexPrefixed = o, t2.stripHexPrefix = function(e3) {
          if ("string" != typeof e3)
            throw new Error("[stripHexPrefix] input must be type 'string', received ".concat((0, i.default)(e3)));
          return o(e3) ? e3.slice(2) : e3;
        }, t2.padToEven = a, t2.getBinarySize = function(e3) {
          if ("string" != typeof e3)
            throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat((0, i.default)(e3)));
          return n.byteLength(e3, "utf8");
        }, t2.arrayContainsArray = function(e3, t3, r4) {
          if (true !== Array.isArray(e3))
            throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat((0, i.default)(e3), "'"));
          if (true !== Array.isArray(t3))
            throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat((0, i.default)(t3), "'"));
          return t3[r4 ? "some" : "every"](function(t4) {
            return e3.indexOf(t4) >= 0;
          });
        }, t2.toAscii = function(e3) {
          var t3 = "", r4 = 0, n2 = e3.length;
          for ("0x" === e3.substring(0, 2) && (r4 = 2); r4 < n2; r4 += 2) {
            var i2 = parseInt(e3.substr(r4, 2), 16);
            t3 += String.fromCharCode(i2);
          }
          return t3;
        }, t2.fromUtf8 = function(e3) {
          var t3 = n.from(e3, "utf8");
          return "0x".concat(a(t3.toString("hex")).replace(/^0+|0+$/g, ""));
        }, t2.fromAscii = function(e3) {
          for (var t3 = "", r4 = 0; r4 < e3.length; r4++) {
            var n2 = e3.charCodeAt(r4).toString(16);
            t3 += n2.length < 2 ? "0".concat(n2) : n2;
          }
          return "0x".concat(t3);
        }, t2.getKeys = function(e3, t3, r4) {
          if (!Array.isArray(e3))
            throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat((0, i.default)(e3)));
          if ("string" != typeof t3)
            throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat((0, i.default)(e3)));
          for (var n2 = [], o2 = 0; o2 < e3.length; o2++) {
            var a2 = e3[o2][t3];
            if (r4 && !a2)
              a2 = "";
            else if ("string" != typeof a2)
              throw new Error("invalid abi - expected type 'string', received ".concat((0, i.default)(a2)));
            n2.push(a2);
          }
          return n2;
        }, t2.isHexString = function(e3, t3) {
          return !("string" != typeof e3 || !e3.match(/^0x[0-9A-Fa-f]*$/) || t3 && e3.length !== 2 + 2 * t3);
        };
      }, 1677: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(8847)(r3(3355));
        Object.defineProperty(t2, "__esModule", { value: true }), t2.defineProperties = void 0;
        var o, a = (o = r3(3894)) && o.__esModule ? o : { default: o }, s = r3(3271), u = r3(9100), c = r3(3464);
        t2.defineProperties = function(e3, t3, r4) {
          if (e3.raw = [], e3._fields = [], e3.toJSON = function(t4) {
            if (void 0 === t4 && (t4 = false), t4) {
              var r5 = {};
              return e3._fields.forEach(function(t5) {
                r5[t5] = "0x".concat(e3[t5].toString("hex"));
              }), r5;
            }
            return (0, c.baToJSON)(e3.raw);
          }, e3.serialize = function() {
            return u.rlp.encode(e3.raw);
          }, t3.forEach(function(t4, r5) {
            function i2() {
              return e3.raw[r5];
            }
            function o3(i3) {
              "00" !== (i3 = (0, c.toBuffer)(i3)).toString("hex") || t4.allowZero || (i3 = n.allocUnsafe(0)), t4.allowLess && t4.length ? (i3 = (0, c.unpadBuffer)(i3), (0, a.default)(t4.length >= i3.length, "The field ".concat(t4.name, " must not have more ").concat(t4.length, " bytes"))) : t4.allowZero && 0 === i3.length || !t4.length || (0, a.default)(t4.length === i3.length, "The field ".concat(t4.name, " must have byte length of ").concat(t4.length)), e3.raw[r5] = i3;
            }
            e3._fields.push(t4.name), Object.defineProperty(e3, t4.name, { enumerable: true, configurable: true, get: i2, set: o3 }), t4.default && (e3[t4.name] = t4.default), t4.alias && Object.defineProperty(e3, t4.alias, { enumerable: false, configurable: true, set: o3, get: i2 });
          }), r4)
            if ("string" == typeof r4 && (r4 = n.from((0, s.stripHexPrefix)(r4), "hex")), n.isBuffer(r4) && (r4 = u.rlp.decode(r4)), Array.isArray(r4)) {
              if (r4.length > e3._fields.length)
                throw new Error("wrong number of fields in data");
              r4.forEach(function(t4, r5) {
                e3[e3._fields[r5]] = (0, c.toBuffer)(t4);
              });
            } else {
              if ("object" !== (0, i.default)(r4))
                throw new Error("invalid data");
              var o2 = Object.keys(r4);
              t3.forEach(function(t4) {
                -1 !== o2.indexOf(t4.name) && (e3[t4.name] = r4[t4.name]), -1 !== o2.indexOf(t4.alias) && (e3[t4.alias] = r4[t4.alias]);
              });
            }
        };
      }, 6081: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer;
        Object.defineProperty(t2, "__esModule", { value: true }), t2.hashPersonalMessage = t2.isValidSignature = t2.fromRpcSig = t2.toCompactSig = t2.toRpcSig = t2.ecrecover = t2.ecsign = void 0;
        var i = r3(6992), o = r3(9100), a = r3(3464), s = r3(9808), u = r3(5725), c = r3(5513);
        function f(e3, t3) {
          var r4 = (0, c.toType)(e3, c.TypeOutput.BN);
          if (r4.eqn(0) || r4.eqn(1))
            return (0, c.toType)(e3, c.TypeOutput.BN);
          if (!t3)
            return r4.subn(27);
          var n2 = (0, c.toType)(t3, c.TypeOutput.BN);
          return r4.sub(n2.muln(2).addn(35));
        }
        function d(e3) {
          var t3 = new o.BN(e3);
          return t3.eqn(0) || t3.eqn(1);
        }
        t2.ecsign = function(e3, t3, r4) {
          var o2 = (0, i.ecdsaSign)(e3, t3), a2 = o2.signature, s2 = o2.recid, u2 = n.from(a2.slice(0, 32)), f2 = n.from(a2.slice(32, 64));
          if (!r4 || "number" == typeof r4) {
            if (r4 && !Number.isSafeInteger(r4))
              throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
            return { r: u2, s: f2, v: r4 ? s2 + (2 * r4 + 35) : s2 + 27 };
          }
          return { r: u2, s: f2, v: (0, c.toType)(r4, c.TypeOutput.BN).muln(2).addn(35).addn(s2).toArrayLike(n) };
        }, t2.ecrecover = function(e3, t3, r4, o2, s2) {
          var u2 = n.concat([(0, a.setLengthLeft)(r4, 32), (0, a.setLengthLeft)(o2, 32)], 64), c2 = f(t3, s2);
          if (!d(c2))
            throw new Error("Invalid signature v value");
          var l = (0, i.ecdsaRecover)(u2, c2.toNumber(), e3);
          return n.from((0, i.publicKeyConvert)(l, false).slice(1));
        }, t2.toRpcSig = function(e3, t3, r4, i2) {
          if (!d(f(e3, i2)))
            throw new Error("Invalid signature v value");
          return (0, a.bufferToHex)(n.concat([(0, a.setLengthLeft)(t3, 32), (0, a.setLengthLeft)(r4, 32), (0, a.toBuffer)(e3)]));
        }, t2.toCompactSig = function(e3, t3, r4, i2) {
          if (!d(f(e3, i2)))
            throw new Error("Invalid signature v value");
          var o2 = (0, c.toType)(e3, c.TypeOutput.Number), s2 = r4;
          return (o2 > 28 && o2 % 2 == 1 || 1 === o2 || 28 === o2) && ((s2 = n.from(r4))[0] |= 128), (0, a.bufferToHex)(n.concat([(0, a.setLengthLeft)(t3, 32), (0, a.setLengthLeft)(s2, 32)]));
        }, t2.fromRpcSig = function(e3) {
          var t3, r4, n2, i2 = (0, a.toBuffer)(e3);
          if (i2.length >= 65)
            t3 = i2.slice(0, 32), r4 = i2.slice(32, 64), n2 = (0, a.bufferToInt)(i2.slice(64));
          else {
            if (64 !== i2.length)
              throw new Error("Invalid signature length");
            t3 = i2.slice(0, 32), r4 = i2.slice(32, 64), n2 = (0, a.bufferToInt)(i2.slice(32, 33)) >> 7, r4[0] &= 127;
          }
          return n2 < 27 && (n2 += 27), { v: n2, r: t3, s: r4 };
        }, t2.isValidSignature = function(e3, t3, r4, n2, i2) {
          void 0 === n2 && (n2 = true);
          var a2 = new o.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16), s2 = new o.BN("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", 16);
          if (32 !== t3.length || 32 !== r4.length)
            return false;
          if (!d(f(e3, i2)))
            return false;
          var u2 = new o.BN(t3), c2 = new o.BN(r4);
          return !(u2.isZero() || u2.gt(s2) || c2.isZero() || c2.gt(s2) || n2 && 1 === c2.cmp(a2));
        }, t2.hashPersonalMessage = function(e3) {
          (0, u.assertIsBuffer)(e3);
          var t3 = n.from("Ethereum Signed Message:\n".concat(e3.length), "utf-8");
          return (0, s.keccak)(n.concat([t3, e3]));
        };
      }, 5513: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer;
        Object.defineProperty(t2, "__esModule", { value: true }), t2.toType = t2.TypeOutput = t2.bnToRlp = t2.bnToUnpaddedBuffer = t2.bnToHex = void 0;
        var i, o = r3(9100), a = r3(3271), s = r3(3464);
        function u(e3) {
          return (0, s.unpadBuffer)(e3.toArrayLike(n));
        }
        t2.bnToHex = function(e3) {
          return "0x".concat(e3.toString(16));
        }, t2.bnToUnpaddedBuffer = u, t2.bnToRlp = function(e3) {
          return u(e3);
        }, function(e3) {
          e3[e3.Number = 0] = "Number", e3[e3.BN = 1] = "BN", e3[e3.Buffer = 2] = "Buffer", e3[e3.PrefixedHexString = 3] = "PrefixedHexString";
        }(i = t2.TypeOutput || (t2.TypeOutput = {})), t2.toType = function(e3, t3) {
          if (null === e3)
            return null;
          if (void 0 !== e3) {
            if ("string" == typeof e3 && !(0, a.isHexString)(e3))
              throw new Error("A string must be provided with a 0x-prefix, given: ".concat(e3));
            if ("number" == typeof e3 && !Number.isSafeInteger(e3))
              throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
            var r4 = (0, s.toBuffer)(e3);
            if (t3 === i.Buffer)
              return r4;
            if (t3 === i.BN)
              return new o.BN(r4);
            if (t3 === i.Number) {
              var n2 = new o.BN(r4), u2 = new o.BN(Number.MAX_SAFE_INTEGER.toString());
              if (n2.gt(u2))
                throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");
              return n2.toNumber();
            }
            return "0x".concat(r4.toString("hex"));
          }
        };
      }, 7130: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(1734), o = r3(7277), a = new i(0), s = new i(-1), u = { noether: "0", wei: "1", kwei: "1000", Kwei: "1000", babbage: "1000", femtoether: "1000", mwei: "1000000", Mwei: "1000000", lovelace: "1000000", picoether: "1000000", gwei: "1000000000", Gwei: "1000000000", shannon: "1000000000", nanoether: "1000000000", nano: "1000000000", szabo: "1000000000000", microether: "1000000000000", micro: "1000000000000", finney: "1000000000000000", milliether: "1000000000000000", milli: "1000000000000000", ether: "1000000000000000000", kether: "1000000000000000000000", grand: "1000000000000000000000", mether: "1000000000000000000000000", gether: "1000000000000000000000000000", tether: "1000000000000000000000000000000" };
        function c(e3) {
          var t3 = e3 ? e3.toLowerCase() : "ether", r4 = u[t3];
          if ("string" != typeof r4)
            throw new Error("[ethjs-unit] the unit provided " + e3 + " doesn't exists, please use the one of the following units " + JSON.stringify(u, null, 2));
          return new i(r4, 10);
        }
        function f(e3) {
          if ("string" == typeof e3) {
            if (!e3.match(/^-?[0-9.]+$/))
              throw new Error("while converting number to string, invalid number value '" + e3 + "', should be a number matching (^-?[0-9.]+).");
            return e3;
          }
          if ("number" == typeof e3)
            return String(e3);
          if ("object" === (0, n.default)(e3) && e3.toString && (e3.toTwos || e3.dividedToIntegerBy))
            return e3.toPrecision ? String(e3.toPrecision()) : e3.toString(10);
          throw new Error("while converting number to string, invalid number value '" + e3 + "' type " + (0, n.default)(e3) + ".");
        }
        e2.exports = { unitMap: u, numberToString: f, getValueOfUnit: c, fromWei: function(e3, t3, r4) {
          var n2 = o(e3), i2 = n2.lt(a), f2 = c(t3), d = u[t3].length - 1 || 1, l = r4 || {};
          i2 && (n2 = n2.mul(s));
          for (var h = n2.mod(f2).toString(10); h.length < d; )
            h = "0" + h;
          l.pad || (h = h.match(/^([0-9]*[1-9]|0)(0*)/)[1]);
          var p = n2.div(f2).toString(10);
          l.commify && (p = p.replace(/\B(?=(\d{3})+(?!\d))/g, ","));
          var b = p + ("0" == h ? "" : "." + h);
          return i2 && (b = "-" + b), b;
        }, toWei: function(e3, t3) {
          var r4 = f(e3), n2 = c(t3), o2 = u[t3].length - 1 || 1, a2 = "-" === r4.substring(0, 1);
          if (a2 && (r4 = r4.substring(1)), "." === r4)
            throw new Error("[ethjs-unit] while converting number " + e3 + " to wei, invalid value");
          var d = r4.split(".");
          if (d.length > 2)
            throw new Error("[ethjs-unit] while converting number " + e3 + " to wei,  too many decimal points");
          var l = d[0], h = d[1];
          if (l || (l = "0"), h || (h = "0"), h.length > o2)
            throw new Error("[ethjs-unit] while converting number " + e3 + " to wei, too many decimal places");
          for (; h.length < o2; )
            h += "0";
          l = new i(l), h = new i(h);
          var p = l.mul(n2).add(h);
          return a2 && (p = p.mul(s)), new i(p.toString(10), 10);
        } };
      }, 8008: (e2) => {
        "use strict";
        var t2 = Object.prototype.hasOwnProperty, r3 = "~";
        function n() {
        }
        function i(e3, t3, r4) {
          this.fn = e3, this.context = t3, this.once = r4 || false;
        }
        function o(e3, t3, n2, o2, a2) {
          if ("function" != typeof n2)
            throw new TypeError("The listener must be a function");
          var s2 = new i(n2, o2 || e3, a2), u = r3 ? r3 + t3 : t3;
          return e3._events[u] ? e3._events[u].fn ? e3._events[u] = [e3._events[u], s2] : e3._events[u].push(s2) : (e3._events[u] = s2, e3._eventsCount++), e3;
        }
        function a(e3, t3) {
          0 == --e3._eventsCount ? e3._events = new n() : delete e3._events[t3];
        }
        function s() {
          this._events = new n(), this._eventsCount = 0;
        }
        Object.create && (n.prototype = /* @__PURE__ */ Object.create(null), new n().__proto__ || (r3 = false)), s.prototype.eventNames = function() {
          var e3, n2, i2 = [];
          if (0 === this._eventsCount)
            return i2;
          for (n2 in e3 = this._events)
            t2.call(e3, n2) && i2.push(r3 ? n2.slice(1) : n2);
          return Object.getOwnPropertySymbols ? i2.concat(Object.getOwnPropertySymbols(e3)) : i2;
        }, s.prototype.listeners = function(e3) {
          var t3 = r3 ? r3 + e3 : e3, n2 = this._events[t3];
          if (!n2)
            return [];
          if (n2.fn)
            return [n2.fn];
          for (var i2 = 0, o2 = n2.length, a2 = new Array(o2); i2 < o2; i2++)
            a2[i2] = n2[i2].fn;
          return a2;
        }, s.prototype.listenerCount = function(e3) {
          var t3 = r3 ? r3 + e3 : e3, n2 = this._events[t3];
          return n2 ? n2.fn ? 1 : n2.length : 0;
        }, s.prototype.emit = function(e3, t3, n2, i2, o2, a2) {
          var s2 = r3 ? r3 + e3 : e3;
          if (!this._events[s2])
            return false;
          var u, c, f = this._events[s2], d = arguments.length;
          if (f.fn) {
            switch (f.once && this.removeListener(e3, f.fn, void 0, true), d) {
              case 1:
                return f.fn.call(f.context), true;
              case 2:
                return f.fn.call(f.context, t3), true;
              case 3:
                return f.fn.call(f.context, t3, n2), true;
              case 4:
                return f.fn.call(f.context, t3, n2, i2), true;
              case 5:
                return f.fn.call(f.context, t3, n2, i2, o2), true;
              case 6:
                return f.fn.call(f.context, t3, n2, i2, o2, a2), true;
            }
            for (c = 1, u = new Array(d - 1); c < d; c++)
              u[c - 1] = arguments[c];
            f.fn.apply(f.context, u);
          } else {
            var l, h = f.length;
            for (c = 0; c < h; c++)
              switch (f[c].once && this.removeListener(e3, f[c].fn, void 0, true), d) {
                case 1:
                  f[c].fn.call(f[c].context);
                  break;
                case 2:
                  f[c].fn.call(f[c].context, t3);
                  break;
                case 3:
                  f[c].fn.call(f[c].context, t3, n2);
                  break;
                case 4:
                  f[c].fn.call(f[c].context, t3, n2, i2);
                  break;
                default:
                  if (!u)
                    for (l = 1, u = new Array(d - 1); l < d; l++)
                      u[l - 1] = arguments[l];
                  f[c].fn.apply(f[c].context, u);
              }
          }
          return true;
        }, s.prototype.on = function(e3, t3, r4) {
          return o(this, e3, t3, r4, false);
        }, s.prototype.once = function(e3, t3, r4) {
          return o(this, e3, t3, r4, true);
        }, s.prototype.removeListener = function(e3, t3, n2, i2) {
          var o2 = r3 ? r3 + e3 : e3;
          if (!this._events[o2])
            return this;
          if (!t3)
            return a(this, o2), this;
          var s2 = this._events[o2];
          if (s2.fn)
            s2.fn !== t3 || i2 && !s2.once || n2 && s2.context !== n2 || a(this, o2);
          else {
            for (var u = 0, c = [], f = s2.length; u < f; u++)
              (s2[u].fn !== t3 || i2 && !s2[u].once || n2 && s2[u].context !== n2) && c.push(s2[u]);
            c.length ? this._events[o2] = 1 === c.length ? c[0] : c : a(this, o2);
          }
          return this;
        }, s.prototype.removeAllListeners = function(e3) {
          var t3;
          return e3 ? (t3 = r3 ? r3 + e3 : e3, this._events[t3] && a(this, t3)) : (this._events = new n(), this._eventsCount = 0), this;
        }, s.prototype.off = s.prototype.removeListener, s.prototype.addListener = s.prototype.on, s.prefixed = r3, s.EventEmitter = s, e2.exports = s;
      }, 8291: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = Object.create || function(e3) {
          var t3 = function() {
          };
          return t3.prototype = e3, new t3();
        }, o = Object.keys || function(e3) {
          var t3 = [];
          for (var r4 in e3)
            Object.prototype.hasOwnProperty.call(e3, r4) && t3.push(r4);
          return r4;
        }, a = Function.prototype.bind || function(e3) {
          var t3 = this;
          return function() {
            return t3.apply(e3, arguments);
          };
        };
        function s() {
          this._events && Object.prototype.hasOwnProperty.call(this, "_events") || (this._events = i(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
        }
        e2.exports = s, s.EventEmitter = s, s.prototype._events = void 0, s.prototype._maxListeners = void 0;
        var u, c = 10;
        try {
          var f = {};
          Object.defineProperty && Object.defineProperty(f, "x", { value: 0 }), u = 0 === f.x;
        } catch (e3) {
          u = false;
        }
        function d(e3) {
          return void 0 === e3._maxListeners ? s.defaultMaxListeners : e3._maxListeners;
        }
        function l(e3, t3, r4, o2) {
          var a2, s2, u2;
          if ("function" != typeof r4)
            throw new TypeError('"listener" argument must be a function');
          if ((s2 = e3._events) ? (s2.newListener && (e3.emit("newListener", t3, r4.listener ? r4.listener : r4), s2 = e3._events), u2 = s2[t3]) : (s2 = e3._events = i(null), e3._eventsCount = 0), u2) {
            if ("function" == typeof u2 ? u2 = s2[t3] = o2 ? [r4, u2] : [u2, r4] : o2 ? u2.unshift(r4) : u2.push(r4), !u2.warned && (a2 = d(e3)) && a2 > 0 && u2.length > a2) {
              u2.warned = true;
              var c2 = new Error("Possible EventEmitter memory leak detected. " + u2.length + ' "' + String(t3) + '" listeners added. Use emitter.setMaxListeners() to increase limit.');
              c2.name = "MaxListenersExceededWarning", c2.emitter = e3, c2.type = t3, c2.count = u2.length, "object" === ("undefined" == typeof console ? "undefined" : (0, n.default)(console)) && console.warn && console.warn("%s: %s", c2.name, c2.message);
            }
          } else
            u2 = s2[t3] = r4, ++e3._eventsCount;
          return e3;
        }
        function h() {
          if (!this.fired)
            switch (this.target.removeListener(this.type, this.wrapFn), this.fired = true, arguments.length) {
              case 0:
                return this.listener.call(this.target);
              case 1:
                return this.listener.call(this.target, arguments[0]);
              case 2:
                return this.listener.call(this.target, arguments[0], arguments[1]);
              case 3:
                return this.listener.call(this.target, arguments[0], arguments[1], arguments[2]);
              default:
                for (var e3 = new Array(arguments.length), t3 = 0; t3 < e3.length; ++t3)
                  e3[t3] = arguments[t3];
                this.listener.apply(this.target, e3);
            }
        }
        function p(e3, t3, r4) {
          var n2 = { fired: false, wrapFn: void 0, target: e3, type: t3, listener: r4 }, i2 = a.call(h, n2);
          return i2.listener = r4, n2.wrapFn = i2, i2;
        }
        function b(e3, t3, r4) {
          var n2 = e3._events;
          if (!n2)
            return [];
          var i2 = n2[t3];
          return i2 ? "function" == typeof i2 ? r4 ? [i2.listener || i2] : [i2] : r4 ? function(e4) {
            for (var t4 = new Array(e4.length), r5 = 0; r5 < t4.length; ++r5)
              t4[r5] = e4[r5].listener || e4[r5];
            return t4;
          }(i2) : m(i2, i2.length) : [];
        }
        function y(e3) {
          var t3 = this._events;
          if (t3) {
            var r4 = t3[e3];
            if ("function" == typeof r4)
              return 1;
            if (r4)
              return r4.length;
          }
          return 0;
        }
        function m(e3, t3) {
          for (var r4 = new Array(t3), n2 = 0; n2 < t3; ++n2)
            r4[n2] = e3[n2];
          return r4;
        }
        u ? Object.defineProperty(s, "defaultMaxListeners", { enumerable: true, get: function() {
          return c;
        }, set: function(e3) {
          if ("number" != typeof e3 || e3 < 0 || e3 != e3)
            throw new TypeError('"defaultMaxListeners" must be a positive number');
          c = e3;
        } }) : s.defaultMaxListeners = c, s.prototype.setMaxListeners = function(e3) {
          if ("number" != typeof e3 || e3 < 0 || isNaN(e3))
            throw new TypeError('"n" argument must be a positive number');
          return this._maxListeners = e3, this;
        }, s.prototype.getMaxListeners = function() {
          return d(this);
        }, s.prototype.emit = function(e3) {
          var t3, r4, n2, i2, o2, a2, s2 = "error" === e3;
          if (a2 = this._events)
            s2 = s2 && null == a2.error;
          else if (!s2)
            return false;
          if (s2) {
            if (arguments.length > 1 && (t3 = arguments[1]), t3 instanceof Error)
              throw t3;
            var u2 = new Error('Unhandled "error" event. (' + t3 + ")");
            throw u2.context = t3, u2;
          }
          if (!(r4 = a2[e3]))
            return false;
          var c2 = "function" == typeof r4;
          switch (n2 = arguments.length) {
            case 1:
              !function(e4, t4, r5) {
                if (t4)
                  e4.call(r5);
                else
                  for (var n3 = e4.length, i3 = m(e4, n3), o3 = 0; o3 < n3; ++o3)
                    i3[o3].call(r5);
              }(r4, c2, this);
              break;
            case 2:
              !function(e4, t4, r5, n3) {
                if (t4)
                  e4.call(r5, n3);
                else
                  for (var i3 = e4.length, o3 = m(e4, i3), a3 = 0; a3 < i3; ++a3)
                    o3[a3].call(r5, n3);
              }(r4, c2, this, arguments[1]);
              break;
            case 3:
              !function(e4, t4, r5, n3, i3) {
                if (t4)
                  e4.call(r5, n3, i3);
                else
                  for (var o3 = e4.length, a3 = m(e4, o3), s3 = 0; s3 < o3; ++s3)
                    a3[s3].call(r5, n3, i3);
              }(r4, c2, this, arguments[1], arguments[2]);
              break;
            case 4:
              !function(e4, t4, r5, n3, i3, o3) {
                if (t4)
                  e4.call(r5, n3, i3, o3);
                else
                  for (var a3 = e4.length, s3 = m(e4, a3), u3 = 0; u3 < a3; ++u3)
                    s3[u3].call(r5, n3, i3, o3);
              }(r4, c2, this, arguments[1], arguments[2], arguments[3]);
              break;
            default:
              for (i2 = new Array(n2 - 1), o2 = 1; o2 < n2; o2++)
                i2[o2 - 1] = arguments[o2];
              !function(e4, t4, r5, n3) {
                if (t4)
                  e4.apply(r5, n3);
                else
                  for (var i3 = e4.length, o3 = m(e4, i3), a3 = 0; a3 < i3; ++a3)
                    o3[a3].apply(r5, n3);
              }(r4, c2, this, i2);
          }
          return true;
        }, s.prototype.addListener = function(e3, t3) {
          return l(this, e3, t3, false);
        }, s.prototype.on = s.prototype.addListener, s.prototype.prependListener = function(e3, t3) {
          return l(this, e3, t3, true);
        }, s.prototype.once = function(e3, t3) {
          if ("function" != typeof t3)
            throw new TypeError('"listener" argument must be a function');
          return this.on(e3, p(this, e3, t3)), this;
        }, s.prototype.prependOnceListener = function(e3, t3) {
          if ("function" != typeof t3)
            throw new TypeError('"listener" argument must be a function');
          return this.prependListener(e3, p(this, e3, t3)), this;
        }, s.prototype.removeListener = function(e3, t3) {
          var r4, n2, o2, a2, s2;
          if ("function" != typeof t3)
            throw new TypeError('"listener" argument must be a function');
          if (!(n2 = this._events))
            return this;
          if (!(r4 = n2[e3]))
            return this;
          if (r4 === t3 || r4.listener === t3)
            0 == --this._eventsCount ? this._events = i(null) : (delete n2[e3], n2.removeListener && this.emit("removeListener", e3, r4.listener || t3));
          else if ("function" != typeof r4) {
            for (o2 = -1, a2 = r4.length - 1; a2 >= 0; a2--)
              if (r4[a2] === t3 || r4[a2].listener === t3) {
                s2 = r4[a2].listener, o2 = a2;
                break;
              }
            if (o2 < 0)
              return this;
            0 === o2 ? r4.shift() : function(e4, t4) {
              for (var r5 = t4, n3 = r5 + 1, i2 = e4.length; n3 < i2; r5 += 1, n3 += 1)
                e4[r5] = e4[n3];
              e4.pop();
            }(r4, o2), 1 === r4.length && (n2[e3] = r4[0]), n2.removeListener && this.emit("removeListener", e3, s2 || t3);
          }
          return this;
        }, s.prototype.removeAllListeners = function(e3) {
          var t3, r4, n2;
          if (!(r4 = this._events))
            return this;
          if (!r4.removeListener)
            return 0 === arguments.length ? (this._events = i(null), this._eventsCount = 0) : r4[e3] && (0 == --this._eventsCount ? this._events = i(null) : delete r4[e3]), this;
          if (0 === arguments.length) {
            var a2, s2 = o(r4);
            for (n2 = 0; n2 < s2.length; ++n2)
              "removeListener" !== (a2 = s2[n2]) && this.removeAllListeners(a2);
            return this.removeAllListeners("removeListener"), this._events = i(null), this._eventsCount = 0, this;
          }
          if ("function" == typeof (t3 = r4[e3]))
            this.removeListener(e3, t3);
          else if (t3)
            for (n2 = t3.length - 1; n2 >= 0; n2--)
              this.removeListener(e3, t3[n2]);
          return this;
        }, s.prototype.listeners = function(e3) {
          return b(this, e3, true);
        }, s.prototype.rawListeners = function(e3) {
          return b(this, e3, false);
        }, s.listenerCount = function(e3, t3) {
          return "function" == typeof e3.listenerCount ? e3.listenerCount(t3) : y.call(e3, t3);
        }, s.prototype.listenerCount = y, s.prototype.eventNames = function() {
          return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
        };
      }, 7085: (e2, t2, r3) => {
        "use strict";
        var n = r3(8850).Buffer, i = r3(807);
        e2.exports = function(e3, t3, r4, o) {
          if (n.isBuffer(e3) || (e3 = n.from(e3, "binary")), t3 && (n.isBuffer(t3) || (t3 = n.from(t3, "binary")), 8 !== t3.length))
            throw new RangeError("salt should be Buffer with 8 byte length");
          for (var a = r4 / 8, s = n.alloc(a), u = n.alloc(o || 0), c = n.alloc(0); a > 0 || o > 0; ) {
            var f = new i();
            f.update(c), f.update(e3), t3 && f.update(t3), c = f.digest();
            var d = 0;
            if (a > 0) {
              var l = s.length - a;
              d = Math.min(a, c.length), c.copy(s, l, 0, d), a -= d;
            }
            if (d < c.length && o > 0) {
              var h = u.length - o, p = Math.min(o, c.length - d);
              c.copy(u, h, d, d + p), o -= p;
            }
          }
          return c.fill(0), { key: s, iv: u };
        };
      }, 8184: (e2, t2, r3) => {
        "use strict";
        var n = r3(1493), i = Object.prototype.toString, o = Object.prototype.hasOwnProperty;
        e2.exports = function(e3, t3, r4) {
          if (!n(t3))
            throw new TypeError("iterator must be a function");
          var a;
          arguments.length >= 3 && (a = r4), "[object Array]" === i.call(e3) ? function(e4, t4, r5) {
            for (var n2 = 0, i2 = e4.length; n2 < i2; n2++)
              o.call(e4, n2) && (null == r5 ? t4(e4[n2], n2, e4) : t4.call(r5, e4[n2], n2, e4));
          }(e3, t3, a) : "string" == typeof e3 ? function(e4, t4, r5) {
            for (var n2 = 0, i2 = e4.length; n2 < i2; n2++)
              null == r5 ? t4(e4.charAt(n2), n2, e4) : t4.call(r5, e4.charAt(n2), n2, e4);
          }(e3, t3, a) : function(e4, t4, r5) {
            for (var n2 in e4)
              o.call(e4, n2) && (null == r5 ? t4(e4[n2], n2, e4) : t4.call(r5, e4[n2], n2, e4));
          }(e3, t3, a);
        };
      }, 3161: (e2) => {
        "use strict";
        var t2 = Array.prototype.slice, r3 = Object.prototype.toString;
        e2.exports = function(e3) {
          var n = this;
          if ("function" != typeof n || "[object Function]" !== r3.call(n))
            throw new TypeError("Function.prototype.bind called on incompatible " + n);
          for (var i, o = t2.call(arguments, 1), a = Math.max(0, n.length - o.length), s = [], u = 0; u < a; u++)
            s.push("$" + u);
          if (i = Function("binder", "return function (" + s.join(",") + "){ return binder.apply(this,arguments); }")(function() {
            if (this instanceof i) {
              var r4 = n.apply(this, o.concat(t2.call(arguments)));
              return Object(r4) === r4 ? r4 : this;
            }
            return n.apply(e3, o.concat(t2.call(arguments)));
          }), n.prototype) {
            var c = function() {
            };
            c.prototype = n.prototype, i.prototype = new c(), c.prototype = null;
          }
          return i;
        };
      }, 3767: (e2, t2, r3) => {
        "use strict";
        var n = r3(3161);
        e2.exports = Function.prototype.bind || n;
      }, 7701: (e2, t2, r3) => {
        "use strict";
        var n, i = r3(8847)(r3(3355)), o = SyntaxError, a = Function, s = TypeError, u = function(e3) {
          try {
            return a('"use strict"; return (' + e3 + ").constructor;")();
          } catch (e4) {
          }
        }, c = Object.getOwnPropertyDescriptor;
        if (c)
          try {
            c({}, "");
          } catch (e3) {
            c = null;
          }
        var f = function() {
          throw new s();
        }, d = c ? function() {
          try {
            return f;
          } catch (e3) {
            try {
              return c(arguments, "callee").get;
            } catch (e4) {
              return f;
            }
          }
        }() : f, l = r3(8489)(), h = Object.getPrototypeOf || function(e3) {
          return e3.__proto__;
        }, p = {}, b = "undefined" == typeof Uint8Array ? n : h(Uint8Array), y = { "%AggregateError%": "undefined" == typeof AggregateError ? n : AggregateError, "%Array%": Array, "%ArrayBuffer%": "undefined" == typeof ArrayBuffer ? n : ArrayBuffer, "%ArrayIteratorPrototype%": l ? h([][Symbol.iterator]()) : n, "%AsyncFromSyncIteratorPrototype%": n, "%AsyncFunction%": p, "%AsyncGenerator%": p, "%AsyncGeneratorFunction%": p, "%AsyncIteratorPrototype%": p, "%Atomics%": "undefined" == typeof Atomics ? n : Atomics, "%BigInt%": "undefined" == typeof BigInt ? n : BigInt, "%Boolean%": Boolean, "%DataView%": "undefined" == typeof DataView ? n : DataView, "%Date%": Date, "%decodeURI%": decodeURI, "%decodeURIComponent%": decodeURIComponent, "%encodeURI%": encodeURI, "%encodeURIComponent%": encodeURIComponent, "%Error%": Error, "%eval%": eval, "%EvalError%": EvalError, "%Float32Array%": "undefined" == typeof Float32Array ? n : Float32Array, "%Float64Array%": "undefined" == typeof Float64Array ? n : Float64Array, "%FinalizationRegistry%": "undefined" == typeof FinalizationRegistry ? n : FinalizationRegistry, "%Function%": a, "%GeneratorFunction%": p, "%Int8Array%": "undefined" == typeof Int8Array ? n : Int8Array, "%Int16Array%": "undefined" == typeof Int16Array ? n : Int16Array, "%Int32Array%": "undefined" == typeof Int32Array ? n : Int32Array, "%isFinite%": isFinite, "%isNaN%": isNaN, "%IteratorPrototype%": l ? h(h([][Symbol.iterator]())) : n, "%JSON%": "object" === ("undefined" == typeof JSON ? "undefined" : (0, i.default)(JSON)) ? JSON : n, "%Map%": "undefined" == typeof Map ? n : Map, "%MapIteratorPrototype%": "undefined" != typeof Map && l ? h((/* @__PURE__ */ new Map())[Symbol.iterator]()) : n, "%Math%": Math, "%Number%": Number, "%Object%": Object, "%parseFloat%": parseFloat, "%parseInt%": parseInt, "%Promise%": "undefined" == typeof Promise ? n : Promise, "%Proxy%": "undefined" == typeof Proxy ? n : Proxy, "%RangeError%": RangeError, "%ReferenceError%": ReferenceError, "%Reflect%": "undefined" == typeof Reflect ? n : Reflect, "%RegExp%": RegExp, "%Set%": "undefined" == typeof Set ? n : Set, "%SetIteratorPrototype%": "undefined" != typeof Set && l ? h((/* @__PURE__ */ new Set())[Symbol.iterator]()) : n, "%SharedArrayBuffer%": "undefined" == typeof SharedArrayBuffer ? n : SharedArrayBuffer, "%String%": String, "%StringIteratorPrototype%": l ? h(""[Symbol.iterator]()) : n, "%Symbol%": l ? Symbol : n, "%SyntaxError%": o, "%ThrowTypeError%": d, "%TypedArray%": b, "%TypeError%": s, "%Uint8Array%": "undefined" == typeof Uint8Array ? n : Uint8Array, "%Uint8ClampedArray%": "undefined" == typeof Uint8ClampedArray ? n : Uint8ClampedArray, "%Uint16Array%": "undefined" == typeof Uint16Array ? n : Uint16Array, "%Uint32Array%": "undefined" == typeof Uint32Array ? n : Uint32Array, "%URIError%": URIError, "%WeakMap%": "undefined" == typeof WeakMap ? n : WeakMap, "%WeakRef%": "undefined" == typeof WeakRef ? n : WeakRef, "%WeakSet%": "undefined" == typeof WeakSet ? n : WeakSet }, m = function e3(t3) {
          var r4;
          if ("%AsyncFunction%" === t3)
            r4 = u("async function () {}");
          else if ("%GeneratorFunction%" === t3)
            r4 = u("function* () {}");
          else if ("%AsyncGeneratorFunction%" === t3)
            r4 = u("async function* () {}");
          else if ("%AsyncGenerator%" === t3) {
            var n2 = e3("%AsyncGeneratorFunction%");
            n2 && (r4 = n2.prototype);
          } else if ("%AsyncIteratorPrototype%" === t3) {
            var i2 = e3("%AsyncGenerator%");
            i2 && (r4 = h(i2.prototype));
          }
          return y[t3] = r4, r4;
        }, v = { "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"], "%ArrayPrototype%": ["Array", "prototype"], "%ArrayProto_entries%": ["Array", "prototype", "entries"], "%ArrayProto_forEach%": ["Array", "prototype", "forEach"], "%ArrayProto_keys%": ["Array", "prototype", "keys"], "%ArrayProto_values%": ["Array", "prototype", "values"], "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"], "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"], "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"], "%BooleanPrototype%": ["Boolean", "prototype"], "%DataViewPrototype%": ["DataView", "prototype"], "%DatePrototype%": ["Date", "prototype"], "%ErrorPrototype%": ["Error", "prototype"], "%EvalErrorPrototype%": ["EvalError", "prototype"], "%Float32ArrayPrototype%": ["Float32Array", "prototype"], "%Float64ArrayPrototype%": ["Float64Array", "prototype"], "%FunctionPrototype%": ["Function", "prototype"], "%Generator%": ["GeneratorFunction", "prototype"], "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"], "%Int8ArrayPrototype%": ["Int8Array", "prototype"], "%Int16ArrayPrototype%": ["Int16Array", "prototype"], "%Int32ArrayPrototype%": ["Int32Array", "prototype"], "%JSONParse%": ["JSON", "parse"], "%JSONStringify%": ["JSON", "stringify"], "%MapPrototype%": ["Map", "prototype"], "%NumberPrototype%": ["Number", "prototype"], "%ObjectPrototype%": ["Object", "prototype"], "%ObjProto_toString%": ["Object", "prototype", "toString"], "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"], "%PromisePrototype%": ["Promise", "prototype"], "%PromiseProto_then%": ["Promise", "prototype", "then"], "%Promise_all%": ["Promise", "all"], "%Promise_reject%": ["Promise", "reject"], "%Promise_resolve%": ["Promise", "resolve"], "%RangeErrorPrototype%": ["RangeError", "prototype"], "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"], "%RegExpPrototype%": ["RegExp", "prototype"], "%SetPrototype%": ["Set", "prototype"], "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"], "%StringPrototype%": ["String", "prototype"], "%SymbolPrototype%": ["Symbol", "prototype"], "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"], "%TypedArrayPrototype%": ["TypedArray", "prototype"], "%TypeErrorPrototype%": ["TypeError", "prototype"], "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"], "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"], "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"], "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"], "%URIErrorPrototype%": ["URIError", "prototype"], "%WeakMapPrototype%": ["WeakMap", "prototype"], "%WeakSetPrototype%": ["WeakSet", "prototype"] }, g = r3(3767), w = r3(1888), A = g.call(Function.call, Array.prototype.concat), k = g.call(Function.apply, Array.prototype.splice), _ = g.call(Function.call, String.prototype.replace), S = g.call(Function.call, String.prototype.slice), E = g.call(Function.call, RegExp.prototype.exec), x = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, P = /\\(\\)?/g, O = function(e3, t3) {
          var r4, n2 = e3;
          if (w(v, n2) && (n2 = "%" + (r4 = v[n2])[0] + "%"), w(y, n2)) {
            var i2 = y[n2];
            if (i2 === p && (i2 = m(n2)), void 0 === i2 && !t3)
              throw new s("intrinsic " + e3 + " exists, but is not available. Please file an issue!");
            return { alias: r4, name: n2, value: i2 };
          }
          throw new o("intrinsic " + e3 + " does not exist!");
        };
        e2.exports = function(e3, t3) {
          if ("string" != typeof e3 || 0 === e3.length)
            throw new s("intrinsic name must be a non-empty string");
          if (arguments.length > 1 && "boolean" != typeof t3)
            throw new s('"allowMissing" argument must be a boolean');
          if (null === E(/^%?[^%]*%?$/, e3))
            throw new o("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
          var r4 = function(e4) {
            var t4 = S(e4, 0, 1), r5 = S(e4, -1);
            if ("%" === t4 && "%" !== r5)
              throw new o("invalid intrinsic syntax, expected closing `%`");
            if ("%" === r5 && "%" !== t4)
              throw new o("invalid intrinsic syntax, expected opening `%`");
            var n3 = [];
            return _(e4, x, function(e5, t5, r6, i3) {
              n3[n3.length] = r6 ? _(i3, P, "$1") : t5 || e5;
            }), n3;
          }(e3), n2 = r4.length > 0 ? r4[0] : "", i2 = O("%" + n2 + "%", t3), a2 = i2.name, u2 = i2.value, f2 = false, d2 = i2.alias;
          d2 && (n2 = d2[0], k(r4, A([0, 1], d2)));
          for (var l2 = 1, h2 = true; l2 < r4.length; l2 += 1) {
            var p2 = r4[l2], b2 = S(p2, 0, 1), m2 = S(p2, -1);
            if (('"' === b2 || "'" === b2 || "`" === b2 || '"' === m2 || "'" === m2 || "`" === m2) && b2 !== m2)
              throw new o("property names with quotes must have matching quotes");
            if ("constructor" !== p2 && h2 || (f2 = true), w(y, a2 = "%" + (n2 += "." + p2) + "%"))
              u2 = y[a2];
            else if (null != u2) {
              if (!(p2 in u2)) {
                if (!t3)
                  throw new s("base intrinsic for " + e3 + " exists, but the property is not available.");
                return;
              }
              if (c && l2 + 1 >= r4.length) {
                var v2 = c(u2, p2);
                u2 = (h2 = !!v2) && "get" in v2 && !("originalValue" in v2.get) ? v2.get : u2[p2];
              } else
                h2 = w(u2, p2), u2 = u2[p2];
              h2 && !f2 && (y[a2] = u2);
            }
          }
          return u2;
        };
      }, 2948: (e2, t2, r3) => {
        "use strict";
        var n;
        n = "undefined" != typeof window ? window : void 0 !== r3.g ? r3.g : "undefined" != typeof self ? self : {}, e2.exports = n;
      }, 3820: (e2, t2, r3) => {
        "use strict";
        var n = r3(7701)("%Object.getOwnPropertyDescriptor%", true);
        if (n)
          try {
            n([], "length");
          } catch (e3) {
            n = null;
          }
        e2.exports = n;
      }, 8489: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = "undefined" != typeof Symbol && Symbol, o = r3(7027);
        e2.exports = function() {
          return "function" == typeof i && "function" == typeof Symbol && "symbol" === (0, n.default)(i("foo")) && "symbol" === (0, n.default)(Symbol("bar")) && o();
        };
      }, 7027: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355));
        e2.exports = function() {
          if ("function" != typeof Symbol || "function" != typeof Object.getOwnPropertySymbols)
            return false;
          if ("symbol" === (0, n.default)(Symbol.iterator))
            return true;
          var e3 = {}, t3 = Symbol("test"), r4 = Object(t3);
          if ("string" == typeof t3)
            return false;
          if ("[object Symbol]" !== Object.prototype.toString.call(t3))
            return false;
          if ("[object Symbol]" !== Object.prototype.toString.call(r4))
            return false;
          for (t3 in e3[t3] = 42, e3)
            return false;
          if ("function" == typeof Object.keys && 0 !== Object.keys(e3).length)
            return false;
          if ("function" == typeof Object.getOwnPropertyNames && 0 !== Object.getOwnPropertyNames(e3).length)
            return false;
          var i = Object.getOwnPropertySymbols(e3);
          if (1 !== i.length || i[0] !== t3)
            return false;
          if (!Object.prototype.propertyIsEnumerable.call(e3, t3))
            return false;
          if ("function" == typeof Object.getOwnPropertyDescriptor) {
            var o = Object.getOwnPropertyDescriptor(e3, t3);
            if (42 !== o.value || true !== o.enumerable)
              return false;
          }
          return true;
        };
      }, 1191: (e2, t2, r3) => {
        "use strict";
        var n = r3(7027);
        e2.exports = function() {
          return n() && !!Symbol.toStringTag;
        };
      }, 1888: (e2, t2, r3) => {
        "use strict";
        var n = r3(3767);
        e2.exports = n.call(Function.call, Object.prototype.hasOwnProperty);
      }, 2353: (e2, t2, r3) => {
        "use strict";
        var n = r3(8850).Buffer, i = r3(6505).Transform;
        function o(e3) {
          i.call(this), this._block = n.allocUnsafe(e3), this._blockSize = e3, this._blockOffset = 0, this._length = [0, 0, 0, 0], this._finalized = false;
        }
        r3(1736)(o, i), o.prototype._transform = function(e3, t3, r4) {
          var n2 = null;
          try {
            this.update(e3, t3);
          } catch (e4) {
            n2 = e4;
          }
          r4(n2);
        }, o.prototype._flush = function(e3) {
          var t3 = null;
          try {
            this.push(this.digest());
          } catch (e4) {
            t3 = e4;
          }
          e3(t3);
        }, o.prototype.update = function(e3, t3) {
          if (function(e4, t4) {
            if (!n.isBuffer(e4) && "string" != typeof e4)
              throw new TypeError("Data must be a string or a buffer");
          }(e3), this._finalized)
            throw new Error("Digest already called");
          n.isBuffer(e3) || (e3 = n.from(e3, t3));
          for (var r4 = this._block, i2 = 0; this._blockOffset + e3.length - i2 >= this._blockSize; ) {
            for (var o2 = this._blockOffset; o2 < this._blockSize; )
              r4[o2++] = e3[i2++];
            this._update(), this._blockOffset = 0;
          }
          for (; i2 < e3.length; )
            r4[this._blockOffset++] = e3[i2++];
          for (var a = 0, s = 8 * e3.length; s > 0; ++a)
            this._length[a] += s, (s = this._length[a] / 4294967296 | 0) > 0 && (this._length[a] -= 4294967296 * s);
          return this;
        }, o.prototype._update = function() {
          throw new Error("_update is not implemented");
        }, o.prototype.digest = function(e3) {
          if (this._finalized)
            throw new Error("Digest already called");
          this._finalized = true;
          var t3 = this._digest();
          void 0 !== e3 && (t3 = t3.toString(e3)), this._block.fill(0), this._blockOffset = 0;
          for (var r4 = 0; r4 < 4; ++r4)
            this._length[r4] = 0;
          return t3;
        }, o.prototype._digest = function() {
          throw new Error("_digest is not implemented");
        }, e2.exports = o;
      }, 7198: (e2, t2, r3) => {
        "use strict";
        var n = t2;
        n.utils = r3(4268), n.common = r3(4696), n.sha = r3(9310), n.ripemd = r3(9294), n.hmac = r3(3201), n.sha1 = n.sha.sha1, n.sha256 = n.sha.sha256, n.sha224 = n.sha.sha224, n.sha384 = n.sha.sha384, n.sha512 = n.sha.sha512, n.ripemd160 = n.ripemd.ripemd160;
      }, 4696: (e2, t2, r3) => {
        "use strict";
        var n = r3(4268), i = r3(4504);
        function o() {
          this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
        }
        t2.BlockHash = o, o.prototype.update = function(e3, t3) {
          if (e3 = n.toArray(e3, t3), this.pending ? this.pending = this.pending.concat(e3) : this.pending = e3, this.pendingTotal += e3.length, this.pending.length >= this._delta8) {
            var r4 = (e3 = this.pending).length % this._delta8;
            this.pending = e3.slice(e3.length - r4, e3.length), 0 === this.pending.length && (this.pending = null), e3 = n.join32(e3, 0, e3.length - r4, this.endian);
            for (var i2 = 0; i2 < e3.length; i2 += this._delta32)
              this._update(e3, i2, i2 + this._delta32);
          }
          return this;
        }, o.prototype.digest = function(e3) {
          return this.update(this._pad()), i(null === this.pending), this._digest(e3);
        }, o.prototype._pad = function() {
          var e3 = this.pendingTotal, t3 = this._delta8, r4 = t3 - (e3 + this.padLength) % t3, n2 = new Array(r4 + this.padLength);
          n2[0] = 128;
          for (var i2 = 1; i2 < r4; i2++)
            n2[i2] = 0;
          if (e3 <<= 3, "big" === this.endian) {
            for (var o2 = 8; o2 < this.padLength; o2++)
              n2[i2++] = 0;
            n2[i2++] = 0, n2[i2++] = 0, n2[i2++] = 0, n2[i2++] = 0, n2[i2++] = e3 >>> 24 & 255, n2[i2++] = e3 >>> 16 & 255, n2[i2++] = e3 >>> 8 & 255, n2[i2++] = 255 & e3;
          } else
            for (n2[i2++] = 255 & e3, n2[i2++] = e3 >>> 8 & 255, n2[i2++] = e3 >>> 16 & 255, n2[i2++] = e3 >>> 24 & 255, n2[i2++] = 0, n2[i2++] = 0, n2[i2++] = 0, n2[i2++] = 0, o2 = 8; o2 < this.padLength; o2++)
              n2[i2++] = 0;
          return n2;
        };
      }, 3201: (e2, t2, r3) => {
        "use strict";
        var n = r3(4268), i = r3(4504);
        function o(e3, t3, r4) {
          if (!(this instanceof o))
            return new o(e3, t3, r4);
          this.Hash = e3, this.blockSize = e3.blockSize / 8, this.outSize = e3.outSize / 8, this.inner = null, this.outer = null, this._init(n.toArray(t3, r4));
        }
        e2.exports = o, o.prototype._init = function(e3) {
          e3.length > this.blockSize && (e3 = new this.Hash().update(e3).digest()), i(e3.length <= this.blockSize);
          for (var t3 = e3.length; t3 < this.blockSize; t3++)
            e3.push(0);
          for (t3 = 0; t3 < e3.length; t3++)
            e3[t3] ^= 54;
          for (this.inner = new this.Hash().update(e3), t3 = 0; t3 < e3.length; t3++)
            e3[t3] ^= 106;
          this.outer = new this.Hash().update(e3);
        }, o.prototype.update = function(e3, t3) {
          return this.inner.update(e3, t3), this;
        }, o.prototype.digest = function(e3) {
          return this.outer.update(this.inner.digest()), this.outer.digest(e3);
        };
      }, 9294: (e2, t2, r3) => {
        "use strict";
        var n = r3(4268), i = r3(4696), o = n.rotl32, a = n.sum32, s = n.sum32_3, u = n.sum32_4, c = i.BlockHash;
        function f() {
          if (!(this instanceof f))
            return new f();
          c.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.endian = "little";
        }
        function d(e3, t3, r4, n2) {
          return e3 <= 15 ? t3 ^ r4 ^ n2 : e3 <= 31 ? t3 & r4 | ~t3 & n2 : e3 <= 47 ? (t3 | ~r4) ^ n2 : e3 <= 63 ? t3 & n2 | r4 & ~n2 : t3 ^ (r4 | ~n2);
        }
        function l(e3) {
          return e3 <= 15 ? 0 : e3 <= 31 ? 1518500249 : e3 <= 47 ? 1859775393 : e3 <= 63 ? 2400959708 : 2840853838;
        }
        function h(e3) {
          return e3 <= 15 ? 1352829926 : e3 <= 31 ? 1548603684 : e3 <= 47 ? 1836072691 : e3 <= 63 ? 2053994217 : 0;
        }
        n.inherits(f, c), t2.ripemd160 = f, f.blockSize = 512, f.outSize = 160, f.hmacStrength = 192, f.padLength = 64, f.prototype._update = function(e3, t3) {
          for (var r4 = this.h[0], n2 = this.h[1], i2 = this.h[2], c2 = this.h[3], f2 = this.h[4], v = r4, g = n2, w = i2, A = c2, k = f2, _ = 0; _ < 80; _++) {
            var S = a(o(u(r4, d(_, n2, i2, c2), e3[p[_] + t3], l(_)), y[_]), f2);
            r4 = f2, f2 = c2, c2 = o(i2, 10), i2 = n2, n2 = S, S = a(o(u(v, d(79 - _, g, w, A), e3[b[_] + t3], h(_)), m[_]), k), v = k, k = A, A = o(w, 10), w = g, g = S;
          }
          S = s(this.h[1], i2, A), this.h[1] = s(this.h[2], c2, k), this.h[2] = s(this.h[3], f2, v), this.h[3] = s(this.h[4], r4, g), this.h[4] = s(this.h[0], n2, w), this.h[0] = S;
        }, f.prototype._digest = function(e3) {
          return "hex" === e3 ? n.toHex32(this.h, "little") : n.split32(this.h, "little");
        };
        var p = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13], b = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11], y = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6], m = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
      }, 9310: (e2, t2, r3) => {
        "use strict";
        t2.sha1 = r3(8142), t2.sha224 = r3(4909), t2.sha256 = r3(7682), t2.sha384 = r3(4532), t2.sha512 = r3(6515);
      }, 8142: (e2, t2, r3) => {
        "use strict";
        var n = r3(4268), i = r3(4696), o = r3(70), a = n.rotl32, s = n.sum32, u = n.sum32_5, c = o.ft_1, f = i.BlockHash, d = [1518500249, 1859775393, 2400959708, 3395469782];
        function l() {
          if (!(this instanceof l))
            return new l();
          f.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.W = new Array(80);
        }
        n.inherits(l, f), e2.exports = l, l.blockSize = 512, l.outSize = 160, l.hmacStrength = 80, l.padLength = 64, l.prototype._update = function(e3, t3) {
          for (var r4 = this.W, n2 = 0; n2 < 16; n2++)
            r4[n2] = e3[t3 + n2];
          for (; n2 < r4.length; n2++)
            r4[n2] = a(r4[n2 - 3] ^ r4[n2 - 8] ^ r4[n2 - 14] ^ r4[n2 - 16], 1);
          var i2 = this.h[0], o2 = this.h[1], f2 = this.h[2], l2 = this.h[3], h = this.h[4];
          for (n2 = 0; n2 < r4.length; n2++) {
            var p = ~~(n2 / 20), b = u(a(i2, 5), c(p, o2, f2, l2), h, r4[n2], d[p]);
            h = l2, l2 = f2, f2 = a(o2, 30), o2 = i2, i2 = b;
          }
          this.h[0] = s(this.h[0], i2), this.h[1] = s(this.h[1], o2), this.h[2] = s(this.h[2], f2), this.h[3] = s(this.h[3], l2), this.h[4] = s(this.h[4], h);
        }, l.prototype._digest = function(e3) {
          return "hex" === e3 ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
        };
      }, 4909: (e2, t2, r3) => {
        "use strict";
        var n = r3(4268), i = r3(7682);
        function o() {
          if (!(this instanceof o))
            return new o();
          i.call(this), this.h = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];
        }
        n.inherits(o, i), e2.exports = o, o.blockSize = 512, o.outSize = 224, o.hmacStrength = 192, o.padLength = 64, o.prototype._digest = function(e3) {
          return "hex" === e3 ? n.toHex32(this.h.slice(0, 7), "big") : n.split32(this.h.slice(0, 7), "big");
        };
      }, 7682: (e2, t2, r3) => {
        "use strict";
        var n = r3(4268), i = r3(4696), o = r3(70), a = r3(4504), s = n.sum32, u = n.sum32_4, c = n.sum32_5, f = o.ch32, d = o.maj32, l = o.s0_256, h = o.s1_256, p = o.g0_256, b = o.g1_256, y = i.BlockHash, m = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
        function v() {
          if (!(this instanceof v))
            return new v();
          y.call(this), this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], this.k = m, this.W = new Array(64);
        }
        n.inherits(v, y), e2.exports = v, v.blockSize = 512, v.outSize = 256, v.hmacStrength = 192, v.padLength = 64, v.prototype._update = function(e3, t3) {
          for (var r4 = this.W, n2 = 0; n2 < 16; n2++)
            r4[n2] = e3[t3 + n2];
          for (; n2 < r4.length; n2++)
            r4[n2] = u(b(r4[n2 - 2]), r4[n2 - 7], p(r4[n2 - 15]), r4[n2 - 16]);
          var i2 = this.h[0], o2 = this.h[1], y2 = this.h[2], m2 = this.h[3], v2 = this.h[4], g = this.h[5], w = this.h[6], A = this.h[7];
          for (a(this.k.length === r4.length), n2 = 0; n2 < r4.length; n2++) {
            var k = c(A, h(v2), f(v2, g, w), this.k[n2], r4[n2]), _ = s(l(i2), d(i2, o2, y2));
            A = w, w = g, g = v2, v2 = s(m2, k), m2 = y2, y2 = o2, o2 = i2, i2 = s(k, _);
          }
          this.h[0] = s(this.h[0], i2), this.h[1] = s(this.h[1], o2), this.h[2] = s(this.h[2], y2), this.h[3] = s(this.h[3], m2), this.h[4] = s(this.h[4], v2), this.h[5] = s(this.h[5], g), this.h[6] = s(this.h[6], w), this.h[7] = s(this.h[7], A);
        }, v.prototype._digest = function(e3) {
          return "hex" === e3 ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
        };
      }, 4532: (e2, t2, r3) => {
        "use strict";
        var n = r3(4268), i = r3(6515);
        function o() {
          if (!(this instanceof o))
            return new o();
          i.call(this), this.h = [3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415, 4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428];
        }
        n.inherits(o, i), e2.exports = o, o.blockSize = 1024, o.outSize = 384, o.hmacStrength = 192, o.padLength = 128, o.prototype._digest = function(e3) {
          return "hex" === e3 ? n.toHex32(this.h.slice(0, 12), "big") : n.split32(this.h.slice(0, 12), "big");
        };
      }, 6515: (e2, t2, r3) => {
        "use strict";
        var n = r3(4268), i = r3(4696), o = r3(4504), a = n.rotr64_hi, s = n.rotr64_lo, u = n.shr64_hi, c = n.shr64_lo, f = n.sum64, d = n.sum64_hi, l = n.sum64_lo, h = n.sum64_4_hi, p = n.sum64_4_lo, b = n.sum64_5_hi, y = n.sum64_5_lo, m = i.BlockHash, v = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];
        function g() {
          if (!(this instanceof g))
            return new g();
          m.call(this), this.h = [1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209], this.k = v, this.W = new Array(160);
        }
        function w(e3, t3, r4, n2, i2) {
          var o2 = e3 & r4 ^ ~e3 & i2;
          return o2 < 0 && (o2 += 4294967296), o2;
        }
        function A(e3, t3, r4, n2, i2, o2) {
          var a2 = t3 & n2 ^ ~t3 & o2;
          return a2 < 0 && (a2 += 4294967296), a2;
        }
        function k(e3, t3, r4, n2, i2) {
          var o2 = e3 & r4 ^ e3 & i2 ^ r4 & i2;
          return o2 < 0 && (o2 += 4294967296), o2;
        }
        function _(e3, t3, r4, n2, i2, o2) {
          var a2 = t3 & n2 ^ t3 & o2 ^ n2 & o2;
          return a2 < 0 && (a2 += 4294967296), a2;
        }
        function S(e3, t3) {
          var r4 = a(e3, t3, 28) ^ a(t3, e3, 2) ^ a(t3, e3, 7);
          return r4 < 0 && (r4 += 4294967296), r4;
        }
        function E(e3, t3) {
          var r4 = s(e3, t3, 28) ^ s(t3, e3, 2) ^ s(t3, e3, 7);
          return r4 < 0 && (r4 += 4294967296), r4;
        }
        function x(e3, t3) {
          var r4 = s(e3, t3, 14) ^ s(e3, t3, 18) ^ s(t3, e3, 9);
          return r4 < 0 && (r4 += 4294967296), r4;
        }
        function P(e3, t3) {
          var r4 = a(e3, t3, 1) ^ a(e3, t3, 8) ^ u(e3, t3, 7);
          return r4 < 0 && (r4 += 4294967296), r4;
        }
        function O(e3, t3) {
          var r4 = s(e3, t3, 1) ^ s(e3, t3, 8) ^ c(e3, t3, 7);
          return r4 < 0 && (r4 += 4294967296), r4;
        }
        function B(e3, t3) {
          var r4 = s(e3, t3, 19) ^ s(t3, e3, 29) ^ c(e3, t3, 6);
          return r4 < 0 && (r4 += 4294967296), r4;
        }
        n.inherits(g, m), e2.exports = g, g.blockSize = 1024, g.outSize = 512, g.hmacStrength = 192, g.padLength = 128, g.prototype._prepareBlock = function(e3, t3) {
          for (var r4 = this.W, n2 = 0; n2 < 32; n2++)
            r4[n2] = e3[t3 + n2];
          for (; n2 < r4.length; n2 += 2) {
            var i2 = (y2 = r4[n2 - 4], m2 = r4[n2 - 3], v2 = void 0, (v2 = a(y2, m2, 19) ^ a(m2, y2, 29) ^ u(y2, m2, 6)) < 0 && (v2 += 4294967296), v2), o2 = B(r4[n2 - 4], r4[n2 - 3]), s2 = r4[n2 - 14], c2 = r4[n2 - 13], f2 = P(r4[n2 - 30], r4[n2 - 29]), d2 = O(r4[n2 - 30], r4[n2 - 29]), l2 = r4[n2 - 32], b2 = r4[n2 - 31];
            r4[n2] = h(i2, o2, s2, c2, f2, d2, l2, b2), r4[n2 + 1] = p(i2, o2, s2, c2, f2, d2, l2, b2);
          }
          var y2, m2, v2;
        }, g.prototype._update = function(e3, t3) {
          this._prepareBlock(e3, t3);
          var r4, n2, i2, s2 = this.W, u2 = this.h[0], c2 = this.h[1], h2 = this.h[2], p2 = this.h[3], m2 = this.h[4], v2 = this.h[5], g2 = this.h[6], P2 = this.h[7], O2 = this.h[8], B2 = this.h[9], T = this.h[10], C = this.h[11], I = this.h[12], M = this.h[13], U = this.h[14], R = this.h[15];
          o(this.k.length === s2.length);
          for (var j = 0; j < s2.length; j += 2) {
            var N = U, F = R, L = (i2 = void 0, (i2 = a(r4 = O2, n2 = B2, 14) ^ a(r4, n2, 18) ^ a(n2, r4, 9)) < 0 && (i2 += 4294967296), i2), D = x(O2, B2), H = w(O2, 0, T, 0, I), q = A(0, B2, 0, C, 0, M), z = this.k[j], G = this.k[j + 1], K = s2[j], V = s2[j + 1], J = b(N, F, L, D, H, q, z, G, K, V), W = y(N, F, L, D, H, q, z, G, K, V);
            N = S(u2, c2), F = E(u2, c2), L = k(u2, 0, h2, 0, m2), D = _(0, c2, 0, p2, 0, v2);
            var Y = d(N, F, L, D), X = l(N, F, L, D);
            U = I, R = M, I = T, M = C, T = O2, C = B2, O2 = d(g2, P2, J, W), B2 = l(P2, P2, J, W), g2 = m2, P2 = v2, m2 = h2, v2 = p2, h2 = u2, p2 = c2, u2 = d(J, W, Y, X), c2 = l(J, W, Y, X);
          }
          f(this.h, 0, u2, c2), f(this.h, 2, h2, p2), f(this.h, 4, m2, v2), f(this.h, 6, g2, P2), f(this.h, 8, O2, B2), f(this.h, 10, T, C), f(this.h, 12, I, M), f(this.h, 14, U, R);
        }, g.prototype._digest = function(e3) {
          return "hex" === e3 ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
        };
      }, 70: (e2, t2, r3) => {
        "use strict";
        var n = r3(4268).rotr32;
        function i(e3, t3, r4) {
          return e3 & t3 ^ ~e3 & r4;
        }
        function o(e3, t3, r4) {
          return e3 & t3 ^ e3 & r4 ^ t3 & r4;
        }
        function a(e3, t3, r4) {
          return e3 ^ t3 ^ r4;
        }
        t2.ft_1 = function(e3, t3, r4, n2) {
          return 0 === e3 ? i(t3, r4, n2) : 1 === e3 || 3 === e3 ? a(t3, r4, n2) : 2 === e3 ? o(t3, r4, n2) : void 0;
        }, t2.ch32 = i, t2.maj32 = o, t2.p32 = a, t2.s0_256 = function(e3) {
          return n(e3, 2) ^ n(e3, 13) ^ n(e3, 22);
        }, t2.s1_256 = function(e3) {
          return n(e3, 6) ^ n(e3, 11) ^ n(e3, 25);
        }, t2.g0_256 = function(e3) {
          return n(e3, 7) ^ n(e3, 18) ^ e3 >>> 3;
        }, t2.g1_256 = function(e3) {
          return n(e3, 17) ^ n(e3, 19) ^ e3 >>> 10;
        };
      }, 4268: (e2, t2, r3) => {
        "use strict";
        var n = r3(4504), i = r3(1736);
        function o(e3, t3) {
          return 55296 == (64512 & e3.charCodeAt(t3)) && !(t3 < 0 || t3 + 1 >= e3.length) && 56320 == (64512 & e3.charCodeAt(t3 + 1));
        }
        function a(e3) {
          return (e3 >>> 24 | e3 >>> 8 & 65280 | e3 << 8 & 16711680 | (255 & e3) << 24) >>> 0;
        }
        function s(e3) {
          return 1 === e3.length ? "0" + e3 : e3;
        }
        function u(e3) {
          return 7 === e3.length ? "0" + e3 : 6 === e3.length ? "00" + e3 : 5 === e3.length ? "000" + e3 : 4 === e3.length ? "0000" + e3 : 3 === e3.length ? "00000" + e3 : 2 === e3.length ? "000000" + e3 : 1 === e3.length ? "0000000" + e3 : e3;
        }
        t2.inherits = i, t2.toArray = function(e3, t3) {
          if (Array.isArray(e3))
            return e3.slice();
          if (!e3)
            return [];
          var r4 = [];
          if ("string" == typeof e3)
            if (t3) {
              if ("hex" === t3)
                for ((e3 = e3.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e3 = "0" + e3), i2 = 0; i2 < e3.length; i2 += 2)
                  r4.push(parseInt(e3[i2] + e3[i2 + 1], 16));
            } else
              for (var n2 = 0, i2 = 0; i2 < e3.length; i2++) {
                var a2 = e3.charCodeAt(i2);
                a2 < 128 ? r4[n2++] = a2 : a2 < 2048 ? (r4[n2++] = a2 >> 6 | 192, r4[n2++] = 63 & a2 | 128) : o(e3, i2) ? (a2 = 65536 + ((1023 & a2) << 10) + (1023 & e3.charCodeAt(++i2)), r4[n2++] = a2 >> 18 | 240, r4[n2++] = a2 >> 12 & 63 | 128, r4[n2++] = a2 >> 6 & 63 | 128, r4[n2++] = 63 & a2 | 128) : (r4[n2++] = a2 >> 12 | 224, r4[n2++] = a2 >> 6 & 63 | 128, r4[n2++] = 63 & a2 | 128);
              }
          else
            for (i2 = 0; i2 < e3.length; i2++)
              r4[i2] = 0 | e3[i2];
          return r4;
        }, t2.toHex = function(e3) {
          for (var t3 = "", r4 = 0; r4 < e3.length; r4++)
            t3 += s(e3[r4].toString(16));
          return t3;
        }, t2.htonl = a, t2.toHex32 = function(e3, t3) {
          for (var r4 = "", n2 = 0; n2 < e3.length; n2++) {
            var i2 = e3[n2];
            "little" === t3 && (i2 = a(i2)), r4 += u(i2.toString(16));
          }
          return r4;
        }, t2.zero2 = s, t2.zero8 = u, t2.join32 = function(e3, t3, r4, i2) {
          var o2 = r4 - t3;
          n(o2 % 4 == 0);
          for (var a2 = new Array(o2 / 4), s2 = 0, u2 = t3; s2 < a2.length; s2++, u2 += 4) {
            var c;
            c = "big" === i2 ? e3[u2] << 24 | e3[u2 + 1] << 16 | e3[u2 + 2] << 8 | e3[u2 + 3] : e3[u2 + 3] << 24 | e3[u2 + 2] << 16 | e3[u2 + 1] << 8 | e3[u2], a2[s2] = c >>> 0;
          }
          return a2;
        }, t2.split32 = function(e3, t3) {
          for (var r4 = new Array(4 * e3.length), n2 = 0, i2 = 0; n2 < e3.length; n2++, i2 += 4) {
            var o2 = e3[n2];
            "big" === t3 ? (r4[i2] = o2 >>> 24, r4[i2 + 1] = o2 >>> 16 & 255, r4[i2 + 2] = o2 >>> 8 & 255, r4[i2 + 3] = 255 & o2) : (r4[i2 + 3] = o2 >>> 24, r4[i2 + 2] = o2 >>> 16 & 255, r4[i2 + 1] = o2 >>> 8 & 255, r4[i2] = 255 & o2);
          }
          return r4;
        }, t2.rotr32 = function(e3, t3) {
          return e3 >>> t3 | e3 << 32 - t3;
        }, t2.rotl32 = function(e3, t3) {
          return e3 << t3 | e3 >>> 32 - t3;
        }, t2.sum32 = function(e3, t3) {
          return e3 + t3 >>> 0;
        }, t2.sum32_3 = function(e3, t3, r4) {
          return e3 + t3 + r4 >>> 0;
        }, t2.sum32_4 = function(e3, t3, r4, n2) {
          return e3 + t3 + r4 + n2 >>> 0;
        }, t2.sum32_5 = function(e3, t3, r4, n2, i2) {
          return e3 + t3 + r4 + n2 + i2 >>> 0;
        }, t2.sum64 = function(e3, t3, r4, n2) {
          var i2 = e3[t3], o2 = n2 + e3[t3 + 1] >>> 0, a2 = (o2 < n2 ? 1 : 0) + r4 + i2;
          e3[t3] = a2 >>> 0, e3[t3 + 1] = o2;
        }, t2.sum64_hi = function(e3, t3, r4, n2) {
          return (t3 + n2 >>> 0 < t3 ? 1 : 0) + e3 + r4 >>> 0;
        }, t2.sum64_lo = function(e3, t3, r4, n2) {
          return t3 + n2 >>> 0;
        }, t2.sum64_4_hi = function(e3, t3, r4, n2, i2, o2, a2, s2) {
          var u2 = 0, c = t3;
          return u2 += (c = c + n2 >>> 0) < t3 ? 1 : 0, u2 += (c = c + o2 >>> 0) < o2 ? 1 : 0, e3 + r4 + i2 + a2 + (u2 += (c = c + s2 >>> 0) < s2 ? 1 : 0) >>> 0;
        }, t2.sum64_4_lo = function(e3, t3, r4, n2, i2, o2, a2, s2) {
          return t3 + n2 + o2 + s2 >>> 0;
        }, t2.sum64_5_hi = function(e3, t3, r4, n2, i2, o2, a2, s2, u2, c) {
          var f = 0, d = t3;
          return f += (d = d + n2 >>> 0) < t3 ? 1 : 0, f += (d = d + o2 >>> 0) < o2 ? 1 : 0, f += (d = d + s2 >>> 0) < s2 ? 1 : 0, e3 + r4 + i2 + a2 + u2 + (f += (d = d + c >>> 0) < c ? 1 : 0) >>> 0;
        }, t2.sum64_5_lo = function(e3, t3, r4, n2, i2, o2, a2, s2, u2, c) {
          return t3 + n2 + o2 + s2 + c >>> 0;
        }, t2.rotr64_hi = function(e3, t3, r4) {
          return (t3 << 32 - r4 | e3 >>> r4) >>> 0;
        }, t2.rotr64_lo = function(e3, t3, r4) {
          return (e3 << 32 - r4 | t3 >>> r4) >>> 0;
        }, t2.shr64_hi = function(e3, t3, r4) {
          return e3 >>> r4;
        }, t2.shr64_lo = function(e3, t3, r4) {
          return (e3 << 32 - r4 | t3 >>> r4) >>> 0;
        };
      }, 9410: (e2, t2, r3) => {
        "use strict";
        var n = r3(7198), i = r3(6580), o = r3(4504);
        function a(e3) {
          if (!(this instanceof a))
            return new a(e3);
          this.hash = e3.hash, this.predResist = !!e3.predResist, this.outLen = this.hash.outSize, this.minEntropy = e3.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
          var t3 = i.toArray(e3.entropy, e3.entropyEnc || "hex"), r4 = i.toArray(e3.nonce, e3.nonceEnc || "hex"), n2 = i.toArray(e3.pers, e3.persEnc || "hex");
          o(t3.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(t3, r4, n2);
        }
        e2.exports = a, a.prototype._init = function(e3, t3, r4) {
          var n2 = e3.concat(t3).concat(r4);
          this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
          for (var i2 = 0; i2 < this.V.length; i2++)
            this.K[i2] = 0, this.V[i2] = 1;
          this._update(n2), this._reseed = 1, this.reseedInterval = 281474976710656;
        }, a.prototype._hmac = function() {
          return new n.hmac(this.hash, this.K);
        }, a.prototype._update = function(e3) {
          var t3 = this._hmac().update(this.V).update([0]);
          e3 && (t3 = t3.update(e3)), this.K = t3.digest(), this.V = this._hmac().update(this.V).digest(), e3 && (this.K = this._hmac().update(this.V).update([1]).update(e3).digest(), this.V = this._hmac().update(this.V).digest());
        }, a.prototype.reseed = function(e3, t3, r4, n2) {
          "string" != typeof t3 && (n2 = r4, r4 = t3, t3 = null), e3 = i.toArray(e3, t3), r4 = i.toArray(r4, n2), o(e3.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(e3.concat(r4 || [])), this._reseed = 1;
        }, a.prototype.generate = function(e3, t3, r4, n2) {
          if (this._reseed > this.reseedInterval)
            throw new Error("Reseed is required");
          "string" != typeof t3 && (n2 = r4, r4 = t3, t3 = null), r4 && (r4 = i.toArray(r4, n2 || "hex"), this._update(r4));
          for (var o2 = []; o2.length < e3; )
            this.V = this._hmac().update(this.V).digest(), o2 = o2.concat(this.V);
          var a2 = o2.slice(0, e3);
          return this._update(r4), this._reseed++, i.encode(a2, t3);
        };
      }, 912: (e2, t2, r3) => {
        "use strict";
        var n = r3(9519), i = r3(1143), o = e2.exports;
        for (var a in n)
          n.hasOwnProperty(a) && (o[a] = n[a]);
        function s(e3) {
          if ("string" == typeof e3 && (e3 = i.parse(e3)), e3.protocol || (e3.protocol = "https:"), "https:" !== e3.protocol)
            throw new Error('Protocol "' + e3.protocol + '" not supported. Expected "https:"');
          return e3;
        }
        o.request = function(e3, t3) {
          return e3 = s(e3), n.request.call(this, e3, t3);
        }, o.get = function(e3, t3) {
          return e3 = s(e3), n.get.call(this, e3, t3);
        };
      }, 2996: (e2, t2, r3) => {
        "use strict";
        var n;
        r3(8847)(r3(3355)), void 0 === (n = (function() {
          return e3 = [new Uint32Array([2157250, 2157314, 2157378, 2157442, 2157506, 2157570, 2157634, 0, 2157698, 2157762, 2157826, 2157890, 2157954, 0, 2158018, 0]), new Uint32Array([2179041, 6291456, 2179073, 6291456, 2179105, 6291456, 2179137, 6291456, 2179169, 6291456, 2179201, 6291456, 2179233, 6291456, 2179265, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 14680064, 14680064, 14680064, 14680064, 14680064]), new Uint32Array([0, 2113729, 2197345, 2197377, 2113825, 2197409, 2197441, 2113921, 2197473, 2114017, 2197505, 2197537, 2197569, 2197601, 2197633, 2197665]), new Uint32Array([6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 23068672, 23068672, 23068672, 0, 0, 0, 0, 23068672]), new Uint32Array([14680064, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 14680064, 14680064]), new Uint32Array([2196001, 2196033, 2196065, 2196097, 2196129, 2196161, 2196193, 2196225, 2196257, 2196289, 2196321, 2196353, 2196385, 2196417, 2196449, 2196481]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 0, 0, 0, 0, 0]), new Uint32Array([2097281, 2105921, 2097729, 2106081, 0, 2097601, 2162337, 2106017, 2133281, 2097505, 2105889, 2097185, 2097697, 2135777, 2097633, 2097441]), new Uint32Array([2177025, 6291456, 2177057, 6291456, 2177089, 6291456, 2177121, 6291456, 2177153, 6291456, 2177185, 6291456, 2177217, 6291456, 2177249, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456]), new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456]), new Uint32Array([2134435, 2134531, 2134627, 2134723, 2134723, 2134819, 2134819, 2134915, 2134915, 2135011, 2105987, 2135107, 2135203, 2135299, 2131587, 2135395]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 6291456, 2168673, 2169249, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2147906, 2147970, 2148034, 2148098, 2148162, 2148226, 2148290, 2148354, 2147906, 2147970, 2148034, 2148098, 2148162, 2148226, 2148290, 2148354]), new Uint32Array([2125219, 2125315, 2152834, 2152898, 2125411, 2152962, 2153026, 2125506, 2125507, 2125603, 2153090, 2153154, 2153218, 2153282, 2153346, 2105348]), new Uint32Array([2203393, 6291456, 2203425, 6291456, 2203457, 6291456, 2203489, 6291456, 6291456, 6291456, 6291456, 2203521, 6291456, 2181281, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 23068672, 6291456, 2145538, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 6291456]), new Uint32Array([2139426, 2160834, 2160898, 2160962, 2134242, 2161026, 2161090, 2161154, 2161218, 2161282, 2161346, 2161410, 2138658, 2161474, 2161538, 2134722]), new Uint32Array([2119939, 2124930, 2125026, 2106658, 2125218, 2128962, 2129058, 2129154, 2129250, 2129346, 2129442, 2108866, 2108770, 2150466, 2150530, 2150594]), new Uint32Array([2201601, 6291456, 2201633, 6291456, 2201665, 6291456, 2201697, 6291456, 2201729, 6291456, 2201761, 6291456, 2201793, 6291456, 2201825, 6291456]), new Uint32Array([2193537, 2193569, 2193601, 2193633, 2193665, 2193697, 2193729, 2193761, 2193793, 2193825, 2193857, 2193889, 2193921, 2193953, 2193985, 2194017]), new Uint32Array([6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2190561, 6291456, 2190593, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2190625, 6291456, 2190657, 6291456, 23068672]), new Uint32Array([2215905, 2215937, 2215969, 2216001, 2216033, 2216065, 2216097, 2216129, 2216161, 2216193, 2216225, 2216257, 2105441, 2216289, 2216321, 2216353]), new Uint32Array([23068672, 18884130, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2191233, 2191265, 2191297, 2191329, 2191361, 2191393, 2191425, 2117377, 2191457, 2191489, 2191521, 2191553, 2191585, 2191617, 2191649, 2117953]), new Uint32Array([2132227, 2132323, 2132419, 2132419, 2132515, 2132515, 2132611, 2132707, 2132707, 2132803, 2132899, 2132899, 2132995, 2132995, 2133091, 2133187]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 0, 0]), new Uint32Array([2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 10609889, 10610785, 10609921, 10610817, 2222241]), new Uint32Array([6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0]), new Uint32Array([2219969, 2157121, 2157441, 2157505, 2157889, 2157953, 2220001, 2158465, 2158529, 10575617, 2156994, 2157058, 2129923, 2130019, 2157122, 2157186]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]), new Uint32Array([2185249, 6291456, 2185281, 6291456, 2185313, 6291456, 2185345, 6291456, 2185377, 6291456, 2185409, 6291456, 2185441, 6291456, 2185473, 6291456]), new Uint32Array([0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 6291456, 0]), new Uint32Array([2183361, 6291456, 2183393, 6291456, 2183425, 6291456, 2183457, 6291456, 2183489, 6291456, 2183521, 6291456, 2183553, 6291456, 2183585, 6291456]), new Uint32Array([2192161, 2192193, 2192225, 2192257, 2192289, 2192321, 2192353, 2192385, 2192417, 2192449, 2192481, 2192513, 2192545, 2192577, 2192609, 2192641]), new Uint32Array([2212001, 2212033, 2212065, 2212097, 2212129, 2212161, 2212193, 2212225, 2212257, 2212289, 2212321, 2212353, 2212385, 2212417, 2212449, 2207265]), new Uint32Array([2249825, 2249857, 2249889, 2249921, 2249954, 2250018, 2250082, 2250145, 2250177, 2250209, 2250241, 2250274, 2250337, 2250370, 2250433, 2250465]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2147905, 2147969, 2148033, 2148097, 2148161, 2148225, 2148289, 2148353]), new Uint32Array([10485857, 6291456, 2197217, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 23068672, 23068672]), new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([2180353, 2180385, 2144033, 2180417, 2180449, 2180481, 2180513, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 10610209, 10610465, 10610241, 10610753, 10609857]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0, 0]), new Uint32Array([2223842, 2223906, 2223970, 2224034, 2224098, 2224162, 2224226, 2224290, 2224354, 2224418, 2224482, 2224546, 2224610, 2224674, 2224738, 2224802]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 18923650, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 18923714, 23068672, 23068672]), new Uint32Array([2126179, 2125538, 2126275, 2126371, 2126467, 2125634, 2126563, 2105603, 2105604, 2125346, 2126659, 2126755, 2126851, 2098179, 2098181, 2098182]), new Uint32Array([2227426, 2227490, 2227554, 2227618, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2192353, 2240642, 2240642, 2240705, 2240737, 2240737, 2240769, 2240802, 2240866, 2240929, 2240961, 2240993, 2241025, 2241057, 2241089, 2241121]), new Uint32Array([6291456, 2170881, 2170913, 2170945, 6291456, 2170977, 6291456, 2171009, 2171041, 6291456, 6291456, 6291456, 2171073, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2132226, 2132514, 2163586, 2132610, 2160386, 2133090, 2133186, 2160450, 2160514, 2160578, 2133570, 2106178, 2160642, 2133858, 2160706, 2160770]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10532162, 10532226, 10532290, 10532354, 10532418, 10532482, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672]), new Uint32Array([2098209, 2108353, 2108193, 2108481, 2170241, 2111713, 2105473, 2105569, 2105601, 2112289, 2112481, 2098305, 2108321, 0, 0, 0]), new Uint32Array([2209121, 2209153, 2209185, 2209217, 2209249, 2209281, 2209313, 2209345, 2209377, 2209409, 2209441, 2209473, 2207265, 2209505, 2209537, 2209569]), new Uint32Array([2189025, 6291456, 2189057, 6291456, 2189089, 6291456, 2189121, 6291456, 2189153, 6291456, 2189185, 6291456, 2189217, 6291456, 2189249, 6291456]), new Uint32Array([2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2173761, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233057]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2165764, 2140004]), new Uint32Array([2215105, 6291456, 2215137, 6291456, 6291456, 2215169, 2215201, 6291456, 6291456, 6291456, 2215233, 2215265, 2215297, 2215329, 2215361, 2215393]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([10505091, 10505187, 10505283, 10505379, 10505475, 10505571, 10505667, 10505763, 10505859, 10505955, 10506051, 10506147, 10506243, 10506339, 10506435, 10506531]), new Uint32Array([2229730, 2229794, 2229858, 2229922, 2229986, 2230050, 2230114, 2230178, 2230242, 2230306, 2230370, 2230434, 2230498, 2230562, 2230626, 2230690]), new Uint32Array([2105505, 2098241, 2108353, 2108417, 2105825, 0, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 10502115, 10502178, 10502211, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456]), new Uint32Array([2190305, 6291456, 2190337, 6291456, 2190369, 6291456, 2190401, 6291456, 2190433, 6291456, 2190465, 6291456, 2190497, 6291456, 2190529, 6291456]), new Uint32Array([2173793, 2173985, 2174017, 6291456, 2173761, 2173697, 6291456, 2174689, 6291456, 2174017, 2174721, 6291456, 6291456, 2174753, 2174785, 2174817]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2099521, 2099105, 2120705, 2098369, 2120801, 2103361, 2097985, 2098433, 2121377, 2121473, 2099169, 2099873, 2098401, 2099393, 2152609, 2100033]), new Uint32Array([2132898, 2163842, 2163906, 2133282, 2132034, 2131938, 2137410, 2132802, 2132706, 2164866, 2133282, 2160578, 2165186, 2165186, 6291456, 6291456]), new Uint32Array([10500003, 10500099, 10500195, 10500291, 10500387, 10500483, 10500579, 10500675, 10500771, 10500867, 10500963, 10501059, 10501155, 10501251, 10501347, 10501443]), new Uint32Array([2163458, 2130978, 2131074, 2131266, 2131362, 2163522, 2160130, 2132066, 2131010, 2131106, 2106018, 2131618, 2131298, 2132034, 2131938, 2137410]), new Uint32Array([2212961, 2116993, 2212993, 2213025, 2213057, 2213089, 2213121, 2213153, 2213185, 2213217, 2213249, 2209633, 2213281, 2213313, 2213345, 2213377]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([2113729, 2113825, 2113921, 2114017, 2114113, 2114209, 2114305, 2114401, 2114497, 2114593, 2114689, 2114785, 2114881, 2114977, 2115073, 2115169]), new Uint32Array([2238177, 2238209, 2238241, 2238273, 2238305, 2238337, 2238337, 2217537, 2238369, 2238401, 2238433, 2238465, 2215649, 2238497, 2238529, 2238561]), new Uint32Array([2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905]), new Uint32Array([6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 0]), new Uint32Array([6291456, 0, 6291456, 2145026, 0, 6291456, 2145090, 0, 6291456, 6291456, 0, 0, 23068672, 0, 23068672, 23068672]), new Uint32Array([2099233, 2122017, 2200673, 2098113, 2121537, 2103201, 2200705, 2104033, 2121857, 2121953, 2122401, 2099649, 2099969, 2123009, 2100129, 2100289]), new Uint32Array([6291456, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0]), new Uint32Array([2187681, 2187713, 2187745, 2187777, 2187809, 2187841, 2187873, 2187905, 2187937, 2187969, 2188001, 2188033, 2188065, 2188097, 2188129, 2188161]), new Uint32Array([0, 10554498, 10554562, 10554626, 10554690, 10554754, 10554818, 10554882, 10554946, 10555010, 10555074, 6291456, 6291456, 0, 0, 0]), new Uint32Array([2235170, 2235234, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2181153, 6291456, 2188897, 6291456, 6291456, 2188929, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2111905, 2100865, 2188961, 2188993]), new Uint32Array([2100833, 2100897, 0, 0, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 10575617, 2187041, 10502177, 10489601, 10489697, 2112289]), new Uint32Array([6291456, 2172833, 6291456, 2172865, 2172897, 2172929, 2172961, 6291456, 2172993, 6291456, 2173025, 6291456, 2173057, 6291456, 2173089, 6291456]), new Uint32Array([6291456, 0, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 6291456, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 2190721]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456]), new Uint32Array([2184993, 6291456, 2185025, 6291456, 2185057, 6291456, 2185089, 6291456, 2185121, 6291456, 2185153, 6291456, 2185185, 6291456, 2185217, 6291456]), new Uint32Array([2115265, 2115361, 2115457, 2115553, 2115649, 2115745, 2115841, 2115937, 2116033, 2116129, 2116225, 2116321, 2150658, 2150722, 2200225, 6291456]), new Uint32Array([2168321, 6291456, 2168353, 6291456, 2168385, 6291456, 2168417, 6291456, 2168449, 6291456, 2168481, 6291456, 2168513, 6291456, 2168545, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 0, 6291456, 0, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 2186625, 0, 0, 6291456, 6291456, 2186657, 2186689, 2186721, 2173505, 0, 10496067, 10496163, 10496259]), new Uint32Array([2178785, 6291456, 2178817, 6291456, 2178849, 6291456, 2178881, 6291456, 2178913, 6291456, 2178945, 6291456, 2178977, 6291456, 2179009, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0]), new Uint32Array([2097152, 0, 0, 0, 2097152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 2197857, 2197889, 2197921, 2197953, 2197985, 2198017, 0, 0, 2198049, 2198081, 2198113, 2198145, 2198177, 2198209]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2098209, 2167297, 2111137, 6291456]), new Uint32Array([2171393, 6291456, 2171425, 6291456, 2171457, 6291456, 2171489, 6291456, 2171521, 6291456, 2171553, 6291456, 2171585, 6291456, 2171617, 6291456]), new Uint32Array([2206753, 2206785, 2195457, 2206817, 2206849, 2206881, 2206913, 2197153, 2197153, 2206945, 2117857, 2206977, 2207009, 2207041, 2207073, 2207105]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 2144834, 2144898, 0, 2144962]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672]), new Uint32Array([2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 0, 2105505, 2098241]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 2202049, 6291456, 2202081, 6291456, 2202113, 6291456, 2202145, 6291456, 2202177, 6291456, 2202209, 6291456, 2202241, 6291456]), new Uint32Array([10501155, 10501251, 10501347, 10501443, 10501539, 10501635, 10501731, 10501827, 10501923, 10502019, 2141731, 2105505, 2098177, 2155586, 2166530, 0]), new Uint32Array([2102081, 2102209, 2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 2100833, 2100737, 2098337, 2101441]), new Uint32Array([2146882, 2146946, 2147010, 2147074, 2147138, 2147202, 2147266, 2147330, 2146882, 2146946, 2147010, 2147074, 2147138, 2147202, 2147266, 2147330]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([10502307, 10502403, 10502499, 10502595, 10502691, 10502787, 10502883, 10502979, 10503075, 10503171, 10503267, 10503363, 10503459, 10503555, 10503651, 10503747]), new Uint32Array([2179937, 2179969, 2180001, 2180033, 2156545, 2180065, 2156577, 2180097, 2180129, 2180161, 2180193, 2180225, 2180257, 2180289, 2156737, 2180321]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 0, 0, 6291456, 0, 0, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0]), new Uint32Array([2227682, 2227746, 2227810, 2227874, 2227938, 2228002, 2228066, 2228130, 2228194, 2228258, 2228322, 2228386, 2228450, 2228514, 2228578, 2228642]), new Uint32Array([2105601, 2169121, 2108193, 2170049, 2181025, 2181057, 2112481, 2108321, 2108289, 2181089, 2170497, 2100865, 2181121, 2173601, 2173633, 2173665]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2180641, 6291456, 6291456, 6291456]), new Uint32Array([0, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 0, 0, 6291456, 6291456, 0, 6291456, 6291456, 6291456]), new Uint32Array([2178273, 6291456, 2178305, 6291456, 2178337, 6291456, 2178369, 6291456, 2178401, 6291456, 2178433, 6291456, 2178465, 6291456, 2178497, 6291456]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456]), new Uint32Array([2237377, 2237409, 2236225, 2237441, 2237473, 2217441, 2215521, 2215553, 2217473, 2237505, 2237537, 2209697, 2237569, 2215585, 2237601, 2237633]), new Uint32Array([2221985, 2165601, 2165601, 2165665, 2165665, 2222017, 2222017, 2165729, 2165729, 2158913, 2158913, 2158913, 2158913, 2097281, 2097281, 2105921]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2149634, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2176897, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 2176929, 6291456, 2176961, 6291456, 2176993, 6291456]), new Uint32Array([2172641, 6291456, 2172673, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2172705, 2172737, 6291456, 2172769, 2172801, 6291456]), new Uint32Array([2099173, 2104196, 2121667, 2099395, 2121763, 2152258, 2152322, 2098946, 2152386, 2121859, 2121955, 2099333, 2122051, 2104324, 2099493, 2122147]), new Uint32Array([6291456, 6291456, 6291456, 2145794, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 2145858, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 0, 0, 6291456, 0]), new Uint32Array([0, 2105921, 2097729, 0, 2097377, 0, 0, 2106017, 0, 2097505, 2105889, 2097185, 2097697, 2135777, 2097633, 2097441]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2239074, 2239138, 2239201, 2239233, 2239265, 2239297, 2239329, 2239361, 0, 2239393, 2239425, 2239425, 2239458, 2239521, 2239553, 2209569]), new Uint32Array([14680064, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 6291456, 23068672]), new Uint32Array([2108321, 2108289, 2113153, 2098209, 2180897, 2180929, 2180961, 2111137, 2098241, 2108353, 2170241, 2170273, 2180993, 2105825, 6291456, 2105473]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2146114, 6291456, 6291456, 6291456, 0, 0, 0]), new Uint32Array([2105921, 2105921, 2105921, 2222049, 2222049, 2130977, 2130977, 2130977, 2130977, 2160065, 2160065, 2160065, 2160065, 2097729, 2097729, 2097729]), new Uint32Array([2218145, 2214785, 2207937, 2218177, 2218209, 2192993, 2210113, 2212769, 2218241, 2218273, 2216129, 2218305, 2216161, 2218337, 2218369, 2218401]), new Uint32Array([0, 0, 0, 2156546, 2156610, 2156674, 2156738, 2156802, 0, 0, 0, 0, 0, 2156866, 23068672, 2156930]), new Uint32Array([23068672, 23068672, 23068672, 0, 0, 0, 0, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([2213409, 2213441, 2213473, 2213505, 2213537, 2213569, 2213601, 2213633, 2213665, 2195681, 2213697, 2213729, 2213761, 2213793, 2213825, 2213857]), new Uint32Array([2100033, 2099233, 2122017, 2200673, 2098113, 2121537, 2103201, 2200705, 2104033, 2121857, 2121953, 2122401, 2099649, 2099969, 2123009, 2100129]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2201857, 6291456, 2201889, 6291456, 2201921, 6291456, 2201953, 6291456, 2201985, 6291456, 2202017, 6291456, 2176193, 2176257, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2188193, 2188225, 2188257, 2188289, 2188321, 2188353, 2188385, 2188417, 2188449, 2188481, 2188513, 2188545, 2188577, 2188609, 2188641, 0]), new Uint32Array([10554529, 2221089, 0, 10502113, 10562017, 10537921, 10538049, 2221121, 2221153, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2213889, 2213921, 2213953, 2213985, 2214017, 2214049, 2214081, 2194177, 2214113, 2214145, 2214177, 2214209, 2214241, 2214273, 2214305, 2214337]), new Uint32Array([2166978, 2167042, 2099169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2180545, 6291456, 6291456, 6291456]), new Uint32Array([10518915, 10519011, 10519107, 10519203, 2162242, 2162306, 2159554, 2162370, 2159362, 2159618, 2105922, 2162434, 2159746, 2162498, 2159810, 2159874]), new Uint32Array([2161730, 2161794, 2135586, 2161858, 2161922, 2137186, 2131810, 2160290, 2135170, 2161986, 2137954, 2162050, 2162114, 2162178, 10518723, 10518819]), new Uint32Array([10506627, 10506723, 10506819, 10506915, 10507011, 10507107, 10507203, 10507299, 10507395, 10507491, 10507587, 10507683, 10507779, 10507875, 10507971, 10508067]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0]), new Uint32Array([2175873, 2175905, 2175937, 2175969, 2176001, 2176033, 2176065, 2176097, 2176129, 2176161, 2176193, 2176225, 2176257, 2176289, 2176321, 2176353]), new Uint32Array([2140006, 2140198, 2140390, 2140582, 2140774, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672]), new Uint32Array([2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241]), new Uint32Array([0, 23068672, 0, 0, 0, 0, 0, 0, 0, 2145154, 2145218, 2145282, 6291456, 0, 2145346, 0]), new Uint32Array([0, 0, 0, 0, 10531458, 10495395, 2148545, 2143201, 2173473, 2148865, 2173505, 0, 2173537, 0, 2173569, 2149121]), new Uint32Array([10537282, 10495683, 2148738, 2148802, 2148866, 0, 6291456, 2148930, 2186593, 2173473, 2148737, 2148865, 2148802, 10495779, 10495875, 10495971]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2215425, 2215457, 2215489, 2215521, 2215553, 2215585, 2215617, 2215649, 2215681, 2215713, 2215745, 2215777, 2192033, 2215809, 2215841, 2215873]), new Uint32Array([2242049, 2242081, 2242113, 2242145, 2242177, 2242209, 2242241, 2242273, 2215937, 2242305, 2242338, 2242401, 2242433, 2242465, 2242497, 2216001]), new Uint32Array([10554529, 2221089, 0, 0, 10562017, 10502113, 10538049, 10537921, 2221185, 10489601, 10489697, 10609889, 10609921, 2141729, 2141793, 10610273]), new Uint32Array([2141923, 2142019, 2142115, 2142211, 2142307, 2142403, 2142499, 2142595, 2142691, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([0, 2221185, 2221217, 10609857, 10609857, 10489601, 10489697, 10609889, 10609921, 2141729, 2141793, 2221345, 2221377, 2221409, 2221441, 2187105]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 18923970, 23068672, 23068672, 23068672, 0, 6291456, 6291456]), new Uint32Array([2183105, 6291456, 2183137, 6291456, 2183169, 6291456, 2183201, 6291456, 2183233, 6291456, 2183265, 6291456, 2183297, 6291456, 2183329, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2134434, 2134818, 2097666, 2097186, 2097474, 2097698, 2105986, 2131586, 2132450, 2131874, 2131778, 2135970, 2135778, 2161602, 2136162, 2161666]), new Uint32Array([2236865, 2236897, 2236930, 2236993, 2237025, 2235681, 2237058, 2237121, 2237153, 2237185, 2237217, 2217281, 2237250, 2191233, 2237313, 2237345]), new Uint32Array([2190049, 6291456, 2190081, 6291456, 2190113, 6291456, 2190145, 6291456, 2190177, 6291456, 2190209, 6291456, 2190241, 6291456, 2190273, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2101922, 2102050, 2102178, 2102306, 10498755, 10498851, 10498947, 10499043, 10499139, 10499235, 10499331, 10499427, 10499523, 10489604, 10489732, 10489860]), new Uint32Array([2166914, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]), new Uint32Array([2181601, 2170561, 2181633, 2181665, 2170753, 2181697, 2172897, 2170881, 2181729, 2170913, 2172929, 2113441, 2181761, 2181793, 2171009, 2173761]), new Uint32Array([0, 2105921, 2097729, 2106081, 0, 2097601, 2162337, 2106017, 2133281, 2097505, 0, 2097185, 2097697, 2135777, 2097633, 2097441]), new Uint32Array([6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]), new Uint32Array([2248001, 2248033, 2248066, 2248130, 2248193, 2248226, 2248289, 2248322, 2248385, 2248417, 2216673, 2248450, 2248514, 2248577, 2248610, 2248673]), new Uint32Array([6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 0]), new Uint32Array([2169729, 6291456, 2169761, 6291456, 2169793, 6291456, 2169825, 6291456, 2169857, 2169889, 6291456, 2169921, 6291456, 2143329, 6291456, 2098305]), new Uint32Array([2162178, 2163202, 2163266, 2135170, 2136226, 2161986, 2137954, 2159426, 2159490, 2163330, 2159554, 2163394, 2159682, 2139522, 2136450, 2159746]), new Uint32Array([2173953, 2173985, 0, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2174209, 2174241, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 4271169, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2174273]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 2190785, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2189793, 6291456, 2189825, 6291456, 2189857, 6291456, 2189889, 6291456, 2189921, 6291456, 2189953, 6291456, 2189985, 6291456, 2190017, 6291456]), new Uint32Array([2105601, 2112289, 2108193, 2112481, 2112577, 0, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 0, 2098209, 2111137]), new Uint32Array([2172129, 6291456, 2172161, 6291456, 2172193, 6291456, 2172225, 6291456, 2172257, 6291456, 2172289, 6291456, 2172321, 6291456, 2172353, 6291456]), new Uint32Array([2214753, 6291456, 2214785, 6291456, 6291456, 2214817, 2214849, 2214881, 2214913, 2214945, 2214977, 2215009, 2215041, 2215073, 2194401, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([0, 0, 0, 0, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([10610305, 10610337, 10575617, 2221761, 10610401, 10610433, 10502177, 0, 10610465, 10610497, 10610529, 10610561, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 23068672, 0, 0, 0, 0, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2187105, 2187137, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2199393, 2199425, 2199457, 2199489, 2199521, 2199553, 2199585, 2199617, 2199649, 2199681, 2199713, 2199745, 2199777, 2199809, 2199841, 0]), new Uint32Array([2217249, 2217281, 2217313, 2217345, 2217377, 2217409, 2217441, 2217473, 2215617, 2217505, 2217537, 2217569, 2214753, 2217601, 2217633, 2217665]), new Uint32Array([2170273, 2170305, 6291456, 2170337, 2170369, 6291456, 2170401, 2170433, 2170465, 6291456, 6291456, 6291456, 2170497, 2170529, 6291456, 2170561]), new Uint32Array([2188673, 6291456, 2188705, 2188737, 2188769, 6291456, 6291456, 2188801, 6291456, 2188833, 6291456, 2188865, 6291456, 2180929, 2181505, 2180897]), new Uint32Array([10489988, 10490116, 10490244, 10490372, 10490500, 10490628, 10490756, 10490884, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2147393, 2147457, 2147521, 2147585, 2147649, 2147713, 2147777, 2147841]), new Uint32Array([23068672, 23068672, 0, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]), new Uint32Array([2241153, 2241185, 2241217, 2215809, 2241250, 2241313, 2241345, 2241377, 2217921, 2241377, 2241409, 2215873, 2241441, 2241473, 2241505, 2241537]), new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2220417, 2220417, 2220449, 2220449, 2220481, 2220481, 2220513, 2220513, 2220545, 2220545, 2220577, 2220577, 2220609, 2220609, 2220641, 2220641]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2144002, 0, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456]), new Uint32Array([2167105, 2167137, 2167169, 2167201, 2167233, 2167265, 2167297, 2167329, 2167361, 2167393, 2167425, 2167457, 2167489, 2167521, 2167553, 2167585]), new Uint32Array([10575521, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193]), new Uint32Array([2234146, 2234210, 2234274, 2234338, 2234402, 2234466, 2234530, 2234594, 2234658, 2234722, 2234786, 2234850, 2234914, 2234978, 2235042, 2235106]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 2180577, 0, 0, 0, 0, 0, 2180609, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 6291456, 6291456]), new Uint32Array([2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2242529, 2242561, 2242593, 2242625, 2242657, 2242689, 2242721, 2242753, 2207937, 2218177, 2242785, 2242817, 2242849, 2242882, 2242945, 2242977]), new Uint32Array([2118049, 2105345, 2118241, 2105441, 2118433, 2118529, 2118625, 2118721, 2118817, 2200257, 2200289, 2191809, 2200321, 2200353, 2200385, 2200417]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]), new Uint32Array([2185505, 6291456, 2185537, 6291456, 2185569, 6291456, 2185601, 6291456, 2185633, 6291456, 2185665, 6291456, 2185697, 6291456, 2185729, 6291456]), new Uint32Array([2231970, 2232034, 2232098, 2232162, 2232226, 2232290, 2232354, 2232418, 2232482, 2232546, 2232610, 2232674, 2232738, 2232802, 2232866, 2232930]), new Uint32Array([2218625, 2246402, 2246466, 2246530, 2246594, 2246657, 2246689, 2246689, 2218657, 2219681, 2246721, 2246753, 2246785, 2246818, 2246881, 2208481]), new Uint32Array([2197025, 2197057, 2197089, 2197121, 2197153, 2197185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2219137, 2216961, 2219169, 2219201, 2219233, 2219265, 2219297, 2217025, 2215041, 2219329, 2217057, 2219361, 2217089, 2219393, 2197153, 2219426]), new Uint32Array([23068672, 23068672, 23068672, 0, 0, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713]), new Uint32Array([2243522, 2243585, 2243617, 2243649, 2243681, 2210113, 2243713, 2243746, 2243810, 2243874, 2243937, 2243970, 2244033, 2244065, 2244097, 2244129]), new Uint32Array([2178017, 6291456, 2178049, 6291456, 2178081, 6291456, 2178113, 6291456, 2178145, 6291456, 2178177, 6291456, 2178209, 6291456, 2178241, 6291456]), new Uint32Array([10553858, 2165314, 10518722, 6291456, 10518818, 0, 10518914, 2130690, 10519010, 2130786, 10519106, 2130882, 10519202, 2165378, 10554050, 2165506]), new Uint32Array([0, 0, 2135491, 2135587, 2135683, 2135779, 2135875, 2135971, 2135971, 2136067, 2136163, 2136259, 2136355, 2136355, 2136451, 2136547]), new Uint32Array([23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2220033, 2220033, 2220065, 2220065, 2220065, 2220065, 2220097, 2220097, 2220097, 2220097, 2220129, 2220129, 2220129, 2220129, 2220161, 2220161]), new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2100897, 2100898, 2100899, 2150018, 2100865, 2100866, 2100867, 2100868, 2150082, 2108481, 2109858, 2109859, 2105569, 2105505, 2098241, 2105601]), new Uint32Array([2097217, 2097505, 2097505, 2097505, 2097505, 2165570, 2165570, 2165634, 2165634, 2165698, 2165698, 2097858, 2097858, 0, 0, 2097152]), new Uint32Array([23068672, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([10503843, 10503939, 10504035, 10504131, 10504227, 10504323, 10504419, 10504515, 10504611, 10504707, 10504803, 10504899, 10504995, 10491140, 10491268, 0]), new Uint32Array([2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2173761, 2174017, 2174049]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2134145, 2097153, 2134241, 2105953, 2132705, 2130977, 2160065, 2131297, 2162049, 2133089, 2160577, 2133857, 2235297, 2220769, 2235329, 2235361]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2222401, 2222433, 2222465, 10531394, 2222497, 2222529, 2222561, 0, 2222593, 2222625, 2222657, 2222689, 2222721, 2222753, 2222785, 0]), new Uint32Array([2184481, 6291456, 2184513, 6291456, 2184545, 6291456, 2184577, 6291456, 2184609, 6291456, 2184641, 6291456, 2184673, 6291456, 2184705, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2105570, 2156034, 2126947, 2156098, 2153666, 2127043, 2127139, 2156162, 0, 2127235, 2156226, 2156290, 2156354, 2156418, 2127331, 2127427]), new Uint32Array([2215905, 2207041, 2153185, 2241569, 2241601, 2241633, 2241665, 2241697, 2241730, 2241793, 2241825, 2241857, 2241889, 2241921, 2241954, 2242017]), new Uint32Array([2203777, 6291456, 2203809, 6291456, 2203841, 6291456, 2203873, 6291456, 2203905, 6291456, 2173121, 2180993, 2181249, 2203937, 2181313, 0]), new Uint32Array([2168577, 6291456, 2168609, 6291456, 2168641, 6291456, 2168673, 6291456, 2168705, 6291456, 2168737, 6291456, 2168769, 6291456, 2168801, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 23068672, 23068672, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([2210113, 2195521, 2210145, 2210177, 2210209, 2210241, 2210273, 2210305, 2210337, 2210369, 2210401, 2210433, 2210465, 2210497, 2210529, 2210561]), new Uint32Array([6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]), new Uint32Array([2228706, 2228770, 2228834, 2228898, 2228962, 2229026, 2229090, 2229154, 2229218, 2229282, 2229346, 2229410, 2229474, 2229538, 2229602, 2229666]), new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 18874368, 18874368, 18874368, 0, 0]), new Uint32Array([2133089, 2133281, 2133281, 2133281, 2133281, 2160577, 2160577, 2160577, 2160577, 2097441, 2097441, 2097441, 2097441, 2133857, 2133857, 2133857]), new Uint32Array([6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2174017, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233089]), new Uint32Array([2178529, 6291456, 2178561, 6291456, 2178593, 6291456, 2178625, 6291456, 2178657, 6291456, 2178689, 6291456, 2178721, 6291456, 2178753, 6291456]), new Uint32Array([2221025, 2221025, 2221057, 2221057, 2159329, 2159329, 2159329, 2159329, 2097217, 2097217, 2158914, 2158914, 2158978, 2158978, 2159042, 2159042]), new Uint32Array([2208161, 2208193, 2208225, 2208257, 2194433, 2208289, 2208321, 2208353, 2208385, 2208417, 2208449, 2208481, 2208513, 2208545, 2208577, 2208609]), new Uint32Array([2169217, 6291456, 2169249, 6291456, 2169281, 6291456, 2169313, 6291456, 2169345, 6291456, 2169377, 6291456, 2169409, 6291456, 2169441, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2133187, 2133283, 2133283, 2133379, 2133475, 2133571, 2133667, 2133667, 2133763, 2133859, 2133955, 2134051, 2134147, 2134147, 2134243, 2134339]), new Uint32Array([2197697, 2114113, 2114209, 2197729, 2197761, 2114305, 2197793, 2114401, 2114497, 2197825, 2114593, 2114689, 2114785, 2114881, 2114977, 0]), new Uint32Array([2193089, 2193121, 2193153, 2193185, 2117665, 2117569, 2193217, 2193249, 2193281, 2193313, 2193345, 2193377, 2193409, 2193441, 2193473, 2193505]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2184225, 6291456, 2184257, 6291456, 2184289, 6291456, 2184321, 6291456, 2184353, 6291456, 2184385, 6291456, 2184417, 6291456, 2184449, 6291456]), new Uint32Array([2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2100833, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2098657, 2098049, 2200737, 2123489, 2123681, 2200769, 2098625, 2100321, 2098145, 2100449, 2098017, 2098753, 2200801, 2200833, 2200865, 0]), new Uint32Array([23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0]), new Uint32Array([2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 0, 2098241, 2108353, 2108417, 2105825, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2181153, 2105505, 2181185, 2167617, 2180993]), new Uint32Array([2160002, 2160066, 2160130, 2160194, 2160258, 2132066, 2131010, 2131106, 2106018, 2131618, 2160322, 2131298, 2132034, 2131938, 2137410, 2132226]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456]), new Uint32Array([2183617, 6291456, 2183649, 6291456, 2183681, 6291456, 2183713, 6291456, 2183745, 6291456, 2183777, 6291456, 2183809, 6291456, 2183841, 6291456]), new Uint32Array([0, 6291456, 6291456, 0, 6291456, 0, 0, 6291456, 6291456, 0, 6291456, 0, 0, 6291456, 0, 0]), new Uint32Array([2250977, 2251009, 2251041, 2251073, 2195009, 2251106, 2251169, 2251201, 2251233, 2251265, 2251297, 2251330, 2251394, 2251457, 2251489, 2251521]), new Uint32Array([2205729, 2205761, 2205793, 2205825, 2205857, 2205889, 2205921, 2205953, 2205985, 2206017, 2206049, 2206081, 2206113, 2206145, 2206177, 2206209]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2143170, 2168993, 6291456, 2169025, 6291456, 2169057, 6291456, 2169089, 6291456, 2143234, 2169121, 6291456, 2169153, 6291456, 2169185, 6291456]), new Uint32Array([23068672, 23068672, 2190689, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2248706, 2248769, 2248801, 2248833, 2248865, 2248897, 2248929, 2248962, 2249026, 2249090, 2249154, 2240705, 2249217, 2249249, 2249281, 2249313]), new Uint32Array([10485857, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10495394, 6291456, 2098209, 6291456, 6291456, 2097152, 6291456, 10531394]), new Uint32Array([0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]), new Uint32Array([14680064, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2173985, 2173953, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889]), new Uint32Array([6291456, 2186977, 6291456, 6291456, 6291456, 6291456, 6291456, 10537858, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2209601, 2209633, 2209665, 2209697, 2209729, 2209761, 2209793, 2209825, 2209857, 2209889, 2209921, 2209953, 2209985, 2210017, 2210049, 2210081]), new Uint32Array([10501539, 10501635, 10501731, 10501827, 10501923, 10502019, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905]), new Uint32Array([2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2174017, 2174017, 2174049]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2194561, 2194593, 2194625, 2119777, 2119873, 2194657, 2194689, 2194721, 2194753, 2194785, 2194817, 2194849, 2194881, 2194913, 2194945, 2194977]), new Uint32Array([2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569]), new Uint32Array([2222818, 2222882, 2222946, 2223010, 2223074, 2223138, 2223202, 2223266, 2223330, 2223394, 2223458, 2223522, 2223586, 2223650, 2223714, 2223778]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672]), new Uint32Array([0, 2179553, 2179585, 2179617, 2179649, 2144001, 2179681, 2179713, 2179745, 2179777, 2179809, 2156705, 2179841, 2156833, 2179873, 2179905]), new Uint32Array([6291456, 23068672, 6291456, 2145602, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 6291456, 0, 0]), new Uint32Array([2196513, 2196545, 2196577, 2196609, 2196641, 2196673, 2196705, 2196737, 2196769, 2196801, 2196833, 2196865, 2196897, 2196929, 2196961, 2196993]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2177281, 6291456, 2177313, 6291456, 2177345, 6291456, 2177377, 6291456, 2177409, 6291456, 2177441, 6291456, 2177473, 6291456, 2177505, 6291456]), new Uint32Array([2187137, 2221473, 2221505, 2221537, 2221569, 6291456, 6291456, 10610209, 10610241, 10537986, 10537986, 10537986, 10537986, 10609857, 10609857, 10609857]), new Uint32Array([2243009, 2243041, 2216033, 2243074, 2243137, 2243169, 2243201, 2219617, 2243233, 2243265, 2243297, 2243329, 2243362, 2243425, 2243457, 2243489]), new Uint32Array([10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 10485857, 2097152, 4194304, 4194304, 0, 0]), new Uint32Array([2143042, 6291456, 2143106, 2143106, 2168833, 6291456, 2168865, 6291456, 6291456, 2168897, 6291456, 2168929, 6291456, 2168961, 6291456, 2143170]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2204193, 2204225, 2204257, 2204289, 2204321, 2204353, 2204385, 2204417, 2204449, 2204481, 2204513, 2204545, 2204577, 2204609, 2204641, 2204673]), new Uint32Array([2202753, 6291456, 2202785, 6291456, 2202817, 6291456, 2202849, 6291456, 2202881, 6291456, 2202913, 6291456, 2202945, 6291456, 2202977, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321]), new Uint32Array([2147394, 2147458, 2147522, 2147586, 2147650, 2147714, 2147778, 2147842, 2147394, 2147458, 2147522, 2147586, 2147650, 2147714, 2147778, 2147842]), new Uint32Array([2253313, 2253346, 2253409, 2253441, 2253473, 2253505, 2253537, 2253569, 2253601, 2253634, 2219393, 2253697, 2253729, 2253761, 2253793, 2253825]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([2162562, 2162626, 2131362, 2162690, 2159938, 2160002, 2162754, 2162818, 2160130, 2162882, 2160194, 2160258, 2160834, 2160898, 2161026, 2161090]), new Uint32Array([2175361, 2175393, 2175425, 2175457, 2175489, 2175521, 2175553, 2175585, 2175617, 2175649, 2175681, 2175713, 2175745, 2175777, 2175809, 2175841]), new Uint32Array([2253858, 2253921, 2253954, 2254018, 2254082, 2196737, 2254145, 2196865, 2254177, 2254209, 2254241, 2254273, 2197025, 2254306, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2202113, 2204129, 2188705, 2204161]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([2173985, 2174017, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233089, 2173697, 2173761, 2173793, 2174113, 2173985, 2173953]), new Uint32Array([2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209]), new Uint32Array([2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 0, 2108417, 0, 2111713, 2100897, 2111905]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2175425, 2175489, 2175809, 2175905, 2175937, 2175937, 2176193, 2176417, 2180865, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 2143298, 2143298, 2143298, 2143362, 2143362, 2143362, 2143426, 2143426, 2143426, 2171105, 6291456, 2171137]), new Uint32Array([2120162, 2120258, 2151618, 2151682, 2151746, 2151810, 2151874, 2151938, 2152002, 2120035, 2120131, 2120227, 2152066, 2120323, 2152130, 2120419]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2195361, 2142433, 2236065, 2236097, 2236129, 2236161, 2118241, 2117473, 2236193, 2236225, 2236257, 2236289, 0, 0, 0, 0]), new Uint32Array([2189281, 6291456, 2189313, 6291456, 2189345, 6291456, 2189377, 6291456, 2189409, 6291456, 2189441, 6291456, 2189473, 6291456, 2189505, 6291456]), new Uint32Array([6291456, 6291456, 2145922, 6291456, 6291456, 6291456, 6291456, 2145986, 6291456, 6291456, 6291456, 6291456, 2146050, 6291456, 6291456, 6291456]), new Uint32Array([2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 10502113, 10562017, 10610401, 10502177, 10610433, 10538049]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 2186401, 0, 2186433, 0, 2186465, 0, 2186497]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 23068672, 23068672, 23068672]), new Uint32Array([0, 0, 2198241, 2198273, 2198305, 2198337, 2198369, 2198401, 0, 0, 2198433, 2198465, 2198497, 0, 0, 0]), new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 6291456, 23068672, 23068672]), new Uint32Array([0, 2105921, 2097729, 0, 2097377, 0, 0, 2106017, 2133281, 2097505, 2105889, 0, 2097697, 2135777, 2097633, 2097441]), new Uint32Array([2197889, 2197921, 2197953, 2197985, 2198017, 2198049, 2198081, 2198113, 2198145, 2198177, 2198209, 2198241, 2198273, 2198305, 2198337, 2198369]), new Uint32Array([2132514, 2132610, 2160386, 2133090, 2133186, 2160450, 2160514, 2133282, 2160578, 2133570, 2106178, 2160642, 2133858, 2160706, 2160770, 2134146]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 23068672, 23068672, 6291456, 23068672, 23068672, 6291456, 23068672, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2184737, 6291456, 2184769, 6291456, 2184801, 6291456, 2184833, 6291456, 2184865, 6291456, 2184897, 6291456, 2184929, 6291456, 2184961, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 6291456]), new Uint32Array([6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 2186753, 6291456, 6291456, 6291456, 6291456, 2186785, 2186817, 2186849, 2173569, 2186881, 10496355, 10495395, 10575521]), new Uint32Array([0, 0, 2097729, 0, 0, 0, 0, 2106017, 0, 2097505, 0, 2097185, 0, 2135777, 2097633, 2097441]), new Uint32Array([2189537, 6291456, 2189569, 6291456, 2189601, 6291456, 2189633, 6291456, 2189665, 6291456, 2189697, 6291456, 2189729, 6291456, 2189761, 6291456]), new Uint32Array([2202497, 6291456, 2202529, 6291456, 2202561, 6291456, 2202593, 6291456, 2202625, 6291456, 2202657, 6291456, 2202689, 6291456, 2202721, 6291456]), new Uint32Array([2245217, 2218369, 2245249, 2245282, 2245345, 2245377, 2245410, 2245474, 2245537, 2245569, 2245601, 2245633, 2245665, 2245665, 2245697, 2245729]), new Uint32Array([6291456, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 23068672, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672]), new Uint32Array([0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2097281, 2105921, 2097729, 2106081, 2097377, 2097601, 2162337, 2106017, 2133281, 2097505, 0, 2097185, 2097697, 2135777, 2097633, 2097441]), new Uint32Array([2176641, 6291456, 2176673, 6291456, 2176705, 6291456, 2176737, 6291456, 2176769, 6291456, 2176801, 6291456, 2176833, 6291456, 2176865, 6291456]), new Uint32Array([2174145, 2174177, 2149057, 2233089, 2173697, 2173761, 2173793, 2174113, 2173985, 2173953, 2174369, 2174369, 0, 0, 2100833, 2100737]), new Uint32Array([2116513, 2190817, 2190849, 2190881, 2190913, 2190945, 2116609, 2190977, 2191009, 2191041, 2191073, 2117185, 2191105, 2191137, 2191169, 2191201]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456]), new Uint32Array([2167617, 2167649, 2167681, 2167713, 2167745, 2167777, 2167809, 6291456, 2167841, 2167873, 2167905, 2167937, 2167969, 2168001, 2168033, 4240130]), new Uint32Array([2165122, 2163970, 2164034, 2164098, 2164162, 2164226, 2164290, 2164354, 2164418, 2164482, 2164546, 2133122, 2134562, 2132162, 2132834, 2136866]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2186209, 2186241, 2186273, 2186305, 2186337, 2186369, 0, 0]), new Uint32Array([2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 14680064, 14680064, 14680064, 14680064, 14680064]), new Uint32Array([0, 0, 23068672, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456]), new Uint32Array([0, 10537921, 10610689, 10610273, 10610497, 10610529, 10610305, 10610721, 10489601, 10489697, 10610337, 10575617, 10554529, 2221761, 2197217, 10496577]), new Uint32Array([2105473, 2105569, 2105601, 2112289, 0, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441]), new Uint32Array([2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481]), new Uint32Array([2125346, 2153410, 2153474, 2127394, 2153538, 2153602, 2153666, 2153730, 2105507, 2105476, 2153794, 2153858, 2153922, 2153986, 2154050, 2105794]), new Uint32Array([2200449, 2119681, 2200481, 2153313, 2199873, 2199905, 2199937, 2200513, 2200545, 2200577, 2200609, 2119105, 2119201, 2119297, 2119393, 2119489]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2175777, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2222273, 2197217, 2221473, 2221505, 2221089, 2222305, 2200865, 2099681, 2104481, 2222337, 2099905, 2120737, 2222369, 2103713, 2100225, 2098785]), new Uint32Array([2201377, 6291456, 2201409, 6291456, 2201441, 6291456, 2201473, 6291456, 2201505, 6291456, 2201537, 6291456, 2201569, 6291456, 6291456, 23068672]), new Uint32Array([2174081, 2174113, 2174145, 2174177, 2149057, 2233057, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793]), new Uint32Array([2200897, 6291456, 2200929, 6291456, 2200961, 6291456, 2200993, 6291456, 2201025, 6291456, 2180865, 6291456, 2201057, 6291456, 2201089, 6291456]), new Uint32Array([0, 0, 0, 0, 0, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0]), new Uint32Array([2161154, 2161410, 2138658, 2161474, 2161538, 2097666, 2097186, 2097474, 2162946, 2132450, 2163010, 2163074, 2136162, 2163138, 2161666, 2161730]), new Uint32Array([2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953]), new Uint32Array([0, 0, 0, 0, 0, 0, 23068672, 23068672, 0, 0, 0, 0, 2145410, 2145474, 0, 6291456]), new Uint32Array([2244161, 2216065, 2212769, 2244193, 2244225, 2244257, 2244290, 2244353, 2244385, 2244417, 2244449, 2218273, 2244481, 2244514, 2244577, 2244609]), new Uint32Array([2125730, 2125699, 2125795, 2125891, 2125987, 2154114, 2154178, 2154242, 2154306, 2154370, 2154434, 2154498, 2126082, 2126178, 2126274, 2126083]), new Uint32Array([2237665, 2237697, 2237697, 2237697, 2237730, 2237793, 2237825, 2237857, 2237890, 2237953, 2237985, 2238017, 2238049, 2238081, 2238113, 2238145]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2150146, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 0, 0]), new Uint32Array([2214369, 2238593, 2238625, 2238657, 2238689, 2238721, 2238753, 2238785, 2238817, 2238850, 2238913, 2238945, 2238977, 2235457, 2239009, 2239041]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([2252066, 2252130, 2252193, 2252225, 2252257, 2252290, 2252353, 2252385, 2252417, 2252449, 2252481, 2252513, 2252545, 2252578, 2252641, 2252673]), new Uint32Array([2197697, 2114113, 2114209, 2197729, 2197761, 2114305, 2197793, 2114401, 2114497, 2197825, 2114593, 2114689, 2114785, 2114881, 2114977, 2197857]), new Uint32Array([2224866, 2224930, 2224994, 2225058, 2225122, 2225186, 2225250, 2225314, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2219490, 2219554, 2219617, 2219649, 2219681, 2219714, 2219778, 2219842, 2219905, 2219937, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456]), new Uint32Array([2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289]), new Uint32Array([2174081, 2174113, 2174145, 2174177, 2149057, 2233089, 2173697, 2173761, 2173793, 2174113, 2173985, 2173953, 2148481, 2173601, 2173633, 2173665]), new Uint32Array([2220161, 2220161, 2220193, 2220193, 2220193, 2220193, 2220225, 2220225, 2220225, 2220225, 2220257, 2220257, 2220257, 2220257, 2220289, 2220289]), new Uint32Array([2192673, 2192705, 2192737, 2192769, 2192801, 2192833, 2192865, 2118049, 2192897, 2117473, 2117761, 2192929, 2192961, 2192993, 2193025, 2193057]), new Uint32Array([2179297, 6291456, 2179329, 6291456, 2179361, 6291456, 2179393, 6291456, 2179425, 6291456, 2179457, 6291456, 2179489, 6291456, 2179521, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2235745, 2235777, 2193633, 2235809, 2235841, 2235873, 2235905, 2235937, 2235969, 2116513, 2116705, 2236001, 2200513, 2199905, 2200545, 2236033]), new Uint32Array([2113153, 2108481, 2113345, 2113441, 2232993, 2233025, 0, 0, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761]), new Uint32Array([2170593, 6291456, 2170625, 6291456, 2170657, 6291456, 2170689, 2170721, 6291456, 2170753, 6291456, 6291456, 2170785, 6291456, 2170817, 2170849]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2166786, 2166850, 0, 0, 0, 0]), new Uint32Array([23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 10575617, 2187041, 10502177, 10489601, 10489697, 0]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2134562, 2132162, 2132834, 2136866, 2136482, 2164610, 2164674, 2164738, 2164802, 2132802, 2132706, 2164866, 2132898, 2164930, 2164994, 2165058]), new Uint32Array([6291456, 6291456, 2098337, 2101441, 10531458, 2153473, 6291456, 6291456, 10531522, 2100737, 2108193, 6291456, 2106499, 2106595, 2106691, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2233122, 2233186, 2233250, 2233314, 2233378, 2233442, 2233506, 2233570, 2233634, 2233698, 2233762, 2233826, 2233890, 2233954, 2234018, 2234082]), new Uint32Array([23068672, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2205217, 2205249, 2205281, 2205313, 2205345, 2205377, 2205409, 2205441, 2205473, 2205505, 2205537, 2205569, 2205601, 2205633, 2205665, 2205697]), new Uint32Array([6291456, 0, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 6291456, 23068672, 23068672]), new Uint32Array([2173601, 2173761, 2174081, 2173569, 2174241, 2174113, 2173953, 6291456, 2174305, 6291456, 2174337, 6291456, 2174369, 6291456, 2174401, 6291456]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([2152450, 2152514, 2099653, 2104452, 2099813, 2122243, 2099973, 2152578, 2122339, 2122435, 2122531, 2122627, 2122723, 2104580, 2122819, 2152642]), new Uint32Array([2236385, 2236417, 2236449, 2236482, 2236545, 2215425, 2236577, 2236609, 2236641, 2236673, 2215457, 2236705, 2236737, 2236770, 2215489, 2236833]), new Uint32Array([2163394, 2159746, 2163458, 2131362, 2163522, 2160130, 2163778, 2132226, 2163842, 2132898, 2163906, 2161410, 2138658, 2097666, 2136162, 2163650]), new Uint32Array([2218721, 2246913, 2246946, 2216385, 2247010, 2247074, 2215009, 2247137, 2247169, 2216481, 2247201, 2247233, 2247266, 2247330, 2247330, 0]), new Uint32Array([2129730, 2129762, 2129858, 2129731, 2129827, 2156482, 2156482, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 0, 0, 0, 0, 6291456, 0, 0]), new Uint32Array([2203969, 2204001, 2181377, 2204033, 2204065, 6291456, 2204097, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2169473, 6291456, 2169505, 6291456, 2169537, 6291456, 2169569, 6291456, 2169601, 6291456, 2169633, 6291456, 2169665, 6291456, 2169697, 6291456]), new Uint32Array([2141542, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2220801, 2220801, 2220801, 2220801, 2220833, 2220833, 2220865, 2220865, 2220865, 2220865, 2220897, 2220897, 2220897, 2220897, 2139873, 2139873]), new Uint32Array([0, 0, 0, 0, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 6291456, 0]), new Uint32Array([2214849, 2218433, 2218465, 2218497, 2218529, 2218561, 2214881, 2218593, 2218625, 2218657, 2218689, 2218721, 2218753, 2216545, 2218785, 2218817]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6291456]), new Uint32Array([2136482, 2164610, 2164674, 2164738, 2164802, 2132802, 2132706, 2164866, 2132898, 2164930, 2164994, 2165058, 2165122, 2132802, 2132706, 2164866]), new Uint32Array([2207649, 2207681, 2207713, 2207745, 2207777, 2207809, 2207841, 2207873, 2207905, 2207937, 2207969, 2208001, 2208033, 2208065, 2208097, 2208129]), new Uint32Array([2123683, 2105092, 2152706, 2123779, 2105220, 2152770, 2100453, 2098755, 2123906, 2124002, 2124098, 2124194, 2124290, 2124386, 2124482, 2124578]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 0, 0, 0, 0, 0, 0, 0, 10485857]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([10508163, 10508259, 10508355, 10508451, 2200129, 2200161, 2192737, 2200193, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2203553, 6291456, 2203585, 6291456, 6291456, 6291456, 2203617, 6291456, 2203649, 6291456, 2203681, 6291456, 2203713, 6291456, 2203745, 6291456]), new Uint32Array([18884449, 18884065, 23068672, 18884417, 18884034, 18921185, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 18874368]), new Uint32Array([2247393, 2247426, 2247489, 2247521, 2247553, 2247586, 2247649, 2247681, 2247713, 2247745, 2247777, 2247810, 2247873, 2247905, 2247937, 2247969]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 23068672]), new Uint32Array([2134145, 2097153, 2134241, 0, 2132705, 2130977, 2160065, 2131297, 0, 2133089, 2160577, 2133857, 2235297, 0, 2235329, 0]), new Uint32Array([2182593, 6291456, 2182625, 6291456, 2182657, 6291456, 2182689, 6291456, 2182721, 6291456, 2182753, 6291456, 2182785, 6291456, 2182817, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2102402, 2102403, 6291456, 2110050]), new Uint32Array([2149890, 2108323, 2149954, 6291456, 2113441, 6291456, 2149057, 6291456, 2113441, 6291456, 2105473, 2167265, 2111137, 2105505, 6291456, 2108353]), new Uint32Array([2219105, 2219137, 2195233, 2251554, 2251617, 2251649, 2251681, 2251713, 2251746, 2251810, 2251873, 2251905, 2251937, 2251970, 2252033, 2219169]), new Uint32Array([2203009, 6291456, 2203041, 6291456, 2203073, 6291456, 2203105, 6291456, 2203137, 6291456, 2203169, 6291456, 2203201, 6291456, 2203233, 6291456]), new Uint32Array([2128195, 2128291, 2128387, 2128483, 2128579, 2128675, 2128771, 2128867, 2128963, 2129059, 2129155, 2129251, 2129347, 2129443, 2129539, 2129635]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2140964, 2141156, 2140966, 2141158, 2141350]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2225378, 2225442, 2225506, 2225570, 2225634, 2225698, 2225762, 2225826, 2225890, 2225954, 2226018, 2226082, 2226146, 2226210, 2226274, 2226338]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417]), new Uint32Array([2108353, 2108417, 0, 2105601, 2108193, 2157121, 2157313, 2157377, 2157441, 2100897, 6291456, 2108419, 2173953, 2173633, 2173633, 2173953]), new Uint32Array([2111713, 2173121, 2111905, 2098177, 2173153, 2173185, 2173217, 2113153, 2113345, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 2190753]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2197249, 6291456, 2117377, 2197281, 2197313, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 23068672, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456]), new Uint32Array([2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 2100833, 2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0]), new Uint32Array([0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 23068672, 23068672]), new Uint32Array([2173281, 6291456, 2173313, 6291456, 2173345, 6291456, 2173377, 6291456, 0, 0, 10532546, 6291456, 6291456, 6291456, 10562017, 2173441]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 0, 0]), new Uint32Array([23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2159426, 2159490, 2159554, 2159362, 2159618, 2159682, 2139522, 2136450, 2159746, 2159810, 2159874, 2130978, 2131074, 2131266, 2131362, 2159938]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2203233, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2203265, 6291456, 2203297, 6291456, 2203329, 2203361, 6291456]), new Uint32Array([6291456, 6291456, 2148418, 2148482, 2148546, 0, 6291456, 2148610, 2186529, 2186561, 2148417, 2148545, 2148482, 10495778, 2143969, 10495778]), new Uint32Array([2134146, 2139426, 2160962, 2134242, 2161218, 2161282, 2161346, 2161410, 2138658, 2134722, 2134434, 2134818, 2097666, 2097346, 2097698, 2105986]), new Uint32Array([2198881, 2198913, 2198945, 2198977, 2199009, 2199041, 2199073, 2199105, 2199137, 2199169, 2199201, 2199233, 2199265, 2199297, 2199329, 2199361]), new Uint32Array([0, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456]), new Uint32Array([10610561, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193]), new Uint32Array([2183873, 6291456, 2183905, 6291456, 2183937, 6291456, 2183969, 6291456, 2184001, 6291456, 2184033, 6291456, 2184065, 6291456, 2184097, 6291456]), new Uint32Array([2244642, 2244706, 2244769, 2244801, 2218305, 2244833, 2244865, 2244897, 2244929, 2244961, 2244993, 2245026, 2245089, 2245122, 2245185, 0]), new Uint32Array([6291456, 6291456, 2116513, 2116609, 2116705, 2116801, 2199873, 2199905, 2199937, 2199969, 2190913, 2200001, 2200033, 2200065, 2200097, 2191009]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2180673, 2180705, 2180737, 2180769, 2180801, 2180833, 0, 0]), new Uint32Array([2098081, 2099521, 2099105, 2120705, 2098369, 2120801, 2103361, 2097985, 2098433, 2121377, 2121473, 2099169, 2099873, 2098401, 2099393, 2152609]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2150402]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2145666, 2145730, 6291456, 6291456]), new Uint32Array([2173921, 2173953, 2173985, 2173761, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233057, 2148481, 2173601, 2173633, 2173665]), new Uint32Array([2187073, 6291456, 6291456, 6291456, 6291456, 2098241, 2098241, 2108353, 2100897, 2111905, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2102404, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2100612, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10485857]), new Uint32Array([2149057, 2233057, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889]), new Uint32Array([2217697, 2217729, 2217761, 2217793, 2217825, 2217857, 2217889, 2217921, 2217953, 2215873, 2217985, 2215905, 2218017, 2218049, 2218081, 2218113]), new Uint32Array([2211233, 2218849, 2216673, 2218881, 2218913, 2218945, 2218977, 2219009, 2216833, 2219041, 2215137, 2219073, 2216865, 2209505, 2219105, 2216897]), new Uint32Array([2240097, 2240129, 2240161, 2240193, 2240225, 2240257, 2240289, 2240321, 2240353, 2240386, 2240449, 2240481, 2240513, 2240545, 2207905, 2240578]), new Uint32Array([6291456, 6291456, 2202273, 6291456, 2202305, 6291456, 2202337, 6291456, 2202369, 6291456, 2202401, 6291456, 2202433, 6291456, 2202465, 6291456]), new Uint32Array([0, 23068672, 23068672, 18923394, 23068672, 18923458, 18923522, 18884099, 18923586, 18884195, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2201121, 6291456, 2201153, 6291456, 2201185, 6291456, 2201217, 6291456, 2201249, 6291456, 2201281, 6291456, 2201313, 6291456, 2201345, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456]), new Uint32Array([2211041, 2211073, 2211105, 2211137, 2211169, 2211201, 2211233, 2211265, 2211297, 2211329, 2211361, 2211393, 2211425, 2211457, 2211489, 2211521]), new Uint32Array([2181825, 6291456, 2181857, 6291456, 2181889, 6291456, 2181921, 6291456, 2181953, 6291456, 2181985, 6291456, 2182017, 6291456, 2182049, 6291456]), new Uint32Array([2162337, 2097633, 2097633, 2097633, 2097633, 2132705, 2132705, 2132705, 2132705, 2097153, 2097153, 2097153, 2097153, 2133089, 2133089, 2133089]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 2148545, 6291456, 2173473, 6291456, 2148865, 6291456, 2173505, 6291456, 2173537, 6291456, 2173569, 6291456, 2149121, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 0, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]), new Uint32Array([2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2174017, 2174017, 2174049, 2174081, 2174113]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2207137, 2207169, 2207201, 2207233, 2207265, 2207297, 2207329, 2207361, 2207393, 2207425, 2207457, 2207489, 2207521, 2207553, 2207585, 2207617]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 0, 23068672, 23068672, 0, 0, 0, 0, 0, 0]), new Uint32Array([2198401, 2198433, 2198465, 2198497, 0, 2198529, 2198561, 2198593, 2198625, 2198657, 2198689, 2198721, 2198753, 2198785, 2198817, 2198849]), new Uint32Array([2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0, 0]), new Uint32Array([2216385, 2118721, 2216417, 2216449, 2216481, 2216513, 2216545, 2211233, 2216577, 2216609, 2216641, 2216673, 2216705, 2216737, 2216737, 2216769]), new Uint32Array([2216801, 2216833, 2216865, 2216897, 2216929, 2216961, 2216993, 2215169, 2217025, 2217057, 2217089, 2217121, 2217154, 2217217, 0, 0]), new Uint32Array([2210593, 2191809, 2210625, 2210657, 2210689, 2210721, 2210753, 2210785, 2210817, 2210849, 2191297, 2210881, 2210913, 2210945, 2210977, 2211009]), new Uint32Array([0, 0, 2105825, 0, 0, 2111905, 2105473, 0, 0, 2112289, 2108193, 2112481, 2112577, 0, 2098305, 2108321]), new Uint32Array([0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 2097153, 2134241, 0, 2132705, 0, 0, 2131297, 0, 2133089, 0, 2133857, 0, 2220769, 0, 2235361]), new Uint32Array([14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 6291456, 6291456, 14680064]), new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2171873, 6291456, 2171905, 6291456, 2171937, 6291456, 2171969, 6291456, 2172001, 6291456, 2172033, 6291456, 2172065, 6291456, 2172097, 6291456]), new Uint32Array([2220929, 2220929, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2133857, 2134145, 2134145, 2134145, 2134145, 2134241, 2134241, 2134241, 2134241, 2105889, 2105889, 2105889, 2105889, 2097185, 2097185, 2097185]), new Uint32Array([2173697, 2173761, 2173793, 2174113, 2173985, 2173953, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10499619, 10499715, 10499811, 10499907]), new Uint32Array([0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 0, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 0, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 23068672, 23068672]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 2144322, 2144386, 2144450, 2144514, 2144578, 2144642, 2144706, 2144770]), new Uint32Array([23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2113153, 2108481, 2113345, 2113441, 2098209, 2111137, 0, 2098241, 2108353, 2108417, 2105825, 0, 0, 2111905, 2105473, 2105569]), new Uint32Array([2236321, 2236353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2152194, 2121283, 2103684, 2103812, 2097986, 2098533, 2097990, 2098693, 2098595, 2098853, 2099013, 2103940, 2121379, 2121475, 2121571, 2104068]), new Uint32Array([2206241, 2206273, 2206305, 2206337, 2206369, 2206401, 2206433, 2206465, 2206497, 2206529, 2206561, 2206593, 2206625, 2206657, 2206689, 2206721]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 16777216, 16777216, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 23068672, 23068672, 10538818, 10538882, 6291456, 6291456, 2150338]), new Uint32Array([6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2214369, 2214401, 2214433, 2214465, 2214497, 2214529, 2214561, 2214593, 2194977, 2214625, 2195073, 2214657, 2214689, 2214721, 6291456, 6291456]), new Uint32Array([2097152, 2097152, 2097152, 2097152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2182081, 6291456, 2182113, 6291456, 2182145, 6291456, 2182177, 6291456, 2182209, 6291456, 2182241, 6291456, 2182273, 6291456, 2182305, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2146881, 2146945, 2147009, 2147073, 2147137, 2147201, 2147265, 2147329]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 23068672, 23068672]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2122915, 2123011, 2123107, 2104708, 2123203, 2123299, 2123395, 2100133, 2104836, 2100290, 2100293, 2104962, 2104964, 2098052, 2123491, 2123587]), new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456]), new Uint32Array([6291456, 2171169, 6291456, 2171201, 6291456, 2171233, 6291456, 2171265, 6291456, 2171297, 6291456, 2171329, 6291456, 6291456, 2171361, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 2148994, 2149058, 2149122, 0, 6291456, 2149186, 2186945, 2173537, 2148993, 2149121, 2149058, 10531458, 10496066, 0]), new Uint32Array([2195009, 2195041, 2195073, 2195105, 2195137, 2195169, 2195201, 2195233, 2195265, 2195297, 2195329, 2195361, 2195393, 2195425, 2195457, 2195489]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 0, 0, 6291456, 6291456]), new Uint32Array([2182849, 6291456, 2182881, 6291456, 2182913, 6291456, 2182945, 6291456, 2182977, 6291456, 2183009, 6291456, 2183041, 6291456, 2183073, 6291456]), new Uint32Array([2211553, 2210081, 2211585, 2211617, 2211649, 2211681, 2211713, 2211745, 2211777, 2211809, 2209569, 2211841, 2211873, 2211905, 2211937, 2211969]), new Uint32Array([2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2166594, 2127298, 2166658, 2142978, 2141827, 2166722]), new Uint32Array([2173985, 2173761, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233057, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 2185761, 2185793, 2185825, 2185857, 2185889, 2185921, 0, 0]), new Uint32Array([6291456, 2148481, 2173601, 2173633, 2173665, 2173697, 2173729, 2148801, 2173761, 2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 6291456]), new Uint32Array([0, 0, 0, 2220961, 2220961, 2220961, 2220961, 2144193, 2144193, 2159201, 2159201, 2159265, 2159265, 2144194, 2220993, 2220993]), new Uint32Array([2192641, 2235393, 2235425, 2152257, 2116609, 2235457, 2235489, 2200065, 2235521, 2235553, 2235585, 2212449, 2235617, 2235649, 2235681, 2235713]), new Uint32Array([2194049, 2194081, 2194113, 2194145, 2194177, 2194209, 2194241, 2194273, 2194305, 2194337, 2194369, 2194401, 2194433, 2194465, 2194497, 2194529]), new Uint32Array([2196673, 2208641, 2208673, 2208705, 2208737, 2208769, 2208801, 2208833, 2208865, 2208897, 2208929, 2208961, 2208993, 2209025, 2209057, 2209089]), new Uint32Array([2191681, 2191713, 2191745, 2191777, 2153281, 2191809, 2191841, 2191873, 2191905, 2191937, 2191969, 2192001, 2192033, 2192065, 2192097, 2192129]), new Uint32Array([2230946, 2231010, 2231074, 2231138, 2231202, 2231266, 2231330, 2231394, 2231458, 2231522, 2231586, 2231650, 2231714, 2231778, 2231842, 2231906]), new Uint32Array([14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064, 14680064]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 2185953, 2185985, 2186017, 2186049, 2186081, 2186113, 2186145, 2186177]), new Uint32Array([2139811, 2139907, 2097284, 2105860, 2105988, 2106116, 2106244, 2097444, 2097604, 2097155, 10485778, 10486344, 2106372, 6291456, 0, 0]), new Uint32Array([2110051, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2172385, 6291456, 2172417, 6291456, 2172449, 6291456, 2172481, 6291456, 2172513, 6291456, 2172545, 6291456, 2172577, 6291456, 2172609, 6291456]), new Uint32Array([0, 0, 23068672, 23068672, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2249345, 2249377, 2249409, 2249441, 2249473, 2249505, 2249537, 2249570, 2210209, 2249633, 2249665, 2249697, 2249729, 2249761, 2249793, 2216769]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2187169, 2187201, 2187233, 2187265, 2187297, 2187329, 2187361, 2187393, 2187425, 2187457, 2187489, 2187521, 2187553, 2187585, 2187617, 2187649]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([0, 0, 0, 6291456, 6291456, 0, 0, 0, 6291456, 6291456, 6291456, 0, 0, 0, 6291456, 6291456]), new Uint32Array([2182337, 6291456, 2182369, 6291456, 2182401, 6291456, 2182433, 6291456, 2182465, 6291456, 2182497, 6291456, 2182529, 6291456, 2182561, 6291456]), new Uint32Array([2138179, 2138275, 2138371, 2138467, 2134243, 2134435, 2138563, 2138659, 2138755, 2138851, 2138947, 2139043, 2138947, 2138755, 2139139, 2139235]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([0, 0, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2250498, 2250562, 2250625, 2250657, 2208321, 2250689, 2250721, 2250753, 2250785, 2250817, 2250849, 2218945, 2250881, 2250913, 2250945, 0]), new Uint32Array([2170369, 2105569, 2098305, 2108481, 2173249, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456]), new Uint32Array([2100897, 2111905, 2105473, 2105569, 2105601, 0, 2108193, 0, 0, 0, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481]), new Uint32Array([2100897, 2100897, 2105569, 2105569, 6291456, 2112289, 2149826, 6291456, 6291456, 2112481, 2112577, 2098177, 2098177, 2098177, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 2169953, 2169985, 6291456, 2170017, 6291456, 2170049, 2170081, 6291456, 2170113, 2170145, 2170177, 6291456, 6291456, 2170209, 2170241]), new Uint32Array([6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([0, 0, 0, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2220641, 2220641, 2220673, 2220673, 2220673, 2220673, 2220705, 2220705, 2220705, 2220705, 2220737, 2220737, 2220737, 2220737, 2220769, 2220769]), new Uint32Array([2127650, 2127746, 2127842, 2127938, 2128034, 2128130, 2128226, 2128322, 2128418, 2127523, 2127619, 2127715, 2127811, 2127907, 2128003, 2128099]), new Uint32Array([2143969, 2173793, 2173825, 2153473, 2173857, 2173889, 2173921, 2173953, 2173985, 2173761, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177]), new Uint32Array([0, 0, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([2204705, 2204737, 2204769, 2204801, 2204833, 2204865, 2204897, 2204929, 2204961, 2204993, 2205025, 2205057, 2205089, 2205121, 2205153, 2205185]), new Uint32Array([2176385, 6291456, 2176417, 6291456, 2176449, 6291456, 2176481, 6291456, 2176513, 6291456, 2176545, 6291456, 2176577, 6291456, 2176609, 6291456]), new Uint32Array([2195521, 2195553, 2195585, 2195617, 2195649, 2195681, 2117857, 2195713, 2195745, 2195777, 2195809, 2195841, 2195873, 2195905, 2195937, 2195969]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456]), new Uint32Array([2173921, 2173953, 2173985, 2174017, 2174017, 2174049, 2174081, 2174113, 2174145, 2174177, 2149057, 2233089, 2173697, 2173761, 2173793, 2174113]), new Uint32Array([2131586, 2132450, 2135970, 2135778, 2161602, 2136162, 2163650, 2161794, 2135586, 2163714, 2137186, 2131810, 2160290, 2135170, 2097506, 2159554]), new Uint32Array([2134145, 2097153, 2134241, 2105953, 2132705, 2130977, 2160065, 2131297, 2162049, 2133089, 2160577, 2133857, 0, 0, 0, 0]), new Uint32Array([2116513, 2116609, 2116705, 2116801, 2116897, 2116993, 2117089, 2117185, 2117281, 2117377, 2117473, 2117569, 2117665, 2117761, 2117857, 2117953]), new Uint32Array([2100737, 2098337, 2101441, 2101569, 2101697, 2101825, 2101953, 2102081, 2102209, 2100802, 2101154, 2101282, 2101410, 2101538, 2101666, 2101794]), new Uint32Array([2100289, 2098657, 2098049, 2200737, 2123489, 2123681, 2200769, 2098625, 2100321, 2098145, 2100449, 2098017, 2098753, 2098977, 2150241, 2150305]), new Uint32Array([6291456, 6291456, 6291456, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 2109955, 6291456, 6291456, 0, 0, 0, 0]), new Uint32Array([18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368, 18874368]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 6291456, 0, 6291456, 0, 0]), new Uint32Array([2130979, 2131075, 2131075, 2131171, 2131267, 2131363, 2131459, 2131555, 2131651, 2131651, 2131747, 2131843, 2131939, 2132035, 2132131, 2132227]), new Uint32Array([0, 2177793, 6291456, 2177825, 6291456, 2177857, 6291456, 2177889, 6291456, 2177921, 6291456, 2177953, 6291456, 2177985, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672]), new Uint32Array([6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2113345, 0, 2098209, 2111137, 2105505, 2098241, 2108353, 2108417, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289]), new Uint32Array([2136643, 2136739, 2136835, 2136931, 2137027, 2137123, 2137219, 2137315, 2137411, 2137507, 2137603, 2137699, 2137795, 2137891, 2137987, 2138083]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0]), new Uint32Array([2174433, 6291456, 2174465, 6291456, 2174497, 6291456, 2174529, 6291456, 2174561, 6291456, 2174593, 6291456, 2174625, 6291456, 2174657, 6291456]), new Uint32Array([0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441]), new Uint32Array([10496547, 10496643, 2105505, 2149698, 6291456, 10496739, 10496835, 2170273, 6291456, 2149762, 2105825, 2111713, 2111713, 2111713, 2111713, 2168673]), new Uint32Array([6291456, 2143490, 2143490, 2143490, 2171649, 6291456, 2171681, 2171713, 2171745, 6291456, 2171777, 6291456, 2171809, 6291456, 2171841, 6291456]), new Uint32Array([2159106, 2159106, 2159170, 2159170, 2159234, 2159234, 2159298, 2159298, 2159298, 2159362, 2159362, 2159362, 2106401, 2106401, 2106401, 2106401]), new Uint32Array([2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865, 2113153, 2108481, 2113345, 2113441, 2098209, 2111137]), new Uint32Array([2108417, 2181217, 2181249, 2181281, 2170433, 2170401, 2181313, 2181345, 2181377, 2181409, 2181441, 2181473, 2181505, 2181537, 2170529, 2181569]), new Uint32Array([2218433, 2245761, 2245793, 2245825, 2245857, 2245890, 2245953, 2245986, 2209665, 2246050, 2246113, 2246146, 2246210, 2246274, 2246337, 2246369]), new Uint32Array([2230754, 2230818, 2230882, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([6291456, 0, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 0, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2184129, 6291456, 2184161, 6291456, 2184193, 6291456, 6291456, 6291456, 6291456, 6291456, 2146818, 2183361, 6291456, 6291456, 2142978, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2135170, 2097506, 2130691, 2130787, 2130883, 2163970, 2164034, 2164098, 2164162, 2164226, 2164290, 2164354, 2164418, 2164482, 2164546, 2133122]), new Uint32Array([2108515, 2108611, 2100740, 2108707, 2108803, 2108899, 2108995, 2109091, 2109187, 2109283, 2109379, 2109475, 2109571, 2109667, 2109763, 2100738]), new Uint32Array([2102788, 2102916, 2103044, 2120515, 2103172, 2120611, 2120707, 2098373, 2103300, 2120803, 2120899, 2120995, 2103428, 2103556, 2121091, 2121187]), new Uint32Array([2158082, 2158146, 0, 2158210, 2158274, 0, 2158338, 2158402, 2158466, 2129922, 2158530, 2158594, 2158658, 2158722, 2158786, 2158850]), new Uint32Array([10499619, 10499715, 10499811, 10499907, 10500003, 10500099, 10500195, 10500291, 10500387, 10500483, 10500579, 10500675, 10500771, 10500867, 10500963, 10501059]), new Uint32Array([2239585, 2239618, 2239681, 2239713, 0, 2191969, 2239745, 2239777, 2192033, 2239809, 2239841, 2239874, 2239937, 2239970, 2240033, 2240065]), new Uint32Array([2252705, 2252738, 2252801, 2252833, 2252865, 2252897, 2252930, 2252994, 2253057, 2253089, 2253121, 2253154, 2253217, 2253250, 2219361, 2219361]), new Uint32Array([2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 2108193, 2112481, 2112577, 2098177, 2098305, 2108321, 2108289, 2100865]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 10538050, 10538114, 10538178, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([2226402, 2226466, 2226530, 2226594, 2226658, 2226722, 2226786, 2226850, 2226914, 2226978, 2227042, 2227106, 2227170, 2227234, 2227298, 2227362]), new Uint32Array([23068672, 6291456, 6291456, 6291456, 6291456, 2144066, 2144130, 2144194, 2144258, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 23068672, 23068672]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2124674, 2124770, 2123875, 2123971, 2124067, 2124163, 2124259, 2124355, 2124451, 2124547, 2124643, 2124739, 2124835, 2124931, 2125027, 2125123]), new Uint32Array([2168065, 6291456, 2168097, 6291456, 2168129, 6291456, 2168161, 6291456, 2168193, 6291456, 2168225, 6291456, 2168257, 6291456, 2168289, 6291456]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0]), new Uint32Array([23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 2100610, 2100611, 6291456, 2107842, 2107843, 6291456, 6291456, 6291456, 6291456, 10537922, 6291456, 10537986, 6291456]), new Uint32Array([2174849, 2174881, 2174913, 2174945, 2174977, 2175009, 2175041, 2175073, 2175105, 2175137, 2175169, 2175201, 2175233, 2175265, 2175297, 2175329]), new Uint32Array([2154562, 2154626, 2154690, 2154754, 2141858, 2154818, 2154882, 2127298, 2154946, 2127298, 2155010, 2155074, 2155138, 2155202, 2155266, 2155202]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 23068672, 0]), new Uint32Array([2200641, 2150786, 2150850, 2150914, 2150978, 2151042, 2106562, 2151106, 2150562, 2151170, 2151234, 2151298, 2151362, 2151426, 2151490, 2151554]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 0, 0, 0, 0, 0, 0, 0, 0, 6291456, 6291456]), new Uint32Array([2220289, 2220289, 2220321, 2220321, 2220321, 2220321, 2220353, 2220353, 2220353, 2220353, 2220385, 2220385, 2220385, 2220385, 2220417, 2220417]), new Uint32Array([2155330, 2155394, 0, 2155458, 2155522, 2155586, 2105732, 0, 2155650, 2155714, 2155778, 2125314, 2155842, 2155906, 2126274, 2155970]), new Uint32Array([23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456, 23068672, 23068672, 6291456, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0]), new Uint32Array([2097729, 2106017, 2106017, 2106017, 2106017, 2131297, 2131297, 2131297, 2131297, 2106081, 2106081, 2162049, 2162049, 2105953, 2105953, 2162337]), new Uint32Array([2097185, 2097697, 2097697, 2097697, 2097697, 2135777, 2135777, 2135777, 2135777, 2097377, 2097377, 2097377, 2097377, 2097601, 2097601, 2097217]), new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23068672]), new Uint32Array([2139331, 2139427, 2139523, 2139043, 2133571, 2132611, 2139619, 2139715, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2174113, 2174145, 2100897, 2098177, 2108289, 2100865, 2173601, 2173633, 2173985, 2174113, 2174145, 6291456, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456, 23068672, 6291456, 6291456, 6291456, 6291456]), new Uint32Array([23068672, 23068672, 18923778, 23068672, 23068672, 23068672, 23068672, 18923842, 23068672, 23068672, 23068672, 23068672, 18923906, 23068672, 23068672, 23068672]), new Uint32Array([2134145, 2097153, 2134241, 0, 2132705, 2130977, 2160065, 2131297, 0, 2133089, 0, 2133857, 0, 0, 0, 0]), new Uint32Array([6291456, 6291456, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2177537, 6291456, 2177569, 6291456, 2177601, 6291456, 2177633, 6291456, 2177665, 6291456, 2177697, 6291456, 2177729, 6291456, 2177761, 6291456]), new Uint32Array([2212481, 2212513, 2212545, 2212577, 2197121, 2212609, 2212641, 2212673, 2212705, 2212737, 2212769, 2212801, 2212833, 2212865, 2212897, 2212929]), new Uint32Array([6291456, 6291456, 23068672, 23068672, 23068672, 6291456, 6291456, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([2098241, 2108353, 2170209, 2105825, 2111713, 2100897, 2111905, 2105473, 2105569, 2105601, 2112289, 6291456, 2108193, 2172417, 2112481, 2098177]), new Uint32Array([6291456, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 23068672, 6291456, 6291456])], t3 = new Uint16Array([616, 616, 565, 147, 161, 411, 330, 2, 131, 131, 328, 454, 241, 408, 86, 86, 696, 113, 285, 350, 325, 301, 473, 214, 639, 232, 447, 64, 369, 598, 124, 672, 567, 223, 621, 154, 107, 86, 86, 86, 86, 86, 86, 505, 86, 68, 634, 86, 218, 218, 218, 218, 486, 218, 218, 513, 188, 608, 216, 86, 217, 463, 668, 85, 700, 360, 184, 86, 86, 86, 647, 402, 153, 10, 346, 718, 662, 260, 145, 298, 117, 1, 443, 342, 138, 54, 563, 86, 240, 572, 218, 70, 387, 86, 118, 460, 641, 602, 86, 86, 306, 218, 86, 692, 86, 86, 86, 86, 86, 162, 707, 86, 458, 26, 86, 218, 638, 86, 86, 86, 86, 86, 65, 449, 86, 86, 306, 183, 86, 58, 391, 667, 86, 157, 131, 131, 131, 131, 86, 433, 131, 406, 31, 218, 247, 86, 86, 693, 218, 581, 351, 86, 438, 295, 69, 462, 45, 126, 173, 650, 14, 295, 69, 97, 168, 187, 641, 78, 523, 390, 69, 108, 287, 664, 173, 219, 83, 295, 69, 108, 431, 426, 173, 694, 412, 115, 628, 52, 257, 398, 641, 118, 501, 121, 69, 579, 151, 423, 173, 620, 464, 121, 69, 382, 151, 476, 173, 27, 53, 121, 86, 594, 578, 226, 173, 86, 632, 130, 86, 96, 228, 268, 641, 622, 563, 86, 86, 21, 148, 650, 131, 131, 321, 43, 144, 343, 381, 531, 131, 131, 178, 20, 86, 399, 156, 375, 164, 541, 30, 60, 715, 198, 92, 118, 131, 131, 86, 86, 306, 407, 86, 280, 457, 196, 488, 358, 131, 131, 244, 86, 86, 143, 86, 86, 86, 86, 86, 667, 563, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 336, 363, 86, 86, 336, 86, 86, 380, 678, 67, 86, 86, 86, 678, 86, 86, 86, 512, 86, 307, 86, 708, 86, 86, 86, 86, 86, 528, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 563, 307, 86, 86, 86, 86, 86, 104, 450, 337, 86, 720, 86, 32, 450, 397, 86, 86, 86, 587, 218, 558, 708, 708, 293, 708, 86, 86, 86, 86, 86, 694, 205, 86, 8, 86, 86, 86, 86, 549, 86, 667, 697, 697, 679, 86, 458, 460, 86, 86, 650, 86, 708, 543, 86, 86, 86, 245, 86, 86, 86, 140, 218, 127, 708, 708, 458, 197, 131, 131, 131, 131, 500, 86, 86, 483, 251, 86, 306, 510, 515, 86, 722, 86, 86, 86, 65, 201, 86, 86, 483, 580, 470, 86, 86, 86, 368, 131, 131, 131, 694, 114, 110, 555, 86, 86, 123, 721, 163, 142, 713, 418, 86, 317, 675, 209, 218, 218, 218, 371, 545, 592, 629, 490, 603, 199, 46, 320, 525, 680, 310, 279, 388, 111, 42, 252, 593, 607, 235, 617, 410, 377, 50, 548, 135, 356, 17, 520, 189, 116, 392, 600, 349, 332, 482, 699, 690, 535, 119, 106, 451, 71, 152, 667, 131, 218, 218, 265, 671, 637, 492, 504, 533, 683, 269, 269, 658, 86, 86, 86, 86, 86, 86, 86, 86, 86, 491, 619, 86, 86, 6, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 229, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 667, 86, 86, 171, 131, 118, 131, 656, 206, 234, 571, 89, 334, 670, 246, 311, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 534, 86, 86, 86, 86, 86, 86, 82, 86, 86, 86, 86, 86, 430, 86, 86, 86, 86, 86, 86, 86, 86, 86, 599, 86, 324, 86, 470, 69, 640, 264, 131, 626, 101, 174, 86, 86, 667, 233, 105, 73, 374, 394, 221, 204, 84, 28, 326, 86, 86, 471, 86, 86, 86, 109, 573, 86, 171, 200, 200, 200, 200, 218, 218, 86, 86, 86, 86, 460, 131, 131, 131, 86, 506, 86, 86, 86, 86, 86, 220, 404, 34, 614, 47, 442, 305, 25, 612, 338, 601, 648, 7, 344, 255, 131, 131, 51, 86, 312, 507, 563, 86, 86, 86, 86, 588, 86, 86, 86, 86, 86, 530, 511, 86, 458, 3, 435, 384, 556, 522, 230, 527, 86, 118, 86, 86, 717, 86, 137, 273, 79, 181, 484, 23, 93, 112, 655, 249, 417, 703, 370, 87, 98, 313, 684, 585, 155, 465, 596, 481, 695, 18, 416, 428, 61, 701, 706, 282, 643, 495, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 549, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 549, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 307, 86, 86, 86, 171, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 650, 131, 422, 542, 420, 263, 24, 172, 86, 86, 86, 86, 86, 566, 86, 86, 132, 540, 395, 353, 494, 519, 19, 485, 284, 472, 131, 131, 131, 16, 714, 86, 211, 708, 86, 86, 86, 694, 698, 86, 86, 483, 704, 708, 218, 272, 86, 86, 120, 86, 159, 478, 86, 307, 247, 86, 86, 663, 597, 459, 627, 667, 86, 86, 277, 455, 39, 302, 86, 250, 86, 86, 86, 271, 99, 452, 306, 281, 329, 400, 200, 86, 86, 362, 549, 352, 646, 461, 323, 586, 86, 86, 4, 708, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 717, 86, 518, 86, 86, 650, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 125, 554, 480, 300, 613, 72, 333, 288, 561, 544, 604, 48, 719, 91, 169, 176, 590, 224, 76, 191, 29, 559, 560, 231, 537, 166, 477, 538, 256, 437, 131, 131, 469, 167, 40, 0, 685, 266, 441, 705, 239, 642, 475, 568, 640, 610, 299, 673, 517, 318, 385, 22, 202, 180, 179, 359, 424, 215, 90, 66, 521, 653, 467, 682, 453, 409, 479, 88, 131, 661, 35, 303, 15, 262, 666, 630, 712, 131, 131, 618, 659, 175, 218, 195, 347, 193, 227, 261, 150, 165, 709, 546, 294, 569, 710, 270, 413, 376, 524, 55, 242, 38, 419, 529, 170, 657, 3, 304, 122, 379, 278, 131, 651, 86, 67, 576, 458, 458, 131, 131, 86, 86, 86, 86, 86, 86, 86, 118, 309, 86, 86, 547, 86, 86, 86, 86, 667, 650, 664, 131, 131, 86, 86, 56, 131, 131, 131, 131, 131, 131, 131, 131, 86, 307, 86, 86, 86, 664, 238, 650, 86, 86, 717, 86, 118, 86, 86, 315, 86, 59, 86, 86, 574, 549, 131, 131, 340, 57, 436, 86, 86, 86, 86, 86, 86, 458, 708, 499, 691, 62, 86, 650, 86, 86, 694, 86, 86, 86, 319, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 171, 86, 549, 694, 131, 131, 131, 131, 131, 131, 131, 131, 131, 77, 86, 86, 139, 86, 502, 86, 86, 86, 667, 595, 131, 131, 131, 86, 12, 86, 13, 86, 609, 131, 131, 131, 131, 86, 86, 86, 625, 86, 669, 86, 86, 182, 129, 86, 5, 694, 104, 86, 86, 86, 86, 131, 131, 86, 86, 386, 171, 86, 86, 86, 345, 86, 324, 86, 589, 86, 213, 36, 131, 131, 131, 131, 131, 86, 86, 86, 86, 104, 131, 131, 131, 141, 290, 80, 677, 86, 86, 86, 267, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 667, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 515, 86, 86, 33, 136, 669, 86, 711, 515, 86, 86, 550, 640, 86, 104, 708, 515, 86, 159, 372, 717, 86, 86, 444, 515, 86, 86, 663, 37, 86, 563, 460, 86, 390, 624, 702, 131, 131, 131, 131, 389, 59, 708, 86, 86, 341, 208, 708, 635, 295, 69, 108, 431, 508, 100, 190, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 649, 516, 660, 131, 131, 86, 86, 86, 218, 631, 708, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 341, 575, 238, 514, 131, 131, 86, 86, 86, 218, 291, 708, 307, 131, 86, 86, 306, 367, 708, 131, 131, 131, 86, 378, 697, 86, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 615, 253, 86, 86, 86, 292, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 104, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 69, 86, 341, 553, 549, 86, 307, 86, 86, 645, 275, 455, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 708, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 667, 460, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 717, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 667, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 171, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 104, 86, 667, 459, 131, 131, 131, 131, 131, 131, 86, 458, 225, 86, 86, 86, 516, 549, 11, 390, 405, 86, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 460, 44, 218, 197, 711, 515, 131, 131, 131, 131, 664, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 307, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 308, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 640, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 118, 307, 104, 286, 591, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 549, 86, 86, 681, 86, 86, 75, 185, 314, 582, 86, 358, 496, 474, 86, 104, 131, 86, 86, 86, 86, 146, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 171, 86, 640, 131, 131, 131, 131, 131, 131, 131, 131, 246, 503, 689, 339, 674, 81, 258, 415, 439, 128, 562, 366, 414, 246, 503, 689, 583, 222, 557, 316, 636, 665, 186, 355, 95, 670, 246, 503, 689, 339, 674, 557, 258, 415, 439, 186, 355, 95, 670, 246, 503, 689, 446, 644, 536, 652, 331, 532, 335, 440, 274, 421, 297, 570, 74, 425, 364, 425, 606, 552, 403, 509, 134, 365, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 218, 218, 218, 498, 218, 218, 577, 627, 551, 497, 572, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 553, 354, 236, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 296, 455, 131, 131, 456, 243, 103, 86, 41, 459, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 9, 276, 158, 716, 393, 564, 383, 489, 401, 654, 210, 654, 131, 131, 131, 640, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 650, 86, 86, 86, 86, 86, 86, 717, 667, 563, 563, 563, 86, 549, 102, 686, 133, 246, 605, 86, 448, 86, 86, 207, 307, 131, 131, 131, 641, 86, 177, 611, 445, 373, 194, 584, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 308, 307, 171, 86, 86, 86, 86, 86, 86, 86, 717, 86, 86, 86, 86, 86, 460, 131, 131, 650, 86, 86, 86, 694, 708, 86, 86, 694, 86, 458, 131, 131, 131, 131, 131, 131, 667, 694, 289, 650, 667, 131, 131, 86, 640, 131, 131, 664, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 171, 131, 131, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 460, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 458, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 640, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 466, 203, 149, 429, 94, 432, 160, 687, 539, 63, 237, 283, 192, 248, 348, 259, 427, 526, 396, 676, 254, 468, 487, 212, 327, 623, 49, 633, 322, 493, 434, 688, 357, 361, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131]), { mapStr: "صلى الله عليه وسلمجل جلالهキロメートルrad∕s2エスクードキログラムキロワットグラムトンクルゼイロサンチームパーセントピアストルファラッドブッシェルヘクタールマンションミリバールレントゲン′′′′1⁄10viii(10)(11)(12)(13)(14)(15)(16)(17)(18)(19)(20)∫∫∫∫(오전)(오후)アパートアルファアンペアイニングエーカーカラットカロリーキュリーギルダークローネサイクルシリングバーレルフィートポイントマイクロミクロンメガトンリットルルーブル株式会社kcalm∕s2c∕kgاكبرمحمدصلعمرسولریال1⁄41⁄23⁄4 ̈́ྲཱྀླཱྀ ̈͂ ̓̀ ̓́ ̓͂ ̔̀ ̔́ ̔͂ ̈̀‵‵‵a/ca/sc/oc/utelfax1⁄71⁄91⁄32⁄31⁄52⁄53⁄54⁄51⁄65⁄61⁄83⁄85⁄87⁄8xii0⁄3∮∮∮(1)(2)(3)(4)(5)(6)(7)(8)(9)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)(o)(p)(q)(r)(s)(t)(u)(v)(w)(x)(y)(z)::====(ᄀ)(ᄂ)(ᄃ)(ᄅ)(ᄆ)(ᄇ)(ᄉ)(ᄋ)(ᄌ)(ᄎ)(ᄏ)(ᄐ)(ᄑ)(ᄒ)(가)(나)(다)(라)(마)(바)(사)(아)(자)(차)(카)(타)(파)(하)(주)(一)(二)(三)(四)(五)(六)(七)(八)(九)(十)(月)(火)(水)(木)(金)(土)(日)(株)(有)(社)(名)(特)(財)(祝)(労)(代)(呼)(学)(監)(企)(資)(協)(祭)(休)(自)(至)pte10月11月12月ergltdアールインチウォンオンスオームカイリガロンガンマギニーケースコルナコーポセンチダースノットハイツパーツピクルフランペニヒヘルツペンスページベータボルトポンドホールホーンマイルマッハマルクヤードヤールユアンルピー10点11点12点13点14点15点16点17点18点19点20点21点22点23点24点hpabardm2dm3khzmhzghzthzmm2cm2km2mm3cm3km3kpampagpalogmilmolppmv∕ma∕m10日11日12日13日14日15日16日17日18日19日20日21日22日23日24日25日26日27日28日29日30日31日galffifflשּׁשּׂ ٌّ ٍّ َّ ُّ ِّ ّٰـَّـُّـِّتجمتحجتحمتخمتمجتمحتمخجمححميحمىسحجسجحسجىسمحسمجسممصححصممشحمشجيشمخشممضحىضخمطمحطممطميعجمعممعمىغممغميغمىفخمقمحقمملحملحيلحىلججلخملمحمحجمحيمجحمجممخممجخهمجهممنحمنحىنجمنجىنمينمىيممبخيتجيتجىتخيتخىتميتمىجميجحىجمىسخىصحيشحيضحيلجيلمييحييجييميمميقمينحيعميكمينجحمخيلجمكممجحيحجيمجيفميبحيسخينجيصلےقلے𝅘𝅥𝅮𝅘𝅥𝅯𝅘𝅥𝅰𝅘𝅥𝅱𝅘𝅥𝅲𝆹𝅥𝅮𝆺𝅥𝅮𝆹𝅥𝅯𝆺𝅥𝅯〔s〕ppv〔本〕〔三〕〔二〕〔安〕〔点〕〔打〕〔盗〕〔勝〕〔敗〕 ̄ ́ ̧ssi̇ijl·ʼndžljnjdz ̆ ̇ ̊ ̨ ̃ ̋ ιեւاٴوٴۇٴيٴक़ख़ग़ज़ड़ढ़फ़य़ড়ঢ়য়ਲ਼ਸ਼ਖ਼ਗ਼ਜ਼ਫ਼ଡ଼ଢ଼ําໍາຫນຫມགྷཌྷདྷབྷཛྷཀྵཱཱིུྲྀླྀྒྷྜྷྡྷྦྷྫྷྐྵaʾἀιἁιἂιἃιἄιἅιἆιἇιἠιἡιἢιἣιἤιἥιἦιἧιὠιὡιὢιὣιὤιὥιὦιὧιὰιαιάιᾶι ͂ὴιηιήιῆιὼιωιώιῶι ̳!! ̅???!!?rs°c°fnosmtmivix⫝̸ ゙ ゚よりコト333435참고주의363738394042444546474849503月4月5月6月7月8月9月hgevギガデシドルナノピコビルペソホンリラレムdaauovpciu平成昭和大正明治naμakakbmbgbpfnfμfμgmgμlmldlklfmnmμmpsnsμsmsnvμvkvpwnwμwmwkwkωmωbqcccddbgyhainkkktlnlxphprsrsvwbstմնմեմիվնմխיִײַשׁשׂאַאָאּבּגּדּהּוּזּטּיּךּכּלּמּנּסּףּפּצּקּרּתּוֹבֿכֿפֿאלئائەئوئۇئۆئۈئېئىئجئحئمئيبجبمبىبيتىتيثجثمثىثيخحضجضمطحظمغجفجفحفىفيقحقىقيكاكجكحكخكلكىكينخنىنيهجهىهييىذٰرٰىٰئرئزئنبزبنترتزتنثرثزثنمانرنزننيريزئخئهبهتهصخنههٰثهسهشهطىطيعىعيغىغيسىسيشىشيصىصيضىضيشخشرسرصرضراً ًـًـّ ْـْلآلألإ𝅗𝅥0,1,2,3,4,5,6,7,8,9,wzhvsdwcmcmddjほかココàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįĵķĺļľłńņňŋōŏőœŕŗřśŝşšţťŧũūŭůűųŵŷÿźżɓƃƅɔƈɖɗƌǝəɛƒɠɣɩɨƙɯɲɵơƣƥʀƨʃƭʈưʊʋƴƶʒƹƽǎǐǒǔǖǘǚǜǟǡǣǥǧǩǫǭǯǵƕƿǹǻǽǿȁȃȅȇȉȋȍȏȑȓȕȗșțȝȟƞȣȥȧȩȫȭȯȱȳⱥȼƚⱦɂƀʉʌɇɉɋɍɏɦɹɻʁʕͱͳʹͷ;ϳέίόύβγδεζθκλνξοπρστυφχψϊϋϗϙϛϝϟϡϣϥϧϩϫϭϯϸϻͻͼͽѐёђѓєѕіїјљњћќѝўџабвгдежзийклмнопрстуфхцчшщъыьэюяѡѣѥѧѩѫѭѯѱѳѵѷѹѻѽѿҁҋҍҏґғҕҗҙқҝҟҡңҥҧҩҫҭүұҳҵҷҹһҽҿӂӄӆӈӊӌӎӑӓӕӗәӛӝӟӡӣӥӧөӫӭӯӱӳӵӷӹӻӽӿԁԃԅԇԉԋԍԏԑԓԕԗԙԛԝԟԡԣԥԧԩԫԭԯաբգդզէըթժլծկհձղճյշոչպջռստրցփքօֆ་ⴧⴭნᏰᏱᏲᏳᏴᏵꙋɐɑᴂɜᴖᴗᴝᴥɒɕɟɡɥɪᵻʝɭᶅʟɱɰɳɴɸʂƫᴜʐʑḁḃḅḇḉḋḍḏḑḓḕḗḙḛḝḟḡḣḥḧḩḫḭḯḱḳḵḷḹḻḽḿṁṃṅṇṉṋṍṏṑṓṕṗṙṛṝṟṡṣṥṧṩṫṭṯṱṳṵṷṹṻṽṿẁẃẅẇẉẋẍẏẑẓẕạảấầẩẫậắằẳẵặẹẻẽếềểễệỉịọỏốồổỗộớờởỡợụủứừửữựỳỵỷỹỻỽỿἐἑἒἓἔἕἰἱἲἳἴἵἶἷὀὁὂὃὄὅὑὓὕὗᾰᾱὲΐῐῑὶΰῠῡὺῥ`ὸ‐+−∑〈〉ⰰⰱⰲⰳⰴⰵⰶⰷⰸⰹⰺⰻⰼⰽⰾⰿⱀⱁⱂⱃⱄⱅⱆⱇⱈⱉⱊⱋⱌⱍⱎⱏⱐⱑⱒⱓⱔⱕⱖⱗⱘⱙⱚⱛⱜⱝⱞⱡɫᵽɽⱨⱪⱬⱳⱶȿɀⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⲳⲵⲷⲹⲻⲽⲿⳁⳃⳅⳇⳉⳋⳍⳏⳑⳓⳕⳗⳙⳛⳝⳟⳡⳣⳬⳮⳳⵡ母龟丨丶丿乙亅亠人儿入冂冖冫几凵刀力勹匕匚匸卜卩厂厶又口囗士夂夊夕女子宀寸小尢尸屮山巛工己巾干幺广廴廾弋弓彐彡彳心戈戶手支攴文斗斤方无曰欠止歹殳毋比毛氏气爪父爻爿片牙牛犬玄玉瓜瓦甘生用田疋疒癶白皮皿目矛矢石示禸禾穴立竹米糸缶网羊羽老而耒耳聿肉臣臼舌舛舟艮色艸虍虫血行衣襾見角言谷豆豕豸貝赤走足身車辛辰辵邑酉釆里長門阜隶隹雨靑非面革韋韭音頁風飛食首香馬骨高髟鬥鬯鬲鬼魚鳥鹵鹿麥麻黃黍黑黹黽鼎鼓鼠鼻齊齒龍龜龠.〒卄卅ᄁᆪᆬᆭᄄᆰᆱᆲᆳᆴᆵᄚᄈᄡᄊ짜ᅢᅣᅤᅥᅦᅧᅨᅩᅪᅫᅬᅭᅮᅯᅰᅱᅲᅳᅴᅵᄔᄕᇇᇈᇌᇎᇓᇗᇙᄜᇝᇟᄝᄞᄠᄢᄣᄧᄩᄫᄬᄭᄮᄯᄲᄶᅀᅇᅌᇱᇲᅗᅘᅙᆄᆅᆈᆑᆒᆔᆞᆡ上中下甲丙丁天地問幼箏우秘男適優印注項写左右医宗夜テヌモヨヰヱヲꙁꙃꙅꙇꙉꙍꙏꙑꙓꙕꙗꙙꙛꙝꙟꙡꙣꙥꙧꙩꙫꙭꚁꚃꚅꚇꚉꚋꚍꚏꚑꚓꚕꚗꚙꚛꜣꜥꜧꜩꜫꜭꜯꜳꜵꜷꜹꜻꜽꜿꝁꝃꝅꝇꝉꝋꝍꝏꝑꝓꝕꝗꝙꝛꝝꝟꝡꝣꝥꝧꝩꝫꝭꝯꝺꝼᵹꝿꞁꞃꞅꞇꞌꞑꞓꞗꞙꞛꞝꞟꞡꞣꞥꞧꞩɬʞʇꭓꞵꞷꬷꭒᎠᎡᎢᎣᎤᎥᎦᎧᎨᎩᎪᎫᎬᎭᎮᎯᎰᎱᎲᎳᎴᎵᎶᎷᎸᎹᎺᎻᎼᎽᎾᎿᏀᏁᏂᏃᏄᏅᏆᏇᏈᏉᏊᏋᏌᏍᏎᏏᏐᏑᏒᏓᏔᏕᏖᏗᏘᏙᏚᏛᏜᏝᏞᏟᏠᏡᏢᏣᏤᏥᏦᏧᏨᏩᏪᏫᏬᏭᏮᏯ豈更賈滑串句契喇奈懶癩羅蘿螺裸邏樂洛烙珞落酪駱亂卵欄爛蘭鸞嵐濫藍襤拉臘蠟廊朗浪狼郎來冷勞擄櫓爐盧蘆虜路露魯鷺碌祿綠菉錄論壟弄籠聾牢磊賂雷壘屢樓淚漏累縷陋勒肋凜凌稜綾菱陵讀拏諾丹寧怒率異北磻便復不泌數索參塞省葉說殺沈拾若掠略亮兩凉梁糧良諒量勵呂廬旅濾礪閭驪麗黎曆歷轢年憐戀撚漣煉璉秊練聯輦蓮連鍊列劣咽烈裂廉念捻殮簾獵令囹嶺怜玲瑩羚聆鈴零靈領例禮醴隸惡了僚寮尿料燎療蓼遼暈阮劉杻柳流溜琉留硫紐類戮陸倫崙淪輪律慄栗隆利吏履易李梨泥理痢罹裏裡離匿溺吝燐璘藺隣鱗麟林淋臨笠粒狀炙識什茶刺切度拓糖宅洞暴輻降廓兀嗀塚晴凞猪益礼神祥福靖精蘒諸逸都飯飼館鶴郞隷侮僧免勉勤卑喝嘆器塀墨層悔慨憎懲敏既暑梅海渚漢煮爫琢碑祉祈祐祖禍禎穀突節縉繁署者臭艹著褐視謁謹賓贈辶難響頻恵𤋮舘並况全侀充冀勇勺啕喙嗢墳奄奔婢嬨廒廙彩徭惘慎愈慠戴揄搜摒敖望杖滛滋瀞瞧爵犯瑱甆画瘝瘟盛直睊着磌窱类絛缾荒華蝹襁覆調請諭變輸遲醙鉶陼韛頋鬒𢡊𢡄𣏕㮝䀘䀹𥉉𥳐𧻓齃龎עםٱٻپڀٺٿٹڤڦڄڃچڇڍڌڎڈژڑکگڳڱںڻۀہھۓڭۋۅۉ、〖〗—–_{}【】《》「」『』[]#&*-<>\\$%@ءؤة\"'^|~⦅⦆・ゥャ¢£¬¦¥₩│←↑→↓■○𐐨𐐩𐐪𐐫𐐬𐐭𐐮𐐯𐐰𐐱𐐲𐐳𐐴𐐵𐐶𐐷𐐸𐐹𐐺𐐻𐐼𐐽𐐾𐐿𐑀𐑁𐑂𐑃𐑄𐑅𐑆𐑇𐑈𐑉𐑊𐑋𐑌𐑍𐑎𐑏𐓘𐓙𐓚𐓛𐓜𐓝𐓞𐓟𐓠𐓡𐓢𐓣𐓤𐓥𐓦𐓧𐓨𐓩𐓪𐓫𐓬𐓭𐓮𐓯𐓰𐓱𐓲𐓳𐓴𐓵𐓶𐓷𐓸𐓹𐓺𐓻𐳀𐳁𐳂𐳃𐳄𐳅𐳆𐳇𐳈𐳉𐳊𐳋𐳌𐳍𐳎𐳏𐳐𐳑𐳒𐳓𐳔𐳕𐳖𐳗𐳘𐳙𐳚𐳛𐳜𐳝𐳞𐳟𐳠𐳡𐳢𐳣𐳤𐳥𐳦𐳧𐳨𐳩𐳪𐳫𐳬𐳭𐳮𐳯𐳰𐳱𐳲𑣀𑣁𑣂𑣃𑣄𑣅𑣆𑣇𑣈𑣉𑣊𑣋𑣌𑣍𑣎𑣏𑣐𑣑𑣒𑣓𑣔𑣕𑣖𑣗𑣘𑣙𑣚𑣛𑣜𑣝𑣞𑣟ıȷ∇∂𞤢𞤣𞤤𞤥𞤦𞤧𞤨𞤩𞤪𞤫𞤬𞤭𞤮𞤯𞤰𞤱𞤲𞤳𞤴𞤵𞤶𞤷𞤸𞤹𞤺𞤻𞤼𞤽𞤾𞤿𞥀𞥁𞥂𞥃ٮڡٯ字双多解交映無前後再新初終販声吹演投捕遊指禁空合満申割営配得可丽丸乁𠄢你侻倂偺備像㒞𠘺兔兤具𠔜㒹內𠕋冗冤仌冬𩇟刃㓟刻剆剷㔕包匆卉博即卽卿𠨬灰及叟𠭣叫叱吆咞吸呈周咢哶唐啓啣善喫喳嗂圖圗噑噴壮城埴堍型堲報墬𡓤売壷夆夢奢𡚨𡛪姬娛娧姘婦㛮嬈嬾𡧈寃寘寳𡬘寿将㞁屠峀岍𡷤嵃𡷦嵮嵫嵼巡巢㠯巽帨帽幩㡢𢆃㡼庰庳庶𪎒𢌱舁弢㣇𣊸𦇚形彫㣣徚忍志忹悁㤺㤜𢛔惇慈慌慺憲憤憯懞戛扝抱拔捐𢬌挽拼捨掃揤𢯱搢揅掩㨮摩摾撝摷㩬敬𣀊旣書晉㬙㬈㫤冒冕最暜肭䏙朡杞杓𣏃㭉柺枅桒𣑭梎栟椔楂榣槪檨𣚣櫛㰘次𣢧歔㱎歲殟殻𣪍𡴋𣫺汎𣲼沿泍汧洖派浩浸涅𣴞洴港湮㴳滇𣻑淹潮𣽞𣾎濆瀹瀛㶖灊災灷炭𠔥煅𤉣熜爨牐𤘈犀犕𤜵𤠔獺王㺬玥㺸瑇瑜璅瓊㼛甤𤰶甾𤲒𢆟瘐𤾡𤾸𥁄㿼䀈𥃳𥃲𥄙𥄳眞真瞋䁆䂖𥐝硎䃣𥘦𥚚𥛅秫䄯穊穏𥥼𥪧䈂𥮫篆築䈧𥲀糒䊠糨糣紀𥾆絣䌁緇縂繅䌴𦈨𦉇䍙𦋙罺𦌾羕翺𦓚𦔣聠𦖨聰𣍟䏕育脃䐋脾媵𦞧𦞵𣎓𣎜舄辞䑫芑芋芝劳花芳芽苦𦬼茝荣莭茣莽菧荓菊菌菜𦰶𦵫𦳕䔫蓱蓳蔖𧏊蕤𦼬䕝䕡𦾱𧃒䕫虐虧虩蚩蚈蜎蛢蜨蝫螆蟡蠁䗹衠𧙧裗裞䘵裺㒻𧢮𧥦䚾䛇誠𧲨貫賁贛起𧼯𠠄跋趼跰𠣞軔𨗒𨗭邔郱鄑𨜮鄛鈸鋗鋘鉼鏹鐕𨯺開䦕閷𨵷䧦雃嶲霣𩅅𩈚䩮䩶韠𩐊䪲𩒖頩𩖶飢䬳餩馧駂駾䯎𩬰鱀鳽䳎䳭鵧𪃎䳸𪄅𪈎𪊑䵖黾鼅鼏鼖𪘀", mapChar: function(r4) {
            return r4 >= 196608 ? r4 >= 917760 && r4 <= 917999 ? 18874368 : 0 : e3[t3[r4 >> 4]][15 & r4];
          } };
          var e3, t3;
        }).apply(t2, [])) || (e2.exports = n);
      }, 4489: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3106));
        function i(e3, t3) {
          var r4 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
          if (!r4) {
            if (Array.isArray(e3) || (r4 = function(e4, t4) {
              if (e4) {
                if ("string" == typeof e4)
                  return o(e4, t4);
                var r5 = Object.prototype.toString.call(e4).slice(8, -1);
                return "Object" === r5 && e4.constructor && (r5 = e4.constructor.name), "Map" === r5 || "Set" === r5 ? Array.from(e4) : "Arguments" === r5 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r5) ? o(e4, t4) : void 0;
              }
            }(e3)) || t3 && e3 && "number" == typeof e3.length) {
              r4 && (e3 = r4);
              var n2 = 0, i2 = function() {
              };
              return { s: i2, n: function() {
                return n2 >= e3.length ? { done: true } : { done: false, value: e3[n2++] };
              }, e: function(e4) {
                throw e4;
              }, f: i2 };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          var a2, s2 = true, u2 = false;
          return { s: function() {
            r4 = r4.call(e3);
          }, n: function() {
            var e4 = r4.next();
            return s2 = e4.done, e4;
          }, e: function(e4) {
            u2 = true, a2 = e4;
          }, f: function() {
            try {
              s2 || null == r4.return || r4.return();
            } finally {
              if (u2)
                throw a2;
            }
          } };
        }
        function o(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r4 = 0, n2 = new Array(t3); r4 < t3; r4++)
            n2[r4] = e3[r4];
          return n2;
        }
        var a = 2147483647, s = 36, u = /^xn--/, c = /[^\0-\x7E]/, f = /[\x2E\u3002\uFF0E\uFF61]/g, d = { overflow: "Overflow: input needs wider integers to process", "not-basic": "Illegal input >= 0x80 (not a basic code point)", "invalid-input": "Invalid input" }, l = Math.floor, h = String.fromCharCode;
        function p(e3) {
          throw new RangeError(d[e3]);
        }
        function b(e3, t3) {
          var r4 = e3.split("@"), n2 = "";
          r4.length > 1 && (n2 = r4[0] + "@", e3 = r4[1]);
          var i2 = function(e4, t4) {
            for (var r5 = [], n3 = e4.length; n3--; )
              r5[n3] = t4(e4[n3]);
            return r5;
          }((e3 = e3.replace(f, ".")).split("."), t3).join(".");
          return n2 + i2;
        }
        function y(e3) {
          for (var t3 = [], r4 = 0, n2 = e3.length; r4 < n2; ) {
            var i2 = e3.charCodeAt(r4++);
            if (i2 >= 55296 && i2 <= 56319 && r4 < n2) {
              var o2 = e3.charCodeAt(r4++);
              56320 == (64512 & o2) ? t3.push(((1023 & i2) << 10) + (1023 & o2) + 65536) : (t3.push(i2), r4--);
            } else
              t3.push(i2);
          }
          return t3;
        }
        var m = function(e3, t3) {
          return e3 + 22 + 75 * (e3 < 26) - ((0 != t3) << 5);
        }, v = function(e3, t3, r4) {
          var n2 = 0;
          for (e3 = r4 ? l(e3 / 700) : e3 >> 1, e3 += l(e3 / t3); e3 > 455; n2 += s)
            e3 = l(e3 / 35);
          return l(n2 + 36 * e3 / (e3 + 38));
        }, g = function(e3) {
          var t3, r4 = [], n2 = e3.length, i2 = 0, o2 = 128, u2 = 72, c2 = e3.lastIndexOf("-");
          c2 < 0 && (c2 = 0);
          for (var f2 = 0; f2 < c2; ++f2)
            e3.charCodeAt(f2) >= 128 && p("not-basic"), r4.push(e3.charCodeAt(f2));
          for (var d2 = c2 > 0 ? c2 + 1 : 0; d2 < n2; ) {
            for (var h2 = i2, b2 = 1, y2 = s; ; y2 += s) {
              d2 >= n2 && p("invalid-input");
              var m2 = (t3 = e3.charCodeAt(d2++)) - 48 < 10 ? t3 - 22 : t3 - 65 < 26 ? t3 - 65 : t3 - 97 < 26 ? t3 - 97 : s;
              (m2 >= s || m2 > l((a - i2) / b2)) && p("overflow"), i2 += m2 * b2;
              var g2 = y2 <= u2 ? 1 : y2 >= u2 + 26 ? 26 : y2 - u2;
              if (m2 < g2)
                break;
              var w2 = s - g2;
              b2 > l(a / w2) && p("overflow"), b2 *= w2;
            }
            var A2 = r4.length + 1;
            u2 = v(i2 - h2, A2, 0 == h2), l(i2 / A2) > a - o2 && p("overflow"), o2 += l(i2 / A2), i2 %= A2, r4.splice(i2++, 0, o2);
          }
          return String.fromCodePoint.apply(String, r4);
        }, w = function(e3) {
          var t3, r4 = [], n2 = (e3 = y(e3)).length, o2 = 128, u2 = 0, c2 = 72, f2 = i(e3);
          try {
            for (f2.s(); !(t3 = f2.n()).done; ) {
              var d2 = t3.value;
              d2 < 128 && r4.push(h(d2));
            }
          } catch (e4) {
            f2.e(e4);
          } finally {
            f2.f();
          }
          var b2 = r4.length, g2 = b2;
          for (b2 && r4.push("-"); g2 < n2; ) {
            var w2, A2 = a, k = i(e3);
            try {
              for (k.s(); !(w2 = k.n()).done; ) {
                var _ = w2.value;
                _ >= o2 && _ < A2 && (A2 = _);
              }
            } catch (e4) {
              k.e(e4);
            } finally {
              k.f();
            }
            var S = g2 + 1;
            A2 - o2 > l((a - u2) / S) && p("overflow"), u2 += (A2 - o2) * S, o2 = A2;
            var E, x = i(e3);
            try {
              for (x.s(); !(E = x.n()).done; ) {
                var P = E.value;
                if (P < o2 && ++u2 > a && p("overflow"), P == o2) {
                  for (var O = u2, B = s; ; B += s) {
                    var T = B <= c2 ? 1 : B >= c2 + 26 ? 26 : B - c2;
                    if (O < T)
                      break;
                    var C = O - T, I = s - T;
                    r4.push(h(m(T + C % I, 0))), O = l(C / I);
                  }
                  r4.push(h(m(O, 0))), c2 = v(u2, S, g2 == b2), u2 = 0, ++g2;
                }
              }
            } catch (e4) {
              x.e(e4);
            } finally {
              x.f();
            }
            ++u2, ++o2;
          }
          return r4.join("");
        }, A = { version: "2.1.0", ucs2: { decode: y, encode: function(e3) {
          return String.fromCodePoint.apply(String, (0, n.default)(e3));
        } }, decode: g, encode: w, toASCII: function(e3) {
          return b(e3, function(e4) {
            return c.test(e4) ? "xn--" + w(e4) : e4;
          });
        }, toUnicode: function(e3) {
          return b(e3, function(e4) {
            return u.test(e4) ? g(e4.slice(4).toLowerCase()) : e4;
          });
        } };
        e2.exports = A;
      }, 3956: (e2, t2, r3) => {
        "use strict";
        var n, i;
        r3(8847)(r3(3355)), n = [r3(4489), r3(2996)], void 0 === (i = (function(e3, t3) {
          return function(e4, t4) {
            function r4(r5, n3, i3) {
              for (var o = [], a = e4.ucs2.decode(r5), s = 0; s < a.length; s++) {
                var u = a[s], c = e4.ucs2.encode([a[s]]), f = t4.mapChar(u), d = f >> 23, l = f >> 21 & 3, h = f >> 5 & 65535, p = 31 & f, b = t4.mapStr.substr(h, p);
                if (0 === l || n3 && 1 & d)
                  throw new Error("Illegal char " + c);
                1 === l ? o.push(b) : 2 === l ? o.push(i3 ? b : c) : 3 === l && o.push(c);
              }
              return o.join("").normalize("NFC");
            }
            function n2(t5, n3, o) {
              void 0 === o && (o = false);
              var a = r4(t5, o, n3).split(".");
              return (a = a.map(function(t6) {
                return t6.startsWith("xn--") ? i2(t6 = e4.decode(t6.substring(4)), o, false) : i2(t6, o, n3), t6;
              })).join(".");
            }
            function i2(e5, n3, i3) {
              if ("-" === e5[2] && "-" === e5[3])
                throw new Error("Failed to validate " + e5);
              if (e5.startsWith("-") || e5.endsWith("-"))
                throw new Error("Failed to validate " + e5);
              if (e5.includes("."))
                throw new Error("Failed to validate " + e5);
              if (r4(e5, n3, i3) !== e5)
                throw new Error("Failed to validate " + e5);
              var o = e5.codePointAt(0);
              if (t4.mapChar(o) & 2 << 23)
                throw new Error("Label contains illegal character: " + o);
            }
            return { toUnicode: function(e5, t5) {
              return void 0 === t5 && (t5 = {}), n2(e5, false, "useStd3ASCII" in t5 && t5.useStd3ASCII);
            }, toAscii: function(t5, r5) {
              void 0 === r5 && (r5 = {});
              var i3, o = !("transitional" in r5) || r5.transitional, a = "useStd3ASCII" in r5 && r5.useStd3ASCII, s = "verifyDnsLength" in r5 && r5.verifyDnsLength, u = n2(t5, o, a).split(".").map(e4.toASCII), c = u.join(".");
              if (s) {
                if (c.length < 1 || c.length > 253)
                  throw new Error("DNS name has wrong length: " + c);
                for (i3 = 0; i3 < u.length; i3++) {
                  var f = u[i3];
                  if (f.length < 1 || f.length > 63)
                    throw new Error("DNS label has wrong length: " + f);
                }
              }
              return c;
            } };
          }(e3, t3);
        }).apply(t2, n)) || (e2.exports = i);
      }, 3226: (e2, t2) => {
        "use strict";
        t2.read = function(e3, t3, r3, n, i) {
          var o, a, s = 8 * i - n - 1, u = (1 << s) - 1, c = u >> 1, f = -7, d = r3 ? i - 1 : 0, l = r3 ? -1 : 1, h = e3[t3 + d];
          for (d += l, o = h & (1 << -f) - 1, h >>= -f, f += s; f > 0; o = 256 * o + e3[t3 + d], d += l, f -= 8)
            ;
          for (a = o & (1 << -f) - 1, o >>= -f, f += n; f > 0; a = 256 * a + e3[t3 + d], d += l, f -= 8)
            ;
          if (0 === o)
            o = 1 - c;
          else {
            if (o === u)
              return a ? NaN : 1 / 0 * (h ? -1 : 1);
            a += Math.pow(2, n), o -= c;
          }
          return (h ? -1 : 1) * a * Math.pow(2, o - n);
        }, t2.write = function(e3, t3, r3, n, i, o) {
          var a, s, u, c = 8 * o - i - 1, f = (1 << c) - 1, d = f >> 1, l = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0, h = n ? 0 : o - 1, p = n ? 1 : -1, b = t3 < 0 || 0 === t3 && 1 / t3 < 0 ? 1 : 0;
          for (t3 = Math.abs(t3), isNaN(t3) || t3 === 1 / 0 ? (s = isNaN(t3) ? 1 : 0, a = f) : (a = Math.floor(Math.log(t3) / Math.LN2), t3 * (u = Math.pow(2, -a)) < 1 && (a--, u *= 2), (t3 += a + d >= 1 ? l / u : l * Math.pow(2, 1 - d)) * u >= 2 && (a++, u /= 2), a + d >= f ? (s = 0, a = f) : a + d >= 1 ? (s = (t3 * u - 1) * Math.pow(2, i), a += d) : (s = t3 * Math.pow(2, d - 1) * Math.pow(2, i), a = 0)); i >= 8; e3[r3 + h] = 255 & s, h += p, s /= 256, i -= 8)
            ;
          for (a = a << i | s, c += i; c > 0; e3[r3 + h] = 255 & a, h += p, a /= 256, c -= 8)
            ;
          e3[r3 + h - p] |= 128 * b;
        };
      }, 1736: (e2) => {
        "use strict";
        "function" == typeof Object.create ? e2.exports = function(e3, t2) {
          t2 && (e3.super_ = t2, e3.prototype = Object.create(t2.prototype, { constructor: { value: e3, enumerable: false, writable: true, configurable: true } }));
        } : e2.exports = function(e3, t2) {
          if (t2) {
            e3.super_ = t2;
            var r3 = function() {
            };
            r3.prototype = t2.prototype, e3.prototype = new r3(), e3.prototype.constructor = e3;
          }
        };
      }, 9446: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(1191)(), o = r3(593)("Object.prototype.toString"), a = function(e3) {
          return !(i && e3 && "object" === (0, n.default)(e3) && Symbol.toStringTag in e3) && "[object Arguments]" === o(e3);
        }, s = function(e3) {
          return !!a(e3) || null !== e3 && "object" === (0, n.default)(e3) && "number" == typeof e3.length && e3.length >= 0 && "[object Array]" !== o(e3) && "[object Function]" === o(e3.callee);
        }, u = function() {
          return a(arguments);
        }();
        a.isLegacyArguments = s, e2.exports = u ? a : s;
      }, 1493: (e2, t2, r3) => {
        "use strict";
        var n, i, o = r3(8847)(r3(3355)), a = Function.prototype.toString, s = "object" === ("undefined" == typeof Reflect ? "undefined" : (0, o.default)(Reflect)) && null !== Reflect && Reflect.apply;
        if ("function" == typeof s && "function" == typeof Object.defineProperty)
          try {
            n = Object.defineProperty({}, "length", { get: function() {
              throw i;
            } }), i = {}, s(function() {
              throw 42;
            }, null, n);
          } catch (e3) {
            e3 !== i && (s = null);
          }
        else
          s = null;
        var u = /^\s*class\b/, c = function(e3) {
          try {
            var t3 = a.call(e3);
            return u.test(t3);
          } catch (e4) {
            return false;
          }
        }, f = function(e3) {
          try {
            return !c(e3) && (a.call(e3), true);
          } catch (e4) {
            return false;
          }
        }, d = Object.prototype.toString, l = "function" == typeof Symbol && !!Symbol.toStringTag, h = !(0 in [,]), p = function() {
          return false;
        };
        if ("object" === ("undefined" == typeof document ? "undefined" : (0, o.default)(document))) {
          var b = document.all;
          d.call(b) === d.call(document.all) && (p = function(e3) {
            if ((h || !e3) && (void 0 === e3 || "object" === (0, o.default)(e3)))
              try {
                var t3 = d.call(e3);
                return ("[object HTMLAllCollection]" === t3 || "[object HTML document.all class]" === t3 || "[object HTMLCollection]" === t3 || "[object Object]" === t3) && null == e3("");
              } catch (e4) {
              }
            return false;
          });
        }
        e2.exports = s ? function(e3) {
          if (p(e3))
            return true;
          if (!e3)
            return false;
          if ("function" != typeof e3 && "object" !== (0, o.default)(e3))
            return false;
          try {
            s(e3, null, n);
          } catch (e4) {
            if (e4 !== i)
              return false;
          }
          return !c(e3) && f(e3);
        } : function(e3) {
          if (p(e3))
            return true;
          if (!e3)
            return false;
          if ("function" != typeof e3 && "object" !== (0, o.default)(e3))
            return false;
          if (l)
            return f(e3);
          if (c(e3))
            return false;
          var t3 = d.call(e3);
          return !("[object Function]" !== t3 && "[object GeneratorFunction]" !== t3 && !/^\[object HTML/.test(t3)) && f(e3);
        };
      }, 4339: (e2) => {
        "use strict";
        e2.exports = function(e3) {
          if (!e3)
            return false;
          var r3 = t2.call(e3);
          return "[object Function]" === r3 || "function" == typeof e3 && "[object RegExp]" !== r3 || "undefined" != typeof window && (e3 === window.setTimeout || e3 === window.alert || e3 === window.confirm || e3 === window.prompt);
        };
        var t2 = Object.prototype.toString;
      }, 4477: (e2, t2, r3) => {
        "use strict";
        var n, i = Object.prototype.toString, o = Function.prototype.toString, a = /^\s*(?:function)?\*/, s = r3(1191)(), u = Object.getPrototypeOf;
        e2.exports = function(e3) {
          if ("function" != typeof e3)
            return false;
          if (a.test(o.call(e3)))
            return true;
          if (!s)
            return "[object GeneratorFunction]" === i.call(e3);
          if (!u)
            return false;
          if (void 0 === n) {
            var t3 = function() {
              if (!s)
                return false;
              try {
                return Function("return function*() {}")();
              } catch (e4) {
              }
            }();
            n = !!t3 && u(t3);
          }
          return u(e3) === n;
        };
      }, 8619: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355));
        e2.exports = function(e3) {
          if ("string" != typeof e3)
            throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (0, n.default)(e3) + ", while checking isHexPrefixed.");
          return "0x" === e3.slice(0, 2);
        };
      }, 8915: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(8184), o = r3(3604), a = r3(593), s = a("Object.prototype.toString"), u = r3(1191)(), c = r3(3820), f = "undefined" == typeof globalThis ? r3.g : globalThis, d = o(), l = a("Array.prototype.indexOf", true) || function(e3, t3) {
          for (var r4 = 0; r4 < e3.length; r4 += 1)
            if (e3[r4] === t3)
              return r4;
          return -1;
        }, h = a("String.prototype.slice"), p = {}, b = Object.getPrototypeOf;
        u && c && b && i(d, function(e3) {
          var t3 = new f[e3]();
          if (Symbol.toStringTag in t3) {
            var r4 = b(t3), n2 = c(r4, Symbol.toStringTag);
            if (!n2) {
              var i2 = b(r4);
              n2 = c(i2, Symbol.toStringTag);
            }
            p[e3] = n2.get;
          }
        }), e2.exports = function(e3) {
          if (!e3 || "object" !== (0, n.default)(e3))
            return false;
          if (!u || !(Symbol.toStringTag in e3)) {
            var t3 = h(s(e3), 8, -1);
            return l(d, t3) > -1;
          }
          return !!c && function(e4) {
            var t4 = false;
            return i(p, function(r4, n2) {
              if (!t4)
                try {
                  t4 = r4.call(e4) === n2;
                } catch (e5) {
                }
            }), t4;
          }(e3);
        };
      }, 9484: (e2) => {
        "use strict";
        var t2 = {}.toString;
        e2.exports = Array.isArray || function(e3) {
          return "[object Array]" == t2.call(e3);
        };
      }, 4858: (e2, t2, r3) => {
        "use strict";
        e2 = r3.nmd(e2);
        var n = r3(9142), i = r3(8847)(r3(3355));
        !function() {
          var t3 = "object" === ("undefined" == typeof window ? "undefined" : (0, i.default)(window)) ? window : {};
          !t3.JS_SHA3_NO_NODE_JS && "object" === (void 0 === n ? "undefined" : (0, i.default)(n)) && n.versions && n.versions.node && (t3 = r3.g);
          for (var o = !t3.JS_SHA3_NO_COMMON_JS && "object" === (0, i.default)(e2) && e2.exports, a = "0123456789abcdef".split(""), s = [0, 8, 16, 24], u = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648], c = [224, 256, 384, 512], f = ["hex", "buffer", "arrayBuffer", "array"], d = function(e3, t4, r4) {
            return function(n2) {
              return new k(e3, t4, e3).update(n2)[r4]();
            };
          }, l = function(e3, t4, r4) {
            return function(n2, i2) {
              return new k(e3, t4, i2).update(n2)[r4]();
            };
          }, h = function(e3, t4) {
            var r4 = d(e3, t4, "hex");
            r4.create = function() {
              return new k(e3, t4, e3);
            }, r4.update = function(e4) {
              return r4.create().update(e4);
            };
            for (var n2 = 0; n2 < f.length; ++n2) {
              var i2 = f[n2];
              r4[i2] = d(e3, t4, i2);
            }
            return r4;
          }, p = [{ name: "keccak", padding: [1, 256, 65536, 16777216], bits: c, createMethod: h }, { name: "sha3", padding: [6, 1536, 393216, 100663296], bits: c, createMethod: h }, { name: "shake", padding: [31, 7936, 2031616, 520093696], bits: [128, 256], createMethod: function(e3, t4) {
            var r4 = l(e3, t4, "hex");
            r4.create = function(r5) {
              return new k(e3, t4, r5);
            }, r4.update = function(e4, t5) {
              return r4.create(t5).update(e4);
            };
            for (var n2 = 0; n2 < f.length; ++n2) {
              var i2 = f[n2];
              r4[i2] = l(e3, t4, i2);
            }
            return r4;
          } }], b = {}, y = [], m = 0; m < p.length; ++m)
            for (var v = p[m], g = v.bits, w = 0; w < g.length; ++w) {
              var A = v.name + "_" + g[w];
              y.push(A), b[A] = v.createMethod(g[w], v.padding);
            }
          function k(e3, t4, r4) {
            this.blocks = [], this.s = [], this.padding = t4, this.outputBits = r4, this.reset = true, this.block = 0, this.start = 0, this.blockCount = 1600 - (e3 << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = r4 >> 5, this.extraBytes = (31 & r4) >> 3;
            for (var n2 = 0; n2 < 50; ++n2)
              this.s[n2] = 0;
          }
          k.prototype.update = function(e3) {
            var t4 = "string" != typeof e3;
            t4 && e3.constructor === ArrayBuffer && (e3 = new Uint8Array(e3));
            for (var r4, n2, i2 = e3.length, o2 = this.blocks, a2 = this.byteCount, u2 = this.blockCount, c2 = 0, f2 = this.s; c2 < i2; ) {
              if (this.reset)
                for (this.reset = false, o2[0] = this.block, r4 = 1; r4 < u2 + 1; ++r4)
                  o2[r4] = 0;
              if (t4)
                for (r4 = this.start; c2 < i2 && r4 < a2; ++c2)
                  o2[r4 >> 2] |= e3[c2] << s[3 & r4++];
              else
                for (r4 = this.start; c2 < i2 && r4 < a2; ++c2)
                  (n2 = e3.charCodeAt(c2)) < 128 ? o2[r4 >> 2] |= n2 << s[3 & r4++] : n2 < 2048 ? (o2[r4 >> 2] |= (192 | n2 >> 6) << s[3 & r4++], o2[r4 >> 2] |= (128 | 63 & n2) << s[3 & r4++]) : n2 < 55296 || n2 >= 57344 ? (o2[r4 >> 2] |= (224 | n2 >> 12) << s[3 & r4++], o2[r4 >> 2] |= (128 | n2 >> 6 & 63) << s[3 & r4++], o2[r4 >> 2] |= (128 | 63 & n2) << s[3 & r4++]) : (n2 = 65536 + ((1023 & n2) << 10 | 1023 & e3.charCodeAt(++c2)), o2[r4 >> 2] |= (240 | n2 >> 18) << s[3 & r4++], o2[r4 >> 2] |= (128 | n2 >> 12 & 63) << s[3 & r4++], o2[r4 >> 2] |= (128 | n2 >> 6 & 63) << s[3 & r4++], o2[r4 >> 2] |= (128 | 63 & n2) << s[3 & r4++]);
              if (this.lastByteIndex = r4, r4 >= a2) {
                for (this.start = r4 - a2, this.block = o2[u2], r4 = 0; r4 < u2; ++r4)
                  f2[r4] ^= o2[r4];
                _(f2), this.reset = true;
              } else
                this.start = r4;
            }
            return this;
          }, k.prototype.finalize = function() {
            var e3 = this.blocks, t4 = this.lastByteIndex, r4 = this.blockCount, n2 = this.s;
            if (e3[t4 >> 2] |= this.padding[3 & t4], this.lastByteIndex === this.byteCount)
              for (e3[0] = e3[r4], t4 = 1; t4 < r4 + 1; ++t4)
                e3[t4] = 0;
            for (e3[r4 - 1] |= 2147483648, t4 = 0; t4 < r4; ++t4)
              n2[t4] ^= e3[t4];
            _(n2);
          }, k.prototype.toString = k.prototype.hex = function() {
            this.finalize();
            for (var e3, t4 = this.blockCount, r4 = this.s, n2 = this.outputBlocks, i2 = this.extraBytes, o2 = 0, s2 = 0, u2 = ""; s2 < n2; ) {
              for (o2 = 0; o2 < t4 && s2 < n2; ++o2, ++s2)
                e3 = r4[o2], u2 += a[e3 >> 4 & 15] + a[15 & e3] + a[e3 >> 12 & 15] + a[e3 >> 8 & 15] + a[e3 >> 20 & 15] + a[e3 >> 16 & 15] + a[e3 >> 28 & 15] + a[e3 >> 24 & 15];
              s2 % t4 == 0 && (_(r4), o2 = 0);
            }
            return i2 && (e3 = r4[o2], i2 > 0 && (u2 += a[e3 >> 4 & 15] + a[15 & e3]), i2 > 1 && (u2 += a[e3 >> 12 & 15] + a[e3 >> 8 & 15]), i2 > 2 && (u2 += a[e3 >> 20 & 15] + a[e3 >> 16 & 15])), u2;
          }, k.prototype.arrayBuffer = function() {
            this.finalize();
            var e3, t4 = this.blockCount, r4 = this.s, n2 = this.outputBlocks, i2 = this.extraBytes, o2 = 0, a2 = 0, s2 = this.outputBits >> 3;
            e3 = i2 ? new ArrayBuffer(n2 + 1 << 2) : new ArrayBuffer(s2);
            for (var u2 = new Uint32Array(e3); a2 < n2; ) {
              for (o2 = 0; o2 < t4 && a2 < n2; ++o2, ++a2)
                u2[a2] = r4[o2];
              a2 % t4 == 0 && _(r4);
            }
            return i2 && (u2[o2] = r4[o2], e3 = e3.slice(0, s2)), e3;
          }, k.prototype.buffer = k.prototype.arrayBuffer, k.prototype.digest = k.prototype.array = function() {
            this.finalize();
            for (var e3, t4, r4 = this.blockCount, n2 = this.s, i2 = this.outputBlocks, o2 = this.extraBytes, a2 = 0, s2 = 0, u2 = []; s2 < i2; ) {
              for (a2 = 0; a2 < r4 && s2 < i2; ++a2, ++s2)
                e3 = s2 << 2, t4 = n2[a2], u2[e3] = 255 & t4, u2[e3 + 1] = t4 >> 8 & 255, u2[e3 + 2] = t4 >> 16 & 255, u2[e3 + 3] = t4 >> 24 & 255;
              s2 % r4 == 0 && _(n2);
            }
            return o2 && (e3 = s2 << 2, t4 = n2[a2], o2 > 0 && (u2[e3] = 255 & t4), o2 > 1 && (u2[e3 + 1] = t4 >> 8 & 255), o2 > 2 && (u2[e3 + 2] = t4 >> 16 & 255)), u2;
          };
          var _ = function(e3) {
            var t4, r4, n2, i2, o2, a2, s2, c2, f2, d2, l2, h2, p2, b2, y2, m2, v2, g2, w2, A2, k2, _2, S, E, x, P, O, B, T, C, I, M, U, R, j, N, F, L, D, H, q, z, G, K, V, J, W, Y, X, Q, Z, $, ee, te, re, ne, ie, oe, ae, se, ue, ce, fe;
            for (n2 = 0; n2 < 48; n2 += 2)
              i2 = e3[0] ^ e3[10] ^ e3[20] ^ e3[30] ^ e3[40], o2 = e3[1] ^ e3[11] ^ e3[21] ^ e3[31] ^ e3[41], a2 = e3[2] ^ e3[12] ^ e3[22] ^ e3[32] ^ e3[42], s2 = e3[3] ^ e3[13] ^ e3[23] ^ e3[33] ^ e3[43], c2 = e3[4] ^ e3[14] ^ e3[24] ^ e3[34] ^ e3[44], f2 = e3[5] ^ e3[15] ^ e3[25] ^ e3[35] ^ e3[45], d2 = e3[6] ^ e3[16] ^ e3[26] ^ e3[36] ^ e3[46], l2 = e3[7] ^ e3[17] ^ e3[27] ^ e3[37] ^ e3[47], t4 = (h2 = e3[8] ^ e3[18] ^ e3[28] ^ e3[38] ^ e3[48]) ^ (a2 << 1 | s2 >>> 31), r4 = (p2 = e3[9] ^ e3[19] ^ e3[29] ^ e3[39] ^ e3[49]) ^ (s2 << 1 | a2 >>> 31), e3[0] ^= t4, e3[1] ^= r4, e3[10] ^= t4, e3[11] ^= r4, e3[20] ^= t4, e3[21] ^= r4, e3[30] ^= t4, e3[31] ^= r4, e3[40] ^= t4, e3[41] ^= r4, t4 = i2 ^ (c2 << 1 | f2 >>> 31), r4 = o2 ^ (f2 << 1 | c2 >>> 31), e3[2] ^= t4, e3[3] ^= r4, e3[12] ^= t4, e3[13] ^= r4, e3[22] ^= t4, e3[23] ^= r4, e3[32] ^= t4, e3[33] ^= r4, e3[42] ^= t4, e3[43] ^= r4, t4 = a2 ^ (d2 << 1 | l2 >>> 31), r4 = s2 ^ (l2 << 1 | d2 >>> 31), e3[4] ^= t4, e3[5] ^= r4, e3[14] ^= t4, e3[15] ^= r4, e3[24] ^= t4, e3[25] ^= r4, e3[34] ^= t4, e3[35] ^= r4, e3[44] ^= t4, e3[45] ^= r4, t4 = c2 ^ (h2 << 1 | p2 >>> 31), r4 = f2 ^ (p2 << 1 | h2 >>> 31), e3[6] ^= t4, e3[7] ^= r4, e3[16] ^= t4, e3[17] ^= r4, e3[26] ^= t4, e3[27] ^= r4, e3[36] ^= t4, e3[37] ^= r4, e3[46] ^= t4, e3[47] ^= r4, t4 = d2 ^ (i2 << 1 | o2 >>> 31), r4 = l2 ^ (o2 << 1 | i2 >>> 31), e3[8] ^= t4, e3[9] ^= r4, e3[18] ^= t4, e3[19] ^= r4, e3[28] ^= t4, e3[29] ^= r4, e3[38] ^= t4, e3[39] ^= r4, e3[48] ^= t4, e3[49] ^= r4, b2 = e3[0], y2 = e3[1], J = e3[11] << 4 | e3[10] >>> 28, W = e3[10] << 4 | e3[11] >>> 28, B = e3[20] << 3 | e3[21] >>> 29, T = e3[21] << 3 | e3[20] >>> 29, se = e3[31] << 9 | e3[30] >>> 23, ue = e3[30] << 9 | e3[31] >>> 23, z = e3[40] << 18 | e3[41] >>> 14, G = e3[41] << 18 | e3[40] >>> 14, R = e3[2] << 1 | e3[3] >>> 31, j = e3[3] << 1 | e3[2] >>> 31, m2 = e3[13] << 12 | e3[12] >>> 20, v2 = e3[12] << 12 | e3[13] >>> 20, Y = e3[22] << 10 | e3[23] >>> 22, X = e3[23] << 10 | e3[22] >>> 22, C = e3[33] << 13 | e3[32] >>> 19, I = e3[32] << 13 | e3[33] >>> 19, ce = e3[42] << 2 | e3[43] >>> 30, fe = e3[43] << 2 | e3[42] >>> 30, te = e3[5] << 30 | e3[4] >>> 2, re = e3[4] << 30 | e3[5] >>> 2, N = e3[14] << 6 | e3[15] >>> 26, F = e3[15] << 6 | e3[14] >>> 26, g2 = e3[25] << 11 | e3[24] >>> 21, w2 = e3[24] << 11 | e3[25] >>> 21, Q = e3[34] << 15 | e3[35] >>> 17, Z = e3[35] << 15 | e3[34] >>> 17, M = e3[45] << 29 | e3[44] >>> 3, U = e3[44] << 29 | e3[45] >>> 3, E = e3[6] << 28 | e3[7] >>> 4, x = e3[7] << 28 | e3[6] >>> 4, ne = e3[17] << 23 | e3[16] >>> 9, ie = e3[16] << 23 | e3[17] >>> 9, L = e3[26] << 25 | e3[27] >>> 7, D = e3[27] << 25 | e3[26] >>> 7, A2 = e3[36] << 21 | e3[37] >>> 11, k2 = e3[37] << 21 | e3[36] >>> 11, $ = e3[47] << 24 | e3[46] >>> 8, ee = e3[46] << 24 | e3[47] >>> 8, K = e3[8] << 27 | e3[9] >>> 5, V = e3[9] << 27 | e3[8] >>> 5, P = e3[18] << 20 | e3[19] >>> 12, O = e3[19] << 20 | e3[18] >>> 12, oe = e3[29] << 7 | e3[28] >>> 25, ae = e3[28] << 7 | e3[29] >>> 25, H = e3[38] << 8 | e3[39] >>> 24, q = e3[39] << 8 | e3[38] >>> 24, _2 = e3[48] << 14 | e3[49] >>> 18, S = e3[49] << 14 | e3[48] >>> 18, e3[0] = b2 ^ ~m2 & g2, e3[1] = y2 ^ ~v2 & w2, e3[10] = E ^ ~P & B, e3[11] = x ^ ~O & T, e3[20] = R ^ ~N & L, e3[21] = j ^ ~F & D, e3[30] = K ^ ~J & Y, e3[31] = V ^ ~W & X, e3[40] = te ^ ~ne & oe, e3[41] = re ^ ~ie & ae, e3[2] = m2 ^ ~g2 & A2, e3[3] = v2 ^ ~w2 & k2, e3[12] = P ^ ~B & C, e3[13] = O ^ ~T & I, e3[22] = N ^ ~L & H, e3[23] = F ^ ~D & q, e3[32] = J ^ ~Y & Q, e3[33] = W ^ ~X & Z, e3[42] = ne ^ ~oe & se, e3[43] = ie ^ ~ae & ue, e3[4] = g2 ^ ~A2 & _2, e3[5] = w2 ^ ~k2 & S, e3[14] = B ^ ~C & M, e3[15] = T ^ ~I & U, e3[24] = L ^ ~H & z, e3[25] = D ^ ~q & G, e3[34] = Y ^ ~Q & $, e3[35] = X ^ ~Z & ee, e3[44] = oe ^ ~se & ce, e3[45] = ae ^ ~ue & fe, e3[6] = A2 ^ ~_2 & b2, e3[7] = k2 ^ ~S & y2, e3[16] = C ^ ~M & E, e3[17] = I ^ ~U & x, e3[26] = H ^ ~z & R, e3[27] = q ^ ~G & j, e3[36] = Q ^ ~$ & K, e3[37] = Z ^ ~ee & V, e3[46] = se ^ ~ce & te, e3[47] = ue ^ ~fe & re, e3[8] = _2 ^ ~b2 & m2, e3[9] = S ^ ~y2 & v2, e3[18] = M ^ ~E & P, e3[19] = U ^ ~x & O, e3[28] = z ^ ~R & N, e3[29] = G ^ ~j & F, e3[38] = $ ^ ~K & J, e3[39] = ee ^ ~V & W, e3[48] = ce ^ ~te & ne, e3[49] = fe ^ ~re & ie, e3[0] ^= u[n2], e3[1] ^= u[n2 + 1];
          };
          if (o)
            e2.exports = b;
          else
            for (m = 0; m < y.length; ++m)
              t3[y[m]] = b[y[m]];
        }();
      }, 3135: (e2, t2, r3) => {
        "use strict";
        e2.exports = r3(2109)(r3(801));
      }, 2109: (e2, t2, r3) => {
        "use strict";
        var n = r3(6543), i = r3(274);
        e2.exports = function(e3) {
          var t3 = n(e3), r4 = i(e3);
          return function(e4, n2) {
            switch ("string" == typeof e4 ? e4.toLowerCase() : e4) {
              case "keccak224":
                return new t3(1152, 448, null, 224, n2);
              case "keccak256":
                return new t3(1088, 512, null, 256, n2);
              case "keccak384":
                return new t3(832, 768, null, 384, n2);
              case "keccak512":
                return new t3(576, 1024, null, 512, n2);
              case "sha3-224":
                return new t3(1152, 448, 6, 224, n2);
              case "sha3-256":
                return new t3(1088, 512, 6, 256, n2);
              case "sha3-384":
                return new t3(832, 768, 6, 384, n2);
              case "sha3-512":
                return new t3(576, 1024, 6, 512, n2);
              case "shake128":
                return new r4(1344, 256, 31, n2);
              case "shake256":
                return new r4(1088, 512, 31, n2);
              default:
                throw new Error("Invald algorithm: " + e4);
            }
          };
        };
      }, 6543: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(8847), o = i(r3(9721)), a = i(r3(8985)), s = i(r3(5163)), u = i(r3(4650)), c = i(r3(1949));
        var f = r3(6505).Transform;
        e2.exports = function(e3) {
          return function(t3) {
            (0, s.default)(d, t3);
            var r4, i2, f2 = (r4 = d, i2 = function() {
              if ("undefined" == typeof Reflect || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if ("function" == typeof Proxy)
                return true;
              try {
                return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                })), true;
              } catch (e4) {
                return false;
              }
            }(), function() {
              var e4, t4 = (0, c.default)(r4);
              if (i2) {
                var n2 = (0, c.default)(this).constructor;
                e4 = Reflect.construct(t4, arguments, n2);
              } else
                e4 = t4.apply(this, arguments);
              return (0, u.default)(this, e4);
            });
            function d(t4, r5, n2, i3, a2) {
              var s2;
              return (0, o.default)(this, d), (s2 = f2.call(this, a2))._rate = t4, s2._capacity = r5, s2._delimitedSuffix = n2, s2._hashBitLength = i3, s2._options = a2, s2._state = new e3(), s2._state.initialize(t4, r5), s2._finalized = false, s2;
            }
            return (0, a.default)(d, [{ key: "_transform", value: function(e4, t4, r5) {
              var n2 = null;
              try {
                this.update(e4, t4);
              } catch (e5) {
                n2 = e5;
              }
              r5(n2);
            } }, { key: "_flush", value: function(e4) {
              var t4 = null;
              try {
                this.push(this.digest());
              } catch (e5) {
                t4 = e5;
              }
              e4(t4);
            } }, { key: "update", value: function(e4, t4) {
              if (!n.isBuffer(e4) && "string" != typeof e4)
                throw new TypeError("Data must be a string or a buffer");
              if (this._finalized)
                throw new Error("Digest already called");
              return n.isBuffer(e4) || (e4 = n.from(e4, t4)), this._state.absorb(e4), this;
            } }, { key: "digest", value: function(e4) {
              if (this._finalized)
                throw new Error("Digest already called");
              this._finalized = true, this._delimitedSuffix && this._state.absorbLastFewBits(this._delimitedSuffix);
              var t4 = this._state.squeeze(this._hashBitLength / 8);
              return void 0 !== e4 && (t4 = t4.toString(e4)), this._resetState(), t4;
            } }, { key: "_resetState", value: function() {
              return this._state.initialize(this._rate, this._capacity), this;
            } }, { key: "_clone", value: function() {
              var e4 = new d(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
              return this._state.copy(e4._state), e4._finalized = this._finalized, e4;
            } }]), d;
          }(f);
        };
      }, 274: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(8847), o = i(r3(9721)), a = i(r3(8985)), s = i(r3(5163)), u = i(r3(4650)), c = i(r3(1949));
        var f = r3(6505).Transform;
        e2.exports = function(e3) {
          return function(t3) {
            (0, s.default)(d, t3);
            var r4, i2, f2 = (r4 = d, i2 = function() {
              if ("undefined" == typeof Reflect || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if ("function" == typeof Proxy)
                return true;
              try {
                return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                })), true;
              } catch (e4) {
                return false;
              }
            }(), function() {
              var e4, t4 = (0, c.default)(r4);
              if (i2) {
                var n2 = (0, c.default)(this).constructor;
                e4 = Reflect.construct(t4, arguments, n2);
              } else
                e4 = t4.apply(this, arguments);
              return (0, u.default)(this, e4);
            });
            function d(t4, r5, n2, i3) {
              var a2;
              return (0, o.default)(this, d), (a2 = f2.call(this, i3))._rate = t4, a2._capacity = r5, a2._delimitedSuffix = n2, a2._options = i3, a2._state = new e3(), a2._state.initialize(t4, r5), a2._finalized = false, a2;
            }
            return (0, a.default)(d, [{ key: "_transform", value: function(e4, t4, r5) {
              var n2 = null;
              try {
                this.update(e4, t4);
              } catch (e5) {
                n2 = e5;
              }
              r5(n2);
            } }, { key: "_flush", value: function() {
            } }, { key: "_read", value: function(e4) {
              this.push(this.squeeze(e4));
            } }, { key: "update", value: function(e4, t4) {
              if (!n.isBuffer(e4) && "string" != typeof e4)
                throw new TypeError("Data must be a string or a buffer");
              if (this._finalized)
                throw new Error("Squeeze already called");
              return n.isBuffer(e4) || (e4 = n.from(e4, t4)), this._state.absorb(e4), this;
            } }, { key: "squeeze", value: function(e4, t4) {
              this._finalized || (this._finalized = true, this._state.absorbLastFewBits(this._delimitedSuffix));
              var r5 = this._state.squeeze(e4);
              return void 0 !== t4 && (r5 = r5.toString(t4)), r5;
            } }, { key: "_resetState", value: function() {
              return this._state.initialize(this._rate, this._capacity), this;
            } }, { key: "_clone", value: function() {
              var e4 = new d(this._rate, this._capacity, this._delimitedSuffix, this._options);
              return this._state.copy(e4._state), e4._finalized = this._finalized, e4;
            } }]), d;
          }(f);
        };
      }, 5612: (e2, t2) => {
        "use strict";
        var r3 = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
        t2.p1600 = function(e3) {
          for (var t3 = 0; t3 < 24; ++t3) {
            var n = e3[0] ^ e3[10] ^ e3[20] ^ e3[30] ^ e3[40], i = e3[1] ^ e3[11] ^ e3[21] ^ e3[31] ^ e3[41], o = e3[2] ^ e3[12] ^ e3[22] ^ e3[32] ^ e3[42], a = e3[3] ^ e3[13] ^ e3[23] ^ e3[33] ^ e3[43], s = e3[4] ^ e3[14] ^ e3[24] ^ e3[34] ^ e3[44], u = e3[5] ^ e3[15] ^ e3[25] ^ e3[35] ^ e3[45], c = e3[6] ^ e3[16] ^ e3[26] ^ e3[36] ^ e3[46], f = e3[7] ^ e3[17] ^ e3[27] ^ e3[37] ^ e3[47], d = e3[8] ^ e3[18] ^ e3[28] ^ e3[38] ^ e3[48], l = e3[9] ^ e3[19] ^ e3[29] ^ e3[39] ^ e3[49], h = d ^ (o << 1 | a >>> 31), p = l ^ (a << 1 | o >>> 31), b = e3[0] ^ h, y = e3[1] ^ p, m = e3[10] ^ h, v = e3[11] ^ p, g = e3[20] ^ h, w = e3[21] ^ p, A = e3[30] ^ h, k = e3[31] ^ p, _ = e3[40] ^ h, S = e3[41] ^ p;
            h = n ^ (s << 1 | u >>> 31), p = i ^ (u << 1 | s >>> 31);
            var E = e3[2] ^ h, x = e3[3] ^ p, P = e3[12] ^ h, O = e3[13] ^ p, B = e3[22] ^ h, T = e3[23] ^ p, C = e3[32] ^ h, I = e3[33] ^ p, M = e3[42] ^ h, U = e3[43] ^ p;
            h = o ^ (c << 1 | f >>> 31), p = a ^ (f << 1 | c >>> 31);
            var R = e3[4] ^ h, j = e3[5] ^ p, N = e3[14] ^ h, F = e3[15] ^ p, L = e3[24] ^ h, D = e3[25] ^ p, H = e3[34] ^ h, q = e3[35] ^ p, z = e3[44] ^ h, G = e3[45] ^ p;
            h = s ^ (d << 1 | l >>> 31), p = u ^ (l << 1 | d >>> 31);
            var K = e3[6] ^ h, V = e3[7] ^ p, J = e3[16] ^ h, W = e3[17] ^ p, Y = e3[26] ^ h, X = e3[27] ^ p, Q = e3[36] ^ h, Z = e3[37] ^ p, $ = e3[46] ^ h, ee = e3[47] ^ p;
            h = c ^ (n << 1 | i >>> 31), p = f ^ (i << 1 | n >>> 31);
            var te = e3[8] ^ h, re = e3[9] ^ p, ne = e3[18] ^ h, ie = e3[19] ^ p, oe = e3[28] ^ h, ae = e3[29] ^ p, se = e3[38] ^ h, ue = e3[39] ^ p, ce = e3[48] ^ h, fe = e3[49] ^ p, de = b, le = y, he = v << 4 | m >>> 28, pe = m << 4 | v >>> 28, be = g << 3 | w >>> 29, ye = w << 3 | g >>> 29, me = k << 9 | A >>> 23, ve = A << 9 | k >>> 23, ge = _ << 18 | S >>> 14, we = S << 18 | _ >>> 14, Ae = E << 1 | x >>> 31, ke = x << 1 | E >>> 31, _e = O << 12 | P >>> 20, Se = P << 12 | O >>> 20, Ee = B << 10 | T >>> 22, xe = T << 10 | B >>> 22, Pe = I << 13 | C >>> 19, Oe = C << 13 | I >>> 19, Be = M << 2 | U >>> 30, Te = U << 2 | M >>> 30, Ce = j << 30 | R >>> 2, Ie = R << 30 | j >>> 2, Me = N << 6 | F >>> 26, Ue = F << 6 | N >>> 26, Re = D << 11 | L >>> 21, je = L << 11 | D >>> 21, Ne = H << 15 | q >>> 17, Fe = q << 15 | H >>> 17, Le = G << 29 | z >>> 3, De = z << 29 | G >>> 3, He = K << 28 | V >>> 4, qe = V << 28 | K >>> 4, ze = W << 23 | J >>> 9, Ge = J << 23 | W >>> 9, Ke = Y << 25 | X >>> 7, Ve = X << 25 | Y >>> 7, Je = Q << 21 | Z >>> 11, We = Z << 21 | Q >>> 11, Ye = ee << 24 | $ >>> 8, Xe = $ << 24 | ee >>> 8, Qe = te << 27 | re >>> 5, Ze = re << 27 | te >>> 5, $e = ne << 20 | ie >>> 12, et = ie << 20 | ne >>> 12, tt = ae << 7 | oe >>> 25, rt = oe << 7 | ae >>> 25, nt = se << 8 | ue >>> 24, it = ue << 8 | se >>> 24, ot = ce << 14 | fe >>> 18, at = fe << 14 | ce >>> 18;
            e3[0] = de ^ ~_e & Re, e3[1] = le ^ ~Se & je, e3[10] = He ^ ~$e & be, e3[11] = qe ^ ~et & ye, e3[20] = Ae ^ ~Me & Ke, e3[21] = ke ^ ~Ue & Ve, e3[30] = Qe ^ ~he & Ee, e3[31] = Ze ^ ~pe & xe, e3[40] = Ce ^ ~ze & tt, e3[41] = Ie ^ ~Ge & rt, e3[2] = _e ^ ~Re & Je, e3[3] = Se ^ ~je & We, e3[12] = $e ^ ~be & Pe, e3[13] = et ^ ~ye & Oe, e3[22] = Me ^ ~Ke & nt, e3[23] = Ue ^ ~Ve & it, e3[32] = he ^ ~Ee & Ne, e3[33] = pe ^ ~xe & Fe, e3[42] = ze ^ ~tt & me, e3[43] = Ge ^ ~rt & ve, e3[4] = Re ^ ~Je & ot, e3[5] = je ^ ~We & at, e3[14] = be ^ ~Pe & Le, e3[15] = ye ^ ~Oe & De, e3[24] = Ke ^ ~nt & ge, e3[25] = Ve ^ ~it & we, e3[34] = Ee ^ ~Ne & Ye, e3[35] = xe ^ ~Fe & Xe, e3[44] = tt ^ ~me & Be, e3[45] = rt ^ ~ve & Te, e3[6] = Je ^ ~ot & de, e3[7] = We ^ ~at & le, e3[16] = Pe ^ ~Le & He, e3[17] = Oe ^ ~De & qe, e3[26] = nt ^ ~ge & Ae, e3[27] = it ^ ~we & ke, e3[36] = Ne ^ ~Ye & Qe, e3[37] = Fe ^ ~Xe & Ze, e3[46] = me ^ ~Be & Ce, e3[47] = ve ^ ~Te & Ie, e3[8] = ot ^ ~de & _e, e3[9] = at ^ ~le & Se, e3[18] = Le ^ ~He & $e, e3[19] = De ^ ~qe & et, e3[28] = ge ^ ~Ae & Me, e3[29] = we ^ ~ke & Ue, e3[38] = Ye ^ ~Qe & he, e3[39] = Xe ^ ~Ze & pe, e3[48] = Be ^ ~Ce & ze, e3[49] = Te ^ ~Ie & Ge, e3[0] ^= r3[2 * t3], e3[1] ^= r3[2 * t3 + 1];
          }
        };
      }, 801: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(5612);
        function o() {
          this.state = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], this.blockSize = null, this.count = 0, this.squeezing = false;
        }
        o.prototype.initialize = function(e3, t3) {
          for (var r4 = 0; r4 < 50; ++r4)
            this.state[r4] = 0;
          this.blockSize = e3 / 8, this.count = 0, this.squeezing = false;
        }, o.prototype.absorb = function(e3) {
          for (var t3 = 0; t3 < e3.length; ++t3)
            this.state[~~(this.count / 4)] ^= e3[t3] << this.count % 4 * 8, this.count += 1, this.count === this.blockSize && (i.p1600(this.state), this.count = 0);
        }, o.prototype.absorbLastFewBits = function(e3) {
          this.state[~~(this.count / 4)] ^= e3 << this.count % 4 * 8, 0 != (128 & e3) && this.count === this.blockSize - 1 && i.p1600(this.state), this.state[~~((this.blockSize - 1) / 4)] ^= 128 << (this.blockSize - 1) % 4 * 8, i.p1600(this.state), this.count = 0, this.squeezing = true;
        }, o.prototype.squeeze = function(e3) {
          this.squeezing || this.absorbLastFewBits(1);
          for (var t3 = n.alloc(e3), r4 = 0; r4 < e3; ++r4)
            t3[r4] = this.state[~~(this.count / 4)] >>> this.count % 4 * 8 & 255, this.count += 1, this.count === this.blockSize && (i.p1600(this.state), this.count = 0);
          return t3;
        }, o.prototype.copy = function(e3) {
          for (var t3 = 0; t3 < 50; ++t3)
            e3.state[t3] = this.state[t3];
          e3.blockSize = this.blockSize, e3.count = this.count, e3.squeezing = this.squeezing;
        }, e2.exports = o;
      }, 807: (e2, t2, r3) => {
        "use strict";
        var n = r3(1736), i = r3(2353), o = r3(8850).Buffer, a = new Array(16);
        function s() {
          i.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878;
        }
        function u(e3, t3) {
          return e3 << t3 | e3 >>> 32 - t3;
        }
        function c(e3, t3, r4, n2, i2, o2, a2) {
          return u(e3 + (t3 & r4 | ~t3 & n2) + i2 + o2 | 0, a2) + t3 | 0;
        }
        function f(e3, t3, r4, n2, i2, o2, a2) {
          return u(e3 + (t3 & n2 | r4 & ~n2) + i2 + o2 | 0, a2) + t3 | 0;
        }
        function d(e3, t3, r4, n2, i2, o2, a2) {
          return u(e3 + (t3 ^ r4 ^ n2) + i2 + o2 | 0, a2) + t3 | 0;
        }
        function l(e3, t3, r4, n2, i2, o2, a2) {
          return u(e3 + (r4 ^ (t3 | ~n2)) + i2 + o2 | 0, a2) + t3 | 0;
        }
        n(s, i), s.prototype._update = function() {
          for (var e3 = a, t3 = 0; t3 < 16; ++t3)
            e3[t3] = this._block.readInt32LE(4 * t3);
          var r4 = this._a, n2 = this._b, i2 = this._c, o2 = this._d;
          r4 = c(r4, n2, i2, o2, e3[0], 3614090360, 7), o2 = c(o2, r4, n2, i2, e3[1], 3905402710, 12), i2 = c(i2, o2, r4, n2, e3[2], 606105819, 17), n2 = c(n2, i2, o2, r4, e3[3], 3250441966, 22), r4 = c(r4, n2, i2, o2, e3[4], 4118548399, 7), o2 = c(o2, r4, n2, i2, e3[5], 1200080426, 12), i2 = c(i2, o2, r4, n2, e3[6], 2821735955, 17), n2 = c(n2, i2, o2, r4, e3[7], 4249261313, 22), r4 = c(r4, n2, i2, o2, e3[8], 1770035416, 7), o2 = c(o2, r4, n2, i2, e3[9], 2336552879, 12), i2 = c(i2, o2, r4, n2, e3[10], 4294925233, 17), n2 = c(n2, i2, o2, r4, e3[11], 2304563134, 22), r4 = c(r4, n2, i2, o2, e3[12], 1804603682, 7), o2 = c(o2, r4, n2, i2, e3[13], 4254626195, 12), i2 = c(i2, o2, r4, n2, e3[14], 2792965006, 17), r4 = f(r4, n2 = c(n2, i2, o2, r4, e3[15], 1236535329, 22), i2, o2, e3[1], 4129170786, 5), o2 = f(o2, r4, n2, i2, e3[6], 3225465664, 9), i2 = f(i2, o2, r4, n2, e3[11], 643717713, 14), n2 = f(n2, i2, o2, r4, e3[0], 3921069994, 20), r4 = f(r4, n2, i2, o2, e3[5], 3593408605, 5), o2 = f(o2, r4, n2, i2, e3[10], 38016083, 9), i2 = f(i2, o2, r4, n2, e3[15], 3634488961, 14), n2 = f(n2, i2, o2, r4, e3[4], 3889429448, 20), r4 = f(r4, n2, i2, o2, e3[9], 568446438, 5), o2 = f(o2, r4, n2, i2, e3[14], 3275163606, 9), i2 = f(i2, o2, r4, n2, e3[3], 4107603335, 14), n2 = f(n2, i2, o2, r4, e3[8], 1163531501, 20), r4 = f(r4, n2, i2, o2, e3[13], 2850285829, 5), o2 = f(o2, r4, n2, i2, e3[2], 4243563512, 9), i2 = f(i2, o2, r4, n2, e3[7], 1735328473, 14), r4 = d(r4, n2 = f(n2, i2, o2, r4, e3[12], 2368359562, 20), i2, o2, e3[5], 4294588738, 4), o2 = d(o2, r4, n2, i2, e3[8], 2272392833, 11), i2 = d(i2, o2, r4, n2, e3[11], 1839030562, 16), n2 = d(n2, i2, o2, r4, e3[14], 4259657740, 23), r4 = d(r4, n2, i2, o2, e3[1], 2763975236, 4), o2 = d(o2, r4, n2, i2, e3[4], 1272893353, 11), i2 = d(i2, o2, r4, n2, e3[7], 4139469664, 16), n2 = d(n2, i2, o2, r4, e3[10], 3200236656, 23), r4 = d(r4, n2, i2, o2, e3[13], 681279174, 4), o2 = d(o2, r4, n2, i2, e3[0], 3936430074, 11), i2 = d(i2, o2, r4, n2, e3[3], 3572445317, 16), n2 = d(n2, i2, o2, r4, e3[6], 76029189, 23), r4 = d(r4, n2, i2, o2, e3[9], 3654602809, 4), o2 = d(o2, r4, n2, i2, e3[12], 3873151461, 11), i2 = d(i2, o2, r4, n2, e3[15], 530742520, 16), r4 = l(r4, n2 = d(n2, i2, o2, r4, e3[2], 3299628645, 23), i2, o2, e3[0], 4096336452, 6), o2 = l(o2, r4, n2, i2, e3[7], 1126891415, 10), i2 = l(i2, o2, r4, n2, e3[14], 2878612391, 15), n2 = l(n2, i2, o2, r4, e3[5], 4237533241, 21), r4 = l(r4, n2, i2, o2, e3[12], 1700485571, 6), o2 = l(o2, r4, n2, i2, e3[3], 2399980690, 10), i2 = l(i2, o2, r4, n2, e3[10], 4293915773, 15), n2 = l(n2, i2, o2, r4, e3[1], 2240044497, 21), r4 = l(r4, n2, i2, o2, e3[8], 1873313359, 6), o2 = l(o2, r4, n2, i2, e3[15], 4264355552, 10), i2 = l(i2, o2, r4, n2, e3[6], 2734768916, 15), n2 = l(n2, i2, o2, r4, e3[13], 1309151649, 21), r4 = l(r4, n2, i2, o2, e3[4], 4149444226, 6), o2 = l(o2, r4, n2, i2, e3[11], 3174756917, 10), i2 = l(i2, o2, r4, n2, e3[2], 718787259, 15), n2 = l(n2, i2, o2, r4, e3[9], 3951481745, 21), this._a = this._a + r4 | 0, this._b = this._b + n2 | 0, this._c = this._c + i2 | 0, this._d = this._d + o2 | 0;
        }, s.prototype._digest = function() {
          this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
          var e3 = o.allocUnsafe(16);
          return e3.writeInt32LE(this._a, 0), e3.writeInt32LE(this._b, 4), e3.writeInt32LE(this._c, 8), e3.writeInt32LE(this._d, 12), e3;
        }, e2.exports = s;
      }, 137: (e2, t2, r3) => {
        "use strict";
        var n = r3(1734), i = r3(2202);
        function o(e3) {
          this.rand = e3 || new i.Rand();
        }
        e2.exports = o, o.create = function(e3) {
          return new o(e3);
        }, o.prototype._randbelow = function(e3) {
          var t3 = e3.bitLength(), r4 = Math.ceil(t3 / 8);
          do {
            var i2 = new n(this.rand.generate(r4));
          } while (i2.cmp(e3) >= 0);
          return i2;
        }, o.prototype._randrange = function(e3, t3) {
          var r4 = t3.sub(e3);
          return e3.add(this._randbelow(r4));
        }, o.prototype.test = function(e3, t3, r4) {
          var i2 = e3.bitLength(), o2 = n.mont(e3), a = new n(1).toRed(o2);
          t3 || (t3 = Math.max(1, i2 / 48 | 0));
          for (var s = e3.subn(1), u = 0; !s.testn(u); u++)
            ;
          for (var c = e3.shrn(u), f = s.toRed(o2); t3 > 0; t3--) {
            var d = this._randrange(new n(2), s);
            r4 && r4(d);
            var l = d.toRed(o2).redPow(c);
            if (0 !== l.cmp(a) && 0 !== l.cmp(f)) {
              for (var h = 1; h < u; h++) {
                if (0 === (l = l.redSqr()).cmp(a))
                  return false;
                if (0 === l.cmp(f))
                  break;
              }
              if (h === u)
                return false;
            }
          }
          return true;
        }, o.prototype.getDivisor = function(e3, t3) {
          var r4 = e3.bitLength(), i2 = n.mont(e3), o2 = new n(1).toRed(i2);
          t3 || (t3 = Math.max(1, r4 / 48 | 0));
          for (var a = e3.subn(1), s = 0; !a.testn(s); s++)
            ;
          for (var u = e3.shrn(s), c = a.toRed(i2); t3 > 0; t3--) {
            var f = this._randrange(new n(2), a), d = e3.gcd(f);
            if (0 !== d.cmpn(1))
              return d;
            var l = f.toRed(i2).redPow(u);
            if (0 !== l.cmp(o2) && 0 !== l.cmp(c)) {
              for (var h = 1; h < s; h++) {
                if (0 === (l = l.redSqr()).cmp(o2))
                  return l.fromRed().subn(1).gcd(e3);
                if (0 === l.cmp(c))
                  break;
              }
              if (h === s)
                return (l = l.redSqr()).fromRed().subn(1).gcd(e3);
            }
          }
          return false;
        };
      }, 4504: (e2) => {
        "use strict";
        function t2(e3, t3) {
          if (!e3)
            throw new Error(t3 || "Assertion failed");
        }
        e2.exports = t2, t2.equal = function(e3, t3, r3) {
          if (e3 != t3)
            throw new Error(r3 || "Assertion failed: " + e3 + " != " + t3);
        };
      }, 6580: (e2, t2) => {
        "use strict";
        var r3 = t2;
        function n(e3) {
          return 1 === e3.length ? "0" + e3 : e3;
        }
        function i(e3) {
          for (var t3 = "", r4 = 0; r4 < e3.length; r4++)
            t3 += n(e3[r4].toString(16));
          return t3;
        }
        r3.toArray = function(e3, t3) {
          if (Array.isArray(e3))
            return e3.slice();
          if (!e3)
            return [];
          var r4 = [];
          if ("string" != typeof e3) {
            for (var n2 = 0; n2 < e3.length; n2++)
              r4[n2] = 0 | e3[n2];
            return r4;
          }
          if ("hex" === t3)
            for ((e3 = e3.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e3 = "0" + e3), n2 = 0; n2 < e3.length; n2 += 2)
              r4.push(parseInt(e3[n2] + e3[n2 + 1], 16));
          else
            for (n2 = 0; n2 < e3.length; n2++) {
              var i2 = e3.charCodeAt(n2), o = i2 >> 8, a = 255 & i2;
              o ? r4.push(o, a) : r4.push(a);
            }
          return r4;
        }, r3.zero2 = n, r3.toHex = i, r3.encode = function(e3, t3) {
          return "hex" === t3 ? i(e3) : e3;
        };
      }, 6565: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847), i = n(r3(9721)), o = n(r3(8985)), a = function() {
          function e3(t3, r4, n2, o2) {
            (0, i.default)(this, e3), this.name = t3, this.code = r4, this.alphabet = o2, n2 && o2 && (this.engine = n2(o2));
          }
          return (0, o.default)(e3, [{ key: "encode", value: function(e4) {
            return this.engine.encode(e4);
          } }, { key: "decode", value: function(e4) {
            return this.engine.decode(e4);
          } }, { key: "isImplemented", value: function() {
            return this.engine;
          } }]), e3;
        }();
        e2.exports = a;
      }, 2642: (e2, t2, r3) => {
        "use strict";
        function n(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r4 = 0, n2 = new Array(t3); r4 < t3; r4++)
            n2[r4] = e3[r4];
          return n2;
        }
        var i = r3(9033).Buffer;
        e2.exports = function(e3) {
          return { encode: function(e4) {
            return "string" == typeof e4 ? i.from(e4).toString("hex") : e4.toString("hex");
          }, decode: function(t3) {
            var r4, o = function(e4, t4) {
              var r5 = "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
              if (!r5) {
                if (Array.isArray(e4) || (r5 = function(e5, t5) {
                  if (e5) {
                    if ("string" == typeof e5)
                      return n(e5, t5);
                    var r6 = Object.prototype.toString.call(e5).slice(8, -1);
                    return "Object" === r6 && e5.constructor && (r6 = e5.constructor.name), "Map" === r6 || "Set" === r6 ? Array.from(e5) : "Arguments" === r6 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r6) ? n(e5, t5) : void 0;
                  }
                }(e4)) || t4 && e4 && "number" == typeof e4.length) {
                  r5 && (e4 = r5);
                  var i2 = 0, o2 = function() {
                  };
                  return { s: o2, n: function() {
                    return i2 >= e4.length ? { done: true } : { done: false, value: e4[i2++] };
                  }, e: function(e5) {
                    throw e5;
                  }, f: o2 };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var a2, s = true, u = false;
              return { s: function() {
                r5 = r5.call(e4);
              }, n: function() {
                var e5 = r5.next();
                return s = e5.done, e5;
              }, e: function(e5) {
                u = true, a2 = e5;
              }, f: function() {
                try {
                  s || null == r5.return || r5.return();
                } finally {
                  if (u)
                    throw a2;
                }
              } };
            }(t3);
            try {
              for (o.s(); !(r4 = o.n()).done; ) {
                var a = r4.value;
                if (e3.indexOf(a) < 0)
                  throw new Error("invalid base16 character");
              }
            } catch (e4) {
              o.e(e4);
            } finally {
              o.f();
            }
            return i.from(t3, "hex");
          } };
        };
      }, 6494: (e2) => {
        "use strict";
        function t2(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r3 = 0, n = new Array(t3); r3 < t3; r3++)
            n[r3] = e3[r3];
          return n;
        }
        e2.exports = function(e3) {
          return { encode: function(t3) {
            return function(e4, t4) {
              var r3 = e4.byteLength, n = new Uint8Array(e4), i = t4.indexOf("=") === t4.length - 1;
              i && (t4 = t4.substring(0, t4.length - 1));
              for (var o = 0, a = 0, s = "", u = 0; u < r3; u++)
                for (a = a << 8 | n[u], o += 8; o >= 5; )
                  s += t4[a >>> o - 5 & 31], o -= 5;
              if (o > 0 && (s += t4[a << 5 - o & 31]), i)
                for (; s.length % 8 != 0; )
                  s += "=";
              return s;
            }("string" == typeof t3 ? Uint8Array.from(t3) : t3, e3);
          }, decode: function(r3) {
            var n, i = function(e4, r4) {
              var n2 = "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
              if (!n2) {
                if (Array.isArray(e4) || (n2 = function(e5, r5) {
                  if (e5) {
                    if ("string" == typeof e5)
                      return t2(e5, r5);
                    var n3 = Object.prototype.toString.call(e5).slice(8, -1);
                    return "Object" === n3 && e5.constructor && (n3 = e5.constructor.name), "Map" === n3 || "Set" === n3 ? Array.from(e5) : "Arguments" === n3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3) ? t2(e5, r5) : void 0;
                  }
                }(e4)) || r4 && e4 && "number" == typeof e4.length) {
                  n2 && (e4 = n2);
                  var i2 = 0, o2 = function() {
                  };
                  return { s: o2, n: function() {
                    return i2 >= e4.length ? { done: true } : { done: false, value: e4[i2++] };
                  }, e: function(e5) {
                    throw e5;
                  }, f: o2 };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var a, s = true, u = false;
              return { s: function() {
                n2 = n2.call(e4);
              }, n: function() {
                var e5 = n2.next();
                return s = e5.done, e5;
              }, e: function(e5) {
                u = true, a = e5;
              }, f: function() {
                try {
                  s || null == n2.return || n2.return();
                } finally {
                  if (u)
                    throw a;
                }
              } };
            }(r3);
            try {
              for (i.s(); !(n = i.n()).done; ) {
                var o = n.value;
                if (e3.indexOf(o) < 0)
                  throw new Error("invalid base32 character");
              }
            } catch (e4) {
              i.e(e4);
            } finally {
              i.f();
            }
            return function(e4, t3) {
              for (var r4 = (e4 = e4.replace(new RegExp("=", "g"), "")).length, n2 = 0, i2 = 0, o2 = 0, a = new Uint8Array(5 * r4 / 8 | 0), s = 0; s < r4; s++)
                i2 = i2 << 5 | t3.indexOf(e4[s]), (n2 += 5) >= 8 && (a[o2++] = i2 >>> n2 - 8 & 255, n2 -= 8);
              return a.buffer;
            }(r3, e3);
          } };
        };
      }, 6627: (e2, t2, r3) => {
        "use strict";
        function n(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r4 = 0, n2 = new Array(t3); r4 < t3; r4++)
            n2[r4] = e3[r4];
          return n2;
        }
        var i = r3(9033).Buffer;
        e2.exports = function(e3) {
          var t3 = e3.indexOf("=") > -1, r4 = e3.indexOf("-") > -1 && e3.indexOf("_") > -1;
          return { encode: function(e4) {
            var n2 = "";
            n2 = "string" == typeof e4 ? i.from(e4).toString("base64") : e4.toString("base64"), r4 && (n2 = n2.replace(/\+/g, "-").replace(/\//g, "_"));
            var o = n2.indexOf("=");
            return o > 0 && !t3 && (n2 = n2.substring(0, o)), n2;
          }, decode: function(t4) {
            var r5, o = function(e4, t5) {
              var r6 = "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
              if (!r6) {
                if (Array.isArray(e4) || (r6 = function(e5, t6) {
                  if (e5) {
                    if ("string" == typeof e5)
                      return n(e5, t6);
                    var r7 = Object.prototype.toString.call(e5).slice(8, -1);
                    return "Object" === r7 && e5.constructor && (r7 = e5.constructor.name), "Map" === r7 || "Set" === r7 ? Array.from(e5) : "Arguments" === r7 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r7) ? n(e5, t6) : void 0;
                  }
                }(e4)) || t5 && e4 && "number" == typeof e4.length) {
                  r6 && (e4 = r6);
                  var i2 = 0, o2 = function() {
                  };
                  return { s: o2, n: function() {
                    return i2 >= e4.length ? { done: true } : { done: false, value: e4[i2++] };
                  }, e: function(e5) {
                    throw e5;
                  }, f: o2 };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var a2, s = true, u = false;
              return { s: function() {
                r6 = r6.call(e4);
              }, n: function() {
                var e5 = r6.next();
                return s = e5.done, e5;
              }, e: function(e5) {
                u = true, a2 = e5;
              }, f: function() {
                try {
                  s || null == r6.return || r6.return();
                } finally {
                  if (u)
                    throw a2;
                }
              } };
            }(t4);
            try {
              for (o.s(); !(r5 = o.n()).done; ) {
                var a = r5.value;
                if (e3.indexOf(a) < 0)
                  throw new Error("invalid base64 character");
              }
            } catch (e4) {
              o.e(e4);
            } finally {
              o.f();
            }
            return i.from(t4, "base64");
          } };
        };
      }, 7905: (e2, t2, r3) => {
        "use strict";
        var n = r3(6565), i = r3(7548), o = r3(2642), a = r3(6494), s = r3(6627), u = [["base1", "1", "", "1"], ["base2", "0", i, "01"], ["base8", "7", i, "01234567"], ["base10", "9", i, "0123456789"], ["base16", "f", o, "0123456789abcdef"], ["base32", "b", a, "abcdefghijklmnopqrstuvwxyz234567"], ["base32pad", "c", a, "abcdefghijklmnopqrstuvwxyz234567="], ["base32hex", "v", a, "0123456789abcdefghijklmnopqrstuv"], ["base32hexpad", "t", a, "0123456789abcdefghijklmnopqrstuv="], ["base32z", "h", a, "ybndrfg8ejkmcpqxot1uwisza345h769"], ["base58flickr", "Z", i, "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"], ["base58btc", "z", i, "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"], ["base64", "m", s, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"], ["base64pad", "M", s, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="], ["base64url", "u", s, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"], ["base64urlpad", "U", s, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_="]], c = u.reduce(function(e3, t3) {
          return e3[t3[0]] = new n(t3[0], t3[1], t3[2], t3[3]), e3;
        }, {}), f = u.reduce(function(e3, t3) {
          return e3[t3[1]] = c[t3[0]], e3;
        }, {});
        e2.exports = { names: c, codes: f };
      }, 6086: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(7905);
        (t2 = e2.exports = a).encode = function(e3, t3) {
          var r4 = s(e3);
          return a(r4.name, n.from(r4.encode(t3)));
        }, t2.decode = function(e3) {
          n.isBuffer(e3) && (e3 = e3.toString());
          var t3 = e3.substring(0, 1);
          "string" == typeof (e3 = e3.substring(1, e3.length)) && (e3 = n.from(e3));
          var r4 = s(t3);
          return n.from(r4.decode(e3.toString()));
        }, t2.isEncoded = function(e3) {
          if (n.isBuffer(e3) && (e3 = e3.toString()), "[object String]" !== Object.prototype.toString.call(e3))
            return false;
          var t3 = e3.substring(0, 1);
          try {
            return s(t3).name;
          } catch (e4) {
            return false;
          }
        }, t2.names = Object.freeze(Object.keys(i.names)), t2.codes = Object.freeze(Object.keys(i.codes));
        var o = new Error("Unsupported encoding");
        function a(e3, t3) {
          if (!t3)
            throw new Error("requires an encoded buffer");
          var r4 = s(e3), i2 = n.from(r4.code);
          return function(e4, t4) {
            s(e4).decode(t4.toString());
          }(r4.name, t3), n.concat([i2, t3]);
        }
        function s(e3) {
          var t3;
          if (i.names[e3])
            t3 = i.names[e3];
          else {
            if (!i.codes[e3])
              throw o;
            t3 = i.codes[e3];
          }
          if (!t3.isImplemented())
            throw new Error("Base " + e3 + " is not implemented yet");
          return t3;
        }
      }, 4093: (e2, t2, r3) => {
        "use strict";
        for (var n = r3(8847)(r3(4519)), i = r3(4070), o = {}, a = 0, s = Object.entries(i); a < s.length; a++) {
          var u = (0, n.default)(s[a], 2), c = u[0], f = u[1];
          o[c.toUpperCase().replace(/-/g, "_")] = f;
        }
        e2.exports = Object.freeze(o);
      }, 9206: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(6657), o = r3(7054), a = r3(6002), s = r3(5576);
        (t2 = e2.exports).addPrefix = function(e3, t3) {
          var r4;
          if (n.isBuffer(e3))
            r4 = s.varintBufferEncode(e3);
          else {
            if (!a[e3])
              throw new Error("multicodec not recognized");
            r4 = a[e3];
          }
          return n.concat([r4, t3]);
        }, t2.rmPrefix = function(e3) {
          return i.decode(e3), e3.slice(i.decode.bytes);
        }, t2.getCodec = function(e3) {
          var t3 = i.decode(e3), r4 = o.get(t3);
          if (void 0 === r4)
            throw new Error("Code ".concat(t3, " not found"));
          return r4;
        }, t2.getName = function(e3) {
          return o.get(e3);
        }, t2.getNumber = function(e3) {
          var t3 = a[e3];
          if (void 0 === t3)
            throw new Error("Codec `" + e3 + "` not found");
          return s.varintBufferDecode(t3)[0];
        }, t2.getCode = function(e3) {
          return i.decode(e3);
        }, t2.getCodeVarint = function(e3) {
          var t3 = a[e3];
          if (void 0 === t3)
            throw new Error("Codec `" + e3 + "` not found");
          return t3;
        }, t2.getVarint = function(e3) {
          return i.encode(e3);
        };
        var u = r3(4093);
        Object.assign(t2, u), t2.print = r3(1032);
      }, 7054: (e2, t2, r3) => {
        "use strict";
        var n = r3(4070), i = /* @__PURE__ */ new Map();
        for (var o in n) {
          var a = n[o];
          i.set(a, o);
        }
        e2.exports = Object.freeze(i);
      }, 1032: (e2, t2, r3) => {
        "use strict";
        for (var n = r3(8847)(r3(4519)), i = r3(4070), o = {}, a = 0, s = Object.entries(i); a < s.length; a++) {
          var u = (0, n.default)(s[a], 2), c = u[0], f = u[1];
          void 0 === o[f] && (o[f] = c);
        }
        e2.exports = Object.freeze(o);
      }, 5576: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(6657);
        function o(e3) {
          return parseInt(e3.toString("hex"), 16);
        }
        function a(e3) {
          var t3 = e3.toString(16);
          return t3.length % 2 == 1 && (t3 = "0" + t3), n.from(t3, "hex");
        }
        e2.exports = { numberToBuffer: a, bufferToNumber: o, varintBufferEncode: function(e3) {
          return n.from(i.encode(o(e3)));
        }, varintBufferDecode: function(e3) {
          return a(i.decode(e3));
        }, varintEncode: function(e3) {
          return n.from(i.encode(e3));
        } };
      }, 6002: (e2, t2, r3) => {
        "use strict";
        var n = r3(4070), i = r3(5576).varintEncode, o = {};
        for (var a in n) {
          var s = n[a];
          o[a] = i(s);
        }
        e2.exports = Object.freeze(o);
      }, 1786: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847), i = n(r3(9721)), o = n(r3(8985)), a = function() {
          function e3(t3, r4, n2, o2) {
            (0, i.default)(this, e3), this.name = t3, this.code = r4, this.alphabet = o2, n2 && o2 && (this.engine = n2(o2));
          }
          return (0, o.default)(e3, [{ key: "encode", value: function(e4) {
            return this.engine.encode(e4);
          } }, { key: "decode", value: function(e4) {
            return this.engine.decode(e4);
          } }, { key: "isImplemented", value: function() {
            return this.engine;
          } }]), e3;
        }();
        e2.exports = a;
      }, 7739: (e2, t2, r3) => {
        "use strict";
        function n(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r4 = 0, n2 = new Array(t3); r4 < t3; r4++)
            n2[r4] = e3[r4];
          return n2;
        }
        var i = r3(9033).Buffer;
        e2.exports = function(e3) {
          return { encode: function(e4) {
            return "string" == typeof e4 ? i.from(e4).toString("hex") : e4.toString("hex");
          }, decode: function(t3) {
            var r4, o = function(e4, t4) {
              var r5 = "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
              if (!r5) {
                if (Array.isArray(e4) || (r5 = function(e5, t5) {
                  if (e5) {
                    if ("string" == typeof e5)
                      return n(e5, t5);
                    var r6 = Object.prototype.toString.call(e5).slice(8, -1);
                    return "Object" === r6 && e5.constructor && (r6 = e5.constructor.name), "Map" === r6 || "Set" === r6 ? Array.from(e5) : "Arguments" === r6 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r6) ? n(e5, t5) : void 0;
                  }
                }(e4)) || t4 && e4 && "number" == typeof e4.length) {
                  r5 && (e4 = r5);
                  var i2 = 0, o2 = function() {
                  };
                  return { s: o2, n: function() {
                    return i2 >= e4.length ? { done: true } : { done: false, value: e4[i2++] };
                  }, e: function(e5) {
                    throw e5;
                  }, f: o2 };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var a2, s = true, u = false;
              return { s: function() {
                r5 = r5.call(e4);
              }, n: function() {
                var e5 = r5.next();
                return s = e5.done, e5;
              }, e: function(e5) {
                u = true, a2 = e5;
              }, f: function() {
                try {
                  s || null == r5.return || r5.return();
                } finally {
                  if (u)
                    throw a2;
                }
              } };
            }(t3);
            try {
              for (o.s(); !(r4 = o.n()).done; ) {
                var a = r4.value;
                if (e3.indexOf(a) < 0)
                  throw new Error("invalid base16 character");
              }
            } catch (e4) {
              o.e(e4);
            } finally {
              o.f();
            }
            return i.from(t3, "hex");
          } };
        };
      }, 976: (e2) => {
        "use strict";
        function t2(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r3 = 0, n = new Array(t3); r3 < t3; r3++)
            n[r3] = e3[r3];
          return n;
        }
        e2.exports = function(e3) {
          return { encode: function(t3) {
            return function(e4, t4) {
              var r3 = e4.byteLength, n = new Uint8Array(e4), i = t4.indexOf("=") === t4.length - 1;
              i && (t4 = t4.substring(0, t4.length - 1));
              for (var o = 0, a = 0, s = "", u = 0; u < r3; u++)
                for (a = a << 8 | n[u], o += 8; o >= 5; )
                  s += t4[a >>> o - 5 & 31], o -= 5;
              if (o > 0 && (s += t4[a << 5 - o & 31]), i)
                for (; s.length % 8 != 0; )
                  s += "=";
              return s;
            }("string" == typeof t3 ? Uint8Array.from(t3) : t3, e3);
          }, decode: function(r3) {
            var n, i = function(e4, r4) {
              var n2 = "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
              if (!n2) {
                if (Array.isArray(e4) || (n2 = function(e5, r5) {
                  if (e5) {
                    if ("string" == typeof e5)
                      return t2(e5, r5);
                    var n3 = Object.prototype.toString.call(e5).slice(8, -1);
                    return "Object" === n3 && e5.constructor && (n3 = e5.constructor.name), "Map" === n3 || "Set" === n3 ? Array.from(e5) : "Arguments" === n3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3) ? t2(e5, r5) : void 0;
                  }
                }(e4)) || r4 && e4 && "number" == typeof e4.length) {
                  n2 && (e4 = n2);
                  var i2 = 0, o2 = function() {
                  };
                  return { s: o2, n: function() {
                    return i2 >= e4.length ? { done: true } : { done: false, value: e4[i2++] };
                  }, e: function(e5) {
                    throw e5;
                  }, f: o2 };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var a, s = true, u = false;
              return { s: function() {
                n2 = n2.call(e4);
              }, n: function() {
                var e5 = n2.next();
                return s = e5.done, e5;
              }, e: function(e5) {
                u = true, a = e5;
              }, f: function() {
                try {
                  s || null == n2.return || n2.return();
                } finally {
                  if (u)
                    throw a;
                }
              } };
            }(r3);
            try {
              for (i.s(); !(n = i.n()).done; ) {
                var o = n.value;
                if (e3.indexOf(o) < 0)
                  throw new Error("invalid base32 character");
              }
            } catch (e4) {
              i.e(e4);
            } finally {
              i.f();
            }
            return function(e4, t3) {
              for (var r4 = (e4 = e4.replace(new RegExp("=", "g"), "")).length, n2 = 0, i2 = 0, o2 = 0, a = new Uint8Array(5 * r4 / 8 | 0), s = 0; s < r4; s++)
                i2 = i2 << 5 | t3.indexOf(e4[s]), (n2 += 5) >= 8 && (a[o2++] = i2 >>> n2 - 8 & 255, n2 -= 8);
              return a.buffer;
            }(r3, e3);
          } };
        };
      }, 8504: (e2, t2, r3) => {
        "use strict";
        function n(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r4 = 0, n2 = new Array(t3); r4 < t3; r4++)
            n2[r4] = e3[r4];
          return n2;
        }
        var i = r3(9033).Buffer;
        e2.exports = function(e3) {
          var t3 = e3.indexOf("=") > -1, r4 = e3.indexOf("-") > -1 && e3.indexOf("_") > -1;
          return { encode: function(e4) {
            var n2 = "";
            n2 = "string" == typeof e4 ? i.from(e4).toString("base64") : e4.toString("base64"), r4 && (n2 = n2.replace(/\+/g, "-").replace(/\//g, "_"));
            var o = n2.indexOf("=");
            return o > 0 && !t3 && (n2 = n2.substring(0, o)), n2;
          }, decode: function(t4) {
            var r5, o = function(e4, t5) {
              var r6 = "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
              if (!r6) {
                if (Array.isArray(e4) || (r6 = function(e5, t6) {
                  if (e5) {
                    if ("string" == typeof e5)
                      return n(e5, t6);
                    var r7 = Object.prototype.toString.call(e5).slice(8, -1);
                    return "Object" === r7 && e5.constructor && (r7 = e5.constructor.name), "Map" === r7 || "Set" === r7 ? Array.from(e5) : "Arguments" === r7 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r7) ? n(e5, t6) : void 0;
                  }
                }(e4)) || t5 && e4 && "number" == typeof e4.length) {
                  r6 && (e4 = r6);
                  var i2 = 0, o2 = function() {
                  };
                  return { s: o2, n: function() {
                    return i2 >= e4.length ? { done: true } : { done: false, value: e4[i2++] };
                  }, e: function(e5) {
                    throw e5;
                  }, f: o2 };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var a2, s = true, u = false;
              return { s: function() {
                r6 = r6.call(e4);
              }, n: function() {
                var e5 = r6.next();
                return s = e5.done, e5;
              }, e: function(e5) {
                u = true, a2 = e5;
              }, f: function() {
                try {
                  s || null == r6.return || r6.return();
                } finally {
                  if (u)
                    throw a2;
                }
              } };
            }(t4);
            try {
              for (o.s(); !(r5 = o.n()).done; ) {
                var a = r5.value;
                if (e3.indexOf(a) < 0)
                  throw new Error("invalid base64 character");
              }
            } catch (e4) {
              o.e(e4);
            } finally {
              o.f();
            }
            return i.from(t4, "base64");
          } };
        };
      }, 2263: (e2, t2, r3) => {
        "use strict";
        var n = r3(1786), i = r3(7548), o = r3(7739), a = r3(976), s = r3(8504), u = [["base1", "1", "", "1"], ["base2", "0", i, "01"], ["base8", "7", i, "01234567"], ["base10", "9", i, "0123456789"], ["base16", "f", o, "0123456789abcdef"], ["base32", "b", a, "abcdefghijklmnopqrstuvwxyz234567"], ["base32pad", "c", a, "abcdefghijklmnopqrstuvwxyz234567="], ["base32hex", "v", a, "0123456789abcdefghijklmnopqrstuv"], ["base32hexpad", "t", a, "0123456789abcdefghijklmnopqrstuv="], ["base32z", "h", a, "ybndrfg8ejkmcpqxot1uwisza345h769"], ["base58flickr", "Z", i, "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"], ["base58btc", "z", i, "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"], ["base64", "m", s, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"], ["base64pad", "M", s, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="], ["base64url", "u", s, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"], ["base64urlpad", "U", s, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_="]], c = u.reduce(function(e3, t3) {
          return e3[t3[0]] = new n(t3[0], t3[1], t3[2], t3[3]), e3;
        }, {}), f = u.reduce(function(e3, t3) {
          return e3[t3[1]] = c[t3[0]], e3;
        }, {});
        e2.exports = { names: c, codes: f };
      }, 2592: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(2263);
        function o(e3, t3) {
          if (!t3)
            throw new Error("requires an encoded buffer");
          var r4 = a(e3), i2 = n.from(r4.code);
          return function(e4, t4) {
            a(e4).decode(t4.toString());
          }(r4.name, t3), n.concat([i2, t3]);
        }
        function a(e3) {
          var t3;
          if (i.names[e3])
            t3 = i.names[e3];
          else {
            if (!i.codes[e3])
              throw new Error("Unsupported encoding");
            t3 = i.codes[e3];
          }
          if (!t3.isImplemented())
            throw new Error("Base " + e3 + " is not implemented yet");
          return t3;
        }
        (t2 = e2.exports = o).encode = function(e3, t3) {
          var r4 = a(e3);
          return o(r4.name, n.from(r4.encode(t3)));
        }, t2.decode = function(e3) {
          n.isBuffer(e3) && (e3 = e3.toString());
          var t3 = e3.substring(0, 1);
          "string" == typeof (e3 = e3.substring(1, e3.length)) && (e3 = n.from(e3));
          var r4 = a(t3);
          return n.from(r4.decode(e3.toString()));
        }, t2.isEncoded = function(e3) {
          if (n.isBuffer(e3) && (e3 = e3.toString()), "[object String]" !== Object.prototype.toString.call(e3))
            return false;
          var t3 = e3.substring(0, 1);
          try {
            return a(t3).name;
          } catch (e4) {
            return false;
          }
        }, t2.names = Object.freeze(Object.keys(i.names)), t2.codes = Object.freeze(Object.keys(i.codes));
      }, 1269: (e2, t2) => {
        "use strict";
        t2.names = Object.freeze({ identity: 0, sha1: 17, "sha2-256": 18, "sha2-512": 19, "dbl-sha2-256": 86, "sha3-224": 23, "sha3-256": 22, "sha3-384": 21, "sha3-512": 20, "shake-128": 24, "shake-256": 25, "keccak-224": 26, "keccak-256": 27, "keccak-384": 28, "keccak-512": 29, "murmur3-128": 34, "murmur3-32": 35, md4: 212, md5: 213, "blake2b-8": 45569, "blake2b-16": 45570, "blake2b-24": 45571, "blake2b-32": 45572, "blake2b-40": 45573, "blake2b-48": 45574, "blake2b-56": 45575, "blake2b-64": 45576, "blake2b-72": 45577, "blake2b-80": 45578, "blake2b-88": 45579, "blake2b-96": 45580, "blake2b-104": 45581, "blake2b-112": 45582, "blake2b-120": 45583, "blake2b-128": 45584, "blake2b-136": 45585, "blake2b-144": 45586, "blake2b-152": 45587, "blake2b-160": 45588, "blake2b-168": 45589, "blake2b-176": 45590, "blake2b-184": 45591, "blake2b-192": 45592, "blake2b-200": 45593, "blake2b-208": 45594, "blake2b-216": 45595, "blake2b-224": 45596, "blake2b-232": 45597, "blake2b-240": 45598, "blake2b-248": 45599, "blake2b-256": 45600, "blake2b-264": 45601, "blake2b-272": 45602, "blake2b-280": 45603, "blake2b-288": 45604, "blake2b-296": 45605, "blake2b-304": 45606, "blake2b-312": 45607, "blake2b-320": 45608, "blake2b-328": 45609, "blake2b-336": 45610, "blake2b-344": 45611, "blake2b-352": 45612, "blake2b-360": 45613, "blake2b-368": 45614, "blake2b-376": 45615, "blake2b-384": 45616, "blake2b-392": 45617, "blake2b-400": 45618, "blake2b-408": 45619, "blake2b-416": 45620, "blake2b-424": 45621, "blake2b-432": 45622, "blake2b-440": 45623, "blake2b-448": 45624, "blake2b-456": 45625, "blake2b-464": 45626, "blake2b-472": 45627, "blake2b-480": 45628, "blake2b-488": 45629, "blake2b-496": 45630, "blake2b-504": 45631, "blake2b-512": 45632, "blake2s-8": 45633, "blake2s-16": 45634, "blake2s-24": 45635, "blake2s-32": 45636, "blake2s-40": 45637, "blake2s-48": 45638, "blake2s-56": 45639, "blake2s-64": 45640, "blake2s-72": 45641, "blake2s-80": 45642, "blake2s-88": 45643, "blake2s-96": 45644, "blake2s-104": 45645, "blake2s-112": 45646, "blake2s-120": 45647, "blake2s-128": 45648, "blake2s-136": 45649, "blake2s-144": 45650, "blake2s-152": 45651, "blake2s-160": 45652, "blake2s-168": 45653, "blake2s-176": 45654, "blake2s-184": 45655, "blake2s-192": 45656, "blake2s-200": 45657, "blake2s-208": 45658, "blake2s-216": 45659, "blake2s-224": 45660, "blake2s-232": 45661, "blake2s-240": 45662, "blake2s-248": 45663, "blake2s-256": 45664, "Skein256-8": 45825, "Skein256-16": 45826, "Skein256-24": 45827, "Skein256-32": 45828, "Skein256-40": 45829, "Skein256-48": 45830, "Skein256-56": 45831, "Skein256-64": 45832, "Skein256-72": 45833, "Skein256-80": 45834, "Skein256-88": 45835, "Skein256-96": 45836, "Skein256-104": 45837, "Skein256-112": 45838, "Skein256-120": 45839, "Skein256-128": 45840, "Skein256-136": 45841, "Skein256-144": 45842, "Skein256-152": 45843, "Skein256-160": 45844, "Skein256-168": 45845, "Skein256-176": 45846, "Skein256-184": 45847, "Skein256-192": 45848, "Skein256-200": 45849, "Skein256-208": 45850, "Skein256-216": 45851, "Skein256-224": 45852, "Skein256-232": 45853, "Skein256-240": 45854, "Skein256-248": 45855, "Skein256-256": 45856, "Skein512-8": 45857, "Skein512-16": 45858, "Skein512-24": 45859, "Skein512-32": 45860, "Skein512-40": 45861, "Skein512-48": 45862, "Skein512-56": 45863, "Skein512-64": 45864, "Skein512-72": 45865, "Skein512-80": 45866, "Skein512-88": 45867, "Skein512-96": 45868, "Skein512-104": 45869, "Skein512-112": 45870, "Skein512-120": 45871, "Skein512-128": 45872, "Skein512-136": 45873, "Skein512-144": 45874, "Skein512-152": 45875, "Skein512-160": 45876, "Skein512-168": 45877, "Skein512-176": 45878, "Skein512-184": 45879, "Skein512-192": 45880, "Skein512-200": 45881, "Skein512-208": 45882, "Skein512-216": 45883, "Skein512-224": 45884, "Skein512-232": 45885, "Skein512-240": 45886, "Skein512-248": 45887, "Skein512-256": 45888, "Skein512-264": 45889, "Skein512-272": 45890, "Skein512-280": 45891, "Skein512-288": 45892, "Skein512-296": 45893, "Skein512-304": 45894, "Skein512-312": 45895, "Skein512-320": 45896, "Skein512-328": 45897, "Skein512-336": 45898, "Skein512-344": 45899, "Skein512-352": 45900, "Skein512-360": 45901, "Skein512-368": 45902, "Skein512-376": 45903, "Skein512-384": 45904, "Skein512-392": 45905, "Skein512-400": 45906, "Skein512-408": 45907, "Skein512-416": 45908, "Skein512-424": 45909, "Skein512-432": 45910, "Skein512-440": 45911, "Skein512-448": 45912, "Skein512-456": 45913, "Skein512-464": 45914, "Skein512-472": 45915, "Skein512-480": 45916, "Skein512-488": 45917, "Skein512-496": 45918, "Skein512-504": 45919, "Skein512-512": 45920, "Skein1024-8": 45921, "Skein1024-16": 45922, "Skein1024-24": 45923, "Skein1024-32": 45924, "Skein1024-40": 45925, "Skein1024-48": 45926, "Skein1024-56": 45927, "Skein1024-64": 45928, "Skein1024-72": 45929, "Skein1024-80": 45930, "Skein1024-88": 45931, "Skein1024-96": 45932, "Skein1024-104": 45933, "Skein1024-112": 45934, "Skein1024-120": 45935, "Skein1024-128": 45936, "Skein1024-136": 45937, "Skein1024-144": 45938, "Skein1024-152": 45939, "Skein1024-160": 45940, "Skein1024-168": 45941, "Skein1024-176": 45942, "Skein1024-184": 45943, "Skein1024-192": 45944, "Skein1024-200": 45945, "Skein1024-208": 45946, "Skein1024-216": 45947, "Skein1024-224": 45948, "Skein1024-232": 45949, "Skein1024-240": 45950, "Skein1024-248": 45951, "Skein1024-256": 45952, "Skein1024-264": 45953, "Skein1024-272": 45954, "Skein1024-280": 45955, "Skein1024-288": 45956, "Skein1024-296": 45957, "Skein1024-304": 45958, "Skein1024-312": 45959, "Skein1024-320": 45960, "Skein1024-328": 45961, "Skein1024-336": 45962, "Skein1024-344": 45963, "Skein1024-352": 45964, "Skein1024-360": 45965, "Skein1024-368": 45966, "Skein1024-376": 45967, "Skein1024-384": 45968, "Skein1024-392": 45969, "Skein1024-400": 45970, "Skein1024-408": 45971, "Skein1024-416": 45972, "Skein1024-424": 45973, "Skein1024-432": 45974, "Skein1024-440": 45975, "Skein1024-448": 45976, "Skein1024-456": 45977, "Skein1024-464": 45978, "Skein1024-472": 45979, "Skein1024-480": 45980, "Skein1024-488": 45981, "Skein1024-496": 45982, "Skein1024-504": 45983, "Skein1024-512": 45984, "Skein1024-520": 45985, "Skein1024-528": 45986, "Skein1024-536": 45987, "Skein1024-544": 45988, "Skein1024-552": 45989, "Skein1024-560": 45990, "Skein1024-568": 45991, "Skein1024-576": 45992, "Skein1024-584": 45993, "Skein1024-592": 45994, "Skein1024-600": 45995, "Skein1024-608": 45996, "Skein1024-616": 45997, "Skein1024-624": 45998, "Skein1024-632": 45999, "Skein1024-640": 46e3, "Skein1024-648": 46001, "Skein1024-656": 46002, "Skein1024-664": 46003, "Skein1024-672": 46004, "Skein1024-680": 46005, "Skein1024-688": 46006, "Skein1024-696": 46007, "Skein1024-704": 46008, "Skein1024-712": 46009, "Skein1024-720": 46010, "Skein1024-728": 46011, "Skein1024-736": 46012, "Skein1024-744": 46013, "Skein1024-752": 46014, "Skein1024-760": 46015, "Skein1024-768": 46016, "Skein1024-776": 46017, "Skein1024-784": 46018, "Skein1024-792": 46019, "Skein1024-800": 46020, "Skein1024-808": 46021, "Skein1024-816": 46022, "Skein1024-824": 46023, "Skein1024-832": 46024, "Skein1024-840": 46025, "Skein1024-848": 46026, "Skein1024-856": 46027, "Skein1024-864": 46028, "Skein1024-872": 46029, "Skein1024-880": 46030, "Skein1024-888": 46031, "Skein1024-896": 46032, "Skein1024-904": 46033, "Skein1024-912": 46034, "Skein1024-920": 46035, "Skein1024-928": 46036, "Skein1024-936": 46037, "Skein1024-944": 46038, "Skein1024-952": 46039, "Skein1024-960": 46040, "Skein1024-968": 46041, "Skein1024-976": 46042, "Skein1024-984": 46043, "Skein1024-992": 46044, "Skein1024-1000": 46045, "Skein1024-1008": 46046, "Skein1024-1016": 46047, "Skein1024-1024": 46048 }), t2.codes = Object.freeze({ 0: "identity", 17: "sha1", 18: "sha2-256", 19: "sha2-512", 86: "dbl-sha2-256", 23: "sha3-224", 22: "sha3-256", 21: "sha3-384", 20: "sha3-512", 24: "shake-128", 25: "shake-256", 26: "keccak-224", 27: "keccak-256", 28: "keccak-384", 29: "keccak-512", 34: "murmur3-128", 35: "murmur3-32", 212: "md4", 213: "md5", 45569: "blake2b-8", 45570: "blake2b-16", 45571: "blake2b-24", 45572: "blake2b-32", 45573: "blake2b-40", 45574: "blake2b-48", 45575: "blake2b-56", 45576: "blake2b-64", 45577: "blake2b-72", 45578: "blake2b-80", 45579: "blake2b-88", 45580: "blake2b-96", 45581: "blake2b-104", 45582: "blake2b-112", 45583: "blake2b-120", 45584: "blake2b-128", 45585: "blake2b-136", 45586: "blake2b-144", 45587: "blake2b-152", 45588: "blake2b-160", 45589: "blake2b-168", 45590: "blake2b-176", 45591: "blake2b-184", 45592: "blake2b-192", 45593: "blake2b-200", 45594: "blake2b-208", 45595: "blake2b-216", 45596: "blake2b-224", 45597: "blake2b-232", 45598: "blake2b-240", 45599: "blake2b-248", 45600: "blake2b-256", 45601: "blake2b-264", 45602: "blake2b-272", 45603: "blake2b-280", 45604: "blake2b-288", 45605: "blake2b-296", 45606: "blake2b-304", 45607: "blake2b-312", 45608: "blake2b-320", 45609: "blake2b-328", 45610: "blake2b-336", 45611: "blake2b-344", 45612: "blake2b-352", 45613: "blake2b-360", 45614: "blake2b-368", 45615: "blake2b-376", 45616: "blake2b-384", 45617: "blake2b-392", 45618: "blake2b-400", 45619: "blake2b-408", 45620: "blake2b-416", 45621: "blake2b-424", 45622: "blake2b-432", 45623: "blake2b-440", 45624: "blake2b-448", 45625: "blake2b-456", 45626: "blake2b-464", 45627: "blake2b-472", 45628: "blake2b-480", 45629: "blake2b-488", 45630: "blake2b-496", 45631: "blake2b-504", 45632: "blake2b-512", 45633: "blake2s-8", 45634: "blake2s-16", 45635: "blake2s-24", 45636: "blake2s-32", 45637: "blake2s-40", 45638: "blake2s-48", 45639: "blake2s-56", 45640: "blake2s-64", 45641: "blake2s-72", 45642: "blake2s-80", 45643: "blake2s-88", 45644: "blake2s-96", 45645: "blake2s-104", 45646: "blake2s-112", 45647: "blake2s-120", 45648: "blake2s-128", 45649: "blake2s-136", 45650: "blake2s-144", 45651: "blake2s-152", 45652: "blake2s-160", 45653: "blake2s-168", 45654: "blake2s-176", 45655: "blake2s-184", 45656: "blake2s-192", 45657: "blake2s-200", 45658: "blake2s-208", 45659: "blake2s-216", 45660: "blake2s-224", 45661: "blake2s-232", 45662: "blake2s-240", 45663: "blake2s-248", 45664: "blake2s-256", 45825: "Skein256-8", 45826: "Skein256-16", 45827: "Skein256-24", 45828: "Skein256-32", 45829: "Skein256-40", 45830: "Skein256-48", 45831: "Skein256-56", 45832: "Skein256-64", 45833: "Skein256-72", 45834: "Skein256-80", 45835: "Skein256-88", 45836: "Skein256-96", 45837: "Skein256-104", 45838: "Skein256-112", 45839: "Skein256-120", 45840: "Skein256-128", 45841: "Skein256-136", 45842: "Skein256-144", 45843: "Skein256-152", 45844: "Skein256-160", 45845: "Skein256-168", 45846: "Skein256-176", 45847: "Skein256-184", 45848: "Skein256-192", 45849: "Skein256-200", 45850: "Skein256-208", 45851: "Skein256-216", 45852: "Skein256-224", 45853: "Skein256-232", 45854: "Skein256-240", 45855: "Skein256-248", 45856: "Skein256-256", 45857: "Skein512-8", 45858: "Skein512-16", 45859: "Skein512-24", 45860: "Skein512-32", 45861: "Skein512-40", 45862: "Skein512-48", 45863: "Skein512-56", 45864: "Skein512-64", 45865: "Skein512-72", 45866: "Skein512-80", 45867: "Skein512-88", 45868: "Skein512-96", 45869: "Skein512-104", 45870: "Skein512-112", 45871: "Skein512-120", 45872: "Skein512-128", 45873: "Skein512-136", 45874: "Skein512-144", 45875: "Skein512-152", 45876: "Skein512-160", 45877: "Skein512-168", 45878: "Skein512-176", 45879: "Skein512-184", 45880: "Skein512-192", 45881: "Skein512-200", 45882: "Skein512-208", 45883: "Skein512-216", 45884: "Skein512-224", 45885: "Skein512-232", 45886: "Skein512-240", 45887: "Skein512-248", 45888: "Skein512-256", 45889: "Skein512-264", 45890: "Skein512-272", 45891: "Skein512-280", 45892: "Skein512-288", 45893: "Skein512-296", 45894: "Skein512-304", 45895: "Skein512-312", 45896: "Skein512-320", 45897: "Skein512-328", 45898: "Skein512-336", 45899: "Skein512-344", 45900: "Skein512-352", 45901: "Skein512-360", 45902: "Skein512-368", 45903: "Skein512-376", 45904: "Skein512-384", 45905: "Skein512-392", 45906: "Skein512-400", 45907: "Skein512-408", 45908: "Skein512-416", 45909: "Skein512-424", 45910: "Skein512-432", 45911: "Skein512-440", 45912: "Skein512-448", 45913: "Skein512-456", 45914: "Skein512-464", 45915: "Skein512-472", 45916: "Skein512-480", 45917: "Skein512-488", 45918: "Skein512-496", 45919: "Skein512-504", 45920: "Skein512-512", 45921: "Skein1024-8", 45922: "Skein1024-16", 45923: "Skein1024-24", 45924: "Skein1024-32", 45925: "Skein1024-40", 45926: "Skein1024-48", 45927: "Skein1024-56", 45928: "Skein1024-64", 45929: "Skein1024-72", 45930: "Skein1024-80", 45931: "Skein1024-88", 45932: "Skein1024-96", 45933: "Skein1024-104", 45934: "Skein1024-112", 45935: "Skein1024-120", 45936: "Skein1024-128", 45937: "Skein1024-136", 45938: "Skein1024-144", 45939: "Skein1024-152", 45940: "Skein1024-160", 45941: "Skein1024-168", 45942: "Skein1024-176", 45943: "Skein1024-184", 45944: "Skein1024-192", 45945: "Skein1024-200", 45946: "Skein1024-208", 45947: "Skein1024-216", 45948: "Skein1024-224", 45949: "Skein1024-232", 45950: "Skein1024-240", 45951: "Skein1024-248", 45952: "Skein1024-256", 45953: "Skein1024-264", 45954: "Skein1024-272", 45955: "Skein1024-280", 45956: "Skein1024-288", 45957: "Skein1024-296", 45958: "Skein1024-304", 45959: "Skein1024-312", 45960: "Skein1024-320", 45961: "Skein1024-328", 45962: "Skein1024-336", 45963: "Skein1024-344", 45964: "Skein1024-352", 45965: "Skein1024-360", 45966: "Skein1024-368", 45967: "Skein1024-376", 45968: "Skein1024-384", 45969: "Skein1024-392", 45970: "Skein1024-400", 45971: "Skein1024-408", 45972: "Skein1024-416", 45973: "Skein1024-424", 45974: "Skein1024-432", 45975: "Skein1024-440", 45976: "Skein1024-448", 45977: "Skein1024-456", 45978: "Skein1024-464", 45979: "Skein1024-472", 45980: "Skein1024-480", 45981: "Skein1024-488", 45982: "Skein1024-496", 45983: "Skein1024-504", 45984: "Skein1024-512", 45985: "Skein1024-520", 45986: "Skein1024-528", 45987: "Skein1024-536", 45988: "Skein1024-544", 45989: "Skein1024-552", 45990: "Skein1024-560", 45991: "Skein1024-568", 45992: "Skein1024-576", 45993: "Skein1024-584", 45994: "Skein1024-592", 45995: "Skein1024-600", 45996: "Skein1024-608", 45997: "Skein1024-616", 45998: "Skein1024-624", 45999: "Skein1024-632", 46e3: "Skein1024-640", 46001: "Skein1024-648", 46002: "Skein1024-656", 46003: "Skein1024-664", 46004: "Skein1024-672", 46005: "Skein1024-680", 46006: "Skein1024-688", 46007: "Skein1024-696", 46008: "Skein1024-704", 46009: "Skein1024-712", 46010: "Skein1024-720", 46011: "Skein1024-728", 46012: "Skein1024-736", 46013: "Skein1024-744", 46014: "Skein1024-752", 46015: "Skein1024-760", 46016: "Skein1024-768", 46017: "Skein1024-776", 46018: "Skein1024-784", 46019: "Skein1024-792", 46020: "Skein1024-800", 46021: "Skein1024-808", 46022: "Skein1024-816", 46023: "Skein1024-824", 46024: "Skein1024-832", 46025: "Skein1024-840", 46026: "Skein1024-848", 46027: "Skein1024-856", 46028: "Skein1024-864", 46029: "Skein1024-872", 46030: "Skein1024-880", 46031: "Skein1024-888", 46032: "Skein1024-896", 46033: "Skein1024-904", 46034: "Skein1024-912", 46035: "Skein1024-920", 46036: "Skein1024-928", 46037: "Skein1024-936", 46038: "Skein1024-944", 46039: "Skein1024-952", 46040: "Skein1024-960", 46041: "Skein1024-968", 46042: "Skein1024-976", 46043: "Skein1024-984", 46044: "Skein1024-992", 46045: "Skein1024-1000", 46046: "Skein1024-1008", 46047: "Skein1024-1016", 46048: "Skein1024-1024" }), t2.defaultLengths = Object.freeze({ 17: 20, 18: 32, 19: 64, 86: 32, 23: 28, 22: 32, 21: 48, 20: 64, 24: 32, 25: 64, 26: 28, 27: 32, 28: 48, 29: 64, 34: 32, 45569: 1, 45570: 2, 45571: 3, 45572: 4, 45573: 5, 45574: 6, 45575: 7, 45576: 8, 45577: 9, 45578: 10, 45579: 11, 45580: 12, 45581: 13, 45582: 14, 45583: 15, 45584: 16, 45585: 17, 45586: 18, 45587: 19, 45588: 20, 45589: 21, 45590: 22, 45591: 23, 45592: 24, 45593: 25, 45594: 26, 45595: 27, 45596: 28, 45597: 29, 45598: 30, 45599: 31, 45600: 32, 45601: 33, 45602: 34, 45603: 35, 45604: 36, 45605: 37, 45606: 38, 45607: 39, 45608: 40, 45609: 41, 45610: 42, 45611: 43, 45612: 44, 45613: 45, 45614: 46, 45615: 47, 45616: 48, 45617: 49, 45618: 50, 45619: 51, 45620: 52, 45621: 53, 45622: 54, 45623: 55, 45624: 56, 45625: 57, 45626: 58, 45627: 59, 45628: 60, 45629: 61, 45630: 62, 45631: 63, 45632: 64, 45633: 1, 45634: 2, 45635: 3, 45636: 4, 45637: 5, 45638: 6, 45639: 7, 45640: 8, 45641: 9, 45642: 10, 45643: 11, 45644: 12, 45645: 13, 45646: 14, 45647: 15, 45648: 16, 45649: 17, 45650: 18, 45651: 19, 45652: 20, 45653: 21, 45654: 22, 45655: 23, 45656: 24, 45657: 25, 45658: 26, 45659: 27, 45660: 28, 45661: 29, 45662: 30, 45663: 31, 45664: 32, 45825: 1, 45826: 2, 45827: 3, 45828: 4, 45829: 5, 45830: 6, 45831: 7, 45832: 8, 45833: 9, 45834: 10, 45835: 11, 45836: 12, 45837: 13, 45838: 14, 45839: 15, 45840: 16, 45841: 17, 45842: 18, 45843: 19, 45844: 20, 45845: 21, 45846: 22, 45847: 23, 45848: 24, 45849: 25, 45850: 26, 45851: 27, 45852: 28, 45853: 29, 45854: 30, 45855: 31, 45856: 32, 45857: 1, 45858: 2, 45859: 3, 45860: 4, 45861: 5, 45862: 6, 45863: 7, 45864: 8, 45865: 9, 45866: 10, 45867: 11, 45868: 12, 45869: 13, 45870: 14, 45871: 15, 45872: 16, 45873: 17, 45874: 18, 45875: 19, 45876: 20, 45877: 21, 45878: 22, 45879: 23, 45880: 24, 45881: 25, 45882: 26, 45883: 27, 45884: 28, 45885: 29, 45886: 30, 45887: 31, 45888: 32, 45889: 33, 45890: 34, 45891: 35, 45892: 36, 45893: 37, 45894: 38, 45895: 39, 45896: 40, 45897: 41, 45898: 42, 45899: 43, 45900: 44, 45901: 45, 45902: 46, 45903: 47, 45904: 48, 45905: 49, 45906: 50, 45907: 51, 45908: 52, 45909: 53, 45910: 54, 45911: 55, 45912: 56, 45913: 57, 45914: 58, 45915: 59, 45916: 60, 45917: 61, 45918: 62, 45919: 63, 45920: 64, 45921: 1, 45922: 2, 45923: 3, 45924: 4, 45925: 5, 45926: 6, 45927: 7, 45928: 8, 45929: 9, 45930: 10, 45931: 11, 45932: 12, 45933: 13, 45934: 14, 45935: 15, 45936: 16, 45937: 17, 45938: 18, 45939: 19, 45940: 20, 45941: 21, 45942: 22, 45943: 23, 45944: 24, 45945: 25, 45946: 26, 45947: 27, 45948: 28, 45949: 29, 45950: 30, 45951: 31, 45952: 32, 45953: 33, 45954: 34, 45955: 35, 45956: 36, 45957: 37, 45958: 38, 45959: 39, 45960: 40, 45961: 41, 45962: 42, 45963: 43, 45964: 44, 45965: 45, 45966: 46, 45967: 47, 45968: 48, 45969: 49, 45970: 50, 45971: 51, 45972: 52, 45973: 53, 45974: 54, 45975: 55, 45976: 56, 45977: 57, 45978: 58, 45979: 59, 45980: 60, 45981: 61, 45982: 62, 45983: 63, 45984: 64, 45985: 65, 45986: 66, 45987: 67, 45988: 68, 45989: 69, 45990: 70, 45991: 71, 45992: 72, 45993: 73, 45994: 74, 45995: 75, 45996: 76, 45997: 77, 45998: 78, 45999: 79, 46e3: 80, 46001: 81, 46002: 82, 46003: 83, 46004: 84, 46005: 85, 46006: 86, 46007: 87, 46008: 88, 46009: 89, 46010: 90, 46011: 91, 46012: 92, 46013: 93, 46014: 94, 46015: 95, 46016: 96, 46017: 97, 46018: 98, 46019: 99, 46020: 100, 46021: 101, 46022: 102, 46023: 103, 46024: 104, 46025: 105, 46026: 106, 46027: 107, 46028: 108, 46029: 109, 46030: 110, 46031: 111, 46032: 112, 46033: 113, 46034: 114, 46035: 115, 46036: 116, 46037: 117, 46038: 118, 46039: 119, 46040: 120, 46041: 121, 46042: 122, 46043: 123, 46044: 124, 46045: 125, 46046: 126, 46047: 127, 46048: 128 });
      }, 7748: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(2592), o = r3(6657), a = r3(1269);
        function s(e3) {
          t2.decode(e3);
        }
        t2.names = a.names, t2.codes = a.codes, t2.defaultLengths = a.defaultLengths, t2.toHexString = function(e3) {
          if (!n.isBuffer(e3))
            throw new Error("must be passed a buffer");
          return e3.toString("hex");
        }, t2.fromHexString = function(e3) {
          return n.from(e3, "hex");
        }, t2.toB58String = function(e3) {
          if (!n.isBuffer(e3))
            throw new Error("must be passed a buffer");
          return i.encode("base58btc", e3).toString().slice(1);
        }, t2.fromB58String = function(e3) {
          var t3 = e3;
          return n.isBuffer(e3) && (t3 = e3.toString()), i.decode("z" + t3);
        }, t2.decode = function(e3) {
          if (!n.isBuffer(e3))
            throw new Error("multihash must be a Buffer");
          if (e3.length < 2)
            throw new Error("multihash too short. must be > 2 bytes.");
          var r4 = o.decode(e3);
          if (!t2.isValidCode(r4))
            throw new Error("multihash unknown function code: 0x".concat(r4.toString(16)));
          e3 = e3.slice(o.decode.bytes);
          var i2 = o.decode(e3);
          if (i2 < 0)
            throw new Error("multihash invalid length: ".concat(i2));
          if ((e3 = e3.slice(o.decode.bytes)).length !== i2)
            throw new Error("multihash length inconsistent: 0x".concat(e3.toString("hex")));
          return { code: r4, name: a.codes[r4], length: i2, digest: e3 };
        }, t2.encode = function(e3, r4, i2) {
          if (!e3 || void 0 === r4)
            throw new Error("multihash encode requires at least two args: digest, code");
          var a2 = t2.coerceCode(r4);
          if (!n.isBuffer(e3))
            throw new Error("digest should be a Buffer");
          if (null == i2 && (i2 = e3.length), i2 && e3.length !== i2)
            throw new Error("digest length should be equal to specified length.");
          return n.concat([n.from(o.encode(a2)), n.from(o.encode(i2)), e3]);
        }, t2.coerceCode = function(e3) {
          var r4 = e3;
          if ("string" == typeof e3) {
            if (void 0 === a.names[e3])
              throw new Error("Unrecognized hash function named: ".concat(e3));
            r4 = a.names[e3];
          }
          if ("number" != typeof r4)
            throw new Error("Hash function code should be a number. Got: ".concat(r4));
          if (void 0 === a.codes[r4] && !t2.isAppCode(r4))
            throw new Error("Unrecognized function code: ".concat(r4));
          return r4;
        }, t2.isAppCode = function(e3) {
          return e3 > 0 && e3 < 16;
        }, t2.isValidCode = function(e3) {
          return !!t2.isAppCode(e3) || !!a.codes[e3];
        }, t2.validate = s, t2.prefix = function(e3) {
          return s(e3), e3.slice(0, 2);
        };
      }, 7277: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(1734), o = r3(6931);
        e2.exports = function(e3) {
          if ("string" == typeof e3 || "number" == typeof e3) {
            var t3 = new i(1), r4 = String(e3).toLowerCase().trim(), a = "0x" === r4.substr(0, 2) || "-0x" === r4.substr(0, 3), s = o(r4);
            if ("-" === s.substr(0, 1) && (s = o(s.slice(1)), t3 = new i(-1, 10)), !(s = "" === s ? "0" : s).match(/^-?[0-9]+$/) && s.match(/^[0-9A-Fa-f]+$/) || s.match(/^[a-fA-F]+$/) || true === a && s.match(/^[0-9A-Fa-f]+$/))
              return new i(s, 16).mul(t3);
            if ((s.match(/^-?[0-9]+$/) || "" === s) && false === a)
              return new i(s, 10).mul(t3);
          } else if ("object" === (0, n.default)(e3) && e3.toString && !e3.pop && !e3.push && e3.toString(10).match(/^-?[0-9]+$/) && (e3.mul || e3.dividedToIntegerBy))
            return new i(e3.toString(10), 10);
          throw new Error("[number-to-bn] while converting number " + JSON.stringify(e3) + " to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.");
        };
      }, 3103: (e2) => {
        "use strict";
        var t2 = Object.getOwnPropertySymbols, r3 = Object.prototype.hasOwnProperty, n = Object.prototype.propertyIsEnumerable;
        e2.exports = function() {
          try {
            if (!Object.assign)
              return false;
            var e3 = new String("abc");
            if (e3[5] = "de", "5" === Object.getOwnPropertyNames(e3)[0])
              return false;
            for (var t3 = {}, r4 = 0; r4 < 10; r4++)
              t3["_" + String.fromCharCode(r4)] = r4;
            if ("0123456789" !== Object.getOwnPropertyNames(t3).map(function(e4) {
              return t3[e4];
            }).join(""))
              return false;
            var n2 = {};
            return "abcdefghijklmnopqrst".split("").forEach(function(e4) {
              n2[e4] = e4;
            }), "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, n2)).join("");
          } catch (e4) {
            return false;
          }
        }() ? Object.assign : function(e3, i) {
          for (var o, a, s = function(e4) {
            if (null == e4)
              throw new TypeError("Object.assign cannot be called with null or undefined");
            return Object(e4);
          }(e3), u = 1; u < arguments.length; u++) {
            for (var c in o = Object(arguments[u]))
              r3.call(o, c) && (s[c] = o[c]);
            if (t2) {
              a = t2(o);
              for (var f = 0; f < a.length; f++)
                n.call(o, a[f]) && (s[a[f]] = o[a[f]]);
            }
          }
          return s;
        };
      }, 3150: (e2, t2, r3) => {
        "use strict";
        var n, i, o;
        e2 = r3.nmd(e2);
        var a, s = r3(8847)(r3(3355));
        "undefined" != typeof self && self, a = function() {
          return function(e3) {
            var t3 = {};
            function r4(n2) {
              if (t3[n2])
                return t3[n2].exports;
              var i2 = t3[n2] = { i: n2, l: false, exports: {} };
              return e3[n2].call(i2.exports, i2, i2.exports, r4), i2.l = true, i2.exports;
            }
            return r4.m = e3, r4.c = t3, r4.d = function(e4, t4, n2) {
              r4.o(e4, t4) || Object.defineProperty(e4, t4, { configurable: false, enumerable: true, get: n2 });
            }, r4.n = function(e4) {
              var t4 = e4 && e4.__esModule ? function() {
                return e4.default;
              } : function() {
                return e4;
              };
              return r4.d(t4, "a", t4), t4;
            }, r4.o = function(e4, t4) {
              return Object.prototype.hasOwnProperty.call(e4, t4);
            }, r4.p = "", r4(r4.s = 7);
          }([function(e3, t3, r4) {
            r4.d(t3, "j", function() {
              return i2;
            }), r4.d(t3, "d", function() {
              return o2;
            }), r4.d(t3, "c", function() {
              return a2;
            }), r4.d(t3, "h", function() {
              return s2;
            }), r4.d(t3, "b", function() {
              return u;
            }), r4.d(t3, "k", function() {
              return c;
            }), r4.d(t3, "e", function() {
              return f;
            }), r4.d(t3, "g", function() {
              return d;
            }), r4.d(t3, "i", function() {
              return l;
            }), r4.d(t3, "a", function() {
              return h;
            }), r4.d(t3, "f", function() {
              return p;
            });
            var n2 = r4(1), i2 = c(function(e4, t4) {
              var r5 = t4.length;
              return c(function(n3) {
                for (var i3 = 0; i3 < n3.length; i3++)
                  t4[r5 + i3] = n3[i3];
                return t4.length = r5 + n3.length, e4.apply(this, t4);
              });
            });
            function o2(e4, t4) {
              return function() {
                return e4.call(this, t4.apply(this, arguments));
              };
            }
            function a2(e4) {
              return function(t4) {
                return t4[e4];
              };
            }
            c(function(e4) {
              var t4 = Object(n2.c)(e4);
              function r5(e5, t5) {
                return [u(e5, t5)];
              }
              return c(function(e5) {
                return Object(n2.f)(r5, e5, t4)[0];
              });
            });
            var s2 = c(function(e4) {
              return c(function(t4) {
                for (var r5, n3 = 0; n3 < a2("length")(e4); n3++)
                  if (r5 = u(t4, e4[n3]))
                    return r5;
              });
            });
            function u(e4, t4) {
              return t4.apply(void 0, e4);
            }
            function c(e4) {
              var t4 = e4.length - 1, r5 = Array.prototype.slice;
              if (0 === t4)
                return function() {
                  return e4.call(this, r5.call(arguments));
                };
              if (1 === t4)
                return function() {
                  return e4.call(this, arguments[0], r5.call(arguments, 1));
                };
              var n3 = Array(e4.length);
              return function() {
                for (var i3 = 0; i3 < t4; i3++)
                  n3[i3] = arguments[i3];
                return n3[t4] = r5.call(arguments, t4), e4.apply(this, n3);
              };
            }
            function f(e4) {
              return function(t4, r5) {
                return e4(r5, t4);
              };
            }
            function d(e4, t4) {
              return function(r5) {
                return e4(r5) && t4(r5);
              };
            }
            function l() {
            }
            function h() {
              return true;
            }
            function p(e4) {
              return function() {
                return e4;
              };
            }
          }, function(e3, t3, r4) {
            r4.d(t3, "d", function() {
              return i2;
            }), r4.d(t3, "g", function() {
              return a2;
            }), r4.d(t3, "l", function() {
              return s2;
            }), r4.d(t3, "c", function() {
              return u;
            }), r4.d(t3, "h", function() {
              return c;
            }), r4.d(t3, "i", function() {
              return f;
            }), r4.d(t3, "j", function() {
              return d;
            }), r4.d(t3, "f", function() {
              return l;
            }), r4.d(t3, "m", function() {
              return h;
            }), r4.d(t3, "a", function() {
              return p;
            }), r4.d(t3, "b", function() {
              return b;
            }), r4.d(t3, "k", function() {
              return y;
            }), r4.d(t3, "e", function() {
              return m;
            });
            var n2 = r4(0);
            function i2(e4, t4) {
              return [e4, t4];
            }
            var o2 = null, a2 = Object(n2.c)(0), s2 = Object(n2.c)(1);
            function u(e4) {
              return y(e4.reduce(Object(n2.e)(i2), o2));
            }
            var c = Object(n2.k)(u);
            function f(e4) {
              return l(function(e5, t4) {
                return e5.unshift(t4), e5;
              }, [], e4);
            }
            function d(e4, t4) {
              return t4 ? i2(e4(a2(t4)), d(e4, s2(t4))) : o2;
            }
            function l(e4, t4, r5) {
              return r5 ? e4(l(e4, t4, s2(r5)), a2(r5)) : t4;
            }
            function h(e4, t4, r5) {
              return function e5(r6, n3) {
                return r6 ? t4(a2(r6)) ? (n3(a2(r6)), s2(r6)) : i2(a2(r6), e5(s2(r6), n3)) : o2;
              }(e4, r5 || n2.i);
            }
            function p(e4, t4) {
              return !t4 || e4(a2(t4)) && p(e4, s2(t4));
            }
            function b(e4, t4) {
              e4 && (a2(e4).apply(null, t4), b(s2(e4), t4));
            }
            function y(e4) {
              return function e5(t4, r5) {
                return t4 ? e5(s2(t4), i2(a2(t4), r5)) : r5;
              }(e4, o2);
            }
            function m(e4, t4) {
              return t4 && (e4(a2(t4)) ? a2(t4) : m(e4, s2(t4)));
            }
          }, function(e3, t3, r4) {
            r4.d(t3, "c", function() {
              return o2;
            }), r4.d(t3, "e", function() {
              return a2;
            }), r4.d(t3, "d", function() {
              return s2;
            }), r4.d(t3, "a", function() {
              return u;
            }), r4.d(t3, "b", function() {
              return c;
            });
            var n2 = r4(1), i2 = r4(0);
            function o2(e4, t4) {
              return t4 && t4.constructor === e4;
            }
            var a2 = Object(i2.c)("length"), s2 = Object(i2.j)(o2, String);
            function u(e4) {
              return void 0 !== e4;
            }
            function c(e4, t4) {
              return t4 instanceof Object && Object(n2.a)(function(e5) {
                return e5 in t4;
              }, e4);
            }
          }, function(e3, t3, r4) {
            r4.d(t3, "f", function() {
              return i2;
            }), r4.d(t3, "d", function() {
              return o2;
            }), r4.d(t3, "g", function() {
              return a2;
            }), r4.d(t3, "e", function() {
              return s2;
            }), r4.d(t3, "b", function() {
              return u;
            }), r4.d(t3, "h", function() {
              return c;
            }), r4.d(t3, "i", function() {
              return f;
            }), r4.d(t3, "c", function() {
              return d;
            }), r4.d(t3, "m", function() {
              return l;
            }), r4.d(t3, "n", function() {
              return h;
            }), r4.d(t3, "a", function() {
              return p;
            }), r4.d(t3, "j", function() {
              return b;
            }), r4.d(t3, "l", function() {
              return y;
            }), r4.d(t3, "k", function() {
              return m;
            }), r4.d(t3, "o", function() {
              return v;
            });
            var n2 = 1, i2 = n2++, o2 = n2++, a2 = n2++, s2 = n2++, u = "fail", c = n2++, f = n2++, d = "start", l = "data", h = "end", p = n2++, b = n2++, y = n2++, m = n2++;
            function v(e4, t4, r5) {
              try {
                var n3 = JSON.parse(t4);
              } catch (e5) {
              }
              return { statusCode: e4, body: t4, jsonBody: n3, thrown: r5 };
            }
          }, function(e3, t3, r4) {
            r4.d(t3, "b", function() {
              return i2;
            }), r4.d(t3, "a", function() {
              return o2;
            }), r4.d(t3, "c", function() {
              return a2;
            });
            var n2 = r4(0);
            function i2(e4, t4) {
              return { key: e4, node: t4 };
            }
            var o2 = Object(n2.c)("key"), a2 = Object(n2.c)("node");
          }, function(e3, t3, r4) {
            r4.d(t3, "a", function() {
              return u;
            });
            var n2 = r4(1), i2 = r4(0), o2 = r4(2), a2 = r4(8), s2 = r4(9);
            function u(e4) {
              var t4 = Object(n2.h)("resume", "pause", "pipe"), r5 = Object(i2.j)(o2.b, t4);
              return e4 ? r5(e4) || Object(o2.d)(e4) ? Object(a2.a)(s2.a, e4) : Object(a2.a)(s2.a, e4.url, e4.method, e4.body, e4.headers, e4.withCredentials, e4.cached) : Object(s2.a)();
            }
            u.drop = function() {
              return u.drop;
            };
          }, function(e3, t3, r4) {
            r4.d(t3, "b", function() {
              return u;
            }), r4.d(t3, "a", function() {
              return s2;
            });
            var n2 = r4(3), i2 = r4(4), o2 = r4(2), a2 = r4(1), s2 = {};
            function u(e4) {
              var t4 = e4(n2.f).emit, r5 = e4(n2.d).emit, u2 = e4(n2.i).emit, c = e4(n2.h).emit;
              function f(e5, t5, r6) {
                Object(i2.c)(Object(a2.g)(e5))[t5] = r6;
              }
              function d(e5, r6, n3) {
                e5 && f(e5, r6, n3);
                var o3 = Object(a2.d)(Object(i2.b)(r6, n3), e5);
                return t4(o3), o3;
              }
              var l = {};
              return l[n2.l] = function(e5, t5) {
                if (!e5)
                  return u2(t5), d(e5, s2, t5);
                var r6 = function(e6, t6) {
                  var r7 = Object(i2.c)(Object(a2.g)(e6));
                  return Object(o2.c)(Array, r7) ? d(e6, Object(o2.e)(r7), t6) : e6;
                }(e5, t5), n3 = Object(a2.l)(r6), c2 = Object(i2.a)(Object(a2.g)(r6));
                return f(n3, c2, t5), Object(a2.d)(Object(i2.b)(c2, t5), n3);
              }, l[n2.k] = function(e5) {
                return r5(e5), Object(a2.l)(e5) || c(Object(i2.c)(Object(a2.g)(e5)));
              }, l[n2.j] = d, l;
            }
          }, function(e3, t3, r4) {
            Object.defineProperty(t3, "__esModule", { value: true });
            var n2 = r4(5);
            t3.default = n2.a;
          }, function(e3, t3, r4) {
            r4.d(t3, "a", function() {
              return i2;
            });
            var n2 = r4(2);
            function i2(e4, t4, r5, i3, o2, a2, s2) {
              return o2 = o2 ? JSON.parse(JSON.stringify(o2)) : {}, i3 ? (Object(n2.d)(i3) || (i3 = JSON.stringify(i3), o2["Content-Type"] = o2["Content-Type"] || "application/json"), o2["Content-Length"] = o2["Content-Length"] || i3.length) : i3 = null, e4(r5 || "GET", function(e5, t5) {
                return false === t5 && (-1 === e5.indexOf("?") ? e5 += "?" : e5 += "&", e5 += "_=" + (/* @__PURE__ */ new Date()).getTime()), e5;
              }(t4, s2), i3, o2, a2 || false);
            }
          }, function(e3, t3, r4) {
            r4.d(t3, "a", function() {
              return d;
            });
            var n2 = r4(10), i2 = r4(12), o2 = r4(6), a2 = r4(13), s2 = r4(14), u = r4(16), c = r4(17), f = r4(18);
            function d(e4, t4, r5, d2, l) {
              var h = Object(n2.a)();
              return t4 && Object(f.b)(h, Object(f.a)(), e4, t4, r5, d2, l), Object(c.a)(h), Object(i2.a)(h, Object(o2.b)(h)), Object(a2.a)(h, s2.a), Object(u.a)(h, t4);
            }
          }, function(e3, t3, r4) {
            r4.d(t3, "a", function() {
              return o2;
            });
            var n2 = r4(11), i2 = r4(0);
            function o2() {
              var e4 = {}, t4 = o3("newListener"), r5 = o3("removeListener");
              function o3(i3) {
                return e4[i3] = Object(n2.a)(i3, t4, r5), e4[i3];
              }
              function a2(t5) {
                return e4[t5] || o3(t5);
              }
              return ["emit", "on", "un"].forEach(function(e5) {
                a2[e5] = Object(i2.k)(function(t5, r6) {
                  Object(i2.b)(r6, a2(t5)[e5]);
                });
              }), a2;
            }
          }, function(e3, t3, r4) {
            r4.d(t3, "a", function() {
              return a2;
            });
            var n2 = r4(1), i2 = r4(2), o2 = r4(0);
            function a2(e4, t4, r5) {
              var a3, s2;
              function u(e5) {
                return function(t5) {
                  return t5.id === e5;
                };
              }
              return { on: function(r6, i3) {
                var o3 = { listener: r6, id: i3 || r6 };
                return t4 && t4.emit(e4, r6, o3.id), a3 = Object(n2.d)(o3, a3), s2 = Object(n2.d)(r6, s2), this;
              }, emit: function() {
                Object(n2.b)(s2, arguments);
              }, un: function(t5) {
                var i3;
                a3 = Object(n2.m)(a3, u(t5), function(e5) {
                  i3 = e5;
                }), i3 && (s2 = Object(n2.m)(s2, function(e5) {
                  return e5 === i3.listener;
                }), r5 && r5.emit(e4, i3.listener, i3.id));
              }, listeners: function() {
                return s2;
              }, hasListener: function(e5) {
                var t5 = e5 ? u(e5) : o2.a;
                return Object(i2.a)(Object(n2.e)(t5, a3));
              } };
            }
          }, function(e3, t3, r4) {
            r4.d(t3, "a", function() {
              return a2;
            });
            var n2 = r4(4), i2 = r4(3), o2 = r4(1);
            function a2(e4, t4) {
              var r5, a3 = {};
              function s2(e5) {
                return function(t5) {
                  r5 = e5(r5, t5);
                };
              }
              for (var u in t4)
                e4(u).on(s2(t4[u]), a3);
              e4(i2.g).on(function(e5) {
                var t5 = Object(o2.g)(r5), i3 = Object(n2.a)(t5), a4 = Object(o2.l)(r5);
                a4 && (Object(n2.c)(Object(o2.g)(a4))[i3] = e5);
              }), e4(i2.e).on(function() {
                var e5 = Object(o2.g)(r5), t5 = Object(n2.a)(e5), i3 = Object(o2.l)(r5);
                i3 && delete Object(n2.c)(Object(o2.g)(i3))[t5];
              }), e4(i2.a).on(function() {
                for (var r6 in t4)
                  e4(r6).un(a3);
              });
            }
          }, function(e3, t3, r4) {
            r4.d(t3, "a", function() {
              return a2;
            });
            var n2 = r4(3), i2 = r4(1), o2 = r4(4);
            function a2(e4, t4) {
              var r5 = { node: e4(n2.d), path: e4(n2.f) };
              e4("newListener").on(function(n3) {
                var a3 = /(node|path):(.*)/.exec(n3);
                if (a3) {
                  var s2 = r5[a3[1]];
                  s2.hasListener(n3) || function(t5, r6, n4) {
                    var a4 = e4(t5).emit;
                    r6.on(function(e5) {
                      var t6 = n4(e5);
                      false !== t6 && function(e6, t7, r7) {
                        var n5 = Object(i2.k)(r7);
                        e6(t7, Object(i2.i)(Object(i2.l)(Object(i2.j)(o2.a, n5))), Object(i2.i)(Object(i2.j)(o2.c, n5)));
                      }(a4, Object(o2.c)(t6), e5);
                    }, t5), e4("removeListener").on(function(n5) {
                      n5 === t5 && (e4(n5).listeners() || r6.un(t5));
                    });
                  }(n3, s2, t4(a3[2]));
                }
              });
            }
          }, function(e3, t3, r4) {
            r4.d(t3, "a", function() {
              return c;
            });
            var n2 = r4(0), i2 = r4(1), o2 = r4(4), a2 = r4(2), s2 = r4(6), u = r4(15), c = Object(u.a)(function(e4, t4, r5, u2, c2) {
              var f = 1, d = Object(n2.d)(o2.a, i2.g), l = Object(n2.d)(o2.c, i2.g);
              function h(e5, t5) {
                return t5[f] ? Object(n2.g)(e5, i2.g) : e5;
              }
              function p(e5) {
                return e5 === n2.a ? n2.a : Object(n2.g)(function(e6) {
                  return d(e6) !== s2.a;
                }, Object(n2.d)(e5, i2.l));
              }
              function b() {
                return function(e5) {
                  return d(e5) === s2.a;
                };
              }
              function y(e5, t5, r6, n3, o3) {
                var s3 = e5(r6);
                if (s3) {
                  var u3 = function(e6, t6, r7) {
                    return Object(i2.f)(function(e7, t7) {
                      return t7(e7, r7);
                    }, t6, e6);
                  }(t5, n3, s3);
                  return o3(r6.substr(Object(a2.e)(s3[0])), u3);
                }
              }
              function m(e5, t5) {
                return Object(n2.j)(y, e5, t5);
              }
              var v = Object(n2.h)(m(e4, Object(i2.h)(h, function(e5, t5) {
                var r6 = t5[3];
                if (!r6)
                  return e5;
                var o3 = Object(n2.j)(a2.b, Object(i2.c)(r6.split(/\W+/))), s3 = Object(n2.d)(o3, l);
                return Object(n2.g)(s3, e5);
              }, function(e5, t5) {
                var r6 = t5[2], i3 = r6 && "*" !== r6 ? function(e6) {
                  return String(d(e6)) === r6;
                } : n2.a;
                return Object(n2.g)(i3, e5);
              }, p)), m(t4, Object(i2.h)(function(e5) {
                if (e5 === n2.a)
                  return n2.a;
                var t5 = b(), r6 = e5, i3 = p(function(e6) {
                  return o3(e6);
                }), o3 = Object(n2.h)(t5, r6, i3);
                return o3;
              })), m(r5, Object(i2.h)()), m(u2, Object(i2.h)(h, b)), m(c2, Object(i2.h)(function(e5) {
                return function(t5) {
                  var r6 = e5(t5);
                  return true === r6 ? Object(i2.g)(t5) : r6;
                };
              })), function(e5) {
                throw Error('"' + e5 + '" could not be tokenised');
              });
              function g(e5, t5) {
                return t5;
              }
              function w(e5, t5) {
                return v(e5, t5, e5 ? w : g);
              }
              return function(e5) {
                try {
                  return w(e5, n2.a);
                } catch (t5) {
                  throw Error('Could not compile "' + e5 + '" because ' + t5.message);
                }
              };
            });
          }, function(e3, t3, r4) {
            r4.d(t3, "a", function() {
              return b;
            });
            var n2, i2, o2, a2, s2, u, c, f, d, l, h, p = r4(0), b = (n2 = Object(p.k)(function(e4) {
              return e4.unshift(/^/), (t4 = RegExp(e4.map(Object(p.c)("source")).join(""))).exec.bind(t4);
              var t4;
            }), a2 = n2(i2 = /(\$?)/, /([\w-_]+|\*)/, o2 = /(?:{([\w ]*?)})?/), s2 = n2(i2, /\["([^"]+)"\]/, o2), u = n2(i2, /\[(\d+|\*)\]/, o2), c = n2(i2, /()/, /{([\w ]*?)}/), f = n2(/\.\./), d = n2(/\./), l = n2(i2, /!/), h = n2(/$/), function(e4) {
              return e4(Object(p.h)(a2, s2, u, c), f, d, l, h);
            });
          }, function(e3, t3, r4) {
            r4.d(t3, "a", function() {
              return s2;
            });
            var n2 = r4(3), i2 = r4(0), o2 = r4(2), a2 = r4(5);
            function s2(e4, t4) {
              var r5, s3 = /^(node|path):./, u = e4(n2.h), c = e4(n2.e).emit, f = e4(n2.g).emit, d = Object(i2.k)(function(t5, n3) {
                if (r5[t5])
                  Object(i2.b)(n3, r5[t5]);
                else {
                  var o3 = e4(t5), a3 = n3[0];
                  s3.test(t5) ? l(o3, p(a3)) : o3.on(a3);
                }
                return r5;
              });
              function l(e5, t5, n3) {
                n3 = n3 || t5;
                var o3 = h(t5);
                return e5.on(function() {
                  var t6 = false;
                  r5.forget = function() {
                    t6 = true;
                  }, Object(i2.b)(arguments, o3), delete r5.forget, t6 && e5.un(n3);
                }, n3), r5;
              }
              function h(e5) {
                return function() {
                  try {
                    return e5.apply(r5, arguments);
                  } catch (e6) {
                    setTimeout(function() {
                      throw new Error(e6.message);
                    });
                  }
                };
              }
              function p(e5) {
                return function() {
                  var t5 = e5.apply(this, arguments);
                  Object(o2.a)(t5) && (t5 === a2.a.drop ? c() : f(t5));
                };
              }
              function b(t5, r6, n3) {
                var i3;
                i3 = "node" === t5 ? p(n3) : n3, l(function(t6, r7) {
                  return e4(t6 + ":" + r7);
                }(t5, r6), i3, n3);
              }
              function y(e5, t5, n3) {
                return Object(o2.d)(t5) ? b(e5, t5, n3) : function(e6, t6) {
                  for (var r6 in t6)
                    b(e6, r6, t6[r6]);
                }(e5, t5), r5;
              }
              return e4(n2.i).on(function(e5) {
                r5.root = Object(i2.f)(e5);
              }), e4(n2.c).on(function(e5, t5) {
                r5.header = function(e6) {
                  return e6 ? t5[e6] : t5;
                };
              }), r5 = { on: d, addListener: d, removeListener: function(t5, n3, i3) {
                if ("done" === t5)
                  u.un(n3);
                else if ("node" === t5 || "path" === t5)
                  e4.un(t5 + ":" + n3, i3);
                else {
                  var o3 = n3;
                  e4(t5).un(o3);
                }
                return r5;
              }, emit: e4.emit, node: Object(i2.j)(y, "node"), path: Object(i2.j)(y, "path"), done: Object(i2.j)(l, u), start: Object(i2.j)(function(t5, n3) {
                return e4(t5).on(h(n3), n3), r5;
              }, n2.c), fail: e4(n2.b).on, abort: e4(n2.a).emit, header: i2.i, root: i2.i, source: t4 };
            }
          }, function(e3, t3, r4) {
            r4.d(t3, "a", function() {
              return i2;
            });
            var n2 = r4(3);
            function i2(e4) {
              var t4, r5, i3, o2, a2 = e4(n2.j).emit, s2 = e4(n2.l).emit, u = e4(n2.k).emit, c = e4(n2.b).emit, f = 65536, d = /[\\"\n]/g, l = 0, h = l++, p = l++, b = l++, y = l++, m = l++, v = l++, g = l++, w = l++, A = l++, k = l++, _ = l++, S = l++, E = l++, x = l++, P = l++, O = l++, B = l++, T = l++, C = l++, I = l++, M = f, U = "", R = false, j = false, N = h, F = [], L = null, D = 0, H = 0, q = 0, z = 0, G = 1;
              function K(e5) {
                void 0 !== o2 && (s2(o2), u(), o2 = void 0), t4 = Error(e5 + "\nLn: " + G + "\nCol: " + z + "\nChr: " + r5), c(Object(n2.o)(void 0, void 0, t4));
              }
              function V(e5) {
                return "\r" === e5 || "\n" === e5 || " " === e5 || "	" === e5;
              }
              e4(n2.m).on(function(e5) {
                if (!t4) {
                  if (j)
                    return K("Cannot write after close");
                  var n3, c2 = 0;
                  for (r5 = e5[0]; r5 && (c2 > 0 && (i3 = r5), r5 = e5[c2++]); )
                    switch (q++, "\n" === r5 ? (G++, z = 0) : z++, N) {
                      case h:
                        if ("{" === r5)
                          N = b;
                        else if ("[" === r5)
                          N = m;
                        else if (!V(r5))
                          return K("Non-whitespace before {[.");
                        continue;
                      case w:
                      case b:
                        if (V(r5))
                          continue;
                        if (N === w)
                          F.push(A);
                        else {
                          if ("}" === r5) {
                            s2({}), u(), N = F.pop() || p;
                            continue;
                          }
                          F.push(y);
                        }
                        if ('"' !== r5)
                          return K('Malformed object key should start with " ');
                        N = g;
                        continue;
                      case A:
                      case y:
                        if (V(r5))
                          continue;
                        if (":" === r5)
                          N === y ? (F.push(y), void 0 !== o2 && (s2({}), a2(o2), o2 = void 0), H++) : void 0 !== o2 && (a2(o2), o2 = void 0), N = p;
                        else if ("}" === r5)
                          void 0 !== o2 && (s2(o2), u(), o2 = void 0), u(), H--, N = F.pop() || p;
                        else {
                          if ("," !== r5)
                            return K("Bad object");
                          N === y && F.push(y), void 0 !== o2 && (s2(o2), u(), o2 = void 0), N = w;
                        }
                        continue;
                      case m:
                      case p:
                        if (V(r5))
                          continue;
                        if (N === m) {
                          if (s2([]), H++, N = p, "]" === r5) {
                            u(), H--, N = F.pop() || p;
                            continue;
                          }
                          F.push(v);
                        }
                        if ('"' === r5)
                          N = g;
                        else if ("{" === r5)
                          N = b;
                        else if ("[" === r5)
                          N = m;
                        else if ("t" === r5)
                          N = k;
                        else if ("f" === r5)
                          N = E;
                        else if ("n" === r5)
                          N = B;
                        else if ("-" === r5)
                          U += r5;
                        else if ("0" === r5)
                          U += r5, N = 20;
                        else {
                          if (-1 === "123456789".indexOf(r5))
                            return K("Bad value");
                          U += r5, N = 20;
                        }
                        continue;
                      case v:
                        if ("," === r5)
                          F.push(v), void 0 !== o2 && (s2(o2), u(), o2 = void 0), N = p;
                        else {
                          if ("]" !== r5) {
                            if (V(r5))
                              continue;
                            return K("Bad array");
                          }
                          void 0 !== o2 && (s2(o2), u(), o2 = void 0), u(), H--, N = F.pop() || p;
                        }
                        continue;
                      case g:
                        void 0 === o2 && (o2 = "");
                        var l2 = c2 - 1;
                        e:
                          for (; ; ) {
                            for (; D > 0; )
                              if (L += r5, r5 = e5.charAt(c2++), 4 === D ? (o2 += String.fromCharCode(parseInt(L, 16)), D = 0, l2 = c2 - 1) : D++, !r5)
                                break e;
                            if ('"' === r5 && !R) {
                              N = F.pop() || p, o2 += e5.substring(l2, c2 - 1);
                              break;
                            }
                            if (!("\\" !== r5 || R || (R = true, o2 += e5.substring(l2, c2 - 1), r5 = e5.charAt(c2++))))
                              break;
                            if (R) {
                              if (R = false, "n" === r5 ? o2 += "\n" : "r" === r5 ? o2 += "\r" : "t" === r5 ? o2 += "	" : "f" === r5 ? o2 += "\f" : "b" === r5 ? o2 += "\b" : "u" === r5 ? (D = 1, L = "") : o2 += r5, r5 = e5.charAt(c2++), l2 = c2 - 1, r5)
                                continue;
                              break;
                            }
                            d.lastIndex = c2;
                            var J = d.exec(e5);
                            if (!J) {
                              c2 = e5.length + 1, o2 += e5.substring(l2, c2 - 1);
                              break;
                            }
                            if (c2 = J.index + 1, !(r5 = e5.charAt(J.index))) {
                              o2 += e5.substring(l2, c2 - 1);
                              break;
                            }
                          }
                        continue;
                      case k:
                        if (!r5)
                          continue;
                        if ("r" !== r5)
                          return K("Invalid true started with t" + r5);
                        N = _;
                        continue;
                      case _:
                        if (!r5)
                          continue;
                        if ("u" !== r5)
                          return K("Invalid true started with tr" + r5);
                        N = S;
                        continue;
                      case S:
                        if (!r5)
                          continue;
                        if ("e" !== r5)
                          return K("Invalid true started with tru" + r5);
                        s2(true), u(), N = F.pop() || p;
                        continue;
                      case E:
                        if (!r5)
                          continue;
                        if ("a" !== r5)
                          return K("Invalid false started with f" + r5);
                        N = x;
                        continue;
                      case x:
                        if (!r5)
                          continue;
                        if ("l" !== r5)
                          return K("Invalid false started with fa" + r5);
                        N = P;
                        continue;
                      case P:
                        if (!r5)
                          continue;
                        if ("s" !== r5)
                          return K("Invalid false started with fal" + r5);
                        N = O;
                        continue;
                      case O:
                        if (!r5)
                          continue;
                        if ("e" !== r5)
                          return K("Invalid false started with fals" + r5);
                        s2(false), u(), N = F.pop() || p;
                        continue;
                      case B:
                        if (!r5)
                          continue;
                        if ("u" !== r5)
                          return K("Invalid null started with n" + r5);
                        N = T;
                        continue;
                      case T:
                        if (!r5)
                          continue;
                        if ("l" !== r5)
                          return K("Invalid null started with nu" + r5);
                        N = C;
                        continue;
                      case C:
                        if (!r5)
                          continue;
                        if ("l" !== r5)
                          return K("Invalid null started with nul" + r5);
                        s2(null), u(), N = F.pop() || p;
                        continue;
                      case I:
                        if ("." !== r5)
                          return K("Leading zero not followed by .");
                        U += r5, N = 20;
                        continue;
                      case 20:
                        if (-1 !== "0123456789".indexOf(r5))
                          U += r5;
                        else if ("." === r5) {
                          if (-1 !== U.indexOf("."))
                            return K("Invalid number has two dots");
                          U += r5;
                        } else if ("e" === r5 || "E" === r5) {
                          if (-1 !== U.indexOf("e") || -1 !== U.indexOf("E"))
                            return K("Invalid number has two exponential");
                          U += r5;
                        } else if ("+" === r5 || "-" === r5) {
                          if ("e" !== i3 && "E" !== i3)
                            return K("Invalid symbol in number");
                          U += r5;
                        } else
                          U && (s2(parseFloat(U)), u(), U = ""), c2--, N = F.pop() || p;
                        continue;
                      default:
                        return K("Unknown state: " + N);
                    }
                  q >= M && (n3 = 0, void 0 !== o2 && o2.length > f && (K("Max buffer length exceeded: textNode"), n3 = Math.max(n3, o2.length)), U.length > f && (K("Max buffer length exceeded: numberNode"), n3 = Math.max(n3, U.length)), M = f - n3 + q);
                }
              }), e4(n2.n).on(function() {
                if (N === h)
                  return s2({}), u(), void (j = true);
                N === p && 0 === H || K("Unexpected end"), void 0 !== o2 && (s2(o2), u(), o2 = void 0), j = true;
              });
            }
          }, function(e3, t3, r4) {
            r4.d(t3, "a", function() {
              return u;
            }), r4.d(t3, "b", function() {
              return c;
            });
            var n2 = r4(19), i2 = r4(3), o2 = r4(2), a2 = r4(20), s2 = r4(0);
            function u() {
              return new XMLHttpRequest();
            }
            function c(e4, t4, r5, u2, c2, f, d) {
              var l = e4(i2.m).emit, h = e4(i2.b).emit, p = 0, b = true;
              function y() {
                if ("2" === String(t4.status)[0]) {
                  var e5 = t4.responseText, r6 = (" " + e5.substr(p)).substr(1);
                  r6 && l(r6), p = Object(o2.e)(e5);
                }
              }
              function m(t5) {
                try {
                  b && e4(i2.c).emit(t5.status, Object(a2.a)(t5.getAllResponseHeaders())), b = false;
                } catch (e5) {
                }
              }
              e4(i2.a).on(function() {
                t4.onreadystatechange = null, t4.abort();
              }), "onprogress" in t4 && (t4.onprogress = y), t4.onreadystatechange = function() {
                switch (t4.readyState) {
                  case 2:
                  case 3:
                    return m(t4);
                  case 4:
                    m(t4), "2" === String(t4.status)[0] ? (y(), e4(i2.n).emit()) : h(Object(i2.o)(t4.status, t4.responseText));
                }
              };
              try {
                for (var v in t4.open(r5, u2, true), f)
                  t4.setRequestHeader(v, f[v]);
                Object(n2.a)(window.location, Object(n2.b)(u2)) || t4.setRequestHeader("X-Requested-With", "XMLHttpRequest"), t4.withCredentials = d, t4.send(c2);
              } catch (e5) {
                window.setTimeout(Object(s2.j)(h, Object(i2.o)(void 0, void 0, e5)), 0);
              }
            }
          }, function(e3, t3, r4) {
            function n2(e4, t4) {
              function r5(t5) {
                return String(t5.port || { "http:": 80, "https:": 443 }[t5.protocol || e4.protocol]);
              }
              return !!(t4.protocol && t4.protocol !== e4.protocol || t4.host && t4.host !== e4.host || t4.host && r5(t4) !== r5(e4));
            }
            function i2(e4) {
              var t4 = /(\w+:)?(?:\/\/)([\w.-]+)?(?::(\d+))?\/?/.exec(e4) || [];
              return { protocol: t4[1] || "", host: t4[2] || "", port: t4[3] || "" };
            }
            r4.d(t3, "a", function() {
              return n2;
            }), r4.d(t3, "b", function() {
              return i2;
            });
          }, function(e3, t3, r4) {
            function n2(e4) {
              var t4 = {};
              return e4 && e4.split("\r\n").forEach(function(e5) {
                var r5 = e5.indexOf(": ");
                t4[e5.substring(0, r5)] = e5.substring(r5 + 2);
              }), t4;
            }
            r4.d(t3, "a", function() {
              return n2;
            });
          }]).default;
        }, "object" === (0, s.default)(t2) && "object" === (0, s.default)(e2) ? e2.exports = a() : (i = [], void 0 === (o = "function" == typeof (n = a) ? n.apply(t2, i) : n) || (e2.exports = o));
      }, 1823: (e2, t2, r3) => {
        "use strict";
        var n = r3(8357);
        t2.certificate = r3(1320);
        var i = n.define("RSAPrivateKey", function() {
          this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
        });
        t2.RSAPrivateKey = i;
        var o = n.define("RSAPublicKey", function() {
          this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
        });
        t2.RSAPublicKey = o;
        var a = n.define("SubjectPublicKeyInfo", function() {
          this.seq().obj(this.key("algorithm").use(s), this.key("subjectPublicKey").bitstr());
        });
        t2.PublicKey = a;
        var s = n.define("AlgorithmIdentifier", function() {
          this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
        }), u = n.define("PrivateKeyInfo", function() {
          this.seq().obj(this.key("version").int(), this.key("algorithm").use(s), this.key("subjectPrivateKey").octstr());
        });
        t2.PrivateKey = u;
        var c = n.define("EncryptedPrivateKeyInfo", function() {
          this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
        });
        t2.EncryptedPrivateKey = c;
        var f = n.define("DSAPrivateKey", function() {
          this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
        });
        t2.DSAPrivateKey = f, t2.DSAparam = n.define("DSAparam", function() {
          this.int();
        });
        var d = n.define("ECPrivateKey", function() {
          this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(l), this.key("publicKey").optional().explicit(1).bitstr());
        });
        t2.ECPrivateKey = d;
        var l = n.define("ECParameters", function() {
          this.choice({ namedCurve: this.objid() });
        });
        t2.signature = n.define("signature", function() {
          this.seq().obj(this.key("r").int(), this.key("s").int());
        });
      }, 1320: (e2, t2, r3) => {
        "use strict";
        var n = r3(8357), i = n.define("Time", function() {
          this.choice({ utcTime: this.utctime(), generalTime: this.gentime() });
        }), o = n.define("AttributeTypeValue", function() {
          this.seq().obj(this.key("type").objid(), this.key("value").any());
        }), a = n.define("AlgorithmIdentifier", function() {
          this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
        }), s = n.define("SubjectPublicKeyInfo", function() {
          this.seq().obj(this.key("algorithm").use(a), this.key("subjectPublicKey").bitstr());
        }), u = n.define("RelativeDistinguishedName", function() {
          this.setof(o);
        }), c = n.define("RDNSequence", function() {
          this.seqof(u);
        }), f = n.define("Name", function() {
          this.choice({ rdnSequence: this.use(c) });
        }), d = n.define("Validity", function() {
          this.seq().obj(this.key("notBefore").use(i), this.key("notAfter").use(i));
        }), l = n.define("Extension", function() {
          this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(false), this.key("extnValue").octstr());
        }), h = n.define("TBSCertificate", function() {
          this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use(a), this.key("issuer").use(f), this.key("validity").use(d), this.key("subject").use(f), this.key("subjectPublicKeyInfo").use(s), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(l).optional());
        }), p = n.define("X509Certificate", function() {
          this.seq().obj(this.key("tbsCertificate").use(h), this.key("signatureAlgorithm").use(a), this.key("signatureValue").bitstr());
        });
        e2.exports = p;
      }, 4988: (e2, t2, r3) => {
        "use strict";
        var n = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m, i = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m, o = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m, a = r3(7085), s = r3(8073), u = r3(8850).Buffer;
        e2.exports = function(e3, t3) {
          var r4, c = e3.toString(), f = c.match(n);
          if (f) {
            var d = "aes" + f[1], l = u.from(f[2], "hex"), h = u.from(f[3].replace(/[\r\n]/g, ""), "base64"), p = a(t3, l.slice(0, 8), parseInt(f[1], 10)).key, b = [], y = s.createDecipheriv(d, p, l);
            b.push(y.update(h)), b.push(y.final()), r4 = u.concat(b);
          } else {
            var m = c.match(o);
            r4 = u.from(m[2].replace(/[\r\n]/g, ""), "base64");
          }
          return { tag: c.match(i)[1], data: r4 };
        };
      }, 7552: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(1823), o = r3(2562), a = r3(4988), s = r3(8073), u = r3(4192), c = r3(8850).Buffer;
        function f(e3) {
          var t3;
          "object" !== (0, n.default)(e3) || c.isBuffer(e3) || (t3 = e3.passphrase, e3 = e3.key), "string" == typeof e3 && (e3 = c.from(e3));
          var r4, f2, d = a(e3, t3), l = d.tag, h = d.data;
          switch (l) {
            case "CERTIFICATE":
              f2 = i.certificate.decode(h, "der").tbsCertificate.subjectPublicKeyInfo;
            case "PUBLIC KEY":
              switch (f2 || (f2 = i.PublicKey.decode(h, "der")), r4 = f2.algorithm.algorithm.join(".")) {
                case "1.2.840.113549.1.1.1":
                  return i.RSAPublicKey.decode(f2.subjectPublicKey.data, "der");
                case "1.2.840.10045.2.1":
                  return f2.subjectPrivateKey = f2.subjectPublicKey, { type: "ec", data: f2 };
                case "1.2.840.10040.4.1":
                  return f2.algorithm.params.pub_key = i.DSAparam.decode(f2.subjectPublicKey.data, "der"), { type: "dsa", data: f2.algorithm.params };
                default:
                  throw new Error("unknown key id " + r4);
              }
            case "ENCRYPTED PRIVATE KEY":
              h = function(e4, t4) {
                var r5 = e4.algorithm.decrypt.kde.kdeparams.salt, n2 = parseInt(e4.algorithm.decrypt.kde.kdeparams.iters.toString(), 10), i2 = o[e4.algorithm.decrypt.cipher.algo.join(".")], a2 = e4.algorithm.decrypt.cipher.iv, f3 = e4.subjectPrivateKey, d2 = parseInt(i2.split("-")[1], 10) / 8, l2 = u.pbkdf2Sync(t4, r5, n2, d2, "sha1"), h2 = s.createDecipheriv(i2, l2, a2), p = [];
                return p.push(h2.update(f3)), p.push(h2.final()), c.concat(p);
              }(h = i.EncryptedPrivateKey.decode(h, "der"), t3);
            case "PRIVATE KEY":
              switch (r4 = (f2 = i.PrivateKey.decode(h, "der")).algorithm.algorithm.join(".")) {
                case "1.2.840.113549.1.1.1":
                  return i.RSAPrivateKey.decode(f2.subjectPrivateKey, "der");
                case "1.2.840.10045.2.1":
                  return { curve: f2.algorithm.curve, privateKey: i.ECPrivateKey.decode(f2.subjectPrivateKey, "der").privateKey };
                case "1.2.840.10040.4.1":
                  return f2.algorithm.params.priv_key = i.DSAparam.decode(f2.subjectPrivateKey, "der"), { type: "dsa", params: f2.algorithm.params };
                default:
                  throw new Error("unknown key id " + r4);
              }
            case "RSA PUBLIC KEY":
              return i.RSAPublicKey.decode(h, "der");
            case "RSA PRIVATE KEY":
              return i.RSAPrivateKey.decode(h, "der");
            case "DSA PRIVATE KEY":
              return { type: "dsa", params: i.DSAPrivateKey.decode(h, "der") };
            case "EC PRIVATE KEY":
              return { curve: (h = i.ECPrivateKey.decode(h, "der")).parameters.value, privateKey: h.privateKey };
            default:
              throw new Error("unknown key type " + l);
          }
        }
        e2.exports = f, f.signature = i.signature;
      }, 8209: (e2) => {
        "use strict";
        var t2 = function(e3) {
          return e3.replace(/^\s+|\s+$/g, "");
        };
        e2.exports = function(e3) {
          if (!e3)
            return {};
          for (var r3, n = {}, i = t2(e3).split("\n"), o = 0; o < i.length; o++) {
            var a = i[o], s = a.indexOf(":"), u = t2(a.slice(0, s)).toLowerCase(), c = t2(a.slice(s + 1));
            void 0 === n[u] ? n[u] = c : (r3 = n[u], "[object Array]" === Object.prototype.toString.call(r3) ? n[u].push(c) : n[u] = [n[u], c]);
          }
          return n;
        };
      }, 4192: (e2, t2, r3) => {
        "use strict";
        t2.pbkdf2 = r3(1882), t2.pbkdf2Sync = r3(1658);
      }, 1882: (e2, t2, r3) => {
        "use strict";
        var n, i, o = r3(8850).Buffer, a = r3(3127), s = r3(7401), u = r3(1658), c = r3(8398), f = r3.g.crypto && r3.g.crypto.subtle, d = { sha: "SHA-1", "sha-1": "SHA-1", sha1: "SHA-1", sha256: "SHA-256", "sha-256": "SHA-256", sha384: "SHA-384", "sha-384": "SHA-384", "sha-512": "SHA-512", sha512: "SHA-512" }, l = [];
        function h() {
          return i || (i = r3.g.process && r3.g.process.nextTick ? r3.g.process.nextTick : r3.g.queueMicrotask ? r3.g.queueMicrotask : r3.g.setImmediate ? r3.g.setImmediate : r3.g.setTimeout);
        }
        function p(e3, t3, r4, n2, i2) {
          return f.importKey("raw", e3, { name: "PBKDF2" }, false, ["deriveBits"]).then(function(e4) {
            return f.deriveBits({ name: "PBKDF2", salt: t3, iterations: r4, hash: { name: i2 } }, e4, n2 << 3);
          }).then(function(e4) {
            return o.from(e4);
          });
        }
        e2.exports = function(e3, t3, i2, b, y, m) {
          "function" == typeof y && (m = y, y = void 0);
          var v = d[(y = y || "sha1").toLowerCase()];
          if (v && "function" == typeof r3.g.Promise) {
            if (a(i2, b), e3 = c(e3, s, "Password"), t3 = c(t3, s, "Salt"), "function" != typeof m)
              throw new Error("No callback provided to pbkdf2");
            !function(e4, t4) {
              e4.then(function(e5) {
                h()(function() {
                  t4(null, e5);
                });
              }, function(e5) {
                h()(function() {
                  t4(e5);
                });
              });
            }(function(e4) {
              if (r3.g.process && !r3.g.process.browser)
                return Promise.resolve(false);
              if (!f || !f.importKey || !f.deriveBits)
                return Promise.resolve(false);
              if (void 0 !== l[e4])
                return l[e4];
              var t4 = p(n = n || o.alloc(8), n, 10, 128, e4).then(function() {
                return true;
              }).catch(function() {
                return false;
              });
              return l[e4] = t4, t4;
            }(v).then(function(r4) {
              return r4 ? p(e3, t3, i2, b, v) : u(e3, t3, i2, b, y);
            }), m);
          } else
            h()(function() {
              var r4;
              try {
                r4 = u(e3, t3, i2, b, y);
              } catch (e4) {
                return m(e4);
              }
              m(null, r4);
            });
        };
      }, 7401: (e2, t2, r3) => {
        "use strict";
        var n, i = r3(9142);
        n = r3.g.process && r3.g.process.browser ? "utf-8" : r3.g.process && r3.g.process.version ? parseInt(i.version.split(".")[0].slice(1), 10) >= 6 ? "utf-8" : "binary" : "utf-8", e2.exports = n;
      }, 3127: (e2) => {
        "use strict";
        var t2 = Math.pow(2, 30) - 1;
        e2.exports = function(e3, r3) {
          if ("number" != typeof e3)
            throw new TypeError("Iterations not a number");
          if (e3 < 0)
            throw new TypeError("Bad iterations");
          if ("number" != typeof r3)
            throw new TypeError("Key length not a number");
          if (r3 < 0 || r3 > t2 || r3 != r3)
            throw new TypeError("Bad key length");
        };
      }, 1658: (e2, t2, r3) => {
        "use strict";
        var n = r3(5349), i = r3(6707), o = r3(1708), a = r3(8850).Buffer, s = r3(3127), u = r3(7401), c = r3(8398), f = a.alloc(128), d = { md5: 16, sha1: 20, sha224: 28, sha256: 32, sha384: 48, sha512: 64, rmd160: 20, ripemd160: 20 };
        function l(e3, t3, r4) {
          var s2 = function(e4) {
            return "rmd160" === e4 || "ripemd160" === e4 ? function(e5) {
              return new i().update(e5).digest();
            } : "md5" === e4 ? n : function(t4) {
              return o(e4).update(t4).digest();
            };
          }(e3), u2 = "sha512" === e3 || "sha384" === e3 ? 128 : 64;
          t3.length > u2 ? t3 = s2(t3) : t3.length < u2 && (t3 = a.concat([t3, f], u2));
          for (var c2 = a.allocUnsafe(u2 + d[e3]), l2 = a.allocUnsafe(u2 + d[e3]), h = 0; h < u2; h++)
            c2[h] = 54 ^ t3[h], l2[h] = 92 ^ t3[h];
          var p = a.allocUnsafe(u2 + r4 + 4);
          c2.copy(p, 0, 0, u2), this.ipad1 = p, this.ipad2 = c2, this.opad = l2, this.alg = e3, this.blocksize = u2, this.hash = s2, this.size = d[e3];
        }
        l.prototype.run = function(e3, t3) {
          return e3.copy(t3, this.blocksize), this.hash(t3).copy(this.opad, this.blocksize), this.hash(this.opad);
        }, e2.exports = function(e3, t3, r4, n2, i2) {
          s(r4, n2);
          var o2 = new l(i2 = i2 || "sha1", e3 = c(e3, u, "Password"), (t3 = c(t3, u, "Salt")).length), f2 = a.allocUnsafe(n2), h = a.allocUnsafe(t3.length + 4);
          t3.copy(h, 0, 0, t3.length);
          for (var p = 0, b = d[i2], y = Math.ceil(n2 / b), m = 1; m <= y; m++) {
            h.writeUInt32BE(m, t3.length);
            for (var v = o2.run(h, o2.ipad1), g = v, w = 1; w < r4; w++) {
              g = o2.run(g, o2.ipad2);
              for (var A = 0; A < b; A++)
                v[A] ^= g[A];
            }
            v.copy(f2, p), p += b;
          }
          return f2;
        };
      }, 8398: (e2, t2, r3) => {
        "use strict";
        var n = r3(8850).Buffer;
        e2.exports = function(e3, t3, r4) {
          if (n.isBuffer(e3))
            return e3;
          if ("string" == typeof e3)
            return n.from(e3, t3);
          if (ArrayBuffer.isView(e3))
            return n.from(e3.buffer);
          throw new TypeError(r4 + " must be a string, a Buffer, a typed array or a DataView");
        };
      }, 9142: (e2) => {
        "use strict";
        var t2, r3, n = e2.exports = {};
        function i() {
          throw new Error("setTimeout has not been defined");
        }
        function o() {
          throw new Error("clearTimeout has not been defined");
        }
        function a(e3) {
          if (t2 === setTimeout)
            return setTimeout(e3, 0);
          if ((t2 === i || !t2) && setTimeout)
            return t2 = setTimeout, setTimeout(e3, 0);
          try {
            return t2(e3, 0);
          } catch (r4) {
            try {
              return t2.call(null, e3, 0);
            } catch (r5) {
              return t2.call(this, e3, 0);
            }
          }
        }
        !function() {
          try {
            t2 = "function" == typeof setTimeout ? setTimeout : i;
          } catch (e3) {
            t2 = i;
          }
          try {
            r3 = "function" == typeof clearTimeout ? clearTimeout : o;
          } catch (e3) {
            r3 = o;
          }
        }();
        var s, u = [], c = false, f = -1;
        function d() {
          c && s && (c = false, s.length ? u = s.concat(u) : f = -1, u.length && l());
        }
        function l() {
          if (!c) {
            var e3 = a(d);
            c = true;
            for (var t3 = u.length; t3; ) {
              for (s = u, u = []; ++f < t3; )
                s && s[f].run();
              f = -1, t3 = u.length;
            }
            s = null, c = false, function(e4) {
              if (r3 === clearTimeout)
                return clearTimeout(e4);
              if ((r3 === o || !r3) && clearTimeout)
                return r3 = clearTimeout, clearTimeout(e4);
              try {
                return r3(e4);
              } catch (t4) {
                try {
                  return r3.call(null, e4);
                } catch (t5) {
                  return r3.call(this, e4);
                }
              }
            }(e3);
          }
        }
        function h(e3, t3) {
          this.fun = e3, this.array = t3;
        }
        function p() {
        }
        n.nextTick = function(e3) {
          var t3 = new Array(arguments.length - 1);
          if (arguments.length > 1)
            for (var r4 = 1; r4 < arguments.length; r4++)
              t3[r4 - 1] = arguments[r4];
          u.push(new h(e3, t3)), 1 !== u.length || c || a(l);
        }, h.prototype.run = function() {
          this.fun.apply(null, this.array);
        }, n.title = "browser", n.browser = true, n.env = {}, n.argv = [], n.version = "", n.versions = {}, n.on = p, n.addListener = p, n.once = p, n.off = p, n.removeListener = p, n.removeAllListeners = p, n.emit = p, n.prependListener = p, n.prependOnceListener = p, n.listeners = function(e3) {
          return [];
        }, n.binding = function(e3) {
          throw new Error("process.binding is not supported");
        }, n.cwd = function() {
          return "/";
        }, n.chdir = function(e3) {
          throw new Error("process.chdir is not supported");
        }, n.umask = function() {
          return 0;
        };
      }, 6991: (e2, t2, r3) => {
        "use strict";
        t2.publicEncrypt = r3(2466), t2.privateDecrypt = r3(3144), t2.privateEncrypt = function(e3, r4) {
          return t2.publicEncrypt(e3, r4, true);
        }, t2.publicDecrypt = function(e3, r4) {
          return t2.privateDecrypt(e3, r4, true);
        };
      }, 6873: (e2, t2, r3) => {
        "use strict";
        var n = r3(5866), i = r3(8850).Buffer;
        function o(e3) {
          var t3 = i.allocUnsafe(4);
          return t3.writeUInt32BE(e3, 0), t3;
        }
        e2.exports = function(e3, t3) {
          for (var r4, a = i.alloc(0), s = 0; a.length < t3; )
            r4 = o(s++), a = i.concat([a, n("sha1").update(e3).update(r4).digest()]);
          return a.slice(0, t3);
        };
      }, 3144: (e2, t2, r3) => {
        "use strict";
        var n = r3(7552), i = r3(6873), o = r3(817), a = r3(1734), s = r3(9782), u = r3(5866), c = r3(2561), f = r3(8850).Buffer;
        e2.exports = function(e3, t3, r4) {
          var d;
          d = e3.padding ? e3.padding : r4 ? 1 : 4;
          var l, h = n(e3), p = h.modulus.byteLength();
          if (t3.length > p || new a(t3).cmp(h.modulus) >= 0)
            throw new Error("decryption error");
          l = r4 ? c(new a(t3), h) : s(t3, h);
          var b = f.alloc(p - l.length);
          if (l = f.concat([b, l], p), 4 === d)
            return function(e4, t4) {
              var r5 = e4.modulus.byteLength(), n2 = u("sha1").update(f.alloc(0)).digest(), a2 = n2.length;
              if (0 !== t4[0])
                throw new Error("decryption error");
              var s2 = t4.slice(1, a2 + 1), c2 = t4.slice(a2 + 1), d2 = o(s2, i(c2, a2)), l2 = o(c2, i(d2, r5 - a2 - 1));
              if (function(e5, t5) {
                e5 = f.from(e5), t5 = f.from(t5);
                var r6 = 0, n3 = e5.length;
                e5.length !== t5.length && (r6++, n3 = Math.min(e5.length, t5.length));
                for (var i2 = -1; ++i2 < n3; )
                  r6 += e5[i2] ^ t5[i2];
                return r6;
              }(n2, l2.slice(0, a2)))
                throw new Error("decryption error");
              for (var h2 = a2; 0 === l2[h2]; )
                h2++;
              if (1 !== l2[h2++])
                throw new Error("decryption error");
              return l2.slice(h2);
            }(h, l);
          if (1 === d)
            return function(e4, t4, r5) {
              for (var n2 = t4.slice(0, 2), i2 = 2, o2 = 0; 0 !== t4[i2++]; )
                if (i2 >= t4.length) {
                  o2++;
                  break;
                }
              var a2 = t4.slice(2, i2 - 1);
              if (("0002" !== n2.toString("hex") && !r5 || "0001" !== n2.toString("hex") && r5) && o2++, a2.length < 8 && o2++, o2)
                throw new Error("decryption error");
              return t4.slice(i2);
            }(0, l, r4);
          if (3 === d)
            return l;
          throw new Error("unknown padding");
        };
      }, 2466: (e2, t2, r3) => {
        "use strict";
        var n = r3(7552), i = r3(5010), o = r3(5866), a = r3(6873), s = r3(817), u = r3(1734), c = r3(2561), f = r3(9782), d = r3(8850).Buffer;
        e2.exports = function(e3, t3, r4) {
          var l;
          l = e3.padding ? e3.padding : r4 ? 1 : 4;
          var h, p = n(e3);
          if (4 === l)
            h = function(e4, t4) {
              var r5 = e4.modulus.byteLength(), n2 = t4.length, c2 = o("sha1").update(d.alloc(0)).digest(), f2 = c2.length, l2 = 2 * f2;
              if (n2 > r5 - l2 - 2)
                throw new Error("message too long");
              var h2 = d.alloc(r5 - n2 - l2 - 2), p2 = r5 - f2 - 1, b = i(f2), y = s(d.concat([c2, h2, d.alloc(1, 1), t4], p2), a(b, p2)), m = s(b, a(y, f2));
              return new u(d.concat([d.alloc(1), m, y], r5));
            }(p, t3);
          else if (1 === l)
            h = function(e4, t4, r5) {
              var n2, o2 = t4.length, a2 = e4.modulus.byteLength();
              if (o2 > a2 - 11)
                throw new Error("message too long");
              return n2 = r5 ? d.alloc(a2 - o2 - 3, 255) : function(e5) {
                for (var t5, r6 = d.allocUnsafe(e5), n3 = 0, o3 = i(2 * e5), a3 = 0; n3 < e5; )
                  a3 === o3.length && (o3 = i(2 * e5), a3 = 0), (t5 = o3[a3++]) && (r6[n3++] = t5);
                return r6;
              }(a2 - o2 - 3), new u(d.concat([d.from([0, r5 ? 1 : 2]), n2, d.alloc(1), t4], a2));
            }(p, t3, r4);
          else {
            if (3 !== l)
              throw new Error("unknown padding");
            if ((h = new u(t3)).cmp(p.modulus) >= 0)
              throw new Error("data too long for modulus");
          }
          return r4 ? f(h, p) : c(h, p);
        };
      }, 2561: (e2, t2, r3) => {
        "use strict";
        var n = r3(1734), i = r3(8850).Buffer;
        e2.exports = function(e3, t3) {
          return i.from(e3.toRed(n.mont(t3.modulus)).redPow(new n(t3.publicExponent)).fromRed().toArray());
        };
      }, 817: (e2) => {
        "use strict";
        e2.exports = function(e3, t2) {
          for (var r3 = e3.length, n = -1; ++n < r3; )
            e3[n] ^= t2[n];
          return e3;
        };
      }, 1296: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(10), o = r3(3103), a = r3(34);
        function s(e3, t3) {
          return t3.encode ? t3.strict ? i(e3) : encodeURIComponent(e3) : e3;
        }
        function u(e3) {
          return Array.isArray(e3) ? e3.sort() : "object" === (0, n.default)(e3) ? u(Object.keys(e3)).sort(function(e4, t3) {
            return Number(e4) - Number(t3);
          }).map(function(t3) {
            return e3[t3];
          }) : e3;
        }
        function c(e3) {
          var t3 = e3.indexOf("?");
          return -1 === t3 ? "" : e3.slice(t3 + 1);
        }
        function f(e3, t3) {
          var r4 = function(e4) {
            var t4;
            switch (e4.arrayFormat) {
              case "index":
                return function(e5, r5, n2) {
                  t4 = /\[(\d*)\]$/.exec(e5), e5 = e5.replace(/\[\d*\]$/, ""), t4 ? (void 0 === n2[e5] && (n2[e5] = {}), n2[e5][t4[1]] = r5) : n2[e5] = r5;
                };
              case "bracket":
                return function(e5, r5, n2) {
                  t4 = /(\[\])$/.exec(e5), e5 = e5.replace(/\[\]$/, ""), t4 ? void 0 !== n2[e5] ? n2[e5] = [].concat(n2[e5], r5) : n2[e5] = [r5] : n2[e5] = r5;
                };
              default:
                return function(e5, t5, r5) {
                  void 0 !== r5[e5] ? r5[e5] = [].concat(r5[e5], t5) : r5[e5] = t5;
                };
            }
          }(t3 = o({ arrayFormat: "none" }, t3)), i2 = /* @__PURE__ */ Object.create(null);
          return "string" != typeof e3 ? i2 : (e3 = e3.trim().replace(/^[?#&]/, "")) ? (e3.split("&").forEach(function(e4) {
            var t4 = e4.replace(/\+/g, " ").split("="), n2 = t4.shift(), o2 = t4.length > 0 ? t4.join("=") : void 0;
            o2 = void 0 === o2 ? null : a(o2), r4(a(n2), o2, i2);
          }), Object.keys(i2).sort().reduce(function(e4, t4) {
            var r5 = i2[t4];
            return Boolean(r5) && "object" === (0, n.default)(r5) && !Array.isArray(r5) ? e4[t4] = u(r5) : e4[t4] = r5, e4;
          }, /* @__PURE__ */ Object.create(null))) : i2;
        }
        t2.extract = c, t2.parse = f, t2.stringify = function(e3, t3) {
          false === (t3 = o({ encode: true, strict: true, arrayFormat: "none" }, t3)).sort && (t3.sort = function() {
          });
          var r4 = function(e4) {
            switch (e4.arrayFormat) {
              case "index":
                return function(t4, r5, n2) {
                  return null === r5 ? [s(t4, e4), "[", n2, "]"].join("") : [s(t4, e4), "[", s(n2, e4), "]=", s(r5, e4)].join("");
                };
              case "bracket":
                return function(t4, r5) {
                  return null === r5 ? s(t4, e4) : [s(t4, e4), "[]=", s(r5, e4)].join("");
                };
              default:
                return function(t4, r5) {
                  return null === r5 ? s(t4, e4) : [s(t4, e4), "=", s(r5, e4)].join("");
                };
            }
          }(t3);
          return e3 ? Object.keys(e3).sort(t3.sort).map(function(n2) {
            var i2 = e3[n2];
            if (void 0 === i2)
              return "";
            if (null === i2)
              return s(n2, t3);
            if (Array.isArray(i2)) {
              var o2 = [];
              return i2.slice().forEach(function(e4) {
                void 0 !== e4 && o2.push(r4(n2, e4, o2.length));
              }), o2.join("&");
            }
            return s(n2, t3) + "=" + s(i2, t3);
          }).filter(function(e4) {
            return e4.length > 0;
          }).join("&") : "";
        }, t2.parseUrl = function(e3, t3) {
          return { url: e3.split("?")[0] || "", query: f(c(e3), t3) };
        };
      }, 5010: (e2, t2, r3) => {
        "use strict";
        var n = r3(9142), i = 65536, o = r3(8850).Buffer, a = r3.g.crypto || r3.g.msCrypto;
        a && a.getRandomValues ? e2.exports = function(e3, t3) {
          if (e3 > 4294967295)
            throw new RangeError("requested too many random bytes");
          var r4 = o.allocUnsafe(e3);
          if (e3 > 0)
            if (e3 > i)
              for (var s = 0; s < e3; s += i)
                a.getRandomValues(r4.slice(s, s + i));
            else
              a.getRandomValues(r4);
          return "function" == typeof t3 ? n.nextTick(function() {
            t3(null, r4);
          }) : r4;
        } : e2.exports = function() {
          throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
        };
      }, 6509: (e2, t2, r3) => {
        "use strict";
        var n = r3(9142);
        function i() {
          throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
        }
        var o = r3(8850), a = r3(5010), s = o.Buffer, u = o.kMaxLength, c = r3.g.crypto || r3.g.msCrypto, f = Math.pow(2, 32) - 1;
        function d(e3, t3) {
          if ("number" != typeof e3 || e3 != e3)
            throw new TypeError("offset must be a number");
          if (e3 > f || e3 < 0)
            throw new TypeError("offset must be a uint32");
          if (e3 > u || e3 > t3)
            throw new RangeError("offset out of range");
        }
        function l(e3, t3, r4) {
          if ("number" != typeof e3 || e3 != e3)
            throw new TypeError("size must be a number");
          if (e3 > f || e3 < 0)
            throw new TypeError("size must be a uint32");
          if (e3 + t3 > r4 || e3 > u)
            throw new RangeError("buffer too small");
        }
        function h(e3, t3, r4, i2) {
          if (n.browser) {
            var o2 = e3.buffer, s2 = new Uint8Array(o2, t3, r4);
            return c.getRandomValues(s2), i2 ? void n.nextTick(function() {
              i2(null, e3);
            }) : e3;
          }
          if (!i2)
            return a(r4).copy(e3, t3), e3;
          a(r4, function(r5, n2) {
            if (r5)
              return i2(r5);
            n2.copy(e3, t3), i2(null, e3);
          });
        }
        c && c.getRandomValues || !n.browser ? (t2.randomFill = function(e3, t3, n2, i2) {
          if (!(s.isBuffer(e3) || e3 instanceof r3.g.Uint8Array))
            throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
          if ("function" == typeof t3)
            i2 = t3, t3 = 0, n2 = e3.length;
          else if ("function" == typeof n2)
            i2 = n2, n2 = e3.length - t3;
          else if ("function" != typeof i2)
            throw new TypeError('"cb" argument must be a function');
          return d(t3, e3.length), l(n2, t3, e3.length), h(e3, t3, n2, i2);
        }, t2.randomFillSync = function(e3, t3, n2) {
          if (void 0 === t3 && (t3 = 0), !(s.isBuffer(e3) || e3 instanceof r3.g.Uint8Array))
            throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
          return d(t3, e3.length), void 0 === n2 && (n2 = e3.length - t3), l(n2, t3, e3.length), h(e3, t3, n2);
        }) : (t2.randomFill = i, t2.randomFillSync = i);
      }, 9024: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = {};
        function o(e3, t3, r4) {
          r4 || (r4 = Error);
          var n2 = function(e4) {
            var r5, n3;
            function i2(r6, n4, i3) {
              return e4.call(this, function(e5, r7, n5) {
                return "string" == typeof t3 ? t3 : t3(e5, r7, n5);
              }(r6, n4, i3)) || this;
            }
            return n3 = e4, (r5 = i2).prototype = Object.create(n3.prototype), r5.prototype.constructor = r5, r5.__proto__ = n3, i2;
          }(r4);
          n2.prototype.name = r4.name, n2.prototype.code = e3, i[e3] = n2;
        }
        function a(e3, t3) {
          if (Array.isArray(e3)) {
            var r4 = e3.length;
            return e3 = e3.map(function(e4) {
              return String(e4);
            }), r4 > 2 ? "one of ".concat(t3, " ").concat(e3.slice(0, r4 - 1).join(", "), ", or ") + e3[r4 - 1] : 2 === r4 ? "one of ".concat(t3, " ").concat(e3[0], " or ").concat(e3[1]) : "of ".concat(t3, " ").concat(e3[0]);
          }
          return "of ".concat(t3, " ").concat(String(e3));
        }
        o("ERR_INVALID_OPT_VALUE", function(e3, t3) {
          return 'The value "' + t3 + '" is invalid for option "' + e3 + '"';
        }, TypeError), o("ERR_INVALID_ARG_TYPE", function(e3, t3, r4) {
          var i2, o2, s, u, c;
          if ("string" == typeof t3 && (o2 = "not ", t3.substr(0, o2.length) === o2) ? (i2 = "must not be", t3 = t3.replace(/^not /, "")) : i2 = "must be", function(e4, t4, r5) {
            return (void 0 === r5 || r5 > e4.length) && (r5 = e4.length), e4.substring(r5 - t4.length, r5) === t4;
          }(e3, " argument"))
            s = "The ".concat(e3, " ").concat(i2, " ").concat(a(t3, "type"));
          else {
            var f = ("number" != typeof c && (c = 0), c + ".".length > (u = e3).length || -1 === u.indexOf(".", c) ? "argument" : "property");
            s = 'The "'.concat(e3, '" ').concat(f, " ").concat(i2, " ").concat(a(t3, "type"));
          }
          return s + ". Received type ".concat((0, n.default)(r4));
        }, TypeError), o("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF"), o("ERR_METHOD_NOT_IMPLEMENTED", function(e3) {
          return "The " + e3 + " method is not implemented";
        }), o("ERR_STREAM_PREMATURE_CLOSE", "Premature close"), o("ERR_STREAM_DESTROYED", function(e3) {
          return "Cannot call " + e3 + " after a stream was destroyed";
        }), o("ERR_MULTIPLE_CALLBACK", "Callback called multiple times"), o("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable"), o("ERR_STREAM_WRITE_AFTER_END", "write after end"), o("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError), o("ERR_UNKNOWN_ENCODING", function(e3) {
          return "Unknown encoding: " + e3;
        }, TypeError), o("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event"), e2.exports.q = i;
      }, 6884: (e2, t2, r3) => {
        "use strict";
        var n = r3(9142), i = Object.keys || function(e3) {
          var t3 = [];
          for (var r4 in e3)
            t3.push(r4);
          return t3;
        };
        e2.exports = f;
        var o = r3(6297), a = r3(1471);
        r3(1736)(f, o);
        for (var s = i(a.prototype), u = 0; u < s.length; u++) {
          var c = s[u];
          f.prototype[c] || (f.prototype[c] = a.prototype[c]);
        }
        function f(e3) {
          if (!(this instanceof f))
            return new f(e3);
          o.call(this, e3), a.call(this, e3), this.allowHalfOpen = true, e3 && (false === e3.readable && (this.readable = false), false === e3.writable && (this.writable = false), false === e3.allowHalfOpen && (this.allowHalfOpen = false, this.once("end", d)));
        }
        function d() {
          this._writableState.ended || n.nextTick(l, this);
        }
        function l(e3) {
          e3.end();
        }
        Object.defineProperty(f.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
          return this._writableState.highWaterMark;
        } }), Object.defineProperty(f.prototype, "writableBuffer", { enumerable: false, get: function() {
          return this._writableState && this._writableState.getBuffer();
        } }), Object.defineProperty(f.prototype, "writableLength", { enumerable: false, get: function() {
          return this._writableState.length;
        } }), Object.defineProperty(f.prototype, "destroyed", { enumerable: false, get: function() {
          return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;
        }, set: function(e3) {
          void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e3, this._writableState.destroyed = e3);
        } });
      }, 3582: (e2, t2, r3) => {
        "use strict";
        e2.exports = i;
        var n = r3(9154);
        function i(e3) {
          if (!(this instanceof i))
            return new i(e3);
          n.call(this, e3);
        }
        r3(1736)(i, n), i.prototype._transform = function(e3, t3, r4) {
          r4(null, e3);
        };
      }, 6297: (e2, t2, r3) => {
        "use strict";
        var n, i = r3(9142);
        e2.exports = E, E.ReadableState = S, r3(8291).EventEmitter;
        var o, a = function(e3, t3) {
          return e3.listeners(t3).length;
        }, s = r3(7144), u = r3(9033).Buffer, c = r3.g.Uint8Array || function() {
        }, f = r3(4616);
        o = f && f.debuglog ? f.debuglog("stream") : function() {
        };
        var d, l, h, p = r3(5392), b = r3(7572), y = r3(6756).getHighWaterMark, m = r3(9024).q, v = m.ERR_INVALID_ARG_TYPE, g = m.ERR_STREAM_PUSH_AFTER_EOF, w = m.ERR_METHOD_NOT_IMPLEMENTED, A = m.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
        r3(1736)(E, s);
        var k = b.errorOrDestroy, _ = ["error", "close", "destroy", "pause", "resume"];
        function S(e3, t3, i2) {
          n = n || r3(6884), e3 = e3 || {}, "boolean" != typeof i2 && (i2 = t3 instanceof n), this.objectMode = !!e3.objectMode, i2 && (this.objectMode = this.objectMode || !!e3.readableObjectMode), this.highWaterMark = y(this, e3, "readableHighWaterMark", i2), this.buffer = new p(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this.paused = true, this.emitClose = false !== e3.emitClose, this.autoDestroy = !!e3.autoDestroy, this.destroyed = false, this.defaultEncoding = e3.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = false, this.decoder = null, this.encoding = null, e3.encoding && (d || (d = r3(3462).s), this.decoder = new d(e3.encoding), this.encoding = e3.encoding);
        }
        function E(e3) {
          if (n = n || r3(6884), !(this instanceof E))
            return new E(e3);
          var t3 = this instanceof n;
          this._readableState = new S(e3, this, t3), this.readable = true, e3 && ("function" == typeof e3.read && (this._read = e3.read), "function" == typeof e3.destroy && (this._destroy = e3.destroy)), s.call(this);
        }
        function x(e3, t3, r4, n2, i2) {
          o("readableAddChunk", t3);
          var a2, s2 = e3._readableState;
          if (null === t3)
            s2.reading = false, function(e4, t4) {
              if (o("onEofChunk"), !t4.ended) {
                if (t4.decoder) {
                  var r5 = t4.decoder.end();
                  r5 && r5.length && (t4.buffer.push(r5), t4.length += t4.objectMode ? 1 : r5.length);
                }
                t4.ended = true, t4.sync ? T(e4) : (t4.needReadable = false, t4.emittedReadable || (t4.emittedReadable = true, C(e4)));
              }
            }(e3, s2);
          else if (i2 || (a2 = function(e4, t4) {
            var r5, n3;
            return n3 = t4, u.isBuffer(n3) || n3 instanceof c || "string" == typeof t4 || void 0 === t4 || e4.objectMode || (r5 = new v("chunk", ["string", "Buffer", "Uint8Array"], t4)), r5;
          }(s2, t3)), a2)
            k(e3, a2);
          else if (s2.objectMode || t3 && t3.length > 0)
            if ("string" == typeof t3 || s2.objectMode || Object.getPrototypeOf(t3) === u.prototype || (t3 = function(e4) {
              return u.from(e4);
            }(t3)), n2)
              s2.endEmitted ? k(e3, new A()) : P(e3, s2, t3, true);
            else if (s2.ended)
              k(e3, new g());
            else {
              if (s2.destroyed)
                return false;
              s2.reading = false, s2.decoder && !r4 ? (t3 = s2.decoder.write(t3), s2.objectMode || 0 !== t3.length ? P(e3, s2, t3, false) : I(e3, s2)) : P(e3, s2, t3, false);
            }
          else
            n2 || (s2.reading = false, I(e3, s2));
          return !s2.ended && (s2.length < s2.highWaterMark || 0 === s2.length);
        }
        function P(e3, t3, r4, n2) {
          t3.flowing && 0 === t3.length && !t3.sync ? (t3.awaitDrain = 0, e3.emit("data", r4)) : (t3.length += t3.objectMode ? 1 : r4.length, n2 ? t3.buffer.unshift(r4) : t3.buffer.push(r4), t3.needReadable && T(e3)), I(e3, t3);
        }
        Object.defineProperty(E.prototype, "destroyed", { enumerable: false, get: function() {
          return void 0 !== this._readableState && this._readableState.destroyed;
        }, set: function(e3) {
          this._readableState && (this._readableState.destroyed = e3);
        } }), E.prototype.destroy = b.destroy, E.prototype._undestroy = b.undestroy, E.prototype._destroy = function(e3, t3) {
          t3(e3);
        }, E.prototype.push = function(e3, t3) {
          var r4, n2 = this._readableState;
          return n2.objectMode ? r4 = true : "string" == typeof e3 && ((t3 = t3 || n2.defaultEncoding) !== n2.encoding && (e3 = u.from(e3, t3), t3 = ""), r4 = true), x(this, e3, t3, false, r4);
        }, E.prototype.unshift = function(e3) {
          return x(this, e3, null, true, false);
        }, E.prototype.isPaused = function() {
          return false === this._readableState.flowing;
        }, E.prototype.setEncoding = function(e3) {
          d || (d = r3(3462).s);
          var t3 = new d(e3);
          this._readableState.decoder = t3, this._readableState.encoding = this._readableState.decoder.encoding;
          for (var n2 = this._readableState.buffer.head, i2 = ""; null !== n2; )
            i2 += t3.write(n2.data), n2 = n2.next;
          return this._readableState.buffer.clear(), "" !== i2 && this._readableState.buffer.push(i2), this._readableState.length = i2.length, this;
        };
        var O = 1073741824;
        function B(e3, t3) {
          return e3 <= 0 || 0 === t3.length && t3.ended ? 0 : t3.objectMode ? 1 : e3 != e3 ? t3.flowing && t3.length ? t3.buffer.head.data.length : t3.length : (e3 > t3.highWaterMark && (t3.highWaterMark = function(e4) {
            return e4 >= O ? e4 = O : (e4--, e4 |= e4 >>> 1, e4 |= e4 >>> 2, e4 |= e4 >>> 4, e4 |= e4 >>> 8, e4 |= e4 >>> 16, e4++), e4;
          }(e3)), e3 <= t3.length ? e3 : t3.ended ? t3.length : (t3.needReadable = true, 0));
        }
        function T(e3) {
          var t3 = e3._readableState;
          o("emitReadable", t3.needReadable, t3.emittedReadable), t3.needReadable = false, t3.emittedReadable || (o("emitReadable", t3.flowing), t3.emittedReadable = true, i.nextTick(C, e3));
        }
        function C(e3) {
          var t3 = e3._readableState;
          o("emitReadable_", t3.destroyed, t3.length, t3.ended), t3.destroyed || !t3.length && !t3.ended || (e3.emit("readable"), t3.emittedReadable = false), t3.needReadable = !t3.flowing && !t3.ended && t3.length <= t3.highWaterMark, N(e3);
        }
        function I(e3, t3) {
          t3.readingMore || (t3.readingMore = true, i.nextTick(M, e3, t3));
        }
        function M(e3, t3) {
          for (; !t3.reading && !t3.ended && (t3.length < t3.highWaterMark || t3.flowing && 0 === t3.length); ) {
            var r4 = t3.length;
            if (o("maybeReadMore read 0"), e3.read(0), r4 === t3.length)
              break;
          }
          t3.readingMore = false;
        }
        function U(e3) {
          var t3 = e3._readableState;
          t3.readableListening = e3.listenerCount("readable") > 0, t3.resumeScheduled && !t3.paused ? t3.flowing = true : e3.listenerCount("data") > 0 && e3.resume();
        }
        function R(e3) {
          o("readable nexttick read 0"), e3.read(0);
        }
        function j(e3, t3) {
          o("resume", t3.reading), t3.reading || e3.read(0), t3.resumeScheduled = false, e3.emit("resume"), N(e3), t3.flowing && !t3.reading && e3.read(0);
        }
        function N(e3) {
          var t3 = e3._readableState;
          for (o("flow", t3.flowing); t3.flowing && null !== e3.read(); )
            ;
        }
        function F(e3, t3) {
          return 0 === t3.length ? null : (t3.objectMode ? r4 = t3.buffer.shift() : !e3 || e3 >= t3.length ? (r4 = t3.decoder ? t3.buffer.join("") : 1 === t3.buffer.length ? t3.buffer.first() : t3.buffer.concat(t3.length), t3.buffer.clear()) : r4 = t3.buffer.consume(e3, t3.decoder), r4);
          var r4;
        }
        function L(e3) {
          var t3 = e3._readableState;
          o("endReadable", t3.endEmitted), t3.endEmitted || (t3.ended = true, i.nextTick(D, t3, e3));
        }
        function D(e3, t3) {
          if (o("endReadableNT", e3.endEmitted, e3.length), !e3.endEmitted && 0 === e3.length && (e3.endEmitted = true, t3.readable = false, t3.emit("end"), e3.autoDestroy)) {
            var r4 = t3._writableState;
            (!r4 || r4.autoDestroy && r4.finished) && t3.destroy();
          }
        }
        function H(e3, t3) {
          for (var r4 = 0, n2 = e3.length; r4 < n2; r4++)
            if (e3[r4] === t3)
              return r4;
          return -1;
        }
        E.prototype.read = function(e3) {
          o("read", e3), e3 = parseInt(e3, 10);
          var t3 = this._readableState, r4 = e3;
          if (0 !== e3 && (t3.emittedReadable = false), 0 === e3 && t3.needReadable && ((0 !== t3.highWaterMark ? t3.length >= t3.highWaterMark : t3.length > 0) || t3.ended))
            return o("read: emitReadable", t3.length, t3.ended), 0 === t3.length && t3.ended ? L(this) : T(this), null;
          if (0 === (e3 = B(e3, t3)) && t3.ended)
            return 0 === t3.length && L(this), null;
          var n2, i2 = t3.needReadable;
          return o("need readable", i2), (0 === t3.length || t3.length - e3 < t3.highWaterMark) && o("length less than watermark", i2 = true), t3.ended || t3.reading ? o("reading or ended", i2 = false) : i2 && (o("do read"), t3.reading = true, t3.sync = true, 0 === t3.length && (t3.needReadable = true), this._read(t3.highWaterMark), t3.sync = false, t3.reading || (e3 = B(r4, t3))), null === (n2 = e3 > 0 ? F(e3, t3) : null) ? (t3.needReadable = t3.length <= t3.highWaterMark, e3 = 0) : (t3.length -= e3, t3.awaitDrain = 0), 0 === t3.length && (t3.ended || (t3.needReadable = true), r4 !== e3 && t3.ended && L(this)), null !== n2 && this.emit("data", n2), n2;
        }, E.prototype._read = function(e3) {
          k(this, new w("_read()"));
        }, E.prototype.pipe = function(e3, t3) {
          var r4 = this, n2 = this._readableState;
          switch (n2.pipesCount) {
            case 0:
              n2.pipes = e3;
              break;
            case 1:
              n2.pipes = [n2.pipes, e3];
              break;
            default:
              n2.pipes.push(e3);
          }
          n2.pipesCount += 1, o("pipe count=%d opts=%j", n2.pipesCount, t3);
          var s2 = t3 && false === t3.end || e3 === i.stdout || e3 === i.stderr ? b2 : u2;
          function u2() {
            o("onend"), e3.end();
          }
          n2.endEmitted ? i.nextTick(s2) : r4.once("end", s2), e3.on("unpipe", function t4(i2, a2) {
            o("onunpipe"), i2 === r4 && a2 && false === a2.hasUnpiped && (a2.hasUnpiped = true, o("cleanup"), e3.removeListener("close", h2), e3.removeListener("finish", p2), e3.removeListener("drain", c2), e3.removeListener("error", l2), e3.removeListener("unpipe", t4), r4.removeListener("end", u2), r4.removeListener("end", b2), r4.removeListener("data", d2), f2 = true, !n2.awaitDrain || e3._writableState && !e3._writableState.needDrain || c2());
          });
          var c2 = function(e4) {
            return function() {
              var t4 = e4._readableState;
              o("pipeOnDrain", t4.awaitDrain), t4.awaitDrain && t4.awaitDrain--, 0 === t4.awaitDrain && a(e4, "data") && (t4.flowing = true, N(e4));
            };
          }(r4);
          e3.on("drain", c2);
          var f2 = false;
          function d2(t4) {
            o("ondata");
            var i2 = e3.write(t4);
            o("dest.write", i2), false === i2 && ((1 === n2.pipesCount && n2.pipes === e3 || n2.pipesCount > 1 && -1 !== H(n2.pipes, e3)) && !f2 && (o("false write response, pause", n2.awaitDrain), n2.awaitDrain++), r4.pause());
          }
          function l2(t4) {
            o("onerror", t4), b2(), e3.removeListener("error", l2), 0 === a(e3, "error") && k(e3, t4);
          }
          function h2() {
            e3.removeListener("finish", p2), b2();
          }
          function p2() {
            o("onfinish"), e3.removeListener("close", h2), b2();
          }
          function b2() {
            o("unpipe"), r4.unpipe(e3);
          }
          return r4.on("data", d2), function(e4, t4, r5) {
            if ("function" == typeof e4.prependListener)
              return e4.prependListener(t4, r5);
            e4._events && e4._events[t4] ? Array.isArray(e4._events[t4]) ? e4._events[t4].unshift(r5) : e4._events[t4] = [r5, e4._events[t4]] : e4.on(t4, r5);
          }(e3, "error", l2), e3.once("close", h2), e3.once("finish", p2), e3.emit("pipe", r4), n2.flowing || (o("pipe resume"), r4.resume()), e3;
        }, E.prototype.unpipe = function(e3) {
          var t3 = this._readableState, r4 = { hasUnpiped: false };
          if (0 === t3.pipesCount)
            return this;
          if (1 === t3.pipesCount)
            return e3 && e3 !== t3.pipes || (e3 || (e3 = t3.pipes), t3.pipes = null, t3.pipesCount = 0, t3.flowing = false, e3 && e3.emit("unpipe", this, r4)), this;
          if (!e3) {
            var n2 = t3.pipes, i2 = t3.pipesCount;
            t3.pipes = null, t3.pipesCount = 0, t3.flowing = false;
            for (var o2 = 0; o2 < i2; o2++)
              n2[o2].emit("unpipe", this, { hasUnpiped: false });
            return this;
          }
          var a2 = H(t3.pipes, e3);
          return -1 === a2 || (t3.pipes.splice(a2, 1), t3.pipesCount -= 1, 1 === t3.pipesCount && (t3.pipes = t3.pipes[0]), e3.emit("unpipe", this, r4)), this;
        }, E.prototype.on = function(e3, t3) {
          var r4 = s.prototype.on.call(this, e3, t3), n2 = this._readableState;
          return "data" === e3 ? (n2.readableListening = this.listenerCount("readable") > 0, false !== n2.flowing && this.resume()) : "readable" === e3 && (n2.endEmitted || n2.readableListening || (n2.readableListening = n2.needReadable = true, n2.flowing = false, n2.emittedReadable = false, o("on readable", n2.length, n2.reading), n2.length ? T(this) : n2.reading || i.nextTick(R, this))), r4;
        }, E.prototype.addListener = E.prototype.on, E.prototype.removeListener = function(e3, t3) {
          var r4 = s.prototype.removeListener.call(this, e3, t3);
          return "readable" === e3 && i.nextTick(U, this), r4;
        }, E.prototype.removeAllListeners = function(e3) {
          var t3 = s.prototype.removeAllListeners.apply(this, arguments);
          return "readable" !== e3 && void 0 !== e3 || i.nextTick(U, this), t3;
        }, E.prototype.resume = function() {
          var e3 = this._readableState;
          return e3.flowing || (o("resume"), e3.flowing = !e3.readableListening, function(e4, t3) {
            t3.resumeScheduled || (t3.resumeScheduled = true, i.nextTick(j, e4, t3));
          }(this, e3)), e3.paused = false, this;
        }, E.prototype.pause = function() {
          return o("call pause flowing=%j", this._readableState.flowing), false !== this._readableState.flowing && (o("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState.paused = true, this;
        }, E.prototype.wrap = function(e3) {
          var t3 = this, r4 = this._readableState, n2 = false;
          for (var i2 in e3.on("end", function() {
            if (o("wrapped end"), r4.decoder && !r4.ended) {
              var e4 = r4.decoder.end();
              e4 && e4.length && t3.push(e4);
            }
            t3.push(null);
          }), e3.on("data", function(i3) {
            o("wrapped data"), r4.decoder && (i3 = r4.decoder.write(i3)), r4.objectMode && null == i3 || (r4.objectMode || i3 && i3.length) && (t3.push(i3) || (n2 = true, e3.pause()));
          }), e3)
            void 0 === this[i2] && "function" == typeof e3[i2] && (this[i2] = function(t4) {
              return function() {
                return e3[t4].apply(e3, arguments);
              };
            }(i2));
          for (var a2 = 0; a2 < _.length; a2++)
            e3.on(_[a2], this.emit.bind(this, _[a2]));
          return this._read = function(t4) {
            o("wrapped _read", t4), n2 && (n2 = false, e3.resume());
          }, this;
        }, "function" == typeof Symbol && (E.prototype[Symbol.asyncIterator] = function() {
          return void 0 === l && (l = r3(2317)), l(this);
        }), Object.defineProperty(E.prototype, "readableHighWaterMark", { enumerable: false, get: function() {
          return this._readableState.highWaterMark;
        } }), Object.defineProperty(E.prototype, "readableBuffer", { enumerable: false, get: function() {
          return this._readableState && this._readableState.buffer;
        } }), Object.defineProperty(E.prototype, "readableFlowing", { enumerable: false, get: function() {
          return this._readableState.flowing;
        }, set: function(e3) {
          this._readableState && (this._readableState.flowing = e3);
        } }), E._fromList = F, Object.defineProperty(E.prototype, "readableLength", { enumerable: false, get: function() {
          return this._readableState.length;
        } }), "function" == typeof Symbol && (E.from = function(e3, t3) {
          return void 0 === h && (h = r3(6218)), h(E, e3, t3);
        });
      }, 9154: (e2, t2, r3) => {
        "use strict";
        e2.exports = f;
        var n = r3(9024).q, i = n.ERR_METHOD_NOT_IMPLEMENTED, o = n.ERR_MULTIPLE_CALLBACK, a = n.ERR_TRANSFORM_ALREADY_TRANSFORMING, s = n.ERR_TRANSFORM_WITH_LENGTH_0, u = r3(6884);
        function c(e3, t3) {
          var r4 = this._transformState;
          r4.transforming = false;
          var n2 = r4.writecb;
          if (null === n2)
            return this.emit("error", new o());
          r4.writechunk = null, r4.writecb = null, null != t3 && this.push(t3), n2(e3);
          var i2 = this._readableState;
          i2.reading = false, (i2.needReadable || i2.length < i2.highWaterMark) && this._read(i2.highWaterMark);
        }
        function f(e3) {
          if (!(this instanceof f))
            return new f(e3);
          u.call(this, e3), this._transformState = { afterTransform: c.bind(this), needTransform: false, transforming: false, writecb: null, writechunk: null, writeencoding: null }, this._readableState.needReadable = true, this._readableState.sync = false, e3 && ("function" == typeof e3.transform && (this._transform = e3.transform), "function" == typeof e3.flush && (this._flush = e3.flush)), this.on("prefinish", d);
        }
        function d() {
          var e3 = this;
          "function" != typeof this._flush || this._readableState.destroyed ? l(this, null, null) : this._flush(function(t3, r4) {
            l(e3, t3, r4);
          });
        }
        function l(e3, t3, r4) {
          if (t3)
            return e3.emit("error", t3);
          if (null != r4 && e3.push(r4), e3._writableState.length)
            throw new s();
          if (e3._transformState.transforming)
            throw new a();
          return e3.push(null);
        }
        r3(1736)(f, u), f.prototype.push = function(e3, t3) {
          return this._transformState.needTransform = false, u.prototype.push.call(this, e3, t3);
        }, f.prototype._transform = function(e3, t3, r4) {
          r4(new i("_transform()"));
        }, f.prototype._write = function(e3, t3, r4) {
          var n2 = this._transformState;
          if (n2.writecb = r4, n2.writechunk = e3, n2.writeencoding = t3, !n2.transforming) {
            var i2 = this._readableState;
            (n2.needTransform || i2.needReadable || i2.length < i2.highWaterMark) && this._read(i2.highWaterMark);
          }
        }, f.prototype._read = function(e3) {
          var t3 = this._transformState;
          null === t3.writechunk || t3.transforming ? t3.needTransform = true : (t3.transforming = true, this._transform(t3.writechunk, t3.writeencoding, t3.afterTransform));
        }, f.prototype._destroy = function(e3, t3) {
          u.prototype._destroy.call(this, e3, function(e4) {
            t3(e4);
          });
        };
      }, 1471: (e2, t2, r3) => {
        "use strict";
        var n, i = r3(9142);
        function o(e3) {
          var t3 = this;
          this.next = null, this.entry = null, this.finish = function() {
            !function(e4, t4, r4) {
              var n2 = e4.entry;
              for (e4.entry = null; n2; ) {
                var i2 = n2.callback;
                t4.pendingcb--, i2(void 0), n2 = n2.next;
              }
              t4.corkedRequestsFree.next = e4;
            }(t3, e3);
          };
        }
        e2.exports = E, E.WritableState = S;
        var a, s = { deprecate: r3(6219) }, u = r3(7144), c = r3(9033).Buffer, f = r3.g.Uint8Array || function() {
        }, d = r3(7572), l = r3(6756).getHighWaterMark, h = r3(9024).q, p = h.ERR_INVALID_ARG_TYPE, b = h.ERR_METHOD_NOT_IMPLEMENTED, y = h.ERR_MULTIPLE_CALLBACK, m = h.ERR_STREAM_CANNOT_PIPE, v = h.ERR_STREAM_DESTROYED, g = h.ERR_STREAM_NULL_VALUES, w = h.ERR_STREAM_WRITE_AFTER_END, A = h.ERR_UNKNOWN_ENCODING, k = d.errorOrDestroy;
        function _() {
        }
        function S(e3, t3, a2) {
          n = n || r3(6884), e3 = e3 || {}, "boolean" != typeof a2 && (a2 = t3 instanceof n), this.objectMode = !!e3.objectMode, a2 && (this.objectMode = this.objectMode || !!e3.writableObjectMode), this.highWaterMark = l(this, e3, "writableHighWaterMark", a2), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
          var s2 = false === e3.decodeStrings;
          this.decodeStrings = !s2, this.defaultEncoding = e3.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = function(e4) {
            !function(e5, t4) {
              var r4 = e5._writableState, n2 = r4.sync, o2 = r4.writecb;
              if ("function" != typeof o2)
                throw new y();
              if (function(e6) {
                e6.writing = false, e6.writecb = null, e6.length -= e6.writelen, e6.writelen = 0;
              }(r4), t4)
                !function(e6, t5, r5, n3, o3) {
                  --t5.pendingcb, r5 ? (i.nextTick(o3, n3), i.nextTick(C, e6, t5), e6._writableState.errorEmitted = true, k(e6, n3)) : (o3(n3), e6._writableState.errorEmitted = true, k(e6, n3), C(e6, t5));
                }(e5, r4, n2, t4, o2);
              else {
                var a3 = B(r4) || e5.destroyed;
                a3 || r4.corked || r4.bufferProcessing || !r4.bufferedRequest || O(e5, r4), n2 ? i.nextTick(P, e5, r4, a3, o2) : P(e5, r4, a3, o2);
              }
            }(t3, e4);
          }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = false, this.errorEmitted = false, this.emitClose = false !== e3.emitClose, this.autoDestroy = !!e3.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new o(this);
        }
        function E(e3) {
          var t3 = this instanceof (n = n || r3(6884));
          if (!t3 && !a.call(E, this))
            return new E(e3);
          this._writableState = new S(e3, this, t3), this.writable = true, e3 && ("function" == typeof e3.write && (this._write = e3.write), "function" == typeof e3.writev && (this._writev = e3.writev), "function" == typeof e3.destroy && (this._destroy = e3.destroy), "function" == typeof e3.final && (this._final = e3.final)), u.call(this);
        }
        function x(e3, t3, r4, n2, i2, o2, a2) {
          t3.writelen = n2, t3.writecb = a2, t3.writing = true, t3.sync = true, t3.destroyed ? t3.onwrite(new v("write")) : r4 ? e3._writev(i2, t3.onwrite) : e3._write(i2, o2, t3.onwrite), t3.sync = false;
        }
        function P(e3, t3, r4, n2) {
          r4 || function(e4, t4) {
            0 === t4.length && t4.needDrain && (t4.needDrain = false, e4.emit("drain"));
          }(e3, t3), t3.pendingcb--, n2(), C(e3, t3);
        }
        function O(e3, t3) {
          t3.bufferProcessing = true;
          var r4 = t3.bufferedRequest;
          if (e3._writev && r4 && r4.next) {
            var n2 = t3.bufferedRequestCount, i2 = new Array(n2), a2 = t3.corkedRequestsFree;
            a2.entry = r4;
            for (var s2 = 0, u2 = true; r4; )
              i2[s2] = r4, r4.isBuf || (u2 = false), r4 = r4.next, s2 += 1;
            i2.allBuffers = u2, x(e3, t3, true, t3.length, i2, "", a2.finish), t3.pendingcb++, t3.lastBufferedRequest = null, a2.next ? (t3.corkedRequestsFree = a2.next, a2.next = null) : t3.corkedRequestsFree = new o(t3), t3.bufferedRequestCount = 0;
          } else {
            for (; r4; ) {
              var c2 = r4.chunk, f2 = r4.encoding, d2 = r4.callback;
              if (x(e3, t3, false, t3.objectMode ? 1 : c2.length, c2, f2, d2), r4 = r4.next, t3.bufferedRequestCount--, t3.writing)
                break;
            }
            null === r4 && (t3.lastBufferedRequest = null);
          }
          t3.bufferedRequest = r4, t3.bufferProcessing = false;
        }
        function B(e3) {
          return e3.ending && 0 === e3.length && null === e3.bufferedRequest && !e3.finished && !e3.writing;
        }
        function T(e3, t3) {
          e3._final(function(r4) {
            t3.pendingcb--, r4 && k(e3, r4), t3.prefinished = true, e3.emit("prefinish"), C(e3, t3);
          });
        }
        function C(e3, t3) {
          var r4 = B(t3);
          if (r4 && (function(e4, t4) {
            t4.prefinished || t4.finalCalled || ("function" != typeof e4._final || t4.destroyed ? (t4.prefinished = true, e4.emit("prefinish")) : (t4.pendingcb++, t4.finalCalled = true, i.nextTick(T, e4, t4)));
          }(e3, t3), 0 === t3.pendingcb && (t3.finished = true, e3.emit("finish"), t3.autoDestroy))) {
            var n2 = e3._readableState;
            (!n2 || n2.autoDestroy && n2.endEmitted) && e3.destroy();
          }
          return r4;
        }
        r3(1736)(E, u), S.prototype.getBuffer = function() {
          for (var e3 = this.bufferedRequest, t3 = []; e3; )
            t3.push(e3), e3 = e3.next;
          return t3;
        }, function() {
          try {
            Object.defineProperty(S.prototype, "buffer", { get: s.deprecate(function() {
              return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003") });
          } catch (e3) {
          }
        }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (a = Function.prototype[Symbol.hasInstance], Object.defineProperty(E, Symbol.hasInstance, { value: function(e3) {
          return !!a.call(this, e3) || this === E && e3 && e3._writableState instanceof S;
        } })) : a = function(e3) {
          return e3 instanceof this;
        }, E.prototype.pipe = function() {
          k(this, new m());
        }, E.prototype.write = function(e3, t3, r4) {
          var n2, o2 = this._writableState, a2 = false, s2 = !o2.objectMode && (n2 = e3, c.isBuffer(n2) || n2 instanceof f);
          return s2 && !c.isBuffer(e3) && (e3 = function(e4) {
            return c.from(e4);
          }(e3)), "function" == typeof t3 && (r4 = t3, t3 = null), s2 ? t3 = "buffer" : t3 || (t3 = o2.defaultEncoding), "function" != typeof r4 && (r4 = _), o2.ending ? function(e4, t4) {
            var r5 = new w();
            k(e4, r5), i.nextTick(t4, r5);
          }(this, r4) : (s2 || function(e4, t4, r5, n3) {
            var o3;
            return null === r5 ? o3 = new g() : "string" == typeof r5 || t4.objectMode || (o3 = new p("chunk", ["string", "Buffer"], r5)), !o3 || (k(e4, o3), i.nextTick(n3, o3), false);
          }(this, o2, e3, r4)) && (o2.pendingcb++, a2 = function(e4, t4, r5, n3, i2, o3) {
            if (!r5) {
              var a3 = function(e5, t5, r6) {
                return e5.objectMode || false === e5.decodeStrings || "string" != typeof t5 || (t5 = c.from(t5, r6)), t5;
              }(t4, n3, i2);
              n3 !== a3 && (r5 = true, i2 = "buffer", n3 = a3);
            }
            var s3 = t4.objectMode ? 1 : n3.length;
            t4.length += s3;
            var u2 = t4.length < t4.highWaterMark;
            if (u2 || (t4.needDrain = true), t4.writing || t4.corked) {
              var f2 = t4.lastBufferedRequest;
              t4.lastBufferedRequest = { chunk: n3, encoding: i2, isBuf: r5, callback: o3, next: null }, f2 ? f2.next = t4.lastBufferedRequest : t4.bufferedRequest = t4.lastBufferedRequest, t4.bufferedRequestCount += 1;
            } else
              x(e4, t4, false, s3, n3, i2, o3);
            return u2;
          }(this, o2, s2, e3, t3, r4)), a2;
        }, E.prototype.cork = function() {
          this._writableState.corked++;
        }, E.prototype.uncork = function() {
          var e3 = this._writableState;
          e3.corked && (e3.corked--, e3.writing || e3.corked || e3.bufferProcessing || !e3.bufferedRequest || O(this, e3));
        }, E.prototype.setDefaultEncoding = function(e3) {
          if ("string" == typeof e3 && (e3 = e3.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e3 + "").toLowerCase()) > -1))
            throw new A(e3);
          return this._writableState.defaultEncoding = e3, this;
        }, Object.defineProperty(E.prototype, "writableBuffer", { enumerable: false, get: function() {
          return this._writableState && this._writableState.getBuffer();
        } }), Object.defineProperty(E.prototype, "writableHighWaterMark", { enumerable: false, get: function() {
          return this._writableState.highWaterMark;
        } }), E.prototype._write = function(e3, t3, r4) {
          r4(new b("_write()"));
        }, E.prototype._writev = null, E.prototype.end = function(e3, t3, r4) {
          var n2 = this._writableState;
          return "function" == typeof e3 ? (r4 = e3, e3 = null, t3 = null) : "function" == typeof t3 && (r4 = t3, t3 = null), null != e3 && this.write(e3, t3), n2.corked && (n2.corked = 1, this.uncork()), n2.ending || function(e4, t4, r5) {
            t4.ending = true, C(e4, t4), r5 && (t4.finished ? i.nextTick(r5) : e4.once("finish", r5)), t4.ended = true, e4.writable = false;
          }(this, n2, r4), this;
        }, Object.defineProperty(E.prototype, "writableLength", { enumerable: false, get: function() {
          return this._writableState.length;
        } }), Object.defineProperty(E.prototype, "destroyed", { enumerable: false, get: function() {
          return void 0 !== this._writableState && this._writableState.destroyed;
        }, set: function(e3) {
          this._writableState && (this._writableState.destroyed = e3);
        } }), E.prototype.destroy = d.destroy, E.prototype._undestroy = d.undestroy, E.prototype._destroy = function(e3, t3) {
          t3(e3);
        };
      }, 2317: (e2, t2, r3) => {
        "use strict";
        var n, i = r3(9142);
        function o(e3, t3, r4) {
          return t3 in e3 ? Object.defineProperty(e3, t3, { value: r4, enumerable: true, configurable: true, writable: true }) : e3[t3] = r4, e3;
        }
        var a = r3(5831), s = Symbol("lastResolve"), u = Symbol("lastReject"), c = Symbol("error"), f = Symbol("ended"), d = Symbol("lastPromise"), l = Symbol("handlePromise"), h = Symbol("stream");
        function p(e3, t3) {
          return { value: e3, done: t3 };
        }
        function b(e3) {
          var t3 = e3[s];
          if (null !== t3) {
            var r4 = e3[h].read();
            null !== r4 && (e3[d] = null, e3[s] = null, e3[u] = null, t3(p(r4, false)));
          }
        }
        function y(e3) {
          i.nextTick(b, e3);
        }
        var m = Object.getPrototypeOf(function() {
        }), v = Object.setPrototypeOf((o(n = { get stream() {
          return this[h];
        }, next: function() {
          var e3 = this, t3 = this[c];
          if (null !== t3)
            return Promise.reject(t3);
          if (this[f])
            return Promise.resolve(p(void 0, true));
          if (this[h].destroyed)
            return new Promise(function(t4, r5) {
              i.nextTick(function() {
                e3[c] ? r5(e3[c]) : t4(p(void 0, true));
              });
            });
          var r4, n2 = this[d];
          if (n2)
            r4 = new Promise(function(e4, t4) {
              return function(r5, n3) {
                e4.then(function() {
                  t4[f] ? r5(p(void 0, true)) : t4[l](r5, n3);
                }, n3);
              };
            }(n2, this));
          else {
            var o2 = this[h].read();
            if (null !== o2)
              return Promise.resolve(p(o2, false));
            r4 = new Promise(this[l]);
          }
          return this[d] = r4, r4;
        } }, Symbol.asyncIterator, function() {
          return this;
        }), o(n, "return", function() {
          var e3 = this;
          return new Promise(function(t3, r4) {
            e3[h].destroy(null, function(e4) {
              e4 ? r4(e4) : t3(p(void 0, true));
            });
          });
        }), n), m);
        e2.exports = function(e3) {
          var t3, r4 = Object.create(v, (o(t3 = {}, h, { value: e3, writable: true }), o(t3, s, { value: null, writable: true }), o(t3, u, { value: null, writable: true }), o(t3, c, { value: null, writable: true }), o(t3, f, { value: e3._readableState.endEmitted, writable: true }), o(t3, l, { value: function(e4, t4) {
            var n2 = r4[h].read();
            n2 ? (r4[d] = null, r4[s] = null, r4[u] = null, e4(p(n2, false))) : (r4[s] = e4, r4[u] = t4);
          }, writable: true }), t3));
          return r4[d] = null, a(e3, function(e4) {
            if (e4 && "ERR_STREAM_PREMATURE_CLOSE" !== e4.code) {
              var t4 = r4[u];
              return null !== t4 && (r4[d] = null, r4[s] = null, r4[u] = null, t4(e4)), void (r4[c] = e4);
            }
            var n2 = r4[s];
            null !== n2 && (r4[d] = null, r4[s] = null, r4[u] = null, n2(p(void 0, true))), r4[f] = true;
          }), e3.on("readable", y.bind(null, r4)), r4;
        };
      }, 5392: (e2, t2, r3) => {
        "use strict";
        function n(e3, t3) {
          var r4 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var n2 = Object.getOwnPropertySymbols(e3);
            t3 && (n2 = n2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r4.push.apply(r4, n2);
          }
          return r4;
        }
        function i(e3, t3, r4) {
          return t3 in e3 ? Object.defineProperty(e3, t3, { value: r4, enumerable: true, configurable: true, writable: true }) : e3[t3] = r4, e3;
        }
        function o(e3, t3) {
          for (var r4 = 0; r4 < t3.length; r4++) {
            var n2 = t3[r4];
            n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e3, n2.key, n2);
          }
        }
        var a = r3(9033).Buffer, s = r3(2361).inspect, u = s && s.custom || "inspect";
        e2.exports = function() {
          function e3() {
            !function(e4, t4) {
              if (!(e4 instanceof t4))
                throw new TypeError("Cannot call a class as a function");
            }(this, e3), this.head = null, this.tail = null, this.length = 0;
          }
          var t3, r4;
          return t3 = e3, r4 = [{ key: "push", value: function(e4) {
            var t4 = { data: e4, next: null };
            this.length > 0 ? this.tail.next = t4 : this.head = t4, this.tail = t4, ++this.length;
          } }, { key: "unshift", value: function(e4) {
            var t4 = { data: e4, next: this.head };
            0 === this.length && (this.tail = t4), this.head = t4, ++this.length;
          } }, { key: "shift", value: function() {
            if (0 !== this.length) {
              var e4 = this.head.data;
              return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, e4;
            }
          } }, { key: "clear", value: function() {
            this.head = this.tail = null, this.length = 0;
          } }, { key: "join", value: function(e4) {
            if (0 === this.length)
              return "";
            for (var t4 = this.head, r5 = "" + t4.data; t4 = t4.next; )
              r5 += e4 + t4.data;
            return r5;
          } }, { key: "concat", value: function(e4) {
            if (0 === this.length)
              return a.alloc(0);
            for (var t4, r5, n2, i2 = a.allocUnsafe(e4 >>> 0), o2 = this.head, s2 = 0; o2; )
              t4 = o2.data, r5 = i2, n2 = s2, a.prototype.copy.call(t4, r5, n2), s2 += o2.data.length, o2 = o2.next;
            return i2;
          } }, { key: "consume", value: function(e4, t4) {
            var r5;
            return e4 < this.head.data.length ? (r5 = this.head.data.slice(0, e4), this.head.data = this.head.data.slice(e4)) : r5 = e4 === this.head.data.length ? this.shift() : t4 ? this._getString(e4) : this._getBuffer(e4), r5;
          } }, { key: "first", value: function() {
            return this.head.data;
          } }, { key: "_getString", value: function(e4) {
            var t4 = this.head, r5 = 1, n2 = t4.data;
            for (e4 -= n2.length; t4 = t4.next; ) {
              var i2 = t4.data, o2 = e4 > i2.length ? i2.length : e4;
              if (o2 === i2.length ? n2 += i2 : n2 += i2.slice(0, e4), 0 == (e4 -= o2)) {
                o2 === i2.length ? (++r5, t4.next ? this.head = t4.next : this.head = this.tail = null) : (this.head = t4, t4.data = i2.slice(o2));
                break;
              }
              ++r5;
            }
            return this.length -= r5, n2;
          } }, { key: "_getBuffer", value: function(e4) {
            var t4 = a.allocUnsafe(e4), r5 = this.head, n2 = 1;
            for (r5.data.copy(t4), e4 -= r5.data.length; r5 = r5.next; ) {
              var i2 = r5.data, o2 = e4 > i2.length ? i2.length : e4;
              if (i2.copy(t4, t4.length - e4, 0, o2), 0 == (e4 -= o2)) {
                o2 === i2.length ? (++n2, r5.next ? this.head = r5.next : this.head = this.tail = null) : (this.head = r5, r5.data = i2.slice(o2));
                break;
              }
              ++n2;
            }
            return this.length -= n2, t4;
          } }, { key: u, value: function(e4, t4) {
            return s(this, function(e5) {
              for (var t5 = 1; t5 < arguments.length; t5++) {
                var r5 = null != arguments[t5] ? arguments[t5] : {};
                t5 % 2 ? n(Object(r5), true).forEach(function(t6) {
                  i(e5, t6, r5[t6]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e5, Object.getOwnPropertyDescriptors(r5)) : n(Object(r5)).forEach(function(t6) {
                  Object.defineProperty(e5, t6, Object.getOwnPropertyDescriptor(r5, t6));
                });
              }
              return e5;
            }({}, t4, { depth: 0, customInspect: false }));
          } }], r4 && o(t3.prototype, r4), e3;
        }();
      }, 7572: (e2, t2, r3) => {
        "use strict";
        var n = r3(9142);
        function i(e3, t3) {
          a(e3, t3), o(e3);
        }
        function o(e3) {
          e3._writableState && !e3._writableState.emitClose || e3._readableState && !e3._readableState.emitClose || e3.emit("close");
        }
        function a(e3, t3) {
          e3.emit("error", t3);
        }
        e2.exports = { destroy: function(e3, t3) {
          var r4 = this, s = this._readableState && this._readableState.destroyed, u = this._writableState && this._writableState.destroyed;
          return s || u ? (t3 ? t3(e3) : e3 && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = true, n.nextTick(a, this, e3)) : n.nextTick(a, this, e3)), this) : (this._readableState && (this._readableState.destroyed = true), this._writableState && (this._writableState.destroyed = true), this._destroy(e3 || null, function(e4) {
            !t3 && e4 ? r4._writableState ? r4._writableState.errorEmitted ? n.nextTick(o, r4) : (r4._writableState.errorEmitted = true, n.nextTick(i, r4, e4)) : n.nextTick(i, r4, e4) : t3 ? (n.nextTick(o, r4), t3(e4)) : n.nextTick(o, r4);
          }), this);
        }, undestroy: function() {
          this._readableState && (this._readableState.destroyed = false, this._readableState.reading = false, this._readableState.ended = false, this._readableState.endEmitted = false), this._writableState && (this._writableState.destroyed = false, this._writableState.ended = false, this._writableState.ending = false, this._writableState.finalCalled = false, this._writableState.prefinished = false, this._writableState.finished = false, this._writableState.errorEmitted = false);
        }, errorOrDestroy: function(e3, t3) {
          var r4 = e3._readableState, n2 = e3._writableState;
          r4 && r4.autoDestroy || n2 && n2.autoDestroy ? e3.destroy(t3) : e3.emit("error", t3);
        } };
      }, 5831: (e2, t2, r3) => {
        "use strict";
        var n = r3(9024).q.ERR_STREAM_PREMATURE_CLOSE;
        function i() {
        }
        e2.exports = function e3(t3, r4, o) {
          if ("function" == typeof r4)
            return e3(t3, null, r4);
          r4 || (r4 = {}), o = function(e4) {
            var t4 = false;
            return function() {
              if (!t4) {
                t4 = true;
                for (var r5 = arguments.length, n2 = new Array(r5), i2 = 0; i2 < r5; i2++)
                  n2[i2] = arguments[i2];
                e4.apply(this, n2);
              }
            };
          }(o || i);
          var a = r4.readable || false !== r4.readable && t3.readable, s = r4.writable || false !== r4.writable && t3.writable, u = function() {
            t3.writable || f();
          }, c = t3._writableState && t3._writableState.finished, f = function() {
            s = false, c = true, a || o.call(t3);
          }, d = t3._readableState && t3._readableState.endEmitted, l = function() {
            a = false, d = true, s || o.call(t3);
          }, h = function(e4) {
            o.call(t3, e4);
          }, p = function() {
            var e4;
            return a && !d ? (t3._readableState && t3._readableState.ended || (e4 = new n()), o.call(t3, e4)) : s && !c ? (t3._writableState && t3._writableState.ended || (e4 = new n()), o.call(t3, e4)) : void 0;
          }, b = function() {
            t3.req.on("finish", f);
          };
          return function(e4) {
            return e4.setHeader && "function" == typeof e4.abort;
          }(t3) ? (t3.on("complete", f), t3.on("abort", p), t3.req ? b() : t3.on("request", b)) : s && !t3._writableState && (t3.on("end", u), t3.on("close", u)), t3.on("end", l), t3.on("finish", f), false !== r4.error && t3.on("error", h), t3.on("close", p), function() {
            t3.removeListener("complete", f), t3.removeListener("abort", p), t3.removeListener("request", b), t3.req && t3.req.removeListener("finish", f), t3.removeListener("end", u), t3.removeListener("close", u), t3.removeListener("finish", f), t3.removeListener("end", l), t3.removeListener("error", h), t3.removeListener("close", p);
          };
        };
      }, 6218: (e2) => {
        "use strict";
        e2.exports = function() {
          throw new Error("Readable.from is not available in the browser");
        };
      }, 384: (e2, t2, r3) => {
        "use strict";
        var n, i = r3(9024).q, o = i.ERR_MISSING_ARGS, a = i.ERR_STREAM_DESTROYED;
        function s(e3) {
          if (e3)
            throw e3;
        }
        function u(e3) {
          e3();
        }
        function c(e3, t3) {
          return e3.pipe(t3);
        }
        e2.exports = function() {
          for (var e3 = arguments.length, t3 = new Array(e3), i2 = 0; i2 < e3; i2++)
            t3[i2] = arguments[i2];
          var f, d = function(e4) {
            return e4.length ? "function" != typeof e4[e4.length - 1] ? s : e4.pop() : s;
          }(t3);
          if (Array.isArray(t3[0]) && (t3 = t3[0]), t3.length < 2)
            throw new o("streams");
          var l = t3.map(function(e4, i3) {
            var o2 = i3 < t3.length - 1;
            return function(e5, t4, i4, o3) {
              o3 = function(e6) {
                var t5 = false;
                return function() {
                  t5 || (t5 = true, e6.apply(void 0, arguments));
                };
              }(o3);
              var s2 = false;
              e5.on("close", function() {
                s2 = true;
              }), void 0 === n && (n = r3(5831)), n(e5, { readable: t4, writable: i4 }, function(e6) {
                if (e6)
                  return o3(e6);
                s2 = true, o3();
              });
              var u2 = false;
              return function(t5) {
                if (!s2 && !u2)
                  return u2 = true, function(e6) {
                    return e6.setHeader && "function" == typeof e6.abort;
                  }(e5) ? e5.abort() : "function" == typeof e5.destroy ? e5.destroy() : void o3(t5 || new a("pipe"));
              };
            }(e4, o2, i3 > 0, function(e5) {
              f || (f = e5), e5 && l.forEach(u), o2 || (l.forEach(u), d(f));
            });
          });
          return t3.reduce(c);
        };
      }, 6756: (e2, t2, r3) => {
        "use strict";
        var n = r3(9024).q.ERR_INVALID_OPT_VALUE;
        e2.exports = { getHighWaterMark: function(e3, t3, r4, i) {
          var o = function(e4, t4, r5) {
            return null != e4.highWaterMark ? e4.highWaterMark : t4 ? e4[r5] : null;
          }(t3, i, r4);
          if (null != o) {
            if (!isFinite(o) || Math.floor(o) !== o || o < 0)
              throw new n(i ? r4 : "highWaterMark", o);
            return Math.floor(o);
          }
          return e3.objectMode ? 16 : 16384;
        } };
      }, 7144: (e2, t2, r3) => {
        "use strict";
        e2.exports = r3(8291).EventEmitter;
      }, 6505: (e2, t2, r3) => {
        "use strict";
        (t2 = e2.exports = r3(6297)).Stream = t2, t2.Readable = t2, t2.Writable = r3(1471), t2.Duplex = r3(6884), t2.Transform = r3(9154), t2.PassThrough = r3(3582), t2.finished = r3(5831), t2.pipeline = r3(384);
      }, 6707: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(1736), o = r3(2353), a = new Array(16), s = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13], u = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11], c = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6], f = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11], d = [0, 1518500249, 1859775393, 2400959708, 2840853838], l = [1352829926, 1548603684, 1836072691, 2053994217, 0];
        function h() {
          o.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520;
        }
        function p(e3, t3) {
          return e3 << t3 | e3 >>> 32 - t3;
        }
        function b(e3, t3, r4, n2, i2, o2, a2, s2) {
          return p(e3 + (t3 ^ r4 ^ n2) + o2 + a2 | 0, s2) + i2 | 0;
        }
        function y(e3, t3, r4, n2, i2, o2, a2, s2) {
          return p(e3 + (t3 & r4 | ~t3 & n2) + o2 + a2 | 0, s2) + i2 | 0;
        }
        function m(e3, t3, r4, n2, i2, o2, a2, s2) {
          return p(e3 + ((t3 | ~r4) ^ n2) + o2 + a2 | 0, s2) + i2 | 0;
        }
        function v(e3, t3, r4, n2, i2, o2, a2, s2) {
          return p(e3 + (t3 & n2 | r4 & ~n2) + o2 + a2 | 0, s2) + i2 | 0;
        }
        function g(e3, t3, r4, n2, i2, o2, a2, s2) {
          return p(e3 + (t3 ^ (r4 | ~n2)) + o2 + a2 | 0, s2) + i2 | 0;
        }
        i(h, o), h.prototype._update = function() {
          for (var e3 = a, t3 = 0; t3 < 16; ++t3)
            e3[t3] = this._block.readInt32LE(4 * t3);
          for (var r4 = 0 | this._a, n2 = 0 | this._b, i2 = 0 | this._c, o2 = 0 | this._d, h2 = 0 | this._e, w = 0 | this._a, A = 0 | this._b, k = 0 | this._c, _ = 0 | this._d, S = 0 | this._e, E = 0; E < 80; E += 1) {
            var x, P;
            E < 16 ? (x = b(r4, n2, i2, o2, h2, e3[s[E]], d[0], c[E]), P = g(w, A, k, _, S, e3[u[E]], l[0], f[E])) : E < 32 ? (x = y(r4, n2, i2, o2, h2, e3[s[E]], d[1], c[E]), P = v(w, A, k, _, S, e3[u[E]], l[1], f[E])) : E < 48 ? (x = m(r4, n2, i2, o2, h2, e3[s[E]], d[2], c[E]), P = m(w, A, k, _, S, e3[u[E]], l[2], f[E])) : E < 64 ? (x = v(r4, n2, i2, o2, h2, e3[s[E]], d[3], c[E]), P = y(w, A, k, _, S, e3[u[E]], l[3], f[E])) : (x = g(r4, n2, i2, o2, h2, e3[s[E]], d[4], c[E]), P = b(w, A, k, _, S, e3[u[E]], l[4], f[E])), r4 = h2, h2 = o2, o2 = p(i2, 10), i2 = n2, n2 = x, w = S, S = _, _ = p(k, 10), k = A, A = P;
          }
          var O = this._b + i2 + _ | 0;
          this._b = this._c + o2 + S | 0, this._c = this._d + h2 + w | 0, this._d = this._e + r4 + A | 0, this._e = this._a + n2 + k | 0, this._a = O;
        }, h.prototype._digest = function() {
          this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
          var e3 = n.alloc ? n.alloc(20) : new n(20);
          return e3.writeInt32LE(this._a, 0), e3.writeInt32LE(this._b, 4), e3.writeInt32LE(this._c, 8), e3.writeInt32LE(this._d, 12), e3.writeInt32LE(this._e, 16), e3;
        }, e2.exports = h;
      }, 6905: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer;
        Object.defineProperty(t2, "__esModule", { value: true }), t2.getLength = t2.decode = t2.encode = void 0;
        var i, o = (i = r3(1734)) && i.__esModule ? i : { default: i };
        function a(e3, t3) {
          if ("0" === e3[0] && "0" === e3[1])
            throw new Error("invalid RLP: extra zeros");
          return parseInt(e3, t3);
        }
        function s(e3, t3) {
          if (e3 < 56)
            return n.from([e3 + t3]);
          var r4 = f(e3), i2 = f(t3 + 55 + r4.length / 2);
          return n.from(i2 + r4, "hex");
        }
        function u(e3) {
          var t3, r4, i2, o2, s2, c2 = [], f2 = e3[0];
          if (f2 <= 127)
            return { data: e3.slice(0, 1), remainder: e3.slice(1) };
          if (f2 <= 183) {
            if (t3 = f2 - 127, i2 = 128 === f2 ? n.from([]) : e3.slice(1, t3), 2 === t3 && i2[0] < 128)
              throw new Error("invalid rlp encoding: byte must be less 0x80");
            return { data: i2, remainder: e3.slice(t3) };
          }
          if (f2 <= 191) {
            if (r4 = f2 - 182, e3.length - 1 < r4)
              throw new Error("invalid RLP: not enough bytes for string length");
            if ((t3 = a(e3.slice(1, r4).toString("hex"), 16)) <= 55)
              throw new Error("invalid RLP: expected string length to be greater than 55");
            if ((i2 = e3.slice(r4, t3 + r4)).length < t3)
              throw new Error("invalid RLP: not enough bytes for string");
            return { data: i2, remainder: e3.slice(t3 + r4) };
          }
          if (f2 <= 247) {
            for (t3 = f2 - 191, o2 = e3.slice(1, t3); o2.length; )
              s2 = u(o2), c2.push(s2.data), o2 = s2.remainder;
            return { data: c2, remainder: e3.slice(t3) };
          }
          var d2 = (r4 = f2 - 246) + (t3 = a(e3.slice(1, r4).toString("hex"), 16));
          if (d2 > e3.length)
            throw new Error("invalid rlp: total length is larger than the data");
          if (0 === (o2 = e3.slice(r4, d2)).length)
            throw new Error("invalid rlp, List has a invalid length");
          for (; o2.length; )
            s2 = u(o2), c2.push(s2.data), o2 = s2.remainder;
          return { data: c2, remainder: e3.slice(d2) };
        }
        function c(e3) {
          return "0x" === e3.slice(0, 2);
        }
        function f(e3) {
          if (e3 < 0)
            throw new Error("Invalid integer as argument, must be unsigned!");
          var t3 = e3.toString(16);
          return t3.length % 2 ? "0" + t3 : t3;
        }
        function d(e3) {
          if (!n.isBuffer(e3)) {
            if ("string" == typeof e3)
              return c(e3) ? n.from((r4 = "string" != typeof (i2 = e3) ? i2 : c(i2) ? i2.slice(2) : i2).length % 2 ? "0" + r4 : r4, "hex") : n.from(e3);
            if ("number" == typeof e3 || "bigint" == typeof e3)
              return e3 ? (t3 = f(e3), n.from(t3, "hex")) : n.from([]);
            if (null == e3)
              return n.from([]);
            if (e3 instanceof Uint8Array)
              return n.from(e3);
            if (o.default.isBN(e3))
              return n.from(e3.toArray());
            throw new Error("invalid type");
          }
          var t3, r4, i2;
          return e3;
        }
        t2.encode = function e3(t3) {
          if (Array.isArray(t3)) {
            for (var r4 = [], i2 = 0; i2 < t3.length; i2++)
              r4.push(e3(t3[i2]));
            var o2 = n.concat(r4);
            return n.concat([s(o2.length, 192), o2]);
          }
          var a2 = d(t3);
          return 1 === a2.length && a2[0] < 128 ? a2 : n.concat([s(a2.length, 128), a2]);
        }, t2.decode = function(e3, t3) {
          if (void 0 === t3 && (t3 = false), !e3 || 0 === e3.length)
            return n.from([]);
          var r4 = u(d(e3));
          if (t3)
            return r4;
          if (0 !== r4.remainder.length)
            throw new Error("invalid remainder");
          return r4.data;
        }, t2.getLength = function(e3) {
          if (!e3 || 0 === e3.length)
            return n.from([]);
          var t3 = d(e3), r4 = t3[0];
          if (r4 <= 127)
            return t3.length;
          if (r4 <= 183)
            return r4 - 127;
          if (r4 <= 191)
            return r4 - 182;
          if (r4 <= 247)
            return r4 - 191;
          var i2 = r4 - 246;
          return i2 + a(t3.slice(1, i2).toString("hex"), 16);
        };
      }, 8850: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033), i = n.Buffer;
        function o(e3, t3) {
          for (var r4 in e3)
            t3[r4] = e3[r4];
        }
        function a(e3, t3, r4) {
          return i(e3, t3, r4);
        }
        i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? e2.exports = n : (o(n, t2), t2.Buffer = a), a.prototype = Object.create(i.prototype), o(i, a), a.from = function(e3, t3, r4) {
          if ("number" == typeof e3)
            throw new TypeError("Argument must not be a number");
          return i(e3, t3, r4);
        }, a.alloc = function(e3, t3, r4) {
          if ("number" != typeof e3)
            throw new TypeError("Argument must be a number");
          var n2 = i(e3);
          return void 0 !== t3 ? "string" == typeof r4 ? n2.fill(t3, r4) : n2.fill(t3) : n2.fill(0), n2;
        }, a.allocUnsafe = function(e3) {
          if ("number" != typeof e3)
            throw new TypeError("Argument must be a number");
          return i(e3);
        }, a.allocUnsafeSlow = function(e3) {
          if ("number" != typeof e3)
            throw new TypeError("Argument must be a number");
          return n.SlowBuffer(e3);
        };
      }, 1755: (e2, t2, r3) => {
        "use strict";
        var n, i = r3(9142), o = r3(8847)(r3(3355)), a = r3(9033), s = a.Buffer, u = {};
        for (n in a)
          a.hasOwnProperty(n) && "SlowBuffer" !== n && "Buffer" !== n && (u[n] = a[n]);
        var c = u.Buffer = {};
        for (n in s)
          s.hasOwnProperty(n) && "allocUnsafe" !== n && "allocUnsafeSlow" !== n && (c[n] = s[n]);
        if (u.Buffer.prototype = s.prototype, c.from && c.from !== Uint8Array.from || (c.from = function(e3, t3, r4) {
          if ("number" == typeof e3)
            throw new TypeError('The "value" argument must not be of type number. Received type ' + (0, o.default)(e3));
          if (e3 && void 0 === e3.length)
            throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + (0, o.default)(e3));
          return s(e3, t3, r4);
        }), c.alloc || (c.alloc = function(e3, t3, r4) {
          if ("number" != typeof e3)
            throw new TypeError('The "size" argument must be of type number. Received type ' + (0, o.default)(e3));
          if (e3 < 0 || e3 >= 2 * (1 << 30))
            throw new RangeError('The value "' + e3 + '" is invalid for option "size"');
          var n2 = s(e3);
          return t3 && 0 !== t3.length ? "string" == typeof r4 ? n2.fill(t3, r4) : n2.fill(t3) : n2.fill(0), n2;
        }), !u.kStringMaxLength)
          try {
            u.kStringMaxLength = i.binding("buffer").kStringMaxLength;
          } catch (e3) {
          }
        u.constants || (u.constants = { MAX_LENGTH: u.kMaxLength }, u.kStringMaxLength && (u.constants.MAX_STRING_LENGTH = u.kStringMaxLength)), e2.exports = u;
      }, 7799: (e2) => {
        "use strict";
        !function(t2) {
          var r3 = 2147483647;
          function n(e3) {
            var t3 = new Uint32Array([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]), r4 = 1779033703, n2 = 3144134277, i2 = 1013904242, o2 = 2773480762, a2 = 1359893119, s2 = 2600822924, u2 = 528734635, c2 = 1541459225, f2 = new Uint32Array(64);
            function d2(e4) {
              for (var d3 = 0, l3 = e4.length; l3 >= 64; ) {
                var h3 = r4, p2 = n2, b2 = i2, y2 = o2, m2 = a2, v = s2, g = u2, w = c2, A = void 0, k = void 0, _ = void 0, S = void 0, E = void 0;
                for (k = 0; k < 16; k++)
                  _ = d3 + 4 * k, f2[k] = (255 & e4[_]) << 24 | (255 & e4[_ + 1]) << 16 | (255 & e4[_ + 2]) << 8 | 255 & e4[_ + 3];
                for (k = 16; k < 64; k++)
                  S = ((A = f2[k - 2]) >>> 17 | A << 15) ^ (A >>> 19 | A << 13) ^ A >>> 10, E = ((A = f2[k - 15]) >>> 7 | A << 25) ^ (A >>> 18 | A << 14) ^ A >>> 3, f2[k] = (S + f2[k - 7] | 0) + (E + f2[k - 16] | 0) | 0;
                for (k = 0; k < 64; k++)
                  S = (((m2 >>> 6 | m2 << 26) ^ (m2 >>> 11 | m2 << 21) ^ (m2 >>> 25 | m2 << 7)) + (m2 & v ^ ~m2 & g) | 0) + (w + (t3[k] + f2[k] | 0) | 0) | 0, E = ((h3 >>> 2 | h3 << 30) ^ (h3 >>> 13 | h3 << 19) ^ (h3 >>> 22 | h3 << 10)) + (h3 & p2 ^ h3 & b2 ^ p2 & b2) | 0, w = g, g = v, v = m2, m2 = y2 + S | 0, y2 = b2, b2 = p2, p2 = h3, h3 = S + E | 0;
                r4 = r4 + h3 | 0, n2 = n2 + p2 | 0, i2 = i2 + b2 | 0, o2 = o2 + y2 | 0, a2 = a2 + m2 | 0, s2 = s2 + v | 0, u2 = u2 + g | 0, c2 = c2 + w | 0, d3 += 64, l3 -= 64;
              }
            }
            d2(e3);
            var l2, h2 = e3.length % 64, p = e3.length / 536870912 | 0, b = e3.length << 3, y = h2 < 56 ? 56 : 120, m = e3.slice(e3.length - h2, e3.length);
            for (m.push(128), l2 = h2 + 1; l2 < y; l2++)
              m.push(0);
            return m.push(p >>> 24 & 255), m.push(p >>> 16 & 255), m.push(p >>> 8 & 255), m.push(p >>> 0 & 255), m.push(b >>> 24 & 255), m.push(b >>> 16 & 255), m.push(b >>> 8 & 255), m.push(b >>> 0 & 255), d2(m), [r4 >>> 24 & 255, r4 >>> 16 & 255, r4 >>> 8 & 255, r4 >>> 0 & 255, n2 >>> 24 & 255, n2 >>> 16 & 255, n2 >>> 8 & 255, n2 >>> 0 & 255, i2 >>> 24 & 255, i2 >>> 16 & 255, i2 >>> 8 & 255, i2 >>> 0 & 255, o2 >>> 24 & 255, o2 >>> 16 & 255, o2 >>> 8 & 255, o2 >>> 0 & 255, a2 >>> 24 & 255, a2 >>> 16 & 255, a2 >>> 8 & 255, a2 >>> 0 & 255, s2 >>> 24 & 255, s2 >>> 16 & 255, s2 >>> 8 & 255, s2 >>> 0 & 255, u2 >>> 24 & 255, u2 >>> 16 & 255, u2 >>> 8 & 255, u2 >>> 0 & 255, c2 >>> 24 & 255, c2 >>> 16 & 255, c2 >>> 8 & 255, c2 >>> 0 & 255];
          }
          function i(e3, t3, r4) {
            e3 = e3.length <= 64 ? e3 : n(e3);
            var i2, o2 = 64 + t3.length + 4, a2 = new Array(o2), s2 = new Array(64), u2 = [];
            for (i2 = 0; i2 < 64; i2++)
              a2[i2] = 54;
            for (i2 = 0; i2 < e3.length; i2++)
              a2[i2] ^= e3[i2];
            for (i2 = 0; i2 < t3.length; i2++)
              a2[64 + i2] = t3[i2];
            for (i2 = o2 - 4; i2 < o2; i2++)
              a2[i2] = 0;
            for (i2 = 0; i2 < 64; i2++)
              s2[i2] = 92;
            for (i2 = 0; i2 < e3.length; i2++)
              s2[i2] ^= e3[i2];
            function c2() {
              for (var e4 = o2 - 1; e4 >= o2 - 4; e4--) {
                if (a2[e4]++, a2[e4] <= 255)
                  return;
                a2[e4] = 0;
              }
            }
            for (; r4 >= 32; )
              c2(), u2 = u2.concat(n(s2.concat(n(a2)))), r4 -= 32;
            return r4 > 0 && (c2(), u2 = u2.concat(n(s2.concat(n(a2))).slice(0, r4))), u2;
          }
          function o(e3, t3, r4, n2, i2) {
            var o2;
            for (c(e3, 16 * (2 * r4 - 1), i2, 0, 16), o2 = 0; o2 < 2 * r4; o2++)
              u(e3, 16 * o2, i2, 16), s(i2, n2), c(i2, 0, e3, t3 + 16 * o2, 16);
            for (o2 = 0; o2 < r4; o2++)
              c(e3, t3 + 2 * o2 * 16, e3, 16 * o2, 16);
            for (o2 = 0; o2 < r4; o2++)
              c(e3, t3 + 16 * (2 * o2 + 1), e3, 16 * (o2 + r4), 16);
          }
          function a(e3, t3) {
            return e3 << t3 | e3 >>> 32 - t3;
          }
          function s(e3, t3) {
            c(e3, 0, t3, 0, 16);
            for (var r4 = 8; r4 > 0; r4 -= 2)
              t3[4] ^= a(t3[0] + t3[12], 7), t3[8] ^= a(t3[4] + t3[0], 9), t3[12] ^= a(t3[8] + t3[4], 13), t3[0] ^= a(t3[12] + t3[8], 18), t3[9] ^= a(t3[5] + t3[1], 7), t3[13] ^= a(t3[9] + t3[5], 9), t3[1] ^= a(t3[13] + t3[9], 13), t3[5] ^= a(t3[1] + t3[13], 18), t3[14] ^= a(t3[10] + t3[6], 7), t3[2] ^= a(t3[14] + t3[10], 9), t3[6] ^= a(t3[2] + t3[14], 13), t3[10] ^= a(t3[6] + t3[2], 18), t3[3] ^= a(t3[15] + t3[11], 7), t3[7] ^= a(t3[3] + t3[15], 9), t3[11] ^= a(t3[7] + t3[3], 13), t3[15] ^= a(t3[11] + t3[7], 18), t3[1] ^= a(t3[0] + t3[3], 7), t3[2] ^= a(t3[1] + t3[0], 9), t3[3] ^= a(t3[2] + t3[1], 13), t3[0] ^= a(t3[3] + t3[2], 18), t3[6] ^= a(t3[5] + t3[4], 7), t3[7] ^= a(t3[6] + t3[5], 9), t3[4] ^= a(t3[7] + t3[6], 13), t3[5] ^= a(t3[4] + t3[7], 18), t3[11] ^= a(t3[10] + t3[9], 7), t3[8] ^= a(t3[11] + t3[10], 9), t3[9] ^= a(t3[8] + t3[11], 13), t3[10] ^= a(t3[9] + t3[8], 18), t3[12] ^= a(t3[15] + t3[14], 7), t3[13] ^= a(t3[12] + t3[15], 9), t3[14] ^= a(t3[13] + t3[12], 13), t3[15] ^= a(t3[14] + t3[13], 18);
            for (var n2 = 0; n2 < 16; ++n2)
              e3[n2] += t3[n2];
          }
          function u(e3, t3, r4, n2) {
            for (var i2 = 0; i2 < n2; i2++)
              r4[i2] ^= e3[t3 + i2];
          }
          function c(e3, t3, r4, n2, i2) {
            for (; i2--; )
              r4[n2++] = e3[t3++];
          }
          function f(e3) {
            if (!e3 || "number" != typeof e3.length)
              return false;
            for (var t3 = 0; t3 < e3.length; t3++) {
              var r4 = e3[t3];
              if ("number" != typeof r4 || r4 % 1 || r4 < 0 || r4 >= 256)
                return false;
            }
            return true;
          }
          function d(e3, t3) {
            if ("number" != typeof e3 || e3 % 1)
              throw new Error("invalid " + t3);
            return e3;
          }
          function l(e3, t3, n2, a2, s2, l2, h2) {
            if (n2 = d(n2, "N"), a2 = d(a2, "r"), s2 = d(s2, "p"), l2 = d(l2, "dkLen"), 0 === n2 || 0 != (n2 & n2 - 1))
              throw new Error("N must be power of 2");
            if (n2 > r3 / 128 / a2)
              throw new Error("N too large");
            if (a2 > r3 / 128 / s2)
              throw new Error("r too large");
            if (!f(e3))
              throw new Error("password must be an array or buffer");
            if (e3 = Array.prototype.slice.call(e3), !f(t3))
              throw new Error("salt must be an array or buffer");
            t3 = Array.prototype.slice.call(t3);
            for (var p = i(e3, t3, 128 * s2 * a2), b = new Uint32Array(32 * s2 * a2), y = 0; y < b.length; y++) {
              var m = 4 * y;
              b[y] = (255 & p[m + 3]) << 24 | (255 & p[m + 2]) << 16 | (255 & p[m + 1]) << 8 | (255 & p[m + 0]) << 0;
            }
            var v, g, w = new Uint32Array(64 * a2), A = new Uint32Array(32 * a2 * n2), k = 32 * a2, _ = new Uint32Array(16), S = new Uint32Array(16), E = s2 * n2 * 2, x = 0, P = null, O = false, B = 0, T = 0, C = h2 ? parseInt(1e3 / a2) : 4294967295, I = "undefined" != typeof setImmediate ? setImmediate : setTimeout, M = function t4() {
              if (O)
                return h2(new Error("cancelled"), x / E);
              var r4;
              switch (B) {
                case 0:
                  c(b, g = 32 * T * a2, w, 0, k), B = 1, v = 0;
                case 1:
                  (r4 = n2 - v) > C && (r4 = C);
                  for (var f2 = 0; f2 < r4; f2++)
                    c(w, 0, A, (v + f2) * k, k), o(w, k, a2, _, S);
                  if (v += r4, x += r4, h2) {
                    var d2 = parseInt(1e3 * x / E);
                    if (d2 !== P) {
                      if (O = h2(null, x / E))
                        break;
                      P = d2;
                    }
                  }
                  if (v < n2)
                    break;
                  v = 0, B = 2;
                case 2:
                  (r4 = n2 - v) > C && (r4 = C);
                  for (var y2 = 0; y2 < r4; y2++) {
                    var m2 = w[16 * (2 * a2 - 1)] & n2 - 1;
                    u(A, m2 * k, w, k), o(w, k, a2, _, S);
                  }
                  if (v += r4, x += r4, h2) {
                    var M2 = parseInt(1e3 * x / E);
                    if (M2 !== P) {
                      if (O = h2(null, x / E))
                        break;
                      P = M2;
                    }
                  }
                  if (v < n2)
                    break;
                  if (c(w, 0, b, g, k), ++T < s2) {
                    B = 0;
                    break;
                  }
                  p = [];
                  for (var U2 = 0; U2 < b.length; U2++)
                    p.push(b[U2] >> 0 & 255), p.push(b[U2] >> 8 & 255), p.push(b[U2] >> 16 & 255), p.push(b[U2] >> 24 & 255);
                  var R = i(e3, p, l2);
                  return h2 && h2(null, 1, R), R;
              }
              h2 && I(t4);
            };
            if (!h2)
              for (; ; ) {
                var U = M();
                if (null != U)
                  return U;
              }
            M();
          }
          var h = { scrypt: function(e3, t3, r4, n2, i2, o2, a2) {
            return new Promise(function(s2, u2) {
              var c2 = 0;
              a2 && a2(0), l(e3, t3, r4, n2, i2, o2, function(e4, t4, r5) {
                if (e4)
                  u2(e4);
                else if (r5)
                  a2 && 1 !== c2 && a2(1), s2(new Uint8Array(r5));
                else if (a2 && t4 !== c2)
                  return c2 = t4, a2(t4);
              });
            });
          }, syncScrypt: function(e3, t3, r4, n2, i2, o2) {
            return new Uint8Array(l(e3, t3, r4, n2, i2, o2));
          } };
          e2.exports = h;
        }();
      }, 7902: (e2, t2, r3) => {
        "use strict";
        e2.exports = r3(6922)(r3(8123));
      }, 8123: (e2, t2, r3) => {
        "use strict";
        var n = new (0, r3(6597).ec)("secp256k1"), i = n.curve, o = i.n.constructor;
        function a(e3) {
          var t3 = e3[0];
          switch (t3) {
            case 2:
            case 3:
              return 33 !== e3.length ? null : function(e4, t4) {
                var r4 = new o(t4);
                if (r4.cmp(i.p) >= 0)
                  return null;
                var a2 = (r4 = r4.toRed(i.red)).redSqr().redIMul(r4).redIAdd(i.b).redSqrt();
                return 3 === e4 !== a2.isOdd() && (a2 = a2.redNeg()), n.keyPair({ pub: { x: r4, y: a2 } });
              }(t3, e3.subarray(1, 33));
            case 4:
            case 6:
            case 7:
              return 65 !== e3.length ? null : function(e4, t4, r4) {
                var a2 = new o(t4), s2 = new o(r4);
                if (a2.cmp(i.p) >= 0 || s2.cmp(i.p) >= 0)
                  return null;
                if (a2 = a2.toRed(i.red), s2 = s2.toRed(i.red), (6 === e4 || 7 === e4) && s2.isOdd() !== (7 === e4))
                  return null;
                var u = a2.redSqr().redIMul(a2);
                return s2.redSqr().redISub(u.redIAdd(i.b)).isZero() ? n.keyPair({ pub: { x: a2, y: s2 } }) : null;
              }(t3, e3.subarray(1, 33), e3.subarray(33, 65));
            default:
              return null;
          }
        }
        function s(e3, t3) {
          for (var r4 = t3.encode(null, 33 === e3.length), n2 = 0; n2 < e3.length; ++n2)
            e3[n2] = r4[n2];
        }
        e2.exports = { contextRandomize: function() {
          return 0;
        }, privateKeyVerify: function(e3) {
          var t3 = new o(e3);
          return t3.cmp(i.n) < 0 && !t3.isZero() ? 0 : 1;
        }, privateKeyNegate: function(e3) {
          var t3 = new o(e3), r4 = i.n.sub(t3).umod(i.n).toArrayLike(Uint8Array, "be", 32);
          return e3.set(r4), 0;
        }, privateKeyTweakAdd: function(e3, t3) {
          var r4 = new o(t3);
          if (r4.cmp(i.n) >= 0)
            return 1;
          if (r4.iadd(new o(e3)), r4.cmp(i.n) >= 0 && r4.isub(i.n), r4.isZero())
            return 1;
          var n2 = r4.toArrayLike(Uint8Array, "be", 32);
          return e3.set(n2), 0;
        }, privateKeyTweakMul: function(e3, t3) {
          var r4 = new o(t3);
          if (r4.cmp(i.n) >= 0 || r4.isZero())
            return 1;
          r4.imul(new o(e3)), r4.cmp(i.n) >= 0 && (r4 = r4.umod(i.n));
          var n2 = r4.toArrayLike(Uint8Array, "be", 32);
          return e3.set(n2), 0;
        }, publicKeyVerify: function(e3) {
          return null === a(e3) ? 1 : 0;
        }, publicKeyCreate: function(e3, t3) {
          var r4 = new o(t3);
          return r4.cmp(i.n) >= 0 || r4.isZero() ? 1 : (s(e3, n.keyFromPrivate(t3).getPublic()), 0);
        }, publicKeyConvert: function(e3, t3) {
          var r4 = a(t3);
          return null === r4 ? 1 : (s(e3, r4.getPublic()), 0);
        }, publicKeyNegate: function(e3, t3) {
          var r4 = a(t3);
          if (null === r4)
            return 1;
          var n2 = r4.getPublic();
          return n2.y = n2.y.redNeg(), s(e3, n2), 0;
        }, publicKeyCombine: function(e3, t3) {
          for (var r4 = new Array(t3.length), n2 = 0; n2 < t3.length; ++n2)
            if (r4[n2] = a(t3[n2]), null === r4[n2])
              return 1;
          for (var i2 = r4[0].getPublic(), o2 = 1; o2 < r4.length; ++o2)
            i2 = i2.add(r4[o2].pub);
          return i2.isInfinity() ? 2 : (s(e3, i2), 0);
        }, publicKeyTweakAdd: function(e3, t3, r4) {
          var n2 = a(t3);
          if (null === n2)
            return 1;
          if ((r4 = new o(r4)).cmp(i.n) >= 0)
            return 2;
          var u = n2.getPublic().add(i.g.mul(r4));
          return u.isInfinity() ? 2 : (s(e3, u), 0);
        }, publicKeyTweakMul: function(e3, t3, r4) {
          var n2 = a(t3);
          return null === n2 ? 1 : (r4 = new o(r4)).cmp(i.n) >= 0 || r4.isZero() ? 2 : (s(e3, n2.getPublic().mul(r4)), 0);
        }, signatureNormalize: function(e3) {
          var t3 = new o(e3.subarray(0, 32)), r4 = new o(e3.subarray(32, 64));
          return t3.cmp(i.n) >= 0 || r4.cmp(i.n) >= 0 ? 1 : (1 === r4.cmp(n.nh) && e3.set(i.n.sub(r4).toArrayLike(Uint8Array, "be", 32), 32), 0);
        }, signatureExport: function(e3, t3) {
          var r4 = t3.subarray(0, 32), n2 = t3.subarray(32, 64);
          if (new o(r4).cmp(i.n) >= 0)
            return 1;
          if (new o(n2).cmp(i.n) >= 0)
            return 1;
          var a2 = e3.output, s2 = a2.subarray(4, 37);
          s2[0] = 0, s2.set(r4, 1);
          for (var u = 33, c = 0; u > 1 && 0 === s2[c] && !(128 & s2[c + 1]); --u, ++c)
            ;
          if (128 & (s2 = s2.subarray(c))[0])
            return 1;
          if (u > 1 && 0 === s2[0] && !(128 & s2[1]))
            return 1;
          var f = a2.subarray(39, 72);
          f[0] = 0, f.set(n2, 1);
          for (var d = 33, l = 0; d > 1 && 0 === f[l] && !(128 & f[l + 1]); --d, ++l)
            ;
          return 128 & (f = f.subarray(l))[0] || d > 1 && 0 === f[0] && !(128 & f[1]) ? 1 : (e3.outputlen = 6 + u + d, a2[0] = 48, a2[1] = e3.outputlen - 2, a2[2] = 2, a2[3] = s2.length, a2.set(s2, 4), a2[4 + u] = 2, a2[5 + u] = f.length, a2.set(f, 6 + u), 0);
        }, signatureImport: function(e3, t3) {
          if (t3.length < 8)
            return 1;
          if (t3.length > 72)
            return 1;
          if (48 !== t3[0])
            return 1;
          if (t3[1] !== t3.length - 2)
            return 1;
          if (2 !== t3[2])
            return 1;
          var r4 = t3[3];
          if (0 === r4)
            return 1;
          if (5 + r4 >= t3.length)
            return 1;
          if (2 !== t3[4 + r4])
            return 1;
          var n2 = t3[5 + r4];
          if (0 === n2)
            return 1;
          if (6 + r4 + n2 !== t3.length)
            return 1;
          if (128 & t3[4])
            return 1;
          if (r4 > 1 && 0 === t3[4] && !(128 & t3[5]))
            return 1;
          if (128 & t3[r4 + 6])
            return 1;
          if (n2 > 1 && 0 === t3[r4 + 6] && !(128 & t3[r4 + 7]))
            return 1;
          var a2 = t3.subarray(4, 4 + r4);
          if (33 === a2.length && 0 === a2[0] && (a2 = a2.subarray(1)), a2.length > 32)
            return 1;
          var s2 = t3.subarray(6 + r4);
          if (33 === s2.length && 0 === s2[0] && (s2 = s2.slice(1)), s2.length > 32)
            throw new Error("S length is too long");
          var u = new o(a2);
          u.cmp(i.n) >= 0 && (u = new o(0));
          var c = new o(t3.subarray(6 + r4));
          return c.cmp(i.n) >= 0 && (c = new o(0)), e3.set(u.toArrayLike(Uint8Array, "be", 32), 0), e3.set(c.toArrayLike(Uint8Array, "be", 32), 32), 0;
        }, ecdsaSign: function(e3, t3, r4, a2, s2) {
          if (s2) {
            var u = s2;
            s2 = function(e4) {
              var n2 = u(t3, r4, null, a2, e4);
              if (!(n2 instanceof Uint8Array && 32 === n2.length))
                throw new Error("This is the way");
              return new o(n2);
            };
          }
          var c, f = new o(r4);
          if (f.cmp(i.n) >= 0 || f.isZero())
            return 1;
          try {
            c = n.sign(t3, r4, { canonical: true, k: s2, pers: a2 });
          } catch (e4) {
            return 1;
          }
          return e3.signature.set(c.r.toArrayLike(Uint8Array, "be", 32), 0), e3.signature.set(c.s.toArrayLike(Uint8Array, "be", 32), 32), e3.recid = c.recoveryParam, 0;
        }, ecdsaVerify: function(e3, t3, r4) {
          var s2 = { r: e3.subarray(0, 32), s: e3.subarray(32, 64) }, u = new o(s2.r), c = new o(s2.s);
          if (u.cmp(i.n) >= 0 || c.cmp(i.n) >= 0)
            return 1;
          if (1 === c.cmp(n.nh) || u.isZero() || c.isZero())
            return 3;
          var f = a(r4);
          if (null === f)
            return 2;
          var d = f.getPublic();
          return n.verify(t3, s2, d) ? 0 : 3;
        }, ecdsaRecover: function(e3, t3, r4, a2) {
          var u, c = { r: t3.slice(0, 32), s: t3.slice(32, 64) }, f = new o(c.r), d = new o(c.s);
          if (f.cmp(i.n) >= 0 || d.cmp(i.n) >= 0)
            return 1;
          if (f.isZero() || d.isZero())
            return 2;
          try {
            u = n.recoverPubKey(a2, c, r4);
          } catch (e4) {
            return 2;
          }
          return s(e3, u), 0;
        }, ecdh: function(e3, t3, r4, s2, u, c, f) {
          var d = a(t3);
          if (null === d)
            return 1;
          var l = new o(r4);
          if (l.cmp(i.n) >= 0 || l.isZero())
            return 2;
          var h = d.getPublic().mul(l);
          if (void 0 === u)
            for (var p = h.encode(null, true), b = n.hash().update(p).digest(), y = 0; y < 32; ++y)
              e3[y] = b[y];
          else {
            c || (c = new Uint8Array(32));
            for (var m = h.getX().toArray("be", 32), v = 0; v < 32; ++v)
              c[v] = m[v];
            f || (f = new Uint8Array(32));
            for (var g = h.getY().toArray("be", 32), w = 0; w < 32; ++w)
              f[w] = g[w];
            var A = u(c, f, s2);
            if (!(A instanceof Uint8Array && A.length === e3.length))
              return 2;
            e3.set(A);
          }
          return 0;
        } };
      }, 6922: (e2) => {
        "use strict";
        function t2(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r4 = 0, n2 = new Array(t3); r4 < t3; r4++)
            n2[r4] = e3[r4];
          return n2;
        }
        var r3 = "Impossible case. Please create issue.", n = "The tweak was out of range or the resulted private key is invalid", i = "The tweak was out of range or equal to zero", o = "Public Key could not be parsed", a = "Public Key serialization error", s = "Signature could not be parsed";
        function u(e3, t3) {
          if (!e3)
            throw new Error(t3);
        }
        function c(e3, t3, r4) {
          if (u(t3 instanceof Uint8Array, "Expected ".concat(e3, " to be an Uint8Array")), void 0 !== r4)
            if (Array.isArray(r4)) {
              var n2 = r4.join(", "), i2 = "Expected ".concat(e3, " to be an Uint8Array with length [").concat(n2, "]");
              u(r4.includes(t3.length), i2);
            } else {
              var o2 = "Expected ".concat(e3, " to be an Uint8Array with length ").concat(r4);
              u(t3.length === r4, o2);
            }
        }
        function f(e3) {
          u("Boolean" === l(e3), "Expected compressed to be a Boolean");
        }
        function d() {
          var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : function(e4) {
            return new Uint8Array(e4);
          }, t3 = arguments.length > 1 ? arguments[1] : void 0;
          return "function" == typeof e3 && (e3 = e3(t3)), c("output", e3, t3), e3;
        }
        function l(e3) {
          return Object.prototype.toString.call(e3).slice(8, -1);
        }
        e2.exports = function(e3) {
          return { contextRandomize: function(t3) {
            if (u(null === t3 || t3 instanceof Uint8Array, "Expected seed to be an Uint8Array or null"), null !== t3 && c("seed", t3, 32), 1 === e3.contextRandomize(t3))
              throw new Error("Unknow error on context randomization");
          }, privateKeyVerify: function(t3) {
            return c("private key", t3, 32), 0 === e3.privateKeyVerify(t3);
          }, privateKeyNegate: function(t3) {
            switch (c("private key", t3, 32), e3.privateKeyNegate(t3)) {
              case 0:
                return t3;
              case 1:
                throw new Error(r3);
            }
          }, privateKeyTweakAdd: function(t3, r4) {
            switch (c("private key", t3, 32), c("tweak", r4, 32), e3.privateKeyTweakAdd(t3, r4)) {
              case 0:
                return t3;
              case 1:
                throw new Error(n);
            }
          }, privateKeyTweakMul: function(t3, r4) {
            switch (c("private key", t3, 32), c("tweak", r4, 32), e3.privateKeyTweakMul(t3, r4)) {
              case 0:
                return t3;
              case 1:
                throw new Error(i);
            }
          }, publicKeyVerify: function(t3) {
            return c("public key", t3, [33, 65]), 0 === e3.publicKeyVerify(t3);
          }, publicKeyCreate: function(t3) {
            var r4 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], n2 = arguments.length > 2 ? arguments[2] : void 0;
            switch (c("private key", t3, 32), f(r4), n2 = d(n2, r4 ? 33 : 65), e3.publicKeyCreate(n2, t3)) {
              case 0:
                return n2;
              case 1:
                throw new Error("Private Key is invalid");
              case 2:
                throw new Error(a);
            }
          }, publicKeyConvert: function(t3) {
            var r4 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], n2 = arguments.length > 2 ? arguments[2] : void 0;
            switch (c("public key", t3, [33, 65]), f(r4), n2 = d(n2, r4 ? 33 : 65), e3.publicKeyConvert(n2, t3)) {
              case 0:
                return n2;
              case 1:
                throw new Error(o);
              case 2:
                throw new Error(a);
            }
          }, publicKeyNegate: function(t3) {
            var n2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = arguments.length > 2 ? arguments[2] : void 0;
            switch (c("public key", t3, [33, 65]), f(n2), i2 = d(i2, n2 ? 33 : 65), e3.publicKeyNegate(i2, t3)) {
              case 0:
                return i2;
              case 1:
                throw new Error(o);
              case 2:
                throw new Error(r3);
              case 3:
                throw new Error(a);
            }
          }, publicKeyCombine: function(r4) {
            var n2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = arguments.length > 2 ? arguments[2] : void 0;
            u(Array.isArray(r4), "Expected public keys to be an Array"), u(r4.length > 0, "Expected public keys array will have more than zero items");
            var s2, l2 = function(e4, r5) {
              var n3 = "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
              if (!n3) {
                if (Array.isArray(e4) || (n3 = function(e5, r6) {
                  if (e5) {
                    if ("string" == typeof e5)
                      return t2(e5, r6);
                    var n4 = Object.prototype.toString.call(e5).slice(8, -1);
                    return "Object" === n4 && e5.constructor && (n4 = e5.constructor.name), "Map" === n4 || "Set" === n4 ? Array.from(e5) : "Arguments" === n4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n4) ? t2(e5, r6) : void 0;
                  }
                }(e4)) || r5 && e4 && "number" == typeof e4.length) {
                  n3 && (e4 = n3);
                  var i3 = 0, o2 = function() {
                  };
                  return { s: o2, n: function() {
                    return i3 >= e4.length ? { done: true } : { done: false, value: e4[i3++] };
                  }, e: function(e5) {
                    throw e5;
                  }, f: o2 };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var a2, s3 = true, u2 = false;
              return { s: function() {
                n3 = n3.call(e4);
              }, n: function() {
                var e5 = n3.next();
                return s3 = e5.done, e5;
              }, e: function(e5) {
                u2 = true, a2 = e5;
              }, f: function() {
                try {
                  s3 || null == n3.return || n3.return();
                } finally {
                  if (u2)
                    throw a2;
                }
              } };
            }(r4);
            try {
              for (l2.s(); !(s2 = l2.n()).done; )
                c("public key", s2.value, [33, 65]);
            } catch (e4) {
              l2.e(e4);
            } finally {
              l2.f();
            }
            switch (f(n2), i2 = d(i2, n2 ? 33 : 65), e3.publicKeyCombine(i2, r4)) {
              case 0:
                return i2;
              case 1:
                throw new Error(o);
              case 2:
                throw new Error("The sum of the public keys is not valid");
              case 3:
                throw new Error(a);
            }
          }, publicKeyTweakAdd: function(t3, r4) {
            var i2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a2 = arguments.length > 3 ? arguments[3] : void 0;
            switch (c("public key", t3, [33, 65]), c("tweak", r4, 32), f(i2), a2 = d(a2, i2 ? 33 : 65), e3.publicKeyTweakAdd(a2, t3, r4)) {
              case 0:
                return a2;
              case 1:
                throw new Error(o);
              case 2:
                throw new Error(n);
            }
          }, publicKeyTweakMul: function(t3, r4) {
            var n2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], a2 = arguments.length > 3 ? arguments[3] : void 0;
            switch (c("public key", t3, [33, 65]), c("tweak", r4, 32), f(n2), a2 = d(a2, n2 ? 33 : 65), e3.publicKeyTweakMul(a2, t3, r4)) {
              case 0:
                return a2;
              case 1:
                throw new Error(o);
              case 2:
                throw new Error(i);
            }
          }, signatureNormalize: function(t3) {
            switch (c("signature", t3, 64), e3.signatureNormalize(t3)) {
              case 0:
                return t3;
              case 1:
                throw new Error(s);
            }
          }, signatureExport: function(t3, n2) {
            c("signature", t3, 64);
            var i2 = { output: n2 = d(n2, 72), outputlen: 72 };
            switch (e3.signatureExport(i2, t3)) {
              case 0:
                return n2.slice(0, i2.outputlen);
              case 1:
                throw new Error(s);
              case 2:
                throw new Error(r3);
            }
          }, signatureImport: function(t3, n2) {
            switch (c("signature", t3), n2 = d(n2, 64), e3.signatureImport(n2, t3)) {
              case 0:
                return n2;
              case 1:
                throw new Error(s);
              case 2:
                throw new Error(r3);
            }
          }, ecdsaSign: function(t3, n2) {
            var i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, o2 = arguments.length > 3 ? arguments[3] : void 0;
            c("message", t3, 32), c("private key", n2, 32), u("Object" === l(i2), "Expected options to be an Object"), void 0 !== i2.data && c("options.data", i2.data), void 0 !== i2.noncefn && u("Function" === l(i2.noncefn), "Expected options.noncefn to be a Function");
            var a2 = { signature: o2 = d(o2, 64), recid: null };
            switch (e3.ecdsaSign(a2, t3, n2, i2.data, i2.noncefn)) {
              case 0:
                return a2;
              case 1:
                throw new Error("The nonce generation function failed, or the private key was invalid");
              case 2:
                throw new Error(r3);
            }
          }, ecdsaVerify: function(t3, r4, n2) {
            switch (c("signature", t3, 64), c("message", r4, 32), c("public key", n2, [33, 65]), e3.ecdsaVerify(t3, r4, n2)) {
              case 0:
                return true;
              case 3:
                return false;
              case 1:
                throw new Error(s);
              case 2:
                throw new Error(o);
            }
          }, ecdsaRecover: function(t3, n2, i2) {
            var o2 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3], a2 = arguments.length > 4 ? arguments[4] : void 0;
            switch (c("signature", t3, 64), u("Number" === l(n2) && n2 >= 0 && n2 <= 3, "Expected recovery id to be a Number within interval [0, 3]"), c("message", i2, 32), f(o2), a2 = d(a2, o2 ? 33 : 65), e3.ecdsaRecover(a2, t3, n2, i2)) {
              case 0:
                return a2;
              case 1:
                throw new Error(s);
              case 2:
                throw new Error("Public key could not be recover");
              case 3:
                throw new Error(r3);
            }
          }, ecdh: function(t3, r4) {
            var n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, i2 = arguments.length > 3 ? arguments[3] : void 0;
            switch (c("public key", t3, [33, 65]), c("private key", r4, 32), u("Object" === l(n2), "Expected options to be an Object"), void 0 !== n2.data && c("options.data", n2.data), void 0 !== n2.hashfn ? (u("Function" === l(n2.hashfn), "Expected options.hashfn to be a Function"), void 0 !== n2.xbuf && c("options.xbuf", n2.xbuf, 32), void 0 !== n2.ybuf && c("options.ybuf", n2.ybuf, 32), c("output", i2)) : i2 = d(i2, 32), e3.ecdh(i2, t3, r4, n2.data, n2.hashfn, n2.xbuf, n2.ybuf)) {
              case 0:
                return i2;
              case 1:
                throw new Error(o);
              case 2:
                throw new Error("Scalar was invalid (zero or overflow)");
            }
          } };
        };
      }, 6003: (e2, t2, r3) => {
        "use strict";
        var n = r3(8850).Buffer;
        function i(e3, t3) {
          this._block = n.alloc(e3), this._finalSize = t3, this._blockSize = e3, this._len = 0;
        }
        i.prototype.update = function(e3, t3) {
          "string" == typeof e3 && (t3 = t3 || "utf8", e3 = n.from(e3, t3));
          for (var r4 = this._block, i2 = this._blockSize, o = e3.length, a = this._len, s = 0; s < o; ) {
            for (var u = a % i2, c = Math.min(o - s, i2 - u), f = 0; f < c; f++)
              r4[u + f] = e3[s + f];
            s += c, (a += c) % i2 == 0 && this._update(r4);
          }
          return this._len += o, this;
        }, i.prototype.digest = function(e3) {
          var t3 = this._len % this._blockSize;
          this._block[t3] = 128, this._block.fill(0, t3 + 1), t3 >= this._finalSize && (this._update(this._block), this._block.fill(0));
          var r4 = 8 * this._len;
          if (r4 <= 4294967295)
            this._block.writeUInt32BE(r4, this._blockSize - 4);
          else {
            var n2 = (4294967295 & r4) >>> 0, i2 = (r4 - n2) / 4294967296;
            this._block.writeUInt32BE(i2, this._blockSize - 8), this._block.writeUInt32BE(n2, this._blockSize - 4);
          }
          this._update(this._block);
          var o = this._hash();
          return e3 ? o.toString(e3) : o;
        }, i.prototype._update = function() {
          throw new Error("_update must be implemented by subclass");
        }, e2.exports = i;
      }, 1708: (e2, t2, r3) => {
        "use strict";
        var n = e2.exports = function(e3) {
          e3 = e3.toLowerCase();
          var t3 = n[e3];
          if (!t3)
            throw new Error(e3 + " is not supported (we accept pull requests)");
          return new t3();
        };
        n.sha = r3(8210), n.sha1 = r3(544), n.sha224 = r3(6288), n.sha256 = r3(4571), n.sha384 = r3(6959), n.sha512 = r3(4515);
      }, 8210: (e2, t2, r3) => {
        "use strict";
        var n = r3(1736), i = r3(6003), o = r3(8850).Buffer, a = [1518500249, 1859775393, -1894007588, -899497514], s = new Array(80);
        function u() {
          this.init(), this._w = s, i.call(this, 64, 56);
        }
        function c(e3) {
          return e3 << 30 | e3 >>> 2;
        }
        function f(e3, t3, r4, n2) {
          return 0 === e3 ? t3 & r4 | ~t3 & n2 : 2 === e3 ? t3 & r4 | t3 & n2 | r4 & n2 : t3 ^ r4 ^ n2;
        }
        n(u, i), u.prototype.init = function() {
          return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
        }, u.prototype._update = function(e3) {
          for (var t3, r4 = this._w, n2 = 0 | this._a, i2 = 0 | this._b, o2 = 0 | this._c, s2 = 0 | this._d, u2 = 0 | this._e, d = 0; d < 16; ++d)
            r4[d] = e3.readInt32BE(4 * d);
          for (; d < 80; ++d)
            r4[d] = r4[d - 3] ^ r4[d - 8] ^ r4[d - 14] ^ r4[d - 16];
          for (var l = 0; l < 80; ++l) {
            var h = ~~(l / 20), p = 0 | ((t3 = n2) << 5 | t3 >>> 27) + f(h, i2, o2, s2) + u2 + r4[l] + a[h];
            u2 = s2, s2 = o2, o2 = c(i2), i2 = n2, n2 = p;
          }
          this._a = n2 + this._a | 0, this._b = i2 + this._b | 0, this._c = o2 + this._c | 0, this._d = s2 + this._d | 0, this._e = u2 + this._e | 0;
        }, u.prototype._hash = function() {
          var e3 = o.allocUnsafe(20);
          return e3.writeInt32BE(0 | this._a, 0), e3.writeInt32BE(0 | this._b, 4), e3.writeInt32BE(0 | this._c, 8), e3.writeInt32BE(0 | this._d, 12), e3.writeInt32BE(0 | this._e, 16), e3;
        }, e2.exports = u;
      }, 544: (e2, t2, r3) => {
        "use strict";
        var n = r3(1736), i = r3(6003), o = r3(8850).Buffer, a = [1518500249, 1859775393, -1894007588, -899497514], s = new Array(80);
        function u() {
          this.init(), this._w = s, i.call(this, 64, 56);
        }
        function c(e3) {
          return e3 << 5 | e3 >>> 27;
        }
        function f(e3) {
          return e3 << 30 | e3 >>> 2;
        }
        function d(e3, t3, r4, n2) {
          return 0 === e3 ? t3 & r4 | ~t3 & n2 : 2 === e3 ? t3 & r4 | t3 & n2 | r4 & n2 : t3 ^ r4 ^ n2;
        }
        n(u, i), u.prototype.init = function() {
          return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
        }, u.prototype._update = function(e3) {
          for (var t3, r4 = this._w, n2 = 0 | this._a, i2 = 0 | this._b, o2 = 0 | this._c, s2 = 0 | this._d, u2 = 0 | this._e, l = 0; l < 16; ++l)
            r4[l] = e3.readInt32BE(4 * l);
          for (; l < 80; ++l)
            r4[l] = (t3 = r4[l - 3] ^ r4[l - 8] ^ r4[l - 14] ^ r4[l - 16]) << 1 | t3 >>> 31;
          for (var h = 0; h < 80; ++h) {
            var p = ~~(h / 20), b = c(n2) + d(p, i2, o2, s2) + u2 + r4[h] + a[p] | 0;
            u2 = s2, s2 = o2, o2 = f(i2), i2 = n2, n2 = b;
          }
          this._a = n2 + this._a | 0, this._b = i2 + this._b | 0, this._c = o2 + this._c | 0, this._d = s2 + this._d | 0, this._e = u2 + this._e | 0;
        }, u.prototype._hash = function() {
          var e3 = o.allocUnsafe(20);
          return e3.writeInt32BE(0 | this._a, 0), e3.writeInt32BE(0 | this._b, 4), e3.writeInt32BE(0 | this._c, 8), e3.writeInt32BE(0 | this._d, 12), e3.writeInt32BE(0 | this._e, 16), e3;
        }, e2.exports = u;
      }, 6288: (e2, t2, r3) => {
        "use strict";
        var n = r3(1736), i = r3(4571), o = r3(6003), a = r3(8850).Buffer, s = new Array(64);
        function u() {
          this.init(), this._w = s, o.call(this, 64, 56);
        }
        n(u, i), u.prototype.init = function() {
          return this._a = 3238371032, this._b = 914150663, this._c = 812702999, this._d = 4144912697, this._e = 4290775857, this._f = 1750603025, this._g = 1694076839, this._h = 3204075428, this;
        }, u.prototype._hash = function() {
          var e3 = a.allocUnsafe(28);
          return e3.writeInt32BE(this._a, 0), e3.writeInt32BE(this._b, 4), e3.writeInt32BE(this._c, 8), e3.writeInt32BE(this._d, 12), e3.writeInt32BE(this._e, 16), e3.writeInt32BE(this._f, 20), e3.writeInt32BE(this._g, 24), e3;
        }, e2.exports = u;
      }, 4571: (e2, t2, r3) => {
        "use strict";
        var n = r3(1736), i = r3(6003), o = r3(8850).Buffer, a = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298], s = new Array(64);
        function u() {
          this.init(), this._w = s, i.call(this, 64, 56);
        }
        function c(e3, t3, r4) {
          return r4 ^ e3 & (t3 ^ r4);
        }
        function f(e3, t3, r4) {
          return e3 & t3 | r4 & (e3 | t3);
        }
        function d(e3) {
          return (e3 >>> 2 | e3 << 30) ^ (e3 >>> 13 | e3 << 19) ^ (e3 >>> 22 | e3 << 10);
        }
        function l(e3) {
          return (e3 >>> 6 | e3 << 26) ^ (e3 >>> 11 | e3 << 21) ^ (e3 >>> 25 | e3 << 7);
        }
        function h(e3) {
          return (e3 >>> 7 | e3 << 25) ^ (e3 >>> 18 | e3 << 14) ^ e3 >>> 3;
        }
        n(u, i), u.prototype.init = function() {
          return this._a = 1779033703, this._b = 3144134277, this._c = 1013904242, this._d = 2773480762, this._e = 1359893119, this._f = 2600822924, this._g = 528734635, this._h = 1541459225, this;
        }, u.prototype._update = function(e3) {
          for (var t3, r4 = this._w, n2 = 0 | this._a, i2 = 0 | this._b, o2 = 0 | this._c, s2 = 0 | this._d, u2 = 0 | this._e, p = 0 | this._f, b = 0 | this._g, y = 0 | this._h, m = 0; m < 16; ++m)
            r4[m] = e3.readInt32BE(4 * m);
          for (; m < 64; ++m)
            r4[m] = 0 | (((t3 = r4[m - 2]) >>> 17 | t3 << 15) ^ (t3 >>> 19 | t3 << 13) ^ t3 >>> 10) + r4[m - 7] + h(r4[m - 15]) + r4[m - 16];
          for (var v = 0; v < 64; ++v) {
            var g = y + l(u2) + c(u2, p, b) + a[v] + r4[v] | 0, w = d(n2) + f(n2, i2, o2) | 0;
            y = b, b = p, p = u2, u2 = s2 + g | 0, s2 = o2, o2 = i2, i2 = n2, n2 = g + w | 0;
          }
          this._a = n2 + this._a | 0, this._b = i2 + this._b | 0, this._c = o2 + this._c | 0, this._d = s2 + this._d | 0, this._e = u2 + this._e | 0, this._f = p + this._f | 0, this._g = b + this._g | 0, this._h = y + this._h | 0;
        }, u.prototype._hash = function() {
          var e3 = o.allocUnsafe(32);
          return e3.writeInt32BE(this._a, 0), e3.writeInt32BE(this._b, 4), e3.writeInt32BE(this._c, 8), e3.writeInt32BE(this._d, 12), e3.writeInt32BE(this._e, 16), e3.writeInt32BE(this._f, 20), e3.writeInt32BE(this._g, 24), e3.writeInt32BE(this._h, 28), e3;
        }, e2.exports = u;
      }, 6959: (e2, t2, r3) => {
        "use strict";
        var n = r3(1736), i = r3(4515), o = r3(6003), a = r3(8850).Buffer, s = new Array(160);
        function u() {
          this.init(), this._w = s, o.call(this, 128, 112);
        }
        n(u, i), u.prototype.init = function() {
          return this._ah = 3418070365, this._bh = 1654270250, this._ch = 2438529370, this._dh = 355462360, this._eh = 1731405415, this._fh = 2394180231, this._gh = 3675008525, this._hh = 1203062813, this._al = 3238371032, this._bl = 914150663, this._cl = 812702999, this._dl = 4144912697, this._el = 4290775857, this._fl = 1750603025, this._gl = 1694076839, this._hl = 3204075428, this;
        }, u.prototype._hash = function() {
          var e3 = a.allocUnsafe(48);
          function t3(t4, r4, n2) {
            e3.writeInt32BE(t4, n2), e3.writeInt32BE(r4, n2 + 4);
          }
          return t3(this._ah, this._al, 0), t3(this._bh, this._bl, 8), t3(this._ch, this._cl, 16), t3(this._dh, this._dl, 24), t3(this._eh, this._el, 32), t3(this._fh, this._fl, 40), e3;
        }, e2.exports = u;
      }, 4515: (e2, t2, r3) => {
        "use strict";
        var n = r3(1736), i = r3(6003), o = r3(8850).Buffer, a = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591], s = new Array(160);
        function u() {
          this.init(), this._w = s, i.call(this, 128, 112);
        }
        function c(e3, t3, r4) {
          return r4 ^ e3 & (t3 ^ r4);
        }
        function f(e3, t3, r4) {
          return e3 & t3 | r4 & (e3 | t3);
        }
        function d(e3, t3) {
          return (e3 >>> 28 | t3 << 4) ^ (t3 >>> 2 | e3 << 30) ^ (t3 >>> 7 | e3 << 25);
        }
        function l(e3, t3) {
          return (e3 >>> 14 | t3 << 18) ^ (e3 >>> 18 | t3 << 14) ^ (t3 >>> 9 | e3 << 23);
        }
        function h(e3, t3) {
          return (e3 >>> 1 | t3 << 31) ^ (e3 >>> 8 | t3 << 24) ^ e3 >>> 7;
        }
        function p(e3, t3) {
          return (e3 >>> 1 | t3 << 31) ^ (e3 >>> 8 | t3 << 24) ^ (e3 >>> 7 | t3 << 25);
        }
        function b(e3, t3) {
          return (e3 >>> 19 | t3 << 13) ^ (t3 >>> 29 | e3 << 3) ^ e3 >>> 6;
        }
        function y(e3, t3) {
          return (e3 >>> 19 | t3 << 13) ^ (t3 >>> 29 | e3 << 3) ^ (e3 >>> 6 | t3 << 26);
        }
        function m(e3, t3) {
          return e3 >>> 0 < t3 >>> 0 ? 1 : 0;
        }
        n(u, i), u.prototype.init = function() {
          return this._ah = 1779033703, this._bh = 3144134277, this._ch = 1013904242, this._dh = 2773480762, this._eh = 1359893119, this._fh = 2600822924, this._gh = 528734635, this._hh = 1541459225, this._al = 4089235720, this._bl = 2227873595, this._cl = 4271175723, this._dl = 1595750129, this._el = 2917565137, this._fl = 725511199, this._gl = 4215389547, this._hl = 327033209, this;
        }, u.prototype._update = function(e3) {
          for (var t3 = this._w, r4 = 0 | this._ah, n2 = 0 | this._bh, i2 = 0 | this._ch, o2 = 0 | this._dh, s2 = 0 | this._eh, u2 = 0 | this._fh, v = 0 | this._gh, g = 0 | this._hh, w = 0 | this._al, A = 0 | this._bl, k = 0 | this._cl, _ = 0 | this._dl, S = 0 | this._el, E = 0 | this._fl, x = 0 | this._gl, P = 0 | this._hl, O = 0; O < 32; O += 2)
            t3[O] = e3.readInt32BE(4 * O), t3[O + 1] = e3.readInt32BE(4 * O + 4);
          for (; O < 160; O += 2) {
            var B = t3[O - 30], T = t3[O - 30 + 1], C = h(B, T), I = p(T, B), M = b(B = t3[O - 4], T = t3[O - 4 + 1]), U = y(T, B), R = t3[O - 14], j = t3[O - 14 + 1], N = t3[O - 32], F = t3[O - 32 + 1], L = I + j | 0, D = C + R + m(L, I) | 0;
            D = (D = D + M + m(L = L + U | 0, U) | 0) + N + m(L = L + F | 0, F) | 0, t3[O] = D, t3[O + 1] = L;
          }
          for (var H = 0; H < 160; H += 2) {
            D = t3[H], L = t3[H + 1];
            var q = f(r4, n2, i2), z = f(w, A, k), G = d(r4, w), K = d(w, r4), V = l(s2, S), J = l(S, s2), W = a[H], Y = a[H + 1], X = c(s2, u2, v), Q = c(S, E, x), Z = P + J | 0, $ = g + V + m(Z, P) | 0;
            $ = ($ = ($ = $ + X + m(Z = Z + Q | 0, Q) | 0) + W + m(Z = Z + Y | 0, Y) | 0) + D + m(Z = Z + L | 0, L) | 0;
            var ee = K + z | 0, te = G + q + m(ee, K) | 0;
            g = v, P = x, v = u2, x = E, u2 = s2, E = S, s2 = o2 + $ + m(S = _ + Z | 0, _) | 0, o2 = i2, _ = k, i2 = n2, k = A, n2 = r4, A = w, r4 = $ + te + m(w = Z + ee | 0, Z) | 0;
          }
          this._al = this._al + w | 0, this._bl = this._bl + A | 0, this._cl = this._cl + k | 0, this._dl = this._dl + _ | 0, this._el = this._el + S | 0, this._fl = this._fl + E | 0, this._gl = this._gl + x | 0, this._hl = this._hl + P | 0, this._ah = this._ah + r4 + m(this._al, w) | 0, this._bh = this._bh + n2 + m(this._bl, A) | 0, this._ch = this._ch + i2 + m(this._cl, k) | 0, this._dh = this._dh + o2 + m(this._dl, _) | 0, this._eh = this._eh + s2 + m(this._el, S) | 0, this._fh = this._fh + u2 + m(this._fl, E) | 0, this._gh = this._gh + v + m(this._gl, x) | 0, this._hh = this._hh + g + m(this._hl, P) | 0;
        }, u.prototype._hash = function() {
          var e3 = o.allocUnsafe(64);
          function t3(t4, r4, n2) {
            e3.writeInt32BE(t4, n2), e3.writeInt32BE(r4, n2 + 4);
          }
          return t3(this._ah, this._al, 0), t3(this._bh, this._bl, 8), t3(this._ch, this._cl, 16), t3(this._dh, this._dl, 24), t3(this._eh, this._el, 32), t3(this._fh, this._fl, 40), t3(this._gh, this._gl, 48), t3(this._hh, this._hl, 56), e3;
        }, e2.exports = u;
      }, 7245: (e2, t2, r3) => {
        "use strict";
        e2.exports = i;
        var n = r3(8291).EventEmitter;
        function i() {
          n.call(this);
        }
        r3(1736)(i, n), i.Readable = r3(6297), i.Writable = r3(1471), i.Duplex = r3(6884), i.Transform = r3(9154), i.PassThrough = r3(3582), i.finished = r3(5831), i.pipeline = r3(384), i.Stream = i, i.prototype.pipe = function(e3, t3) {
          var r4 = this;
          function i2(t4) {
            e3.writable && false === e3.write(t4) && r4.pause && r4.pause();
          }
          function o() {
            r4.readable && r4.resume && r4.resume();
          }
          r4.on("data", i2), e3.on("drain", o), e3._isStdio || t3 && false === t3.end || (r4.on("end", s), r4.on("close", u));
          var a = false;
          function s() {
            a || (a = true, e3.end());
          }
          function u() {
            a || (a = true, "function" == typeof e3.destroy && e3.destroy());
          }
          function c(e4) {
            if (f(), 0 === n.listenerCount(this, "error"))
              throw e4;
          }
          function f() {
            r4.removeListener("data", i2), e3.removeListener("drain", o), r4.removeListener("end", s), r4.removeListener("close", u), r4.removeListener("error", c), e3.removeListener("error", c), r4.removeListener("end", f), r4.removeListener("close", f), e3.removeListener("close", f);
          }
          return r4.on("error", c), e3.on("error", c), r4.on("end", f), r4.on("close", f), e3.on("close", f), e3.emit("pipe", r4), e3;
        };
      }, 9519: (e2, t2, r3) => {
        "use strict";
        var n = r3(8844), i = r3(3319), o = r3(7705), a = r3(3675), s = r3(1143), u = t2;
        u.request = function(e3, t3) {
          e3 = "string" == typeof e3 ? s.parse(e3) : o(e3);
          var i2 = -1 === r3.g.location.protocol.search(/^https?:$/) ? "http:" : "", a2 = e3.protocol || i2, u2 = e3.hostname || e3.host, c = e3.port, f = e3.path || "/";
          u2 && -1 !== u2.indexOf(":") && (u2 = "[" + u2 + "]"), e3.url = (u2 ? a2 + "//" + u2 : "") + (c ? ":" + c : "") + f, e3.method = (e3.method || "GET").toUpperCase(), e3.headers = e3.headers || {};
          var d = new n(e3);
          return t3 && d.on("response", t3), d;
        }, u.get = function(e3, t3) {
          var r4 = u.request(e3, t3);
          return r4.end(), r4;
        }, u.ClientRequest = n, u.IncomingMessage = i.IncomingMessage, u.Agent = function() {
        }, u.Agent.defaultMaxSockets = 4, u.globalAgent = new u.Agent(), u.STATUS_CODES = a, u.METHODS = ["CHECKOUT", "CONNECT", "COPY", "DELETE", "GET", "HEAD", "LOCK", "M-SEARCH", "MERGE", "MKACTIVITY", "MKCOL", "MOVE", "NOTIFY", "OPTIONS", "PATCH", "POST", "PROPFIND", "PROPPATCH", "PURGE", "PUT", "REPORT", "SEARCH", "SUBSCRIBE", "TRACE", "UNLOCK", "UNSUBSCRIBE"];
      }, 3928: (e2, t2, r3) => {
        "use strict";
        var n;
        function i() {
          if (void 0 !== n)
            return n;
          if (r3.g.XMLHttpRequest) {
            n = new r3.g.XMLHttpRequest();
            try {
              n.open("GET", r3.g.XDomainRequest ? "/" : "https://example.com");
            } catch (e3) {
              n = null;
            }
          } else
            n = null;
          return n;
        }
        function o(e3) {
          var t3 = i();
          if (!t3)
            return false;
          try {
            return t3.responseType = e3, t3.responseType === e3;
          } catch (e4) {
          }
          return false;
        }
        function a(e3) {
          return "function" == typeof e3;
        }
        t2.fetch = a(r3.g.fetch) && a(r3.g.ReadableStream), t2.writableStream = a(r3.g.WritableStream), t2.abortController = a(r3.g.AbortController), t2.arraybuffer = t2.fetch || o("arraybuffer"), t2.msstream = !t2.fetch && o("ms-stream"), t2.mozchunkedarraybuffer = !t2.fetch && o("moz-chunked-arraybuffer"), t2.overrideMimeType = t2.fetch || !!i() && a(i().overrideMimeType), n = null;
      }, 8844: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(9142), o = r3(3928), a = r3(1736), s = r3(3319), u = r3(6505), c = s.IncomingMessage, f = s.readyStates, d = e2.exports = function(e3) {
          var t3, r4 = this;
          u.Writable.call(r4), r4._opts = e3, r4._body = [], r4._headers = {}, e3.auth && r4.setHeader("Authorization", "Basic " + n.from(e3.auth).toString("base64")), Object.keys(e3.headers).forEach(function(t4) {
            r4.setHeader(t4, e3.headers[t4]);
          });
          var i2 = true;
          if ("disable-fetch" === e3.mode || "requestTimeout" in e3 && !o.abortController)
            i2 = false, t3 = true;
          else if ("prefer-streaming" === e3.mode)
            t3 = false;
          else if ("allow-wrong-content-type" === e3.mode)
            t3 = !o.overrideMimeType;
          else {
            if (e3.mode && "default" !== e3.mode && "prefer-fast" !== e3.mode)
              throw new Error("Invalid value for opts.mode");
            t3 = true;
          }
          r4._mode = function(e4, t4) {
            return o.fetch && t4 ? "fetch" : o.mozchunkedarraybuffer ? "moz-chunked-arraybuffer" : o.msstream ? "ms-stream" : o.arraybuffer && e4 ? "arraybuffer" : "text";
          }(t3, i2), r4._fetchTimer = null, r4._socketTimeout = null, r4._socketTimer = null, r4.on("finish", function() {
            r4._onFinish();
          });
        };
        a(d, u.Writable), d.prototype.setHeader = function(e3, t3) {
          var r4 = e3.toLowerCase();
          -1 === l.indexOf(r4) && (this._headers[r4] = { name: e3, value: t3 });
        }, d.prototype.getHeader = function(e3) {
          var t3 = this._headers[e3.toLowerCase()];
          return t3 ? t3.value : null;
        }, d.prototype.removeHeader = function(e3) {
          delete this._headers[e3.toLowerCase()];
        }, d.prototype._onFinish = function() {
          var e3 = this;
          if (!e3._destroyed) {
            var t3 = e3._opts;
            "timeout" in t3 && 0 !== t3.timeout && e3.setTimeout(t3.timeout);
            var n2 = e3._headers, a2 = null;
            "GET" !== t3.method && "HEAD" !== t3.method && (a2 = new Blob(e3._body, { type: (n2["content-type"] || {}).value || "" }));
            var s2 = [];
            if (Object.keys(n2).forEach(function(e4) {
              var t4 = n2[e4].name, r4 = n2[e4].value;
              Array.isArray(r4) ? r4.forEach(function(e5) {
                s2.push([t4, e5]);
              }) : s2.push([t4, r4]);
            }), "fetch" === e3._mode) {
              var u2 = null;
              if (o.abortController) {
                var c2 = new AbortController();
                u2 = c2.signal, e3._fetchAbortController = c2, "requestTimeout" in t3 && 0 !== t3.requestTimeout && (e3._fetchTimer = r3.g.setTimeout(function() {
                  e3.emit("requestTimeout"), e3._fetchAbortController && e3._fetchAbortController.abort();
                }, t3.requestTimeout));
              }
              r3.g.fetch(e3._opts.url, { method: e3._opts.method, headers: s2, body: a2 || void 0, mode: "cors", credentials: t3.withCredentials ? "include" : "same-origin", signal: u2 }).then(function(t4) {
                e3._fetchResponse = t4, e3._resetTimers(false), e3._connect();
              }, function(t4) {
                e3._resetTimers(true), e3._destroyed || e3.emit("error", t4);
              });
            } else {
              var d2 = e3._xhr = new r3.g.XMLHttpRequest();
              try {
                d2.open(e3._opts.method, e3._opts.url, true);
              } catch (t4) {
                return void i.nextTick(function() {
                  e3.emit("error", t4);
                });
              }
              "responseType" in d2 && (d2.responseType = e3._mode), "withCredentials" in d2 && (d2.withCredentials = !!t3.withCredentials), "text" === e3._mode && "overrideMimeType" in d2 && d2.overrideMimeType("text/plain; charset=x-user-defined"), "requestTimeout" in t3 && (d2.timeout = t3.requestTimeout, d2.ontimeout = function() {
                e3.emit("requestTimeout");
              }), s2.forEach(function(e4) {
                d2.setRequestHeader(e4[0], e4[1]);
              }), e3._response = null, d2.onreadystatechange = function() {
                switch (d2.readyState) {
                  case f.LOADING:
                  case f.DONE:
                    e3._onXHRProgress();
                }
              }, "moz-chunked-arraybuffer" === e3._mode && (d2.onprogress = function() {
                e3._onXHRProgress();
              }), d2.onerror = function() {
                e3._destroyed || (e3._resetTimers(true), e3.emit("error", new Error("XHR error")));
              };
              try {
                d2.send(a2);
              } catch (t4) {
                return void i.nextTick(function() {
                  e3.emit("error", t4);
                });
              }
            }
          }
        }, d.prototype._onXHRProgress = function() {
          var e3 = this;
          e3._resetTimers(false), function(e4) {
            try {
              var t3 = e4.status;
              return null !== t3 && 0 !== t3;
            } catch (e5) {
              return false;
            }
          }(e3._xhr) && !e3._destroyed && (e3._response || e3._connect(), e3._response._onXHRProgress(e3._resetTimers.bind(e3)));
        }, d.prototype._connect = function() {
          var e3 = this;
          e3._destroyed || (e3._response = new c(e3._xhr, e3._fetchResponse, e3._mode, e3._resetTimers.bind(e3)), e3._response.on("error", function(t3) {
            e3.emit("error", t3);
          }), e3.emit("response", e3._response));
        }, d.prototype._write = function(e3, t3, r4) {
          this._body.push(e3), r4();
        }, d.prototype._resetTimers = function(e3) {
          var t3 = this;
          r3.g.clearTimeout(t3._socketTimer), t3._socketTimer = null, e3 ? (r3.g.clearTimeout(t3._fetchTimer), t3._fetchTimer = null) : t3._socketTimeout && (t3._socketTimer = r3.g.setTimeout(function() {
            t3.emit("timeout");
          }, t3._socketTimeout));
        }, d.prototype.abort = d.prototype.destroy = function(e3) {
          var t3 = this;
          t3._destroyed = true, t3._resetTimers(true), t3._response && (t3._response._destroyed = true), t3._xhr ? t3._xhr.abort() : t3._fetchAbortController && t3._fetchAbortController.abort(), e3 && t3.emit("error", e3);
        }, d.prototype.end = function(e3, t3, r4) {
          "function" == typeof e3 && (r4 = e3, e3 = void 0), u.Writable.prototype.end.call(this, e3, t3, r4);
        }, d.prototype.setTimeout = function(e3, t3) {
          var r4 = this;
          t3 && r4.once("timeout", t3), r4._socketTimeout = e3, r4._resetTimers(false);
        }, d.prototype.flushHeaders = function() {
        }, d.prototype.setNoDelay = function() {
        }, d.prototype.setSocketKeepAlive = function() {
        };
        var l = ["accept-charset", "accept-encoding", "access-control-request-headers", "access-control-request-method", "connection", "content-length", "cookie", "cookie2", "date", "dnt", "expect", "host", "keep-alive", "origin", "referer", "te", "trailer", "transfer-encoding", "upgrade", "via"];
      }, 3319: (e2, t2, r3) => {
        "use strict";
        var n = r3(9142), i = r3(9033).Buffer, o = r3(3928), a = r3(1736), s = r3(6505), u = t2.readyStates = { UNSENT: 0, OPENED: 1, HEADERS_RECEIVED: 2, LOADING: 3, DONE: 4 }, c = t2.IncomingMessage = function(e3, t3, r4, a2) {
          var u2 = this;
          if (s.Readable.call(u2), u2._mode = r4, u2.headers = {}, u2.rawHeaders = [], u2.trailers = {}, u2.rawTrailers = [], u2.on("end", function() {
            n.nextTick(function() {
              u2.emit("close");
            });
          }), "fetch" === r4) {
            if (u2._fetchResponse = t3, u2.url = t3.url, u2.statusCode = t3.status, u2.statusMessage = t3.statusText, t3.headers.forEach(function(e4, t4) {
              u2.headers[t4.toLowerCase()] = e4, u2.rawHeaders.push(t4, e4);
            }), o.writableStream) {
              var c2 = new WritableStream({ write: function(e4) {
                return a2(false), new Promise(function(t4, r5) {
                  u2._destroyed ? r5() : u2.push(i.from(e4)) ? t4() : u2._resumeFetch = t4;
                });
              }, close: function() {
                a2(true), u2._destroyed || u2.push(null);
              }, abort: function(e4) {
                a2(true), u2._destroyed || u2.emit("error", e4);
              } });
              try {
                return void t3.body.pipeTo(c2).catch(function(e4) {
                  a2(true), u2._destroyed || u2.emit("error", e4);
                });
              } catch (e4) {
              }
            }
            var f = t3.body.getReader();
            !function e4() {
              f.read().then(function(t4) {
                u2._destroyed || (a2(t4.done), t4.done ? u2.push(null) : (u2.push(i.from(t4.value)), e4()));
              }).catch(function(e5) {
                a2(true), u2._destroyed || u2.emit("error", e5);
              });
            }();
          } else if (u2._xhr = e3, u2._pos = 0, u2.url = e3.responseURL, u2.statusCode = e3.status, u2.statusMessage = e3.statusText, e3.getAllResponseHeaders().split(/\r?\n/).forEach(function(e4) {
            var t4 = e4.match(/^([^:]+):\s*(.*)/);
            if (t4) {
              var r5 = t4[1].toLowerCase();
              "set-cookie" === r5 ? (void 0 === u2.headers[r5] && (u2.headers[r5] = []), u2.headers[r5].push(t4[2])) : void 0 !== u2.headers[r5] ? u2.headers[r5] += ", " + t4[2] : u2.headers[r5] = t4[2], u2.rawHeaders.push(t4[1], t4[2]);
            }
          }), u2._charset = "x-user-defined", !o.overrideMimeType) {
            var d = u2.rawHeaders["mime-type"];
            if (d) {
              var l = d.match(/;\s*charset=([^;])(;|$)/);
              l && (u2._charset = l[1].toLowerCase());
            }
            u2._charset || (u2._charset = "utf-8");
          }
        };
        a(c, s.Readable), c.prototype._read = function() {
          var e3 = this._resumeFetch;
          e3 && (this._resumeFetch = null, e3());
        }, c.prototype._onXHRProgress = function(e3) {
          var t3 = this, n2 = t3._xhr, o2 = null;
          switch (t3._mode) {
            case "text":
              if ((o2 = n2.responseText).length > t3._pos) {
                var a2 = o2.substr(t3._pos);
                if ("x-user-defined" === t3._charset) {
                  for (var s2 = i.alloc(a2.length), c2 = 0; c2 < a2.length; c2++)
                    s2[c2] = 255 & a2.charCodeAt(c2);
                  t3.push(s2);
                } else
                  t3.push(a2, t3._charset);
                t3._pos = o2.length;
              }
              break;
            case "arraybuffer":
              if (n2.readyState !== u.DONE || !n2.response)
                break;
              o2 = n2.response, t3.push(i.from(new Uint8Array(o2)));
              break;
            case "moz-chunked-arraybuffer":
              if (o2 = n2.response, n2.readyState !== u.LOADING || !o2)
                break;
              t3.push(i.from(new Uint8Array(o2)));
              break;
            case "ms-stream":
              if (o2 = n2.response, n2.readyState !== u.LOADING)
                break;
              var f = new r3.g.MSStreamReader();
              f.onprogress = function() {
                f.result.byteLength > t3._pos && (t3.push(i.from(new Uint8Array(f.result.slice(t3._pos)))), t3._pos = f.result.byteLength);
              }, f.onload = function() {
                e3(true), t3.push(null);
              }, f.readAsArrayBuffer(o2);
          }
          t3._xhr.readyState === u.DONE && "ms-stream" !== t3._mode && (e3(true), t3.push(null));
        };
      }, 10: (e2) => {
        "use strict";
        e2.exports = function(e3) {
          return encodeURIComponent(e3).replace(/[!'()*]/g, function(e4) {
            return "%" + e4.charCodeAt(0).toString(16).toUpperCase();
          });
        };
      }, 3462: (e2, t2, r3) => {
        "use strict";
        var n = r3(8850).Buffer, i = n.isEncoding || function(e3) {
          switch ((e3 = "" + e3) && e3.toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
            case "raw":
              return true;
            default:
              return false;
          }
        };
        function o(e3) {
          var t3;
          switch (this.encoding = function(e4) {
            var t4 = function(e5) {
              if (!e5)
                return "utf8";
              for (var t5; ; )
                switch (e5) {
                  case "utf8":
                  case "utf-8":
                    return "utf8";
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return "utf16le";
                  case "latin1":
                  case "binary":
                    return "latin1";
                  case "base64":
                  case "ascii":
                  case "hex":
                    return e5;
                  default:
                    if (t5)
                      return;
                    e5 = ("" + e5).toLowerCase(), t5 = true;
                }
            }(e4);
            if ("string" != typeof t4 && (n.isEncoding === i || !i(e4)))
              throw new Error("Unknown encoding: " + e4);
            return t4 || e4;
          }(e3), this.encoding) {
            case "utf16le":
              this.text = u, this.end = c, t3 = 4;
              break;
            case "utf8":
              this.fillLast = s, t3 = 4;
              break;
            case "base64":
              this.text = f, this.end = d, t3 = 3;
              break;
            default:
              return this.write = l, void (this.end = h);
          }
          this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n.allocUnsafe(t3);
        }
        function a(e3) {
          return e3 <= 127 ? 0 : e3 >> 5 == 6 ? 2 : e3 >> 4 == 14 ? 3 : e3 >> 3 == 30 ? 4 : e3 >> 6 == 2 ? -1 : -2;
        }
        function s(e3) {
          var t3 = this.lastTotal - this.lastNeed, r4 = function(e4, t4, r5) {
            if (128 != (192 & t4[0]))
              return e4.lastNeed = 0, "�";
            if (e4.lastNeed > 1 && t4.length > 1) {
              if (128 != (192 & t4[1]))
                return e4.lastNeed = 1, "�";
              if (e4.lastNeed > 2 && t4.length > 2 && 128 != (192 & t4[2]))
                return e4.lastNeed = 2, "�";
            }
          }(this, e3);
          return void 0 !== r4 ? r4 : this.lastNeed <= e3.length ? (e3.copy(this.lastChar, t3, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (e3.copy(this.lastChar, t3, 0, e3.length), void (this.lastNeed -= e3.length));
        }
        function u(e3, t3) {
          if ((e3.length - t3) % 2 == 0) {
            var r4 = e3.toString("utf16le", t3);
            if (r4) {
              var n2 = r4.charCodeAt(r4.length - 1);
              if (n2 >= 55296 && n2 <= 56319)
                return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e3[e3.length - 2], this.lastChar[1] = e3[e3.length - 1], r4.slice(0, -1);
            }
            return r4;
          }
          return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e3[e3.length - 1], e3.toString("utf16le", t3, e3.length - 1);
        }
        function c(e3) {
          var t3 = e3 && e3.length ? this.write(e3) : "";
          if (this.lastNeed) {
            var r4 = this.lastTotal - this.lastNeed;
            return t3 + this.lastChar.toString("utf16le", 0, r4);
          }
          return t3;
        }
        function f(e3, t3) {
          var r4 = (e3.length - t3) % 3;
          return 0 === r4 ? e3.toString("base64", t3) : (this.lastNeed = 3 - r4, this.lastTotal = 3, 1 === r4 ? this.lastChar[0] = e3[e3.length - 1] : (this.lastChar[0] = e3[e3.length - 2], this.lastChar[1] = e3[e3.length - 1]), e3.toString("base64", t3, e3.length - r4));
        }
        function d(e3) {
          var t3 = e3 && e3.length ? this.write(e3) : "";
          return this.lastNeed ? t3 + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t3;
        }
        function l(e3) {
          return e3.toString(this.encoding);
        }
        function h(e3) {
          return e3 && e3.length ? this.write(e3) : "";
        }
        t2.s = o, o.prototype.write = function(e3) {
          if (0 === e3.length)
            return "";
          var t3, r4;
          if (this.lastNeed) {
            if (void 0 === (t3 = this.fillLast(e3)))
              return "";
            r4 = this.lastNeed, this.lastNeed = 0;
          } else
            r4 = 0;
          return r4 < e3.length ? t3 ? t3 + this.text(e3, r4) : this.text(e3, r4) : t3 || "";
        }, o.prototype.end = function(e3) {
          var t3 = e3 && e3.length ? this.write(e3) : "";
          return this.lastNeed ? t3 + "�" : t3;
        }, o.prototype.text = function(e3, t3) {
          var r4 = function(e4, t4, r5) {
            var n3 = t4.length - 1;
            if (n3 < r5)
              return 0;
            var i2 = a(t4[n3]);
            return i2 >= 0 ? (i2 > 0 && (e4.lastNeed = i2 - 1), i2) : --n3 < r5 || -2 === i2 ? 0 : (i2 = a(t4[n3])) >= 0 ? (i2 > 0 && (e4.lastNeed = i2 - 2), i2) : --n3 < r5 || -2 === i2 ? 0 : (i2 = a(t4[n3])) >= 0 ? (i2 > 0 && (2 === i2 ? i2 = 0 : e4.lastNeed = i2 - 3), i2) : 0;
          }(this, e3, t3);
          if (!this.lastNeed)
            return e3.toString("utf8", t3);
          this.lastTotal = r4;
          var n2 = e3.length - (r4 - this.lastNeed);
          return e3.copy(this.lastChar, 0, n2), e3.toString("utf8", t3, n2);
        }, o.prototype.fillLast = function(e3) {
          if (this.lastNeed <= e3.length)
            return e3.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
          e3.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e3.length), this.lastNeed -= e3.length;
        };
      }, 6931: (e2, t2, r3) => {
        "use strict";
        var n = r3(8619);
        e2.exports = function(e3) {
          return "string" != typeof e3 ? e3 : n(e3) ? e3.slice(2) : e3;
        };
      }, 6427: (e2, t2, r3) => {
        "use strict";
        var n = function() {
          throw "This swarm.js function isn't available on the browser.";
        }, i = { readFile: n }, o = { download: n, safeDownloadArchived: n, directoryTree: n }, a = { platform: n, arch: n }, s = { join: n, slice: n }, u = { spawn: n }, c = { lookup: n }, f = r3(1357), d = r3(631), l = r3(2733), h = r3(2510), p = r3(3094);
        e2.exports = p({ fs: i, files: o, os: a, path: s, child_process: u, defaultArchives: {}, mimetype: c, request: f, downloadUrl: null, bytes: d, hash: l, pick: h });
      }, 2510: (e2) => {
        "use strict";
        var t2 = function(e3) {
          return function() {
            return new Promise(function(t3, r3) {
              var n, i = function(r4) {
                var n2 = {}, i2 = r4.target.files.length, o2 = 0;
                [].map.call(r4.target.files, function(r5) {
                  var a = new FileReader();
                  a.onload = function(a2) {
                    var s = new Uint8Array(a2.target.result);
                    if ("directory" === e3) {
                      var u = r5.webkitRelativePath;
                      n2[u.slice(u.indexOf("/") + 1)] = { type: "text/plain", data: s }, ++o2 === i2 && t3(n2);
                    } else if ("file" === e3) {
                      var c = r5.webkitRelativePath;
                      t3({ type: mimetype.lookup(c), data: s });
                    } else
                      t3(s);
                  }, a.readAsArrayBuffer(r5);
                });
              };
              "directory" === e3 ? ((n = document.createElement("input")).addEventListener("change", i), n.type = "file", n.webkitdirectory = true, n.mozdirectory = true, n.msdirectory = true, n.odirectory = true, n.directory = true) : ((n = document.createElement("input")).addEventListener("change", i), n.type = "file");
              var o = document.createEvent("MouseEvents");
              o.initEvent("click", true, false), n.dispatchEvent(o);
            });
          };
        };
        e2.exports = { data: t2("data"), file: t2("file"), directory: t2("directory") };
      }, 2733: (e2, t2, r3) => {
        "use strict";
        var n = r3(9574).keccak256, i = r3(631), o = function(e3, t3) {
          var r4 = i.reverse(i.pad(6, i.fromNumber(e3))), o2 = i.flatten([r4, "0x0000", t3]);
          return n(o2).slice(2);
        };
        e2.exports = function e3(t3) {
          "string" == typeof t3 && "0x" !== t3.slice(0, 2) ? t3 = i.fromString(t3) : "string" != typeof t3 && void 0 !== t3.length && (t3 = i.fromUint8Array(t3));
          var r4 = i.length(t3);
          if (r4 <= 4096)
            return o(r4, t3);
          for (var n2 = 4096; 128 * n2 < r4; )
            n2 *= 128;
          for (var a = [], s = 0; s < r4; s += n2) {
            var u = n2 < r4 - s ? n2 : r4 - s;
            a.push(e3(i.slice(t3, s, s + u)));
          }
          return o(r4, i.flatten(a));
        };
      }, 3094: (e2) => {
        "use strict";
        e2.exports = function(e3) {
          var t2 = e3.fs, r3 = e3.files, n = e3.os, i = e3.path, o = e3.child_process, a = e3.mimetype, s = e3.defaultArchives, u = e3.request, c = e3.downloadUrl, f = e3.bytes, d = e3.hash, l = e3.pick, h = function(e4) {
            return function(t3) {
              for (var r4 = {}, n2 = 0, i2 = e4.length; n2 < i2; ++n2)
                r4[e4[n2]] = t3[n2];
              return r4;
            };
          }, p = function(e4) {
            return function(t3) {
              return "".concat(e4, "/bzz-raw:/").concat(t3);
            };
          }, b = function(e4) {
            return function(t3) {
              return new Promise(function(r4, n2) {
                u(p(e4)(t3), { responseType: "arraybuffer" }, function(e5, t4, i2) {
                  return e5 ? n2(e5) : i2.statusCode >= 400 ? n2(new Error("Error ".concat(i2.statusCode, "."))) : r4(new Uint8Array(t4));
                });
              });
            };
          }, y = function(e4) {
            return function(t3) {
              return function t4(r4) {
                return function(n2) {
                  return function(i2) {
                    var o2 = function(e5) {
                      return void 0 === e5.path ? Promise.resolve() : "application/bzz-manifest+json" === e5.contentType ? t4(e5.hash)(n2 + e5.path)(i2) : Promise.resolve((r5 = n2 + e5.path, function(e6) {
                        return function(t5) {
                          return t5[r5] = e6, t5;
                        };
                      })(function(e6) {
                        return { type: e6.contentType, hash: e6.hash };
                      }(e5))(i2));
                      var r5;
                    };
                    return b(e4)(r4).then(function(e5) {
                      return JSON.parse(j(e5)).entries;
                    }).then(function(e5) {
                      return Promise.all(e5.map(o2));
                    }).then(function() {
                      return i2;
                    });
                  };
                };
              }(t3)("")({});
            };
          }, m = function(e4) {
            return function(t3) {
              return y(e4)(t3).then(function(e5) {
                return h(Object.keys(e5))(Object.keys(e5).map(function(t4) {
                  return e5[t4].hash;
                }));
              });
            };
          }, v = function(e4) {
            return function(t3) {
              return y(e4)(t3).then(function(t4) {
                var r4 = Object.keys(t4), n2 = r4.map(function(e5) {
                  return t4[e5].hash;
                }), i2 = r4.map(function(e5) {
                  return t4[e5].type;
                }), o2 = n2.map(b(e4));
                return Promise.all(o2).then(function(e5) {
                  return h(r4)(function(e6) {
                    return e6.map(function(e7, t5) {
                      return { type: i2[t5], data: e7 };
                    });
                  }(e5));
                });
              });
            };
          }, g = function(e4) {
            return function(t3) {
              return function(n2) {
                return r3.download(p(e4)(t3))(n2);
              };
            };
          }, w = function(e4) {
            return function(t3) {
              return function(r4) {
                return m(e4)(t3).then(function(t4) {
                  var n2 = [];
                  for (var o2 in t4)
                    if (o2.length > 0) {
                      var a2 = i.join(r4, o2);
                      n2.push(g(e4)(t4[o2])(a2));
                    }
                  return Promise.all(n2).then(function() {
                    return r4;
                  });
                });
              };
            };
          }, A = function(e4) {
            return function(t3) {
              return new Promise(function(r4, n2) {
                var i2 = { body: "string" == typeof t3 ? N(t3) : t3, method: "POST" };
                u("".concat(e4, "/bzz-raw:/"), i2, function(e5, t4) {
                  return e5 ? n2(e5) : r4(t4);
                });
              });
            };
          }, k = function(e4) {
            return function(t3) {
              return function(r4) {
                return function(n2) {
                  return function i2(o2) {
                    var a2 = "/" === r4[0] ? r4 : "/" + r4, s2 = "".concat(e4, "/bzz:/").concat(t3).concat(a2), c2 = { method: "PUT", headers: { "Content-Type": n2.type }, body: n2.data };
                    return new Promise(function(e5, t4) {
                      u(s2, c2, function(r5, n3) {
                        return r5 ? t4(r5) : -1 !== n3.indexOf("error") ? t4(n3) : e5(n3);
                      });
                    }).catch(function(e5) {
                      return o2 > 0 && i2(o2 - 1);
                    });
                  }(3);
                };
              };
            };
          }, _ = function(e4) {
            return function(t3) {
              return E(e4)({ "": t3 });
            };
          }, S = function(e4) {
            return function(r4) {
              return t2.readFile(r4).then(function(t3) {
                return _(e4)({ type: a.lookup(r4), data: t3 });
              });
            };
          }, E = function(e4) {
            return function(t3) {
              return A(e4)("{}").then(function(r4) {
                return Object.keys(t3).reduce(function(r5, n2) {
                  return r5.then(function(r6) {
                    return function(n3) {
                      return k(e4)(n3)(r6)(t3[r6]);
                    };
                  }(n2));
                }, Promise.resolve(r4));
              });
            };
          }, x = function(e4) {
            return function(r4) {
              return t2.readFile(r4).then(A(e4));
            };
          }, P = function(e4) {
            return function(n2) {
              return function(i2) {
                return r3.directoryTree(i2).then(function(e5) {
                  return Promise.all(e5.map(function(e6) {
                    return t2.readFile(e6);
                  })).then(function(t3) {
                    var r4 = e5.map(function(e6) {
                      return e6.slice(i2.length);
                    }), n3 = e5.map(function(e6) {
                      return a.lookup(e6) || "text/plain";
                    });
                    return h(r4)(t3.map(function(e6, t4) {
                      return { type: n3[t4], data: e6 };
                    }));
                  });
                }).then(function(e5) {
                  return (t3 = n2 ? { "": e5[n2] } : {}, function(e6) {
                    var r4 = {};
                    for (var n3 in t3)
                      r4[n3] = t3[n3];
                    for (var i3 in e6)
                      r4[i3] = e6[i3];
                    return r4;
                  })(e5);
                  var t3;
                }).then(E(e4));
              };
            };
          }, O = function(e4) {
            return function(t3) {
              if ("data" === t3.pick)
                return l.data().then(A(e4));
              if ("file" === t3.pick)
                return l.file().then(_(e4));
              if ("directory" === t3.pick)
                return l.directory().then(E(e4));
              if (t3.path)
                switch (t3.kind) {
                  case "data":
                    return x(e4)(t3.path);
                  case "file":
                    return S(e4)(t3.path);
                  case "directory":
                    return P(e4)(t3.defaultFile)(t3.path);
                }
              else {
                if (t3.length || "string" == typeof t3)
                  return A(e4)(t3);
                if (t3 instanceof Object)
                  return E(e4)(t3);
              }
              return Promise.reject(new Error("Bad arguments"));
            };
          }, B = function(e4) {
            return function(t3) {
              return function(r4) {
                return U(e4)(t3).then(function(n2) {
                  return n2 ? r4 ? w(e4)(t3)(r4) : v(e4)(t3) : r4 ? g(e4)(t3)(r4) : b(e4)(t3);
                });
              };
            };
          }, T = function(e4, t3) {
            var i2 = n.platform().replace("win32", "windows") + "-" + ("x64" === n.arch() ? "amd64" : "386"), o2 = (t3 || s)[i2], a2 = c + o2.archive + ".tar.gz", u2 = o2.archiveMD5, f2 = o2.binaryMD5;
            return r3.safeDownloadArchived(a2)(u2)(f2)(e4);
          }, C = function(e4) {
            return new Promise(function(t3, r4) {
              var n2 = o.spawn, i2 = function(e5) {
                return function(t4) {
                  return -1 !== ("" + t4).indexOf(e5);
                };
              }, a2 = e4.account, s2 = e4.password, u2 = e4.dataDir, c2 = e4.ensApi, f2 = e4.privateKey, d2 = 0, l2 = n2(e4.binPath, ["--bzzaccount", a2 || f2, "--datadir", u2, "--ens-api", c2]), h2 = function(e5) {
                0 === d2 && i2("Passphrase")(e5) ? setTimeout(function() {
                  d2 = 1, l2.stdin.write(s2 + "\n");
                }, 500) : i2("Swarm http proxy started")(e5) && (d2 = 2, clearTimeout(p2), t3(l2));
              };
              l2.stdout.on("data", h2), l2.stderr.on("data", h2);
              var p2 = setTimeout(function() {
                return r4(new Error("Couldn't start swarm process."));
              }, 2e4);
            });
          }, I = function(e4) {
            return new Promise(function(t3, r4) {
              e4.stderr.removeAllListeners("data"), e4.stdout.removeAllListeners("data"), e4.stdin.removeAllListeners("error"), e4.removeAllListeners("error"), e4.removeAllListeners("exit"), e4.kill("SIGINT");
              var n2 = setTimeout(function() {
                return e4.kill("SIGKILL");
              }, 8e3);
              e4.once("close", function() {
                clearTimeout(n2), t3();
              });
            });
          }, M = function(e4) {
            return A(e4)("test").then(function(e5) {
              return "c9a99c7d326dcc6316f32fe2625b311f6dc49a175e6877681ded93137d3569e7" === e5;
            }).catch(function() {
              return false;
            });
          }, U = function(e4) {
            return function(t3) {
              return b(e4)(t3).then(function(e5) {
                try {
                  return !!JSON.parse(j(e5)).entries;
                } catch (e6) {
                  return false;
                }
              });
            };
          }, R = function(e4) {
            return function(t3, r4, n2, i2, o2) {
              var a2;
              return void 0 !== t3 && (a2 = e4(t3)), void 0 !== r4 && (a2 = e4(r4)), void 0 !== n2 && (a2 = e4(n2)), void 0 !== i2 && (a2 = e4(i2)), void 0 !== o2 && (a2 = e4(o2)), a2;
            };
          }, j = function(e4) {
            return f.toString(f.fromUint8Array(e4));
          }, N = function(e4) {
            return f.toUint8Array(f.fromString(e4));
          }, F = function(e4) {
            return { download: function(t3, r4) {
              return B(e4)(t3)(r4);
            }, downloadData: R(b(e4)), downloadDataToDisk: R(g(e4)), downloadDirectory: R(v(e4)), downloadDirectoryToDisk: R(w(e4)), downloadEntries: R(y(e4)), downloadRoutes: R(m(e4)), isAvailable: function() {
              return M(e4);
            }, upload: function(t3) {
              return O(e4)(t3);
            }, uploadData: R(A(e4)), uploadFile: R(_(e4)), uploadFileFromDisk: R(_(e4)), uploadDataFromDisk: R(x(e4)), uploadDirectory: R(E(e4)), uploadDirectoryFromDisk: R(P(e4)), uploadToManifest: R(k(e4)), pick: l, hash: d, fromString: N, toString: j };
          };
          return { at: F, local: function(e4) {
            return function(t3) {
              return M("http://localhost:8500").then(function(r4) {
                return r4 ? t3(F("http://localhost:8500")).then(function() {
                }) : T(e4.binPath, e4.archives).onData(function(t4) {
                  return (e4.onProgress || function() {
                  })(t4.length);
                }).then(function() {
                  return C(e4);
                }).then(function(e5) {
                  return t3(F("http://localhost:8500")).then(function() {
                    return e5;
                  });
                }).then(I);
              });
            };
          }, download: B, downloadBinary: T, downloadData: b, downloadDataToDisk: g, downloadDirectory: v, downloadDirectoryToDisk: w, downloadEntries: y, downloadRoutes: m, isAvailable: M, startProcess: C, stopProcess: I, upload: O, uploadData: A, uploadDataFromDisk: x, uploadFile: _, uploadFileFromDisk: S, uploadDirectory: E, uploadDirectoryFromDisk: P, uploadToManifest: k, pick: l, hash: d, fromString: N, toString: j };
        };
      }, 7380: (e2) => {
        "use strict";
        var t2 = function(e3, t3) {
          for (var r3 = [], n = 0; n < e3; ++n)
            r3.push(t3(n));
          return r3;
        };
        e2.exports = { generate: t2, replicate: function(e3, r3) {
          return t2(e3, function() {
            return r3;
          });
        }, concat: function(e3, t3) {
          return e3.concat(t3);
        }, flatten: function(e3) {
          for (var t3 = [], r3 = 0, n = e3.length; r3 < n; ++r3)
            for (var i = 0, o = e3[r3].length; i < o; ++i)
              t3.push(e3[r3][i]);
          return t3;
        }, chunksOf: function(e3, t3) {
          for (var r3 = [], n = 0, i = t3.length; n < i; n += e3)
            r3.push(t3.slice(n, n + e3));
          return r3;
        } };
      }, 631: (e2, t2, r3) => {
        "use strict";
        r3(7380);
        var n = function(e3, t3) {
          return parseInt(e3.slice(2 * t3 + 2, 2 * t3 + 4), 16);
        }, i = function(e3) {
          return (e3.length - 2) / 2;
        }, o = function(e3) {
          for (var t3 = [], r4 = 2, n2 = e3.length; r4 < n2; r4 += 2)
            t3.push(parseInt(e3.slice(r4, r4 + 2), 16));
          return t3;
        }, a = function(e3) {
          for (var t3 = "0x", r4 = 0, n2 = e3.length; r4 < n2; ++r4) {
            var i2 = e3[r4];
            t3 += (i2 < 16 ? "0" : "") + i2.toString(16);
          }
          return t3;
        };
        e2.exports = { random: function(e3) {
          var t3 = void 0;
          t3 = "undefined" != typeof window && window.crypto && window.crypto.getRandomValues ? window.crypto.getRandomValues(new Uint8Array(e3)) : r3(4293).randomBytes(e3);
          for (var n2 = "0x", i2 = 0; i2 < e3; ++i2)
            n2 += ("00" + t3[i2].toString(16)).slice(-2);
          return n2;
        }, length: i, concat: function(e3, t3) {
          return e3.concat(t3.slice(2));
        }, flatten: function(e3) {
          return "0x" + e3.reduce(function(e4, t3) {
            return e4 + t3.slice(2);
          }, "");
        }, slice: function(e3, t3, r4) {
          return "0x" + r4.slice(2 * e3 + 2, 2 * t3 + 2);
        }, reverse: function(e3) {
          for (var t3 = "0x", r4 = 0, n2 = i(e3); r4 < n2; ++r4)
            t3 += e3.slice(2 * (n2 - r4), 2 * (n2 - r4 + 1));
          return t3;
        }, pad: function e3(t3, r4) {
          return r4.length === 2 * t3 + 2 ? r4 : e3(t3, "0x0" + r4.slice(2));
        }, padRight: function e3(t3, r4) {
          return r4.length === 2 * t3 + 2 ? r4 : e3(t3, r4 + "0");
        }, fromAscii: function(e3) {
          for (var t3 = "0x", r4 = 0; r4 < e3.length; ++r4)
            t3 += ("00" + e3.charCodeAt(r4).toString(16)).slice(-2);
          return t3;
        }, toAscii: function(e3) {
          for (var t3 = "", r4 = 2; r4 < e3.length; r4 += 2)
            t3 += String.fromCharCode(parseInt(e3.slice(r4, r4 + 2), 16));
          return t3;
        }, fromString: function(e3) {
          for (var t3 = function(e4) {
            var t4 = e4.toString(16);
            return t4.length < 2 ? "0" + t4 : t4;
          }, r4 = "0x", n2 = 0; n2 != e3.length; n2++) {
            var i2 = e3.charCodeAt(n2);
            if (i2 < 128)
              r4 += t3(i2);
            else {
              if (i2 < 2048)
                r4 += t3(i2 >> 6 | 192);
              else {
                if (i2 > 55295 && i2 < 56320) {
                  if (++n2 == e3.length)
                    return null;
                  var o2 = e3.charCodeAt(n2);
                  if (o2 < 56320 || o2 > 57343)
                    return null;
                  r4 += t3((i2 = 65536 + ((1023 & i2) << 10) + (1023 & o2)) >> 18 | 240), r4 += t3(i2 >> 12 & 63 | 128);
                } else
                  r4 += t3(i2 >> 12 | 224);
                r4 += t3(i2 >> 6 & 63 | 128);
              }
              r4 += t3(63 & i2 | 128);
            }
          }
          return r4;
        }, toString: function(e3) {
          for (var t3 = "", r4 = 0, o2 = i(e3); r4 < o2; ) {
            var a2 = n(e3, r4++);
            if (a2 > 127) {
              if (a2 > 191 && a2 < 224) {
                if (r4 >= o2)
                  return null;
                a2 = (31 & a2) << 6 | 63 & n(e3, r4);
              } else if (a2 > 223 && a2 < 240) {
                if (r4 + 1 >= o2)
                  return null;
                a2 = (15 & a2) << 12 | (63 & n(e3, r4)) << 6 | 63 & n(e3, ++r4);
              } else {
                if (!(a2 > 239 && a2 < 248))
                  return null;
                if (r4 + 2 >= o2)
                  return null;
                a2 = (7 & a2) << 18 | (63 & n(e3, r4)) << 12 | (63 & n(e3, ++r4)) << 6 | 63 & n(e3, ++r4);
              }
              ++r4;
            }
            if (a2 <= 65535)
              t3 += String.fromCharCode(a2);
            else {
              if (!(a2 <= 1114111))
                return null;
              a2 -= 65536, t3 += String.fromCharCode(a2 >> 10 | 55296), t3 += String.fromCharCode(1023 & a2 | 56320);
            }
          }
          return t3;
        }, fromNumber: function(e3) {
          var t3 = e3.toString(16);
          return t3.length % 2 == 0 ? "0x" + t3 : "0x0" + t3;
        }, toNumber: function(e3) {
          return parseInt(e3.slice(2), 16);
        }, fromNat: function(e3) {
          return "0x0" === e3 ? "0x" : e3.length % 2 == 0 ? e3 : "0x0" + e3.slice(2);
        }, toNat: function(e3) {
          return "0" === e3[2] ? "0x" + e3.slice(3) : e3;
        }, fromArray: a, toArray: o, fromUint8Array: function(e3) {
          return a([].slice.call(e3, 0));
        }, toUint8Array: function(e3) {
          return new Uint8Array(o(e3));
        } };
      }, 9574: (e2) => {
        "use strict";
        var t2 = "0123456789abcdef".split(""), r3 = [1, 256, 65536, 16777216], n = [0, 8, 16, 24], i = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648], o = function(e3) {
          var t3, r4, n2, o2, a2, s, u, c, f, d, l, h, p, b, y, m, v, g, w, A, k, _, S, E, x, P, O, B, T, C, I, M, U, R, j, N, F, L, D, H, q, z, G, K, V, J, W, Y, X, Q, Z, $, ee, te, re, ne, ie, oe, ae, se, ue, ce, fe;
          for (n2 = 0; n2 < 48; n2 += 2)
            o2 = e3[0] ^ e3[10] ^ e3[20] ^ e3[30] ^ e3[40], a2 = e3[1] ^ e3[11] ^ e3[21] ^ e3[31] ^ e3[41], s = e3[2] ^ e3[12] ^ e3[22] ^ e3[32] ^ e3[42], u = e3[3] ^ e3[13] ^ e3[23] ^ e3[33] ^ e3[43], c = e3[4] ^ e3[14] ^ e3[24] ^ e3[34] ^ e3[44], f = e3[5] ^ e3[15] ^ e3[25] ^ e3[35] ^ e3[45], d = e3[6] ^ e3[16] ^ e3[26] ^ e3[36] ^ e3[46], l = e3[7] ^ e3[17] ^ e3[27] ^ e3[37] ^ e3[47], t3 = (h = e3[8] ^ e3[18] ^ e3[28] ^ e3[38] ^ e3[48]) ^ (s << 1 | u >>> 31), r4 = (p = e3[9] ^ e3[19] ^ e3[29] ^ e3[39] ^ e3[49]) ^ (u << 1 | s >>> 31), e3[0] ^= t3, e3[1] ^= r4, e3[10] ^= t3, e3[11] ^= r4, e3[20] ^= t3, e3[21] ^= r4, e3[30] ^= t3, e3[31] ^= r4, e3[40] ^= t3, e3[41] ^= r4, t3 = o2 ^ (c << 1 | f >>> 31), r4 = a2 ^ (f << 1 | c >>> 31), e3[2] ^= t3, e3[3] ^= r4, e3[12] ^= t3, e3[13] ^= r4, e3[22] ^= t3, e3[23] ^= r4, e3[32] ^= t3, e3[33] ^= r4, e3[42] ^= t3, e3[43] ^= r4, t3 = s ^ (d << 1 | l >>> 31), r4 = u ^ (l << 1 | d >>> 31), e3[4] ^= t3, e3[5] ^= r4, e3[14] ^= t3, e3[15] ^= r4, e3[24] ^= t3, e3[25] ^= r4, e3[34] ^= t3, e3[35] ^= r4, e3[44] ^= t3, e3[45] ^= r4, t3 = c ^ (h << 1 | p >>> 31), r4 = f ^ (p << 1 | h >>> 31), e3[6] ^= t3, e3[7] ^= r4, e3[16] ^= t3, e3[17] ^= r4, e3[26] ^= t3, e3[27] ^= r4, e3[36] ^= t3, e3[37] ^= r4, e3[46] ^= t3, e3[47] ^= r4, t3 = d ^ (o2 << 1 | a2 >>> 31), r4 = l ^ (a2 << 1 | o2 >>> 31), e3[8] ^= t3, e3[9] ^= r4, e3[18] ^= t3, e3[19] ^= r4, e3[28] ^= t3, e3[29] ^= r4, e3[38] ^= t3, e3[39] ^= r4, e3[48] ^= t3, e3[49] ^= r4, b = e3[0], y = e3[1], J = e3[11] << 4 | e3[10] >>> 28, W = e3[10] << 4 | e3[11] >>> 28, B = e3[20] << 3 | e3[21] >>> 29, T = e3[21] << 3 | e3[20] >>> 29, se = e3[31] << 9 | e3[30] >>> 23, ue = e3[30] << 9 | e3[31] >>> 23, z = e3[40] << 18 | e3[41] >>> 14, G = e3[41] << 18 | e3[40] >>> 14, R = e3[2] << 1 | e3[3] >>> 31, j = e3[3] << 1 | e3[2] >>> 31, m = e3[13] << 12 | e3[12] >>> 20, v = e3[12] << 12 | e3[13] >>> 20, Y = e3[22] << 10 | e3[23] >>> 22, X = e3[23] << 10 | e3[22] >>> 22, C = e3[33] << 13 | e3[32] >>> 19, I = e3[32] << 13 | e3[33] >>> 19, ce = e3[42] << 2 | e3[43] >>> 30, fe = e3[43] << 2 | e3[42] >>> 30, te = e3[5] << 30 | e3[4] >>> 2, re = e3[4] << 30 | e3[5] >>> 2, N = e3[14] << 6 | e3[15] >>> 26, F = e3[15] << 6 | e3[14] >>> 26, g = e3[25] << 11 | e3[24] >>> 21, w = e3[24] << 11 | e3[25] >>> 21, Q = e3[34] << 15 | e3[35] >>> 17, Z = e3[35] << 15 | e3[34] >>> 17, M = e3[45] << 29 | e3[44] >>> 3, U = e3[44] << 29 | e3[45] >>> 3, E = e3[6] << 28 | e3[7] >>> 4, x = e3[7] << 28 | e3[6] >>> 4, ne = e3[17] << 23 | e3[16] >>> 9, ie = e3[16] << 23 | e3[17] >>> 9, L = e3[26] << 25 | e3[27] >>> 7, D = e3[27] << 25 | e3[26] >>> 7, A = e3[36] << 21 | e3[37] >>> 11, k = e3[37] << 21 | e3[36] >>> 11, $ = e3[47] << 24 | e3[46] >>> 8, ee = e3[46] << 24 | e3[47] >>> 8, K = e3[8] << 27 | e3[9] >>> 5, V = e3[9] << 27 | e3[8] >>> 5, P = e3[18] << 20 | e3[19] >>> 12, O = e3[19] << 20 | e3[18] >>> 12, oe = e3[29] << 7 | e3[28] >>> 25, ae = e3[28] << 7 | e3[29] >>> 25, H = e3[38] << 8 | e3[39] >>> 24, q = e3[39] << 8 | e3[38] >>> 24, _ = e3[48] << 14 | e3[49] >>> 18, S = e3[49] << 14 | e3[48] >>> 18, e3[0] = b ^ ~m & g, e3[1] = y ^ ~v & w, e3[10] = E ^ ~P & B, e3[11] = x ^ ~O & T, e3[20] = R ^ ~N & L, e3[21] = j ^ ~F & D, e3[30] = K ^ ~J & Y, e3[31] = V ^ ~W & X, e3[40] = te ^ ~ne & oe, e3[41] = re ^ ~ie & ae, e3[2] = m ^ ~g & A, e3[3] = v ^ ~w & k, e3[12] = P ^ ~B & C, e3[13] = O ^ ~T & I, e3[22] = N ^ ~L & H, e3[23] = F ^ ~D & q, e3[32] = J ^ ~Y & Q, e3[33] = W ^ ~X & Z, e3[42] = ne ^ ~oe & se, e3[43] = ie ^ ~ae & ue, e3[4] = g ^ ~A & _, e3[5] = w ^ ~k & S, e3[14] = B ^ ~C & M, e3[15] = T ^ ~I & U, e3[24] = L ^ ~H & z, e3[25] = D ^ ~q & G, e3[34] = Y ^ ~Q & $, e3[35] = X ^ ~Z & ee, e3[44] = oe ^ ~se & ce, e3[45] = ae ^ ~ue & fe, e3[6] = A ^ ~_ & b, e3[7] = k ^ ~S & y, e3[16] = C ^ ~M & E, e3[17] = I ^ ~U & x, e3[26] = H ^ ~z & R, e3[27] = q ^ ~G & j, e3[36] = Q ^ ~$ & K, e3[37] = Z ^ ~ee & V, e3[46] = se ^ ~ce & te, e3[47] = ue ^ ~fe & re, e3[8] = _ ^ ~b & m, e3[9] = S ^ ~y & v, e3[18] = M ^ ~E & P, e3[19] = U ^ ~x & O, e3[28] = z ^ ~R & N, e3[29] = G ^ ~j & F, e3[38] = $ ^ ~K & J, e3[39] = ee ^ ~V & W, e3[48] = ce ^ ~te & ne, e3[49] = fe ^ ~re & ie, e3[0] ^= i[n2], e3[1] ^= i[n2 + 1];
        }, a = function(e3) {
          return function(i2) {
            var a2;
            if ("0x" === i2.slice(0, 2)) {
              a2 = [];
              for (var s = 2, u = i2.length; s < u; s += 2)
                a2.push(parseInt(i2.slice(s, s + 2), 16));
            } else
              a2 = i2;
            return function(e4, i3) {
              for (var a3, s2 = i3.length, u2 = e4.blocks, c = e4.blockCount << 2, f = e4.blockCount, d = e4.outputBlocks, l = e4.s, h = 0; h < s2; ) {
                if (e4.reset)
                  for (e4.reset = false, u2[0] = e4.block, y = 1; y < f + 1; ++y)
                    u2[y] = 0;
                if ("string" != typeof i3)
                  for (y = e4.start; h < s2 && y < c; ++h)
                    u2[y >> 2] |= i3[h] << n[3 & y++];
                else
                  for (y = e4.start; h < s2 && y < c; ++h)
                    (a3 = i3.charCodeAt(h)) < 128 ? u2[y >> 2] |= a3 << n[3 & y++] : a3 < 2048 ? (u2[y >> 2] |= (192 | a3 >> 6) << n[3 & y++], u2[y >> 2] |= (128 | 63 & a3) << n[3 & y++]) : a3 < 55296 || a3 >= 57344 ? (u2[y >> 2] |= (224 | a3 >> 12) << n[3 & y++], u2[y >> 2] |= (128 | a3 >> 6 & 63) << n[3 & y++], u2[y >> 2] |= (128 | 63 & a3) << n[3 & y++]) : (a3 = 65536 + ((1023 & a3) << 10 | 1023 & i3.charCodeAt(++h)), u2[y >> 2] |= (240 | a3 >> 18) << n[3 & y++], u2[y >> 2] |= (128 | a3 >> 12 & 63) << n[3 & y++], u2[y >> 2] |= (128 | a3 >> 6 & 63) << n[3 & y++], u2[y >> 2] |= (128 | 63 & a3) << n[3 & y++]);
                if (e4.lastByteIndex = y, y >= c) {
                  for (e4.start = y - c, e4.block = u2[f], y = 0; y < f; ++y)
                    l[y] ^= u2[y];
                  o(l), e4.reset = true;
                } else
                  e4.start = y;
              }
              if (u2[(y = e4.lastByteIndex) >> 2] |= r3[3 & y], e4.lastByteIndex === c)
                for (u2[0] = u2[f], y = 1; y < f + 1; ++y)
                  u2[y] = 0;
              for (u2[f - 1] |= 2147483648, y = 0; y < f; ++y)
                l[y] ^= u2[y];
              o(l);
              for (var p, b = "", y = 0, m = 0; m < d; ) {
                for (y = 0; y < f && m < d; ++y, ++m)
                  p = l[y], b += t2[p >> 4 & 15] + t2[15 & p] + t2[p >> 12 & 15] + t2[p >> 8 & 15] + t2[p >> 20 & 15] + t2[p >> 16 & 15] + t2[p >> 28 & 15] + t2[p >> 24 & 15];
                m % f == 0 && (o(l), y = 0);
              }
              return "0x" + b;
            }(function(e4) {
              return { blocks: [], reset: true, block: 0, start: 0, blockCount: 1600 - (e4 << 1) >> 5, outputBlocks: e4 >> 5, s: (t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [].concat(t3, t3, t3, t3, t3)) };
              var t3;
            }(e3), a2);
          };
        };
        e2.exports = { keccak256: a(256), keccak512: a(512), keccak256s: a(256), keccak512s: a(512) };
      }, 8419: (e2) => {
        "use strict";
        e2.exports = function(e3, t2) {
          if (t2) {
            t2 = (t2 = t2.trim().replace(/^(\?|#|&)/, "")) ? "?" + t2 : t2;
            var r3 = e3.split(/[\?\#]/)[0];
            t2 && /\:\/\/[^\/]*$/.test(r3) && (r3 += "/");
            var n = e3.match(/(\#.*)$/);
            e3 = r3 + t2, n && (e3 += n[0]);
          }
          return e3;
        };
      }, 8677: (e2, t2, r3) => {
        "use strict";
        var n;
        e2 = r3.nmd(e2);
        var i = r3(8847)(r3(3355));
        !function(o) {
          var a = "object" == (0, i.default)(t2) && t2 && !t2.nodeType && t2, s = "object" == (0, i.default)(e2) && e2 && !e2.nodeType && e2, u = "object" == (void 0 === r3.g ? "undefined" : (0, i.default)(r3.g)) && r3.g;
          u.global !== u && u.window !== u && u.self !== u || (o = u);
          var c, f, d = 2147483647, l = 36, h = 1, p = 26, b = 38, y = 700, m = 72, v = 128, g = "-", w = /^xn--/, A = /[^\x20-\x7E]/, k = /[\x2E\u3002\uFF0E\uFF61]/g, _ = { overflow: "Overflow: input needs wider integers to process", "not-basic": "Illegal input >= 0x80 (not a basic code point)", "invalid-input": "Invalid input" }, S = l - h, E = Math.floor, x = String.fromCharCode;
          function P(e3) {
            throw RangeError(_[e3]);
          }
          function O(e3, t3) {
            for (var r4 = e3.length, n2 = []; r4--; )
              n2[r4] = t3(e3[r4]);
            return n2;
          }
          function B(e3, t3) {
            var r4 = e3.split("@"), n2 = "";
            return r4.length > 1 && (n2 = r4[0] + "@", e3 = r4[1]), n2 + O((e3 = e3.replace(k, ".")).split("."), t3).join(".");
          }
          function T(e3) {
            for (var t3, r4, n2 = [], i2 = 0, o2 = e3.length; i2 < o2; )
              (t3 = e3.charCodeAt(i2++)) >= 55296 && t3 <= 56319 && i2 < o2 ? 56320 == (64512 & (r4 = e3.charCodeAt(i2++))) ? n2.push(((1023 & t3) << 10) + (1023 & r4) + 65536) : (n2.push(t3), i2--) : n2.push(t3);
            return n2;
          }
          function C(e3) {
            return O(e3, function(e4) {
              var t3 = "";
              return e4 > 65535 && (t3 += x((e4 -= 65536) >>> 10 & 1023 | 55296), e4 = 56320 | 1023 & e4), t3 + x(e4);
            }).join("");
          }
          function I(e3, t3) {
            return e3 + 22 + 75 * (e3 < 26) - ((0 != t3) << 5);
          }
          function M(e3, t3, r4) {
            var n2 = 0;
            for (e3 = r4 ? E(e3 / y) : e3 >> 1, e3 += E(e3 / t3); e3 > S * p >> 1; n2 += l)
              e3 = E(e3 / S);
            return E(n2 + (S + 1) * e3 / (e3 + b));
          }
          function U(e3) {
            var t3, r4, n2, i2, o2, a2, s2, u2, c2, f2, b2, y2 = [], w2 = e3.length, A2 = 0, k2 = v, _2 = m;
            for ((r4 = e3.lastIndexOf(g)) < 0 && (r4 = 0), n2 = 0; n2 < r4; ++n2)
              e3.charCodeAt(n2) >= 128 && P("not-basic"), y2.push(e3.charCodeAt(n2));
            for (i2 = r4 > 0 ? r4 + 1 : 0; i2 < w2; ) {
              for (o2 = A2, a2 = 1, s2 = l; i2 >= w2 && P("invalid-input"), ((u2 = (b2 = e3.charCodeAt(i2++)) - 48 < 10 ? b2 - 22 : b2 - 65 < 26 ? b2 - 65 : b2 - 97 < 26 ? b2 - 97 : l) >= l || u2 > E((d - A2) / a2)) && P("overflow"), A2 += u2 * a2, !(u2 < (c2 = s2 <= _2 ? h : s2 >= _2 + p ? p : s2 - _2)); s2 += l)
                a2 > E(d / (f2 = l - c2)) && P("overflow"), a2 *= f2;
              _2 = M(A2 - o2, t3 = y2.length + 1, 0 == o2), E(A2 / t3) > d - k2 && P("overflow"), k2 += E(A2 / t3), A2 %= t3, y2.splice(A2++, 0, k2);
            }
            return C(y2);
          }
          function R(e3) {
            var t3, r4, n2, i2, o2, a2, s2, u2, c2, f2, b2, y2, w2, A2, k2, _2 = [];
            for (y2 = (e3 = T(e3)).length, t3 = v, r4 = 0, o2 = m, a2 = 0; a2 < y2; ++a2)
              (b2 = e3[a2]) < 128 && _2.push(x(b2));
            for (n2 = i2 = _2.length, i2 && _2.push(g); n2 < y2; ) {
              for (s2 = d, a2 = 0; a2 < y2; ++a2)
                (b2 = e3[a2]) >= t3 && b2 < s2 && (s2 = b2);
              for (s2 - t3 > E((d - r4) / (w2 = n2 + 1)) && P("overflow"), r4 += (s2 - t3) * w2, t3 = s2, a2 = 0; a2 < y2; ++a2)
                if ((b2 = e3[a2]) < t3 && ++r4 > d && P("overflow"), b2 == t3) {
                  for (u2 = r4, c2 = l; !(u2 < (f2 = c2 <= o2 ? h : c2 >= o2 + p ? p : c2 - o2)); c2 += l)
                    k2 = u2 - f2, A2 = l - f2, _2.push(x(I(f2 + k2 % A2, 0))), u2 = E(k2 / A2);
                  _2.push(x(I(u2, 0))), o2 = M(r4, w2, n2 == i2), r4 = 0, ++n2;
                }
              ++r4, ++t3;
            }
            return _2.join("");
          }
          if (c = { version: "1.3.2", ucs2: { decode: T, encode: C }, decode: U, encode: R, toASCII: function(e3) {
            return B(e3, function(e4) {
              return A.test(e4) ? "xn--" + R(e4) : e4;
            });
          }, toUnicode: function(e3) {
            return B(e3, function(e4) {
              return w.test(e4) ? U(e4.slice(4).toLowerCase()) : e4;
            });
          } }, "object" == (0, i.default)(r3.amdO) && r3.amdO)
            void 0 === (n = (function() {
              return c;
            }).call(t2, r3, t2, e2)) || (e2.exports = n);
          else if (a && s)
            if (e2.exports == a)
              s.exports = c;
            else
              for (f in c)
                c.hasOwnProperty(f) && (a[f] = c[f]);
          else
            o.punycode = c;
        }(void 0);
      }, 8983: (e2) => {
        "use strict";
        function t2(e3, t3) {
          return Object.prototype.hasOwnProperty.call(e3, t3);
        }
        e2.exports = function(e3, r3, n, i) {
          r3 = r3 || "&", n = n || "=";
          var o = {};
          if ("string" != typeof e3 || 0 === e3.length)
            return o;
          var a = /\+/g;
          e3 = e3.split(r3);
          var s = 1e3;
          i && "number" == typeof i.maxKeys && (s = i.maxKeys);
          var u = e3.length;
          s > 0 && u > s && (u = s);
          for (var c = 0; c < u; ++c) {
            var f, d, l, h, p = e3[c].replace(a, "%20"), b = p.indexOf(n);
            b >= 0 ? (f = p.substr(0, b), d = p.substr(b + 1)) : (f = p, d = ""), l = decodeURIComponent(f), h = decodeURIComponent(d), t2(o, l) ? Array.isArray(o[l]) ? o[l].push(h) : o[l] = [o[l], h] : o[l] = h;
          }
          return o;
        };
      }, 4031: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = function(e3) {
          switch ((0, n.default)(e3)) {
            case "string":
              return e3;
            case "boolean":
              return e3 ? "true" : "false";
            case "number":
              return isFinite(e3) ? e3 : "";
            default:
              return "";
          }
        };
        e2.exports = function(e3, t3, r4, o) {
          return t3 = t3 || "&", r4 = r4 || "=", null === e3 && (e3 = void 0), "object" === (0, n.default)(e3) ? Object.keys(e3).map(function(n2) {
            var o2 = encodeURIComponent(i(n2)) + r4;
            return Array.isArray(e3[n2]) ? e3[n2].map(function(e4) {
              return o2 + encodeURIComponent(i(e4));
            }).join(t3) : o2 + encodeURIComponent(i(e3[n2]));
          }).join(t3) : o ? encodeURIComponent(i(o)) + r4 + encodeURIComponent(i(e3)) : "";
        };
      }, 845: (e2, t2, r3) => {
        "use strict";
        t2.decode = t2.parse = r3(8983), t2.encode = t2.stringify = r3(4031);
      }, 1143: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(8677), o = r3(5751);
        function a() {
          this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
        }
        t2.parse = w, t2.resolve = function(e3, t3) {
          return w(e3, false, true).resolve(t3);
        }, t2.resolveObject = function(e3, t3) {
          return e3 ? w(e3, false, true).resolveObject(t3) : t3;
        }, t2.format = function(e3) {
          return o.isString(e3) && (e3 = w(e3)), e3 instanceof a ? e3.format() : a.prototype.format.call(e3);
        }, t2.Url = a;
        var s = /^([a-z0-9.+-]+:)/i, u = /:[0-9]*$/, c = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, f = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "	"]), d = ["'"].concat(f), l = ["%", "/", "?", ";", "#"].concat(d), h = ["/", "?", "#"], p = /^[+a-z0-9A-Z_-]{0,63}$/, b = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, y = { javascript: true, "javascript:": true }, m = { javascript: true, "javascript:": true }, v = { http: true, https: true, ftp: true, gopher: true, file: true, "http:": true, "https:": true, "ftp:": true, "gopher:": true, "file:": true }, g = r3(845);
        function w(e3, t3, r4) {
          if (e3 && o.isObject(e3) && e3 instanceof a)
            return e3;
          var n2 = new a();
          return n2.parse(e3, t3, r4), n2;
        }
        a.prototype.parse = function(e3, t3, r4) {
          if (!o.isString(e3))
            throw new TypeError("Parameter 'url' must be a string, not " + (0, n.default)(e3));
          var a2 = e3.indexOf("?"), u2 = -1 !== a2 && a2 < e3.indexOf("#") ? "?" : "#", f2 = e3.split(u2);
          f2[0] = f2[0].replace(/\\/g, "/");
          var w2 = e3 = f2.join(u2);
          if (w2 = w2.trim(), !r4 && 1 === e3.split("#").length) {
            var A = c.exec(w2);
            if (A)
              return this.path = w2, this.href = w2, this.pathname = A[1], A[2] ? (this.search = A[2], this.query = t3 ? g.parse(this.search.substr(1)) : this.search.substr(1)) : t3 && (this.search = "", this.query = {}), this;
          }
          var k = s.exec(w2);
          if (k) {
            var _ = (k = k[0]).toLowerCase();
            this.protocol = _, w2 = w2.substr(k.length);
          }
          if (r4 || k || w2.match(/^\/\/[^@\/]+@[^@\/]+/)) {
            var S = "//" === w2.substr(0, 2);
            !S || k && m[k] || (w2 = w2.substr(2), this.slashes = true);
          }
          if (!m[k] && (S || k && !v[k])) {
            for (var E, x, P = -1, O = 0; O < h.length; O++)
              -1 !== (B = w2.indexOf(h[O])) && (-1 === P || B < P) && (P = B);
            for (-1 !== (x = -1 === P ? w2.lastIndexOf("@") : w2.lastIndexOf("@", P)) && (E = w2.slice(0, x), w2 = w2.slice(x + 1), this.auth = decodeURIComponent(E)), P = -1, O = 0; O < l.length; O++) {
              var B;
              -1 !== (B = w2.indexOf(l[O])) && (-1 === P || B < P) && (P = B);
            }
            -1 === P && (P = w2.length), this.host = w2.slice(0, P), w2 = w2.slice(P), this.parseHost(), this.hostname = this.hostname || "";
            var T = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
            if (!T)
              for (var C = this.hostname.split(/\./), I = (O = 0, C.length); O < I; O++) {
                var M = C[O];
                if (M && !M.match(p)) {
                  for (var U = "", R = 0, j = M.length; R < j; R++)
                    M.charCodeAt(R) > 127 ? U += "x" : U += M[R];
                  if (!U.match(p)) {
                    var N = C.slice(0, O), F = C.slice(O + 1), L = M.match(b);
                    L && (N.push(L[1]), F.unshift(L[2])), F.length && (w2 = "/" + F.join(".") + w2), this.hostname = N.join(".");
                    break;
                  }
                }
              }
            this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), T || (this.hostname = i.toASCII(this.hostname));
            var D = this.port ? ":" + this.port : "", H = this.hostname || "";
            this.host = H + D, this.href += this.host, T && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== w2[0] && (w2 = "/" + w2));
          }
          if (!y[_])
            for (O = 0, I = d.length; O < I; O++) {
              var q = d[O];
              if (-1 !== w2.indexOf(q)) {
                var z = encodeURIComponent(q);
                z === q && (z = escape(q)), w2 = w2.split(q).join(z);
              }
            }
          var G = w2.indexOf("#");
          -1 !== G && (this.hash = w2.substr(G), w2 = w2.slice(0, G));
          var K = w2.indexOf("?");
          if (-1 !== K ? (this.search = w2.substr(K), this.query = w2.substr(K + 1), t3 && (this.query = g.parse(this.query)), w2 = w2.slice(0, K)) : t3 && (this.search = "", this.query = {}), w2 && (this.pathname = w2), v[_] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
            D = this.pathname || "";
            var V = this.search || "";
            this.path = D + V;
          }
          return this.href = this.format(), this;
        }, a.prototype.format = function() {
          var e3 = this.auth || "";
          e3 && (e3 = (e3 = encodeURIComponent(e3)).replace(/%3A/i, ":"), e3 += "@");
          var t3 = this.protocol || "", r4 = this.pathname || "", n2 = this.hash || "", i2 = false, a2 = "";
          this.host ? i2 = e3 + this.host : this.hostname && (i2 = e3 + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"), this.port && (i2 += ":" + this.port)), this.query && o.isObject(this.query) && Object.keys(this.query).length && (a2 = g.stringify(this.query));
          var s2 = this.search || a2 && "?" + a2 || "";
          return t3 && ":" !== t3.substr(-1) && (t3 += ":"), this.slashes || (!t3 || v[t3]) && false !== i2 ? (i2 = "//" + (i2 || ""), r4 && "/" !== r4.charAt(0) && (r4 = "/" + r4)) : i2 || (i2 = ""), n2 && "#" !== n2.charAt(0) && (n2 = "#" + n2), s2 && "?" !== s2.charAt(0) && (s2 = "?" + s2), t3 + i2 + (r4 = r4.replace(/[?#]/g, function(e4) {
            return encodeURIComponent(e4);
          })) + (s2 = s2.replace("#", "%23")) + n2;
        }, a.prototype.resolve = function(e3) {
          return this.resolveObject(w(e3, false, true)).format();
        }, a.prototype.resolveObject = function(e3) {
          if (o.isString(e3)) {
            var t3 = new a();
            t3.parse(e3, false, true), e3 = t3;
          }
          for (var r4 = new a(), n2 = Object.keys(this), i2 = 0; i2 < n2.length; i2++) {
            var s2 = n2[i2];
            r4[s2] = this[s2];
          }
          if (r4.hash = e3.hash, "" === e3.href)
            return r4.href = r4.format(), r4;
          if (e3.slashes && !e3.protocol) {
            for (var u2 = Object.keys(e3), c2 = 0; c2 < u2.length; c2++) {
              var f2 = u2[c2];
              "protocol" !== f2 && (r4[f2] = e3[f2]);
            }
            return v[r4.protocol] && r4.hostname && !r4.pathname && (r4.path = r4.pathname = "/"), r4.href = r4.format(), r4;
          }
          if (e3.protocol && e3.protocol !== r4.protocol) {
            if (!v[e3.protocol]) {
              for (var d2 = Object.keys(e3), l2 = 0; l2 < d2.length; l2++) {
                var h2 = d2[l2];
                r4[h2] = e3[h2];
              }
              return r4.href = r4.format(), r4;
            }
            if (r4.protocol = e3.protocol, e3.host || m[e3.protocol])
              r4.pathname = e3.pathname;
            else {
              for (var p2 = (e3.pathname || "").split("/"); p2.length && !(e3.host = p2.shift()); )
                ;
              e3.host || (e3.host = ""), e3.hostname || (e3.hostname = ""), "" !== p2[0] && p2.unshift(""), p2.length < 2 && p2.unshift(""), r4.pathname = p2.join("/");
            }
            if (r4.search = e3.search, r4.query = e3.query, r4.host = e3.host || "", r4.auth = e3.auth, r4.hostname = e3.hostname || e3.host, r4.port = e3.port, r4.pathname || r4.search) {
              var b2 = r4.pathname || "", y2 = r4.search || "";
              r4.path = b2 + y2;
            }
            return r4.slashes = r4.slashes || e3.slashes, r4.href = r4.format(), r4;
          }
          var g2 = r4.pathname && "/" === r4.pathname.charAt(0), w2 = e3.host || e3.pathname && "/" === e3.pathname.charAt(0), A = w2 || g2 || r4.host && e3.pathname, k = A, _ = r4.pathname && r4.pathname.split("/") || [], S = (p2 = e3.pathname && e3.pathname.split("/") || [], r4.protocol && !v[r4.protocol]);
          if (S && (r4.hostname = "", r4.port = null, r4.host && ("" === _[0] ? _[0] = r4.host : _.unshift(r4.host)), r4.host = "", e3.protocol && (e3.hostname = null, e3.port = null, e3.host && ("" === p2[0] ? p2[0] = e3.host : p2.unshift(e3.host)), e3.host = null), A = A && ("" === p2[0] || "" === _[0])), w2)
            r4.host = e3.host || "" === e3.host ? e3.host : r4.host, r4.hostname = e3.hostname || "" === e3.hostname ? e3.hostname : r4.hostname, r4.search = e3.search, r4.query = e3.query, _ = p2;
          else if (p2.length)
            _ || (_ = []), _.pop(), _ = _.concat(p2), r4.search = e3.search, r4.query = e3.query;
          else if (!o.isNullOrUndefined(e3.search))
            return S && (r4.hostname = r4.host = _.shift(), (B = !!(r4.host && r4.host.indexOf("@") > 0) && r4.host.split("@")) && (r4.auth = B.shift(), r4.host = r4.hostname = B.shift())), r4.search = e3.search, r4.query = e3.query, o.isNull(r4.pathname) && o.isNull(r4.search) || (r4.path = (r4.pathname ? r4.pathname : "") + (r4.search ? r4.search : "")), r4.href = r4.format(), r4;
          if (!_.length)
            return r4.pathname = null, r4.search ? r4.path = "/" + r4.search : r4.path = null, r4.href = r4.format(), r4;
          for (var E = _.slice(-1)[0], x = (r4.host || e3.host || _.length > 1) && ("." === E || ".." === E) || "" === E, P = 0, O = _.length; O >= 0; O--)
            "." === (E = _[O]) ? _.splice(O, 1) : ".." === E ? (_.splice(O, 1), P++) : P && (_.splice(O, 1), P--);
          if (!A && !k)
            for (; P--; P)
              _.unshift("..");
          !A || "" === _[0] || _[0] && "/" === _[0].charAt(0) || _.unshift(""), x && "/" !== _.join("/").substr(-1) && _.push("");
          var B, T = "" === _[0] || _[0] && "/" === _[0].charAt(0);
          return S && (r4.hostname = r4.host = T ? "" : _.length ? _.shift() : "", (B = !!(r4.host && r4.host.indexOf("@") > 0) && r4.host.split("@")) && (r4.auth = B.shift(), r4.host = r4.hostname = B.shift())), (A = A || r4.host && _.length) && !T && _.unshift(""), _.length ? r4.pathname = _.join("/") : (r4.pathname = null, r4.path = null), o.isNull(r4.pathname) && o.isNull(r4.search) || (r4.path = (r4.pathname ? r4.pathname : "") + (r4.search ? r4.search : "")), r4.auth = e3.auth || r4.auth, r4.slashes = r4.slashes || e3.slashes, r4.href = r4.format(), r4;
        }, a.prototype.parseHost = function() {
          var e3 = this.host, t3 = u.exec(e3);
          t3 && (":" !== (t3 = t3[0]) && (this.port = t3.substr(1)), e3 = e3.substr(0, e3.length - t3.length)), e3 && (this.hostname = e3);
        };
      }, 5751: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355));
        e2.exports = { isString: function(e3) {
          return "string" == typeof e3;
        }, isObject: function(e3) {
          return "object" === (0, n.default)(e3) && null !== e3;
        }, isNull: function(e3) {
          return null === e3;
        }, isNullOrUndefined: function(e3) {
          return null == e3;
        } };
      }, 8632: (e2, t2) => {
        "use strict";
        !function(e3) {
          var t3, r3, n, i = String.fromCharCode;
          function o(e4) {
            for (var t4, r4, n2 = [], i2 = 0, o2 = e4.length; i2 < o2; )
              (t4 = e4.charCodeAt(i2++)) >= 55296 && t4 <= 56319 && i2 < o2 ? 56320 == (64512 & (r4 = e4.charCodeAt(i2++))) ? n2.push(((1023 & t4) << 10) + (1023 & r4) + 65536) : (n2.push(t4), i2--) : n2.push(t4);
            return n2;
          }
          function a(e4) {
            if (e4 >= 55296 && e4 <= 57343)
              throw Error("Lone surrogate U+" + e4.toString(16).toUpperCase() + " is not a scalar value");
          }
          function s(e4, t4) {
            return i(e4 >> t4 & 63 | 128);
          }
          function u(e4) {
            if (0 == (4294967168 & e4))
              return i(e4);
            var t4 = "";
            return 0 == (4294965248 & e4) ? t4 = i(e4 >> 6 & 31 | 192) : 0 == (4294901760 & e4) ? (a(e4), t4 = i(e4 >> 12 & 15 | 224), t4 += s(e4, 6)) : 0 == (4292870144 & e4) && (t4 = i(e4 >> 18 & 7 | 240), t4 += s(e4, 12), t4 += s(e4, 6)), t4 + i(63 & e4 | 128);
          }
          function c() {
            if (n >= r3)
              throw Error("Invalid byte index");
            var e4 = 255 & t3[n];
            if (n++, 128 == (192 & e4))
              return 63 & e4;
            throw Error("Invalid continuation byte");
          }
          function f() {
            var e4, i2;
            if (n > r3)
              throw Error("Invalid byte index");
            if (n == r3)
              return false;
            if (e4 = 255 & t3[n], n++, 0 == (128 & e4))
              return e4;
            if (192 == (224 & e4)) {
              if ((i2 = (31 & e4) << 6 | c()) >= 128)
                return i2;
              throw Error("Invalid continuation byte");
            }
            if (224 == (240 & e4)) {
              if ((i2 = (15 & e4) << 12 | c() << 6 | c()) >= 2048)
                return a(i2), i2;
              throw Error("Invalid continuation byte");
            }
            if (240 == (248 & e4) && (i2 = (7 & e4) << 18 | c() << 12 | c() << 6 | c()) >= 65536 && i2 <= 1114111)
              return i2;
            throw Error("Invalid UTF-8 detected");
          }
          e3.version = "3.0.0", e3.encode = function(e4) {
            for (var t4 = o(e4), r4 = t4.length, n2 = -1, i2 = ""; ++n2 < r4; )
              i2 += u(t4[n2]);
            return i2;
          }, e3.decode = function(e4) {
            t3 = o(e4), r3 = t3.length, n = 0;
            for (var a2, s2 = []; false !== (a2 = f()); )
              s2.push(a2);
            return function(e5) {
              for (var t4, r4 = e5.length, n2 = -1, o2 = ""; ++n2 < r4; )
                (t4 = e5[n2]) > 65535 && (o2 += i((t4 -= 65536) >>> 10 & 1023 | 55296), t4 = 56320 | 1023 & t4), o2 += i(t4);
              return o2;
            }(s2);
          };
        }(t2);
      }, 6219: (e2, t2, r3) => {
        "use strict";
        function n(e3) {
          try {
            if (!r3.g.localStorage)
              return false;
          } catch (e4) {
            return false;
          }
          var t3 = r3.g.localStorage[e3];
          return null != t3 && "true" === String(t3).toLowerCase();
        }
        e2.exports = function(e3, t3) {
          if (n("noDeprecation"))
            return e3;
          var r4 = false;
          return function() {
            if (!r4) {
              if (n("throwDeprecation"))
                throw new Error(t3);
              n("traceDeprecation") ? console.trace(t3) : console.warn(t3), r4 = true;
            }
            return e3.apply(this, arguments);
          };
        };
      }, 6248: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355));
        e2.exports = function(e3) {
          return e3 && "object" === (0, n.default)(e3) && "function" == typeof e3.copy && "function" == typeof e3.fill && "function" == typeof e3.readUInt8;
        };
      }, 7092: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(9446), o = r3(4477), a = r3(2337), s = r3(8915);
        function u(e3) {
          return e3.call.bind(e3);
        }
        var c = "undefined" != typeof BigInt, f = "undefined" != typeof Symbol, d = u(Object.prototype.toString), l = u(Number.prototype.valueOf), h = u(String.prototype.valueOf), p = u(Boolean.prototype.valueOf);
        if (c)
          var b = u(BigInt.prototype.valueOf);
        if (f)
          var y = u(Symbol.prototype.valueOf);
        function m(e3, t3) {
          if ("object" !== (0, n.default)(e3))
            return false;
          try {
            return t3(e3), true;
          } catch (e4) {
            return false;
          }
        }
        function v(e3) {
          return "[object Map]" === d(e3);
        }
        function g(e3) {
          return "[object Set]" === d(e3);
        }
        function w(e3) {
          return "[object WeakMap]" === d(e3);
        }
        function A(e3) {
          return "[object WeakSet]" === d(e3);
        }
        function k(e3) {
          return "[object ArrayBuffer]" === d(e3);
        }
        function _(e3) {
          return "undefined" != typeof ArrayBuffer && (k.working ? k(e3) : e3 instanceof ArrayBuffer);
        }
        function S(e3) {
          return "[object DataView]" === d(e3);
        }
        function E(e3) {
          return "undefined" != typeof DataView && (S.working ? S(e3) : e3 instanceof DataView);
        }
        t2.isArgumentsObject = i, t2.isGeneratorFunction = o, t2.isTypedArray = s, t2.isPromise = function(e3) {
          return "undefined" != typeof Promise && e3 instanceof Promise || null !== e3 && "object" === (0, n.default)(e3) && "function" == typeof e3.then && "function" == typeof e3.catch;
        }, t2.isArrayBufferView = function(e3) {
          return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(e3) : s(e3) || E(e3);
        }, t2.isUint8Array = function(e3) {
          return "Uint8Array" === a(e3);
        }, t2.isUint8ClampedArray = function(e3) {
          return "Uint8ClampedArray" === a(e3);
        }, t2.isUint16Array = function(e3) {
          return "Uint16Array" === a(e3);
        }, t2.isUint32Array = function(e3) {
          return "Uint32Array" === a(e3);
        }, t2.isInt8Array = function(e3) {
          return "Int8Array" === a(e3);
        }, t2.isInt16Array = function(e3) {
          return "Int16Array" === a(e3);
        }, t2.isInt32Array = function(e3) {
          return "Int32Array" === a(e3);
        }, t2.isFloat32Array = function(e3) {
          return "Float32Array" === a(e3);
        }, t2.isFloat64Array = function(e3) {
          return "Float64Array" === a(e3);
        }, t2.isBigInt64Array = function(e3) {
          return "BigInt64Array" === a(e3);
        }, t2.isBigUint64Array = function(e3) {
          return "BigUint64Array" === a(e3);
        }, v.working = "undefined" != typeof Map && v(/* @__PURE__ */ new Map()), t2.isMap = function(e3) {
          return "undefined" != typeof Map && (v.working ? v(e3) : e3 instanceof Map);
        }, g.working = "undefined" != typeof Set && g(/* @__PURE__ */ new Set()), t2.isSet = function(e3) {
          return "undefined" != typeof Set && (g.working ? g(e3) : e3 instanceof Set);
        }, w.working = "undefined" != typeof WeakMap && w(/* @__PURE__ */ new WeakMap()), t2.isWeakMap = function(e3) {
          return "undefined" != typeof WeakMap && (w.working ? w(e3) : e3 instanceof WeakMap);
        }, A.working = "undefined" != typeof WeakSet && A(/* @__PURE__ */ new WeakSet()), t2.isWeakSet = function(e3) {
          return A(e3);
        }, k.working = "undefined" != typeof ArrayBuffer && k(new ArrayBuffer()), t2.isArrayBuffer = _, S.working = "undefined" != typeof ArrayBuffer && "undefined" != typeof DataView && S(new DataView(new ArrayBuffer(1), 0, 1)), t2.isDataView = E;
        var x = "undefined" != typeof SharedArrayBuffer ? SharedArrayBuffer : void 0;
        function P(e3) {
          return "[object SharedArrayBuffer]" === d(e3);
        }
        function O(e3) {
          return void 0 !== x && (void 0 === P.working && (P.working = P(new x())), P.working ? P(e3) : e3 instanceof x);
        }
        function B(e3) {
          return m(e3, l);
        }
        function T(e3) {
          return m(e3, h);
        }
        function C(e3) {
          return m(e3, p);
        }
        function I(e3) {
          return c && m(e3, b);
        }
        function M(e3) {
          return f && m(e3, y);
        }
        t2.isSharedArrayBuffer = O, t2.isAsyncFunction = function(e3) {
          return "[object AsyncFunction]" === d(e3);
        }, t2.isMapIterator = function(e3) {
          return "[object Map Iterator]" === d(e3);
        }, t2.isSetIterator = function(e3) {
          return "[object Set Iterator]" === d(e3);
        }, t2.isGeneratorObject = function(e3) {
          return "[object Generator]" === d(e3);
        }, t2.isWebAssemblyCompiledModule = function(e3) {
          return "[object WebAssembly.Module]" === d(e3);
        }, t2.isNumberObject = B, t2.isStringObject = T, t2.isBooleanObject = C, t2.isBigIntObject = I, t2.isSymbolObject = M, t2.isBoxedPrimitive = function(e3) {
          return B(e3) || T(e3) || C(e3) || I(e3) || M(e3);
        }, t2.isAnyArrayBuffer = function(e3) {
          return "undefined" != typeof Uint8Array && (_(e3) || O(e3));
        }, ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(e3) {
          Object.defineProperty(t2, e3, { enumerable: false, value: function() {
            throw new Error(e3 + " is not supported in userland");
          } });
        });
      }, 5058: (e2, t2, r3) => {
        "use strict";
        var n = r3(9142), i = r3(8847)(r3(3355)), o = Object.getOwnPropertyDescriptors || function(e3) {
          for (var t3 = Object.keys(e3), r4 = {}, n2 = 0; n2 < t3.length; n2++)
            r4[t3[n2]] = Object.getOwnPropertyDescriptor(e3, t3[n2]);
          return r4;
        }, a = /%[sdj%]/g;
        t2.format = function(e3) {
          if (!w(e3)) {
            for (var t3 = [], r4 = 0; r4 < arguments.length; r4++)
              t3.push(f(arguments[r4]));
            return t3.join(" ");
          }
          r4 = 1;
          for (var n2 = arguments, i2 = n2.length, o2 = String(e3).replace(a, function(e4) {
            if ("%%" === e4)
              return "%";
            if (r4 >= i2)
              return e4;
            switch (e4) {
              case "%s":
                return String(n2[r4++]);
              case "%d":
                return Number(n2[r4++]);
              case "%j":
                try {
                  return JSON.stringify(n2[r4++]);
                } catch (e5) {
                  return "[Circular]";
                }
              default:
                return e4;
            }
          }), s2 = n2[r4]; r4 < i2; s2 = n2[++r4])
            v(s2) || !_(s2) ? o2 += " " + s2 : o2 += " " + f(s2);
          return o2;
        }, t2.deprecate = function(e3, r4) {
          if (void 0 !== n && true === n.noDeprecation)
            return e3;
          if (void 0 === n)
            return function() {
              return t2.deprecate(e3, r4).apply(this, arguments);
            };
          var i2 = false;
          return function() {
            if (!i2) {
              if (n.throwDeprecation)
                throw new Error(r4);
              n.traceDeprecation ? console.trace(r4) : console.error(r4), i2 = true;
            }
            return e3.apply(this, arguments);
          };
        };
        var s = {}, u = /^$/;
        if (n.env.NODE_DEBUG) {
          var c = n.env.NODE_DEBUG;
          c = c.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase(), u = new RegExp("^" + c + "$", "i");
        }
        function f(e3, r4) {
          var n2 = { seen: [], stylize: l };
          return arguments.length >= 3 && (n2.depth = arguments[2]), arguments.length >= 4 && (n2.colors = arguments[3]), m(r4) ? n2.showHidden = r4 : r4 && t2._extend(n2, r4), A(n2.showHidden) && (n2.showHidden = false), A(n2.depth) && (n2.depth = 2), A(n2.colors) && (n2.colors = false), A(n2.customInspect) && (n2.customInspect = true), n2.colors && (n2.stylize = d), h(n2, e3, n2.depth);
        }
        function d(e3, t3) {
          var r4 = f.styles[t3];
          return r4 ? "\x1B[" + f.colors[r4][0] + "m" + e3 + "\x1B[" + f.colors[r4][1] + "m" : e3;
        }
        function l(e3, t3) {
          return e3;
        }
        function h(e3, r4, n2) {
          if (e3.customInspect && r4 && x(r4.inspect) && r4.inspect !== t2.inspect && (!r4.constructor || r4.constructor.prototype !== r4)) {
            var i2 = r4.inspect(n2, e3);
            return w(i2) || (i2 = h(e3, i2, n2)), i2;
          }
          var o2 = function(e4, t3) {
            if (A(t3))
              return e4.stylize("undefined", "undefined");
            if (w(t3)) {
              var r5 = "'" + JSON.stringify(t3).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
              return e4.stylize(r5, "string");
            }
            return g(t3) ? e4.stylize("" + t3, "number") : m(t3) ? e4.stylize("" + t3, "boolean") : v(t3) ? e4.stylize("null", "null") : void 0;
          }(e3, r4);
          if (o2)
            return o2;
          var a2 = Object.keys(r4), s2 = function(e4) {
            var t3 = {};
            return e4.forEach(function(e5, r5) {
              t3[e5] = true;
            }), t3;
          }(a2);
          if (e3.showHidden && (a2 = Object.getOwnPropertyNames(r4)), E(r4) && (a2.indexOf("message") >= 0 || a2.indexOf("description") >= 0))
            return p(r4);
          if (0 === a2.length) {
            if (x(r4)) {
              var u2 = r4.name ? ": " + r4.name : "";
              return e3.stylize("[Function" + u2 + "]", "special");
            }
            if (k(r4))
              return e3.stylize(RegExp.prototype.toString.call(r4), "regexp");
            if (S(r4))
              return e3.stylize(Date.prototype.toString.call(r4), "date");
            if (E(r4))
              return p(r4);
          }
          var c2, f2 = "", d2 = false, l2 = ["{", "}"];
          return y(r4) && (d2 = true, l2 = ["[", "]"]), x(r4) && (f2 = " [Function" + (r4.name ? ": " + r4.name : "") + "]"), k(r4) && (f2 = " " + RegExp.prototype.toString.call(r4)), S(r4) && (f2 = " " + Date.prototype.toUTCString.call(r4)), E(r4) && (f2 = " " + p(r4)), 0 !== a2.length || d2 && 0 != r4.length ? n2 < 0 ? k(r4) ? e3.stylize(RegExp.prototype.toString.call(r4), "regexp") : e3.stylize("[Object]", "special") : (e3.seen.push(r4), c2 = d2 ? function(e4, t3, r5, n3, i3) {
            for (var o3 = [], a3 = 0, s3 = t3.length; a3 < s3; ++a3)
              T(t3, String(a3)) ? o3.push(b(e4, t3, r5, n3, String(a3), true)) : o3.push("");
            return i3.forEach(function(i4) {
              i4.match(/^\d+$/) || o3.push(b(e4, t3, r5, n3, i4, true));
            }), o3;
          }(e3, r4, n2, s2, a2) : a2.map(function(t3) {
            return b(e3, r4, n2, s2, t3, d2);
          }), e3.seen.pop(), function(e4, t3, r5) {
            return e4.reduce(function(e5, t4) {
              return t4.indexOf("\n"), e5 + t4.replace(/\u001b\[\d\d?m/g, "").length + 1;
            }, 0) > 60 ? r5[0] + ("" === t3 ? "" : t3 + "\n ") + " " + e4.join(",\n  ") + " " + r5[1] : r5[0] + t3 + " " + e4.join(", ") + " " + r5[1];
          }(c2, f2, l2)) : l2[0] + f2 + l2[1];
        }
        function p(e3) {
          return "[" + Error.prototype.toString.call(e3) + "]";
        }
        function b(e3, t3, r4, n2, i2, o2) {
          var a2, s2, u2;
          if ((u2 = Object.getOwnPropertyDescriptor(t3, i2) || { value: t3[i2] }).get ? s2 = u2.set ? e3.stylize("[Getter/Setter]", "special") : e3.stylize("[Getter]", "special") : u2.set && (s2 = e3.stylize("[Setter]", "special")), T(n2, i2) || (a2 = "[" + i2 + "]"), s2 || (e3.seen.indexOf(u2.value) < 0 ? (s2 = v(r4) ? h(e3, u2.value, null) : h(e3, u2.value, r4 - 1)).indexOf("\n") > -1 && (s2 = o2 ? s2.split("\n").map(function(e4) {
            return "  " + e4;
          }).join("\n").slice(2) : "\n" + s2.split("\n").map(function(e4) {
            return "   " + e4;
          }).join("\n")) : s2 = e3.stylize("[Circular]", "special")), A(a2)) {
            if (o2 && i2.match(/^\d+$/))
              return s2;
            (a2 = JSON.stringify("" + i2)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (a2 = a2.slice(1, -1), a2 = e3.stylize(a2, "name")) : (a2 = a2.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), a2 = e3.stylize(a2, "string"));
          }
          return a2 + ": " + s2;
        }
        function y(e3) {
          return Array.isArray(e3);
        }
        function m(e3) {
          return "boolean" == typeof e3;
        }
        function v(e3) {
          return null === e3;
        }
        function g(e3) {
          return "number" == typeof e3;
        }
        function w(e3) {
          return "string" == typeof e3;
        }
        function A(e3) {
          return void 0 === e3;
        }
        function k(e3) {
          return _(e3) && "[object RegExp]" === P(e3);
        }
        function _(e3) {
          return "object" === (0, i.default)(e3) && null !== e3;
        }
        function S(e3) {
          return _(e3) && "[object Date]" === P(e3);
        }
        function E(e3) {
          return _(e3) && ("[object Error]" === P(e3) || e3 instanceof Error);
        }
        function x(e3) {
          return "function" == typeof e3;
        }
        function P(e3) {
          return Object.prototype.toString.call(e3);
        }
        function O(e3) {
          return e3 < 10 ? "0" + e3.toString(10) : e3.toString(10);
        }
        t2.debuglog = function(e3) {
          if (e3 = e3.toUpperCase(), !s[e3])
            if (u.test(e3)) {
              var r4 = n.pid;
              s[e3] = function() {
                var n2 = t2.format.apply(t2, arguments);
                console.error("%s %d: %s", e3, r4, n2);
              };
            } else
              s[e3] = function() {
              };
          return s[e3];
        }, t2.inspect = f, f.colors = { bold: [1, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], white: [37, 39], grey: [90, 39], black: [30, 39], blue: [34, 39], cyan: [36, 39], green: [32, 39], magenta: [35, 39], red: [31, 39], yellow: [33, 39] }, f.styles = { special: "cyan", number: "yellow", boolean: "yellow", undefined: "grey", null: "bold", string: "green", date: "magenta", regexp: "red" }, t2.types = r3(7092), t2.isArray = y, t2.isBoolean = m, t2.isNull = v, t2.isNullOrUndefined = function(e3) {
          return null == e3;
        }, t2.isNumber = g, t2.isString = w, t2.isSymbol = function(e3) {
          return "symbol" === (0, i.default)(e3);
        }, t2.isUndefined = A, t2.isRegExp = k, t2.types.isRegExp = k, t2.isObject = _, t2.isDate = S, t2.types.isDate = S, t2.isError = E, t2.types.isNativeError = E, t2.isFunction = x, t2.isPrimitive = function(e3) {
          return null === e3 || "boolean" == typeof e3 || "number" == typeof e3 || "string" == typeof e3 || "symbol" === (0, i.default)(e3) || void 0 === e3;
        }, t2.isBuffer = r3(6248);
        var B = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        function T(e3, t3) {
          return Object.prototype.hasOwnProperty.call(e3, t3);
        }
        t2.log = function() {
          var e3, r4;
          console.log("%s - %s", (r4 = [O((e3 = /* @__PURE__ */ new Date()).getHours()), O(e3.getMinutes()), O(e3.getSeconds())].join(":"), [e3.getDate(), B[e3.getMonth()], r4].join(" ")), t2.format.apply(t2, arguments));
        }, t2.inherits = r3(1736), t2._extend = function(e3, t3) {
          if (!t3 || !_(t3))
            return e3;
          for (var r4 = Object.keys(t3), n2 = r4.length; n2--; )
            e3[r4[n2]] = t3[r4[n2]];
          return e3;
        };
        var C = "undefined" != typeof Symbol ? Symbol("util.promisify.custom") : void 0;
        function I(e3, t3) {
          if (!e3) {
            var r4 = new Error("Promise was rejected with a falsy value");
            r4.reason = e3, e3 = r4;
          }
          return t3(e3);
        }
        t2.promisify = function(e3) {
          if ("function" != typeof e3)
            throw new TypeError('The "original" argument must be of type Function');
          if (C && e3[C]) {
            var t3;
            if ("function" != typeof (t3 = e3[C]))
              throw new TypeError('The "util.promisify.custom" argument must be of type Function');
            return Object.defineProperty(t3, C, { value: t3, enumerable: false, writable: false, configurable: true }), t3;
          }
          function t3() {
            for (var t4, r4, n2 = new Promise(function(e4, n3) {
              t4 = e4, r4 = n3;
            }), i2 = [], o2 = 0; o2 < arguments.length; o2++)
              i2.push(arguments[o2]);
            i2.push(function(e4, n3) {
              e4 ? r4(e4) : t4(n3);
            });
            try {
              e3.apply(this, i2);
            } catch (e4) {
              r4(e4);
            }
            return n2;
          }
          return Object.setPrototypeOf(t3, Object.getPrototypeOf(e3)), C && Object.defineProperty(t3, C, { value: t3, enumerable: false, writable: false, configurable: true }), Object.defineProperties(t3, o(e3));
        }, t2.promisify.custom = C, t2.callbackify = function(e3) {
          if ("function" != typeof e3)
            throw new TypeError('The "original" argument must be of type Function');
          function t3() {
            for (var t4 = [], r4 = 0; r4 < arguments.length; r4++)
              t4.push(arguments[r4]);
            var i2 = t4.pop();
            if ("function" != typeof i2)
              throw new TypeError("The last argument must be of type Function");
            var o2 = this, a2 = function() {
              return i2.apply(o2, arguments);
            };
            e3.apply(this, t4).then(function(e4) {
              n.nextTick(a2.bind(null, null, e4));
            }, function(e4) {
              n.nextTick(I.bind(null, e4, a2));
            });
          }
          return Object.setPrototypeOf(t3, Object.getPrototypeOf(e3)), Object.defineProperties(t3, o(e3)), t3;
        };
      }, 2679: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), Object.defineProperty(t2, "NIL", { enumerable: true, get: function() {
          return s.default;
        } }), Object.defineProperty(t2, "parse", { enumerable: true, get: function() {
          return d.default;
        } }), Object.defineProperty(t2, "stringify", { enumerable: true, get: function() {
          return f.default;
        } }), Object.defineProperty(t2, "v1", { enumerable: true, get: function() {
          return n.default;
        } }), Object.defineProperty(t2, "v3", { enumerable: true, get: function() {
          return i.default;
        } }), Object.defineProperty(t2, "v4", { enumerable: true, get: function() {
          return o.default;
        } }), Object.defineProperty(t2, "v5", { enumerable: true, get: function() {
          return a.default;
        } }), Object.defineProperty(t2, "validate", { enumerable: true, get: function() {
          return c.default;
        } }), Object.defineProperty(t2, "version", { enumerable: true, get: function() {
          return u.default;
        } });
        var n = l(r3(5999)), i = l(r3(8231)), o = l(r3(8647)), a = l(r3(5025)), s = l(r3(5996)), u = l(r3(8928)), c = l(r3(6163)), f = l(r3(2982)), d = l(r3(1729));
        function l(e3) {
          return e3 && e3.__esModule ? e3 : { default: e3 };
        }
      }, 6792: (e2, t2) => {
        "use strict";
        function r3(e3) {
          return 14 + (e3 + 64 >>> 9 << 4) + 1;
        }
        function n(e3, t3) {
          var r4 = (65535 & e3) + (65535 & t3);
          return (e3 >> 16) + (t3 >> 16) + (r4 >> 16) << 16 | 65535 & r4;
        }
        function i(e3, t3, r4, i2, o2, a2) {
          return n((s2 = n(n(t3, e3), n(i2, a2))) << (u2 = o2) | s2 >>> 32 - u2, r4);
          var s2, u2;
        }
        function o(e3, t3, r4, n2, o2, a2, s2) {
          return i(t3 & r4 | ~t3 & n2, e3, t3, o2, a2, s2);
        }
        function a(e3, t3, r4, n2, o2, a2, s2) {
          return i(t3 & n2 | r4 & ~n2, e3, t3, o2, a2, s2);
        }
        function s(e3, t3, r4, n2, o2, a2, s2) {
          return i(t3 ^ r4 ^ n2, e3, t3, o2, a2, s2);
        }
        function u(e3, t3, r4, n2, o2, a2, s2) {
          return i(r4 ^ (t3 | ~n2), e3, t3, o2, a2, s2);
        }
        Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
        t2.default = function(e3) {
          if ("string" == typeof e3) {
            var t3 = unescape(encodeURIComponent(e3));
            e3 = new Uint8Array(t3.length);
            for (var i2 = 0; i2 < t3.length; ++i2)
              e3[i2] = t3.charCodeAt(i2);
          }
          return function(e4) {
            for (var t4 = [], r4 = 32 * e4.length, n2 = "0123456789abcdef", i3 = 0; i3 < r4; i3 += 8) {
              var o2 = e4[i3 >> 5] >>> i3 % 32 & 255, a2 = parseInt(n2.charAt(o2 >>> 4 & 15) + n2.charAt(15 & o2), 16);
              t4.push(a2);
            }
            return t4;
          }(function(e4, t4) {
            e4[t4 >> 5] |= 128 << t4 % 32, e4[r3(t4) - 1] = t4;
            for (var i3 = 1732584193, c = -271733879, f = -1732584194, d = 271733878, l = 0; l < e4.length; l += 16) {
              var h = i3, p = c, b = f, y = d;
              i3 = o(i3, c, f, d, e4[l], 7, -680876936), d = o(d, i3, c, f, e4[l + 1], 12, -389564586), f = o(f, d, i3, c, e4[l + 2], 17, 606105819), c = o(c, f, d, i3, e4[l + 3], 22, -1044525330), i3 = o(i3, c, f, d, e4[l + 4], 7, -176418897), d = o(d, i3, c, f, e4[l + 5], 12, 1200080426), f = o(f, d, i3, c, e4[l + 6], 17, -1473231341), c = o(c, f, d, i3, e4[l + 7], 22, -45705983), i3 = o(i3, c, f, d, e4[l + 8], 7, 1770035416), d = o(d, i3, c, f, e4[l + 9], 12, -1958414417), f = o(f, d, i3, c, e4[l + 10], 17, -42063), c = o(c, f, d, i3, e4[l + 11], 22, -1990404162), i3 = o(i3, c, f, d, e4[l + 12], 7, 1804603682), d = o(d, i3, c, f, e4[l + 13], 12, -40341101), f = o(f, d, i3, c, e4[l + 14], 17, -1502002290), i3 = a(i3, c = o(c, f, d, i3, e4[l + 15], 22, 1236535329), f, d, e4[l + 1], 5, -165796510), d = a(d, i3, c, f, e4[l + 6], 9, -1069501632), f = a(f, d, i3, c, e4[l + 11], 14, 643717713), c = a(c, f, d, i3, e4[l], 20, -373897302), i3 = a(i3, c, f, d, e4[l + 5], 5, -701558691), d = a(d, i3, c, f, e4[l + 10], 9, 38016083), f = a(f, d, i3, c, e4[l + 15], 14, -660478335), c = a(c, f, d, i3, e4[l + 4], 20, -405537848), i3 = a(i3, c, f, d, e4[l + 9], 5, 568446438), d = a(d, i3, c, f, e4[l + 14], 9, -1019803690), f = a(f, d, i3, c, e4[l + 3], 14, -187363961), c = a(c, f, d, i3, e4[l + 8], 20, 1163531501), i3 = a(i3, c, f, d, e4[l + 13], 5, -1444681467), d = a(d, i3, c, f, e4[l + 2], 9, -51403784), f = a(f, d, i3, c, e4[l + 7], 14, 1735328473), i3 = s(i3, c = a(c, f, d, i3, e4[l + 12], 20, -1926607734), f, d, e4[l + 5], 4, -378558), d = s(d, i3, c, f, e4[l + 8], 11, -2022574463), f = s(f, d, i3, c, e4[l + 11], 16, 1839030562), c = s(c, f, d, i3, e4[l + 14], 23, -35309556), i3 = s(i3, c, f, d, e4[l + 1], 4, -1530992060), d = s(d, i3, c, f, e4[l + 4], 11, 1272893353), f = s(f, d, i3, c, e4[l + 7], 16, -155497632), c = s(c, f, d, i3, e4[l + 10], 23, -1094730640), i3 = s(i3, c, f, d, e4[l + 13], 4, 681279174), d = s(d, i3, c, f, e4[l], 11, -358537222), f = s(f, d, i3, c, e4[l + 3], 16, -722521979), c = s(c, f, d, i3, e4[l + 6], 23, 76029189), i3 = s(i3, c, f, d, e4[l + 9], 4, -640364487), d = s(d, i3, c, f, e4[l + 12], 11, -421815835), f = s(f, d, i3, c, e4[l + 15], 16, 530742520), i3 = u(i3, c = s(c, f, d, i3, e4[l + 2], 23, -995338651), f, d, e4[l], 6, -198630844), d = u(d, i3, c, f, e4[l + 7], 10, 1126891415), f = u(f, d, i3, c, e4[l + 14], 15, -1416354905), c = u(c, f, d, i3, e4[l + 5], 21, -57434055), i3 = u(i3, c, f, d, e4[l + 12], 6, 1700485571), d = u(d, i3, c, f, e4[l + 3], 10, -1894986606), f = u(f, d, i3, c, e4[l + 10], 15, -1051523), c = u(c, f, d, i3, e4[l + 1], 21, -2054922799), i3 = u(i3, c, f, d, e4[l + 8], 6, 1873313359), d = u(d, i3, c, f, e4[l + 15], 10, -30611744), f = u(f, d, i3, c, e4[l + 6], 15, -1560198380), c = u(c, f, d, i3, e4[l + 13], 21, 1309151649), i3 = u(i3, c, f, d, e4[l + 4], 6, -145523070), d = u(d, i3, c, f, e4[l + 11], 10, -1120210379), f = u(f, d, i3, c, e4[l + 2], 15, 718787259), c = u(c, f, d, i3, e4[l + 9], 21, -343485551), i3 = n(i3, h), c = n(c, p), f = n(f, b), d = n(d, y);
            }
            return [i3, c, f, d];
          }(function(e4) {
            if (0 === e4.length)
              return [];
            for (var t4 = 8 * e4.length, n2 = new Uint32Array(r3(t4)), i3 = 0; i3 < t4; i3 += 8)
              n2[i3 >> 5] |= (255 & e4[i3 / 8]) << i3 % 32;
            return n2;
          }(e3), 8 * e3.length));
        };
      }, 1788: (e2, t2) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
        var r3 = { randomUUID: "undefined" != typeof crypto && crypto.randomUUID && crypto.randomUUID.bind(crypto) };
        t2.default = r3;
      }, 5996: (e2, t2) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0, t2.default = "00000000-0000-0000-0000-000000000000";
      }, 1729: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
        var n, i = (n = r3(6163)) && n.__esModule ? n : { default: n };
        t2.default = function(e3) {
          if (!(0, i.default)(e3))
            throw TypeError("Invalid UUID");
          var t3, r4 = new Uint8Array(16);
          return r4[0] = (t3 = parseInt(e3.slice(0, 8), 16)) >>> 24, r4[1] = t3 >>> 16 & 255, r4[2] = t3 >>> 8 & 255, r4[3] = 255 & t3, r4[4] = (t3 = parseInt(e3.slice(9, 13), 16)) >>> 8, r4[5] = 255 & t3, r4[6] = (t3 = parseInt(e3.slice(14, 18), 16)) >>> 8, r4[7] = 255 & t3, r4[8] = (t3 = parseInt(e3.slice(19, 23), 16)) >>> 8, r4[9] = 255 & t3, r4[10] = (t3 = parseInt(e3.slice(24, 36), 16)) / 1099511627776 & 255, r4[11] = t3 / 4294967296 & 255, r4[12] = t3 >>> 24 & 255, r4[13] = t3 >>> 16 & 255, r4[14] = t3 >>> 8 & 255, r4[15] = 255 & t3, r4;
        };
      }, 7300: (e2, t2) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0, t2.default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
      }, 4402: (e2, t2) => {
        "use strict";
        var r3;
        Object.defineProperty(t2, "__esModule", { value: true }), t2.default = function() {
          if (!r3 && !(r3 = "undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)))
            throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
          return r3(n);
        };
        var n = new Uint8Array(16);
      }, 2702: (e2, t2) => {
        "use strict";
        function r3(e3, t3, r4, n2) {
          switch (e3) {
            case 0:
              return t3 & r4 ^ ~t3 & n2;
            case 1:
            case 3:
              return t3 ^ r4 ^ n2;
            case 2:
              return t3 & r4 ^ t3 & n2 ^ r4 & n2;
          }
        }
        function n(e3, t3) {
          return e3 << t3 | e3 >>> 32 - t3;
        }
        Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
        t2.default = function(e3) {
          var t3 = [1518500249, 1859775393, 2400959708, 3395469782], i = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
          if ("string" == typeof e3) {
            var o = unescape(encodeURIComponent(e3));
            e3 = [];
            for (var a = 0; a < o.length; ++a)
              e3.push(o.charCodeAt(a));
          } else
            Array.isArray(e3) || (e3 = Array.prototype.slice.call(e3));
          e3.push(128);
          for (var s = e3.length / 4 + 2, u = Math.ceil(s / 16), c = new Array(u), f = 0; f < u; ++f) {
            for (var d = new Uint32Array(16), l = 0; l < 16; ++l)
              d[l] = e3[64 * f + 4 * l] << 24 | e3[64 * f + 4 * l + 1] << 16 | e3[64 * f + 4 * l + 2] << 8 | e3[64 * f + 4 * l + 3];
            c[f] = d;
          }
          c[u - 1][14] = 8 * (e3.length - 1) / Math.pow(2, 32), c[u - 1][14] = Math.floor(c[u - 1][14]), c[u - 1][15] = 8 * (e3.length - 1) & 4294967295;
          for (var h = 0; h < u; ++h) {
            for (var p = new Uint32Array(80), b = 0; b < 16; ++b)
              p[b] = c[h][b];
            for (var y = 16; y < 80; ++y)
              p[y] = n(p[y - 3] ^ p[y - 8] ^ p[y - 14] ^ p[y - 16], 1);
            for (var m = i[0], v = i[1], g = i[2], w = i[3], A = i[4], k = 0; k < 80; ++k) {
              var _ = Math.floor(k / 20), S = n(m, 5) + r3(_, v, g, w) + A + t3[_] + p[k] >>> 0;
              A = w, w = g, g = n(v, 30) >>> 0, v = m, m = S;
            }
            i[0] = i[0] + m >>> 0, i[1] = i[1] + v >>> 0, i[2] = i[2] + g >>> 0, i[3] = i[3] + w >>> 0, i[4] = i[4] + A >>> 0;
          }
          return [i[0] >> 24 & 255, i[0] >> 16 & 255, i[0] >> 8 & 255, 255 & i[0], i[1] >> 24 & 255, i[1] >> 16 & 255, i[1] >> 8 & 255, 255 & i[1], i[2] >> 24 & 255, i[2] >> 16 & 255, i[2] >> 8 & 255, 255 & i[2], i[3] >> 24 & 255, i[3] >> 16 & 255, i[3] >> 8 & 255, 255 & i[3], i[4] >> 24 & 255, i[4] >> 16 & 255, i[4] >> 8 & 255, 255 & i[4]];
        };
      }, 2982: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0, t2.unsafeStringify = s;
        for (var n, i = (n = r3(6163)) && n.__esModule ? n : { default: n }, o = [], a = 0; a < 256; ++a)
          o.push((a + 256).toString(16).slice(1));
        function s(e3) {
          var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
          return (o[e3[t3 + 0]] + o[e3[t3 + 1]] + o[e3[t3 + 2]] + o[e3[t3 + 3]] + "-" + o[e3[t3 + 4]] + o[e3[t3 + 5]] + "-" + o[e3[t3 + 6]] + o[e3[t3 + 7]] + "-" + o[e3[t3 + 8]] + o[e3[t3 + 9]] + "-" + o[e3[t3 + 10]] + o[e3[t3 + 11]] + o[e3[t3 + 12]] + o[e3[t3 + 13]] + o[e3[t3 + 14]] + o[e3[t3 + 15]]).toLowerCase();
        }
        t2.default = function(e3) {
          var t3 = s(e3, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0);
          if (!(0, i.default)(t3))
            throw TypeError("Stringified UUID is invalid");
          return t3;
        };
      }, 5999: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
        var n, i, o, a = (n = r3(4402)) && n.__esModule ? n : { default: n }, s = r3(2982), u = 0, c = 0;
        t2.default = function(e3, t3, r4) {
          var n2 = t3 && r4 || 0, f = t3 || new Array(16), d = (e3 = e3 || {}).node || i, l = void 0 !== e3.clockseq ? e3.clockseq : o;
          if (null == d || null == l) {
            var h = e3.random || (e3.rng || a.default)();
            null == d && (d = i = [1 | h[0], h[1], h[2], h[3], h[4], h[5]]), null == l && (l = o = 16383 & (h[6] << 8 | h[7]));
          }
          var p = void 0 !== e3.msecs ? e3.msecs : Date.now(), b = void 0 !== e3.nsecs ? e3.nsecs : c + 1, y = p - u + (b - c) / 1e4;
          if (y < 0 && void 0 === e3.clockseq && (l = l + 1 & 16383), (y < 0 || p > u) && void 0 === e3.nsecs && (b = 0), b >= 1e4)
            throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
          u = p, c = b, o = l;
          var m = (1e4 * (268435455 & (p += 122192928e5)) + b) % 4294967296;
          f[n2++] = m >>> 24 & 255, f[n2++] = m >>> 16 & 255, f[n2++] = m >>> 8 & 255, f[n2++] = 255 & m;
          var v = p / 4294967296 * 1e4 & 268435455;
          f[n2++] = v >>> 8 & 255, f[n2++] = 255 & v, f[n2++] = v >>> 24 & 15 | 16, f[n2++] = v >>> 16 & 255, f[n2++] = l >>> 8 | 128, f[n2++] = 255 & l;
          for (var g = 0; g < 6; ++g)
            f[n2 + g] = d[g];
          return t3 || (0, s.unsafeStringify)(f);
        };
      }, 8231: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
        var n = o(r3(6125)), i = o(r3(6792));
        function o(e3) {
          return e3 && e3.__esModule ? e3 : { default: e3 };
        }
        var a = (0, n.default)("v3", 48, i.default);
        t2.default = a;
      }, 6125: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.URL = t2.DNS = void 0, t2.default = function(e3, t3, r4) {
          function n2(e4, n3, a2, s2) {
            var u;
            if ("string" == typeof e4 && (e4 = function(e5) {
              e5 = unescape(encodeURIComponent(e5));
              for (var t4 = [], r5 = 0; r5 < e5.length; ++r5)
                t4.push(e5.charCodeAt(r5));
              return t4;
            }(e4)), "string" == typeof n3 && (n3 = (0, o.default)(n3)), 16 !== (null === (u = n3) || void 0 === u ? void 0 : u.length))
              throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
            var c = new Uint8Array(16 + e4.length);
            if (c.set(n3), c.set(e4, n3.length), (c = r4(c))[6] = 15 & c[6] | t3, c[8] = 63 & c[8] | 128, a2) {
              s2 = s2 || 0;
              for (var f = 0; f < 16; ++f)
                a2[s2 + f] = c[f];
              return a2;
            }
            return (0, i.unsafeStringify)(c);
          }
          try {
            n2.name = e3;
          } catch (e4) {
          }
          return n2.DNS = a, n2.URL = s, n2;
        };
        var n, i = r3(2982), o = (n = r3(1729)) && n.__esModule ? n : { default: n }, a = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
        t2.DNS = a;
        var s = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
        t2.URL = s;
      }, 8647: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
        var n = a(r3(1788)), i = a(r3(4402)), o = r3(2982);
        function a(e3) {
          return e3 && e3.__esModule ? e3 : { default: e3 };
        }
        t2.default = function(e3, t3, r4) {
          if (n.default.randomUUID && !t3 && !e3)
            return n.default.randomUUID();
          var a2 = (e3 = e3 || {}).random || (e3.rng || i.default)();
          if (a2[6] = 15 & a2[6] | 64, a2[8] = 63 & a2[8] | 128, t3) {
            r4 = r4 || 0;
            for (var s = 0; s < 16; ++s)
              t3[r4 + s] = a2[s];
            return t3;
          }
          return (0, o.unsafeStringify)(a2);
        };
      }, 5025: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
        var n = o(r3(6125)), i = o(r3(2702));
        function o(e3) {
          return e3 && e3.__esModule ? e3 : { default: e3 };
        }
        var a = (0, n.default)("v5", 80, i.default);
        t2.default = a;
      }, 6163: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
        var n, i = (n = r3(7300)) && n.__esModule ? n : { default: n };
        t2.default = function(e3) {
          return "string" == typeof e3 && i.default.test(e3);
        };
      }, 8928: (e2, t2, r3) => {
        "use strict";
        Object.defineProperty(t2, "__esModule", { value: true }), t2.default = void 0;
        var n, i = (n = r3(6163)) && n.__esModule ? n : { default: n };
        t2.default = function(e3) {
          if (!(0, i.default)(e3))
            throw TypeError("Invalid UUID");
          return parseInt(e3.slice(14, 15), 16);
        };
      }, 8325: (e2) => {
        "use strict";
        e2.exports = function e3(n, i) {
          var o, a = 0, s = 0, u = i = i || 0, c = n.length;
          do {
            if (u >= c)
              throw e3.bytes = 0, new RangeError("Could not decode varint");
            o = n[u++], a += s < 28 ? (o & r3) << s : (o & r3) * Math.pow(2, s), s += 7;
          } while (o >= t2);
          return e3.bytes = u - i, a;
        };
        var t2 = 128, r3 = 127;
      }, 2699: (e2) => {
        "use strict";
        e2.exports = function e3(i, o, a) {
          o = o || [];
          for (var s = a = a || 0; i >= n; )
            o[a++] = 255 & i | t2, i /= 128;
          for (; i & r3; )
            o[a++] = 255 & i | t2, i >>>= 7;
          return o[a] = 0 | i, e3.bytes = a - s + 1, o;
        };
        var t2 = 128, r3 = -128, n = Math.pow(2, 31);
      }, 6657: (e2, t2, r3) => {
        "use strict";
        e2.exports = { encode: r3(2699), decode: r3(8325), encodingLength: r3(7490) };
      }, 7490: (e2) => {
        "use strict";
        var t2 = Math.pow(2, 7), r3 = Math.pow(2, 14), n = Math.pow(2, 21), i = Math.pow(2, 28), o = Math.pow(2, 35), a = Math.pow(2, 42), s = Math.pow(2, 49), u = Math.pow(2, 56), c = Math.pow(2, 63);
        e2.exports = function(e3) {
          return e3 < t2 ? 1 : e3 < r3 ? 2 : e3 < n ? 3 : e3 < i ? 4 : e3 < o ? 5 : e3 < a ? 6 : e3 < s ? 7 : e3 < u ? 8 : e3 < c ? 9 : 10;
        };
      }, 1158: (e2, t2, r3) => {
        "use strict";
        var n, i = r3(8847)(r3(3355));
        if ("object" === ("undefined" == typeof globalThis ? "undefined" : (0, i.default)(globalThis)))
          n = globalThis;
        else
          try {
            n = r3(6464);
          } catch (e3) {
          } finally {
            if (n || "undefined" == typeof window || (n = window), !n)
              throw new Error("Could not determine global this");
          }
        var o = n.WebSocket || n.MozWebSocket, a = r3(5735);
        function s(e3, t3) {
          return t3 ? new o(e3, t3) : new o(e3);
        }
        o && ["CONNECTING", "OPEN", "CLOSING", "CLOSED"].forEach(function(e3) {
          Object.defineProperty(s, e3, { get: function() {
            return o[e3];
          } });
        }), e2.exports = { w3cwebsocket: o ? s : null, version: a };
      }, 5735: (e2, t2, r3) => {
        "use strict";
        e2.exports = r3(9794).version;
      }, 2337: (e2, t2, r3) => {
        "use strict";
        var n = r3(8184), i = r3(3604), o = r3(593), a = r3(3820), s = o("Object.prototype.toString"), u = r3(1191)(), c = "undefined" == typeof globalThis ? r3.g : globalThis, f = i(), d = o("String.prototype.slice"), l = {}, h = Object.getPrototypeOf;
        u && a && h && n(f, function(e3) {
          if ("function" == typeof c[e3]) {
            var t3 = new c[e3]();
            if (Symbol.toStringTag in t3) {
              var r4 = h(t3), n2 = a(r4, Symbol.toStringTag);
              if (!n2) {
                var i2 = h(r4);
                n2 = a(i2, Symbol.toStringTag);
              }
              l[e3] = n2.get;
            }
          }
        });
        var p = r3(8915);
        e2.exports = function(e3) {
          return !!p(e3) && (u && Symbol.toStringTag in e3 ? function(e4) {
            var t3 = false;
            return n(l, function(r4, n2) {
              if (!t3)
                try {
                  var i2 = r4.call(e4);
                  i2 === n2 && (t3 = i2);
                } catch (e5) {
                }
            }), t3;
          }(e3) : d(s(e3), 8, -1));
        };
      }, 1357: (e2, t2, r3) => {
        "use strict";
        var n = r3(1296), i = r3(8419), o = r3(3103), a = r3(9122), s = r3(7321), u = "application/json", c = function() {
        };
        e2.exports = function(e3, t3, r4) {
          if (!e3 || "string" != typeof e3)
            throw new TypeError("must specify a URL");
          if ("function" == typeof t3 && (r4 = t3, t3 = {}), r4 && "function" != typeof r4)
            throw new TypeError("expected cb to be undefined or a function");
          r4 = r4 || c;
          var f = (t3 = t3 || {}).json ? "json" : "text", d = (t3 = o({ responseType: f }, t3)).headers || {}, l = (t3.method || "GET").toUpperCase(), h = t3.query;
          return h && ("string" != typeof h && (h = n.stringify(h)), e3 = i(e3, h)), "json" === t3.responseType && a(d, "Accept", u), t3.json && "GET" !== l && "HEAD" !== l && (a(d, "Content-Type", u), t3.body = JSON.stringify(t3.body)), t3.method = l, t3.url = e3, t3.headers = d, delete t3.query, delete t3.json, s(t3, r4);
        };
      }, 9122: (e2) => {
        "use strict";
        e2.exports = function(e3, t2, r3) {
          var n = t2.toLowerCase();
          e3[t2] || e3[n] || (e3[t2] = r3);
        };
      }, 9800: (e2) => {
        "use strict";
        e2.exports = function(e3, t2) {
          return t2 ? { statusCode: t2.statusCode, headers: t2.headers, method: e3.method, url: e3.url, rawRequest: t2.rawRequest ? t2.rawRequest : t2 } : null;
        };
      }, 7321: (e2, t2, r3) => {
        "use strict";
        var n = r3(346), i = r3(9800), o = function() {
        };
        e2.exports = function(e3, t3) {
          delete e3.uri;
          var r4 = false;
          "json" === e3.responseType && (e3.responseType = "text", r4 = true);
          var a = n(e3, function(n2, a2, s2) {
            if (r4 && !n2)
              try {
                var u = a2.rawRequest.responseText;
                s2 = JSON.parse(u);
              } catch (e4) {
                n2 = e4;
              }
            a2 = i(e3, a2), t3(n2, n2 ? null : s2, a2), t3 = o;
          }), s = a.onabort;
          return a.onabort = function() {
            var e4 = s.apply(a, Array.prototype.slice.call(arguments));
            return t3(new Error("XHR Aborted")), t3 = o, e4;
          }, a;
        };
      }, 346: (e2, t2, r3) => {
        "use strict";
        var n = r3(2948), i = r3(4339), o = r3(8209), a = r3(7705);
        function s(e3, t3, r4) {
          var n2 = e3;
          return i(t3) ? (r4 = t3, "string" == typeof e3 && (n2 = { uri: e3 })) : n2 = a(t3, { uri: e3 }), n2.callback = r4, n2;
        }
        function u(e3, t3, r4) {
          return c(t3 = s(e3, t3, r4));
        }
        function c(e3) {
          if (void 0 === e3.callback)
            throw new Error("callback argument missing");
          var t3 = false, r4 = function(r5, n3, i3) {
            t3 || (t3 = true, e3.callback(r5, n3, i3));
          };
          function n2() {
            var e4 = void 0;
            if (e4 = f.response ? f.response : f.responseText || function(e5) {
              try {
                if ("document" === e5.responseType)
                  return e5.responseXML;
                var t4 = e5.responseXML && "parsererror" === e5.responseXML.documentElement.nodeName;
                if ("" === e5.responseType && !t4)
                  return e5.responseXML;
              } catch (e6) {
              }
              return null;
            }(f), m)
              try {
                e4 = JSON.parse(e4);
              } catch (e5) {
              }
            return e4;
          }
          function i2(e4) {
            return clearTimeout(d), e4 instanceof Error || (e4 = new Error("" + (e4 || "Unknown XMLHttpRequest Error"))), e4.statusCode = 0, r4(e4, v);
          }
          function a2() {
            if (!c2) {
              var t4;
              clearTimeout(d), t4 = e3.useXDR && void 0 === f.status ? 200 : 1223 === f.status ? 204 : f.status;
              var i3 = v, a3 = null;
              return 0 !== t4 ? (i3 = { body: n2(), statusCode: t4, method: h, headers: {}, url: l, rawRequest: f }, f.getAllResponseHeaders && (i3.headers = o(f.getAllResponseHeaders()))) : a3 = new Error("Internal XMLHttpRequest Error"), r4(a3, i3, i3.body);
            }
          }
          var s2, c2, f = e3.xhr || null;
          f || (f = e3.cors || e3.useXDR ? new u.XDomainRequest() : new u.XMLHttpRequest());
          var d, l = f.url = e3.uri || e3.url, h = f.method = e3.method || "GET", p = e3.body || e3.data, b = f.headers = e3.headers || {}, y = !!e3.sync, m = false, v = { body: void 0, headers: {}, statusCode: 0, method: h, url: l, rawRequest: f };
          if ("json" in e3 && false !== e3.json && (m = true, b.accept || b.Accept || (b.Accept = "application/json"), "GET" !== h && "HEAD" !== h && (b["content-type"] || b["Content-Type"] || (b["Content-Type"] = "application/json"), p = JSON.stringify(true === e3.json ? p : e3.json))), f.onreadystatechange = function() {
            4 === f.readyState && setTimeout(a2, 0);
          }, f.onload = a2, f.onerror = i2, f.onprogress = function() {
          }, f.onabort = function() {
            c2 = true;
          }, f.ontimeout = i2, f.open(h, l, !y, e3.username, e3.password), y || (f.withCredentials = !!e3.withCredentials), !y && e3.timeout > 0 && (d = setTimeout(function() {
            if (!c2) {
              c2 = true, f.abort("timeout");
              var e4 = new Error("XMLHttpRequest timeout");
              e4.code = "ETIMEDOUT", i2(e4);
            }
          }, e3.timeout)), f.setRequestHeader)
            for (s2 in b)
              b.hasOwnProperty(s2) && f.setRequestHeader(s2, b[s2]);
          else if (e3.headers && !function(e4) {
            for (var t4 in e4)
              if (e4.hasOwnProperty(t4))
                return false;
            return true;
          }(e3.headers))
            throw new Error("Headers cannot be set on an XDomainRequest object");
          return "responseType" in e3 && (f.responseType = e3.responseType), "beforeSend" in e3 && "function" == typeof e3.beforeSend && e3.beforeSend(f), f.send(p || null), f;
        }
        e2.exports = u, e2.exports.default = u, u.XMLHttpRequest = n.XMLHttpRequest || function() {
        }, u.XDomainRequest = "withCredentials" in new u.XMLHttpRequest() ? u.XMLHttpRequest : n.XDomainRequest, function(e3, t3) {
          for (var r4 = 0; r4 < e3.length; r4++)
            t3(e3[r4]);
        }(["get", "put", "post", "patch", "head", "delete"], function(e3) {
          u["delete" === e3 ? "del" : e3] = function(t3, r4, n2) {
            return (r4 = s(t3, r4, n2)).method = e3.toUpperCase(), c(r4);
          };
        });
      }, 7705: (e2) => {
        "use strict";
        e2.exports = function() {
          for (var e3 = {}, r3 = 0; r3 < arguments.length; r3++) {
            var n = arguments[r3];
            for (var i in n)
              t2.call(n, i) && (e3[i] = n[i]);
          }
          return e3;
        };
        var t2 = Object.prototype.hasOwnProperty;
      }, 2463: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(6427), o = function e3(t3) {
          this.givenProvider = e3.givenProvider, t3 && t3._requestManager && (t3 = t3.currentProvider), "undefined" != typeof document && (this.pick = i.pick), this.setProvider(t3);
        };
        o.givenProvider = null, "undefined" != typeof ethereum && ethereum.bzz && (o.givenProvider = ethereum.bzz), o.prototype.setProvider = function(e3) {
          if (e3 && "object" === (0, n.default)(e3) && "string" == typeof e3.bzz && (e3 = e3.bzz), "string" != typeof e3) {
            this.currentProvider = null;
            var t3 = new Error("No provider set, please set one using bzz.setProvider().");
            return this.download = this.upload = this.isAvailable = function() {
              throw t3;
            }, false;
          }
          return this.currentProvider = e3, this.download = i.at(e3).download, this.upload = i.at(e3).upload, this.isAvailable = i.at(e3).isAvailable, true;
        }, e2.exports = o;
      }, 4246: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355));
        e2.exports = { ErrorResponse: function(e3) {
          var t3 = e3 && e3.error && e3.error.message ? e3.error.message : JSON.stringify(e3), r4 = e3.error && e3.error.data ? e3.error.data : null, n2 = new Error("Returned error: " + t3);
          return n2.data = r4, n2;
        }, InvalidNumberOfParams: function(e3, t3, r4) {
          return new Error('Invalid number of parameters for "' + r4 + '". Got ' + e3 + " expected " + t3 + "!");
        }, InvalidConnection: function(e3, t3) {
          return this.ConnectionError("CONNECTION ERROR: Couldn't connect to node " + e3 + ".", t3);
        }, InvalidProvider: function() {
          return new Error("Provider not set or invalid");
        }, InvalidResponse: function(e3) {
          var t3 = e3 && e3.error && e3.error.message ? e3.error.message : "Invalid JSON RPC response: " + JSON.stringify(e3);
          return new Error(t3);
        }, ConnectionTimeout: function(e3) {
          return new Error("CONNECTION TIMEOUT: timeout of " + e3 + " ms achived");
        }, ConnectionNotOpenError: function(e3) {
          return this.ConnectionError("connection not open on send()", e3);
        }, ConnectionCloseError: function(e3) {
          return "object" === (0, n.default)(e3) && e3.code && e3.reason ? this.ConnectionError("CONNECTION ERROR: The connection got closed with the close code `" + e3.code + "` and the following reason string `" + e3.reason + "`", e3) : new Error("CONNECTION ERROR: The connection closed unexpectedly");
        }, MaxAttemptsReachedOnReconnectingError: function() {
          return new Error("Maximum number of reconnect attempts reached!");
        }, PendingRequestsOnReconnectingError: function() {
          return new Error("CONNECTION ERROR: Provider started to reconnect before the response got received!");
        }, ConnectionError: function(e3, t3) {
          var r4 = new Error(e3);
          return t3 && (r4.code = t3.code, r4.reason = t3.reason, t3.description && (r4.description = t3.description)), r4;
        }, RevertInstructionError: function(e3, t3) {
          var r4 = new Error("Your request got reverted with the following reason string: " + e3);
          return r4.reason = e3, r4.signature = t3, r4;
        }, TransactionRevertInstructionError: function(e3, t3, r4) {
          var n2 = new Error("Transaction has been reverted by the EVM:\n" + JSON.stringify(r4, null, 2));
          return n2.reason = e3, n2.signature = t3, n2.receipt = r4, n2;
        }, TransactionError: function(e3, t3) {
          var r4 = new Error(e3);
          return r4.receipt = t3, r4;
        }, NoContractAddressFoundError: function(e3) {
          return this.TransactionError("The transaction receipt didn't contain a contract address.", e3);
        }, ContractCodeNotStoredError: function(e3) {
          return this.TransactionError("The contract code couldn't be stored, please check your gas limit.", e3);
        }, TransactionRevertedWithoutReasonError: function(e3) {
          return this.TransactionError("Transaction has been reverted by the EVM:\n" + JSON.stringify(e3, null, 2), e3);
        }, TransactionOutOfGasError: function(e3) {
          return this.TransactionError("Transaction ran out of gas. Please provide more gas:\n" + JSON.stringify(e3, null, 2), e3);
        }, ResolverMethodMissingError: function(e3, t3) {
          return new Error("The resolver at " + e3 + 'does not implement requested method: "' + t3 + '".');
        }, ContractMissingABIError: function() {
          return new Error("You must provide the json interface of the contract when instantiating a contract object.");
        }, ContractOnceRequiresCallbackError: function() {
          return new Error("Once requires a callback as the second parameter.");
        }, ContractEventDoesNotExistError: function(e3) {
          return new Error('Event "' + e3 + `" doesn't exist in this contract.`);
        }, ContractReservedEventError: function(e3) {
          return new Error('The event "' + e3 + `" is a reserved event name, you can't use it.`);
        }, ContractMissingDeployDataError: function() {
          return new Error('No "data" specified in neither the given options, nor the default options.');
        }, ContractNoAddressDefinedError: function() {
          return new Error("This contract object doesn't have address set yet, please set an address first.");
        }, ContractNoFromAddressDefinedError: function() {
          return new Error('No "from" address specified in neither the given options, nor the default options.');
        } };
      }, 2084: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847), i = n(r3(775)), o = n(r3(3355));
        function a(e3, t3) {
          var r4 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var n2 = Object.getOwnPropertySymbols(e3);
            t3 && (n2 = n2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r4.push.apply(r4, n2);
          }
          return r4;
        }
        function s(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r4 = null != arguments[t3] ? arguments[t3] : {};
            t3 % 2 ? a(Object(r4), true).forEach(function(t4) {
              (0, i.default)(e3, t4, r4[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r4)) : a(Object(r4)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r4, t4));
            });
          }
          return e3;
        }
        var u = r3(8161), c = r3(6), f = function(e3) {
          return u.toBN(e3).toString(10);
        }, d = function(e3) {
          if (void 0 !== e3)
            return function(e4) {
              return ["latest", "pending", "earliest", "finalized", "safe"].includes(e4);
            }(e3) ? e3 : "genesis" === e3 ? "0x0" : u.isHexStrict(e3) ? "string" == typeof e3 ? e3.toLowerCase() : e3 : u.numberToHex(e3);
        }, l = function(e3) {
          if (e3.to && (e3.to = b(e3.to)), e3.data && e3.input)
            throw new Error(`You can't have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.`);
          if (!e3.data && e3.input && (e3.data = e3.input, delete e3.input), e3.data && !e3.data.startsWith("0x") && (e3.data = "0x" + e3.data), e3.data && !u.isHex(e3.data))
            throw new Error("The data field must be HEX encoded data.");
          return (e3.gas || e3.gasLimit) && (e3.gas = e3.gas || e3.gasLimit), (e3.maxPriorityFeePerGas || e3.maxFeePerGas) && delete e3.gasPrice, ["gasPrice", "gas", "value", "maxPriorityFeePerGas", "maxFeePerGas", "nonce", "type"].filter(function(t3) {
            return void 0 !== e3[t3];
          }).forEach(function(t3) {
            e3[t3] = u.numberToHex(e3[t3]);
          }), e3;
        }, h = function(e3, t3) {
          return t3 || (null !== e3.blockNumber && (e3.blockNumber = u.hexToNumber(e3.blockNumber)), null !== e3.transactionIndex && (e3.transactionIndex = u.hexToNumber(e3.transactionIndex)), e3.nonce = u.hexToNumber(e3.nonce), e3.gas = u.hexToNumber(e3.gas), e3.type && (e3.type = u.hexToNumber(e3.type))), e3.gasPrice && (e3.gasPrice = f(e3.gasPrice)), e3.maxFeePerGas && (e3.maxFeePerGas = f(e3.maxFeePerGas)), e3.maxPriorityFeePerGas && (e3.maxPriorityFeePerGas = f(e3.maxPriorityFeePerGas)), e3.value = f(e3.value), e3.to && u.isAddress(e3.to) ? e3.to = u.toChecksumAddress(e3.to) : e3.to = null, e3.from && (e3.from = u.toChecksumAddress(e3.from)), e3;
        }, p = function(e3) {
          if ("string" == typeof e3.blockHash && "string" == typeof e3.transactionHash && "string" == typeof e3.logIndex) {
            var t3 = u.sha3(e3.blockHash.replace("0x", "") + e3.transactionHash.replace("0x", "") + e3.logIndex.replace("0x", ""));
            e3.id = "log_" + t3.replace("0x", "").slice(0, 8);
          } else
            e3.id || (e3.id = null);
          return null !== e3.blockNumber && (e3.blockNumber = u.hexToNumber(e3.blockNumber)), null !== e3.transactionIndex && (e3.transactionIndex = u.hexToNumber(e3.transactionIndex)), null !== e3.logIndex && (e3.logIndex = u.hexToNumber(e3.logIndex)), e3.address && (e3.address = u.toChecksumAddress(e3.address)), e3;
        }, b = function(e3) {
          var t3 = new c(e3);
          if (t3.isValid() && t3.isDirect())
            return t3.toAddress().toLowerCase();
          if (u.isAddress(e3))
            return "0x" + e3.toLowerCase().replace("0x", "");
          throw new Error("Provided address ".concat(e3, " is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted."));
        };
        e2.exports = { inputDefaultBlockNumberFormatter: function(e3) {
          return d(this && null == e3 ? this.defaultBlock : e3);
        }, inputBlockNumberFormatter: d, inputCallFormatter: function(e3) {
          var t3 = (e3 = l(e3)).from || (this ? this.defaultAccount : null);
          return t3 && (e3.from = b(t3)), e3;
        }, inputTransactionFormatter: function(e3) {
          if ("number" != typeof (e3 = l(e3)).from && (!e3.from || "object" !== (0, o.default)(e3.from))) {
            if (e3.from = e3.from || (this ? this.defaultAccount : null), !e3.from && "number" != typeof e3.from)
              throw new Error('The send transactions "from" field must be defined!');
            e3.from = b(e3.from);
          }
          return e3;
        }, inputAddressFormatter: b, inputPostFormatter: function(e3) {
          return e3.ttl && (e3.ttl = u.numberToHex(e3.ttl)), e3.workToProve && (e3.workToProve = u.numberToHex(e3.workToProve)), e3.priority && (e3.priority = u.numberToHex(e3.priority)), Array.isArray(e3.topics) || (e3.topics = e3.topics ? [e3.topics] : []), e3.topics = e3.topics.map(function(e4) {
            return 0 === e4.indexOf("0x") ? e4 : u.fromUtf8(e4);
          }), e3;
        }, inputLogFormatter: function(e3) {
          var t3 = function(e4) {
            return null == e4 ? null : 0 === (e4 = String(e4)).indexOf("0x") ? e4 : u.fromUtf8(e4);
          };
          return void 0 === e3 && (e3 = {}), void 0 === e3.fromBlock && (e3 = s(s({}, e3), {}, { fromBlock: "latest" })), (e3.fromBlock || 0 === e3.fromBlock) && (e3.fromBlock = d(e3.fromBlock)), (e3.toBlock || 0 === e3.toBlock) && (e3.toBlock = d(e3.toBlock)), e3.topics = e3.topics || [], e3.topics = e3.topics.map(function(e4) {
            return Array.isArray(e4) ? e4.map(t3) : t3(e4);
          }), t3 = null, e3.address && (e3.address = Array.isArray(e3.address) ? e3.address.map(function(e4) {
            return b(e4);
          }) : b(e3.address)), e3;
        }, inputSignFormatter: function(e3) {
          return u.isHexStrict(e3) ? e3 : u.utf8ToHex(e3);
        }, inputStorageKeysFormatter: function(e3) {
          return e3.map(u.numberToHex);
        }, outputProofFormatter: function(e3) {
          return e3.address = u.toChecksumAddress(e3.address), e3.nonce = u.hexToNumberString(e3.nonce), e3.balance = u.hexToNumberString(e3.balance), e3;
        }, outputBigNumberFormatter: f, outputTransactionFormatter: h, outputTransactionReceiptFormatter: function(e3) {
          if ("object" !== (0, o.default)(e3))
            throw new Error("Received receipt is invalid: " + e3);
          return this.hexFormat || (null !== e3.blockNumber && (e3.blockNumber = u.hexToNumber(e3.blockNumber)), null !== e3.transactionIndex && (e3.transactionIndex = u.hexToNumber(e3.transactionIndex)), e3.cumulativeGasUsed = u.hexToNumber(e3.cumulativeGasUsed), e3.gasUsed = u.hexToNumber(e3.gasUsed), e3.effectiveGasPrice && (e3.effectiveGasPrice = u.hexToNumber(e3.effectiveGasPrice))), Array.isArray(e3.logs) && (e3.logs = e3.logs.map(p)), e3.contractAddress && (e3.contractAddress = u.toChecksumAddress(e3.contractAddress)), void 0 !== e3.status && null !== e3.status && (e3.status = Boolean(parseInt(e3.status))), e3;
        }, outputBlockFormatter: function(e3, t3) {
          return t3 || (e3.gasLimit = u.hexToNumber(e3.gasLimit), e3.gasUsed = u.hexToNumber(e3.gasUsed), e3.size = u.hexToNumber(e3.size), e3.timestamp = u.hexToNumber(e3.timestamp), null !== e3.number && (e3.number = u.hexToNumber(e3.number))), e3.difficulty && (e3.difficulty = f(e3.difficulty)), e3.totalDifficulty && (e3.totalDifficulty = f(e3.totalDifficulty)), Array.isArray(e3.transactions) && e3.transactions.forEach(function(e4) {
            if ("string" != typeof e4)
              return h(e4, t3);
          }), e3.miner && (e3.miner = u.toChecksumAddress(e3.miner)), e3.baseFeePerGas && (e3.baseFeePerGas = u.hexToNumber(e3.baseFeePerGas)), e3;
        }, outputLogFormatter: p, outputPostFormatter: function(e3) {
          return e3.expiry = u.hexToNumber(e3.expiry), e3.sent = u.hexToNumber(e3.sent), e3.ttl = u.hexToNumber(e3.ttl), e3.workProved = u.hexToNumber(e3.workProved), e3.topics || (e3.topics = []), e3.topics = e3.topics.map(function(e4) {
            return u.toUtf8(e4);
          }), e3;
        }, outputSyncingFormatter: function(e3) {
          return e3.startingBlock = u.hexToNumber(e3.startingBlock), e3.currentBlock = u.hexToNumber(e3.currentBlock), e3.highestBlock = u.hexToNumber(e3.highestBlock), e3.knownStates && (e3.knownStates = u.hexToNumber(e3.knownStates), e3.pulledStates = u.hexToNumber(e3.pulledStates)), e3;
        } };
      }, 1314: (e2, t2, r3) => {
        "use strict";
        var n = r3(4246), i = r3(2084);
        e2.exports = { errors: n, formatters: i };
      }, 3349: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847), i = n(r3(2247)), o = n(r3(4519)), a = n(r3(775)), s = n(r3(5698)), u = n(r3(3355));
        function c(e3, t3) {
          var r4 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var n2 = Object.getOwnPropertySymbols(e3);
            t3 && (n2 = n2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r4.push.apply(r4, n2);
          }
          return r4;
        }
        function f(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r4 = null != arguments[t3] ? arguments[t3] : {};
            t3 % 2 ? c(Object(r4), true).forEach(function(t4) {
              (0, a.default)(e3, t4, r4[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r4)) : c(Object(r4)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r4, t4));
            });
          }
          return e3;
        }
        var d = r3(1314).errors, l = r3(1314).formatters, h = r3(8161), p = r3(282), b = r3(4178).subscriptions, y = r3(1936), m = function(e3) {
          if (!e3.call || !e3.name)
            throw new Error('When creating a method you need to provide at least the "name" and "call" property.');
          this.name = e3.name, this.call = e3.call, this.params = e3.params || 0, this.inputFormatter = e3.inputFormatter, this.outputFormatter = e3.outputFormatter, this.transformPayload = e3.transformPayload, this.extraFormatters = e3.extraFormatters, this.abiCoder = e3.abiCoder, this.requestManager = e3.requestManager, this.accounts = e3.accounts, this.defaultBlock = e3.defaultBlock || "latest", this.defaultAccount = e3.defaultAccount || null, this.transactionBlockTimeout = e3.transactionBlockTimeout || 50, this.transactionConfirmationBlocks = e3.transactionConfirmationBlocks || 24, this.transactionPollingTimeout = e3.transactionPollingTimeout || 750, this.transactionPollingInterval = e3.transactionPollingInterval || 1e3, this.blockHeaderTimeout = e3.blockHeaderTimeout || 10, this.defaultCommon = e3.defaultCommon, this.defaultChain = e3.defaultChain, this.defaultHardfork = e3.defaultHardfork, this.handleRevert = e3.handleRevert;
        };
        m.prototype.setRequestManager = function(e3, t3) {
          this.requestManager = e3, t3 && (this.accounts = t3);
        }, m.prototype.createFunction = function(e3, t3) {
          var r4 = this.buildCall();
          return Object.defineProperty(r4, "call", { configurable: true, writable: true, value: this.call }), this.setRequestManager(e3 || this.requestManager, t3 || this.accounts), r4;
        }, m.prototype.attachToObject = function(e3) {
          var t3 = this.buildCall();
          Object.defineProperty(t3, "call", { configurable: true, writable: true, value: this.call });
          var r4 = this.name.split(".");
          r4.length > 1 ? (e3[r4[0]] = e3[r4[0]] || {}, e3[r4[0]][r4[1]] = t3) : e3[r4[0]] = t3;
        }, m.prototype.getCall = function(e3) {
          return "function" == typeof this.call ? this.call(e3) : this.call;
        }, m.prototype.extractCallback = function(e3) {
          if ("function" == typeof e3[e3.length - 1])
            return e3.pop();
        }, m.prototype.validateArgs = function(e3) {
          if (e3.length !== this.params)
            throw d.InvalidNumberOfParams(e3.length, this.params, this.name);
        }, m.prototype.formatInput = function(e3) {
          var t3 = this;
          return this.inputFormatter ? this.inputFormatter.map(function(r4, n2) {
            return r4 ? r4.call(t3, e3[n2]) : e3[n2];
          }) : e3;
        }, m.prototype.formatOutput = function(e3) {
          var t3 = this;
          return Array.isArray(e3) ? e3.map(function(e4) {
            return t3.outputFormatter && e4 ? t3.outputFormatter(e4, null == this ? void 0 : this.hexFormat) : e4;
          }) : this.outputFormatter && e3 ? this.outputFormatter(e3, null == this ? void 0 : this.hexFormat) : e3;
        }, m.prototype.toPayload = function(e3) {
          var t3 = this.getCall(e3), r4 = this.extractCallback(e3), n2 = this.formatInput(e3);
          this.validateArgs(n2);
          var i2 = { method: t3, params: n2, callback: r4 };
          return this.transformPayload && (i2 = this.transformPayload(i2)), i2;
        }, m.prototype._confirmTransaction = function(e3, t3, r4) {
          var n2 = this, o2 = false, a2 = true, c2 = 0, f2 = 0, v2 = null, g = null, w = null, A = r4.params[0] && "object" === (0, u.default)(r4.params[0]) && r4.params[0].gas ? r4.params[0].gas : null, k = !!r4.params[0] && "object" === (0, u.default)(r4.params[0]) && r4.params[0].data && r4.params[0].from && !r4.params[0].to, _ = k && r4.params[0].data.length > 2, S = [new m({ name: "getBlockByNumber", call: "eth_getBlockByNumber", params: 2, inputFormatter: [l.inputBlockNumberFormatter, function(e4) {
            return !!e4;
          }], outputFormatter: l.outputBlockFormatter }), new m({ name: "getTransactionReceipt", call: "eth_getTransactionReceipt", params: 1, inputFormatter: [null], outputFormatter: l.outputTransactionReceiptFormatter }), new m({ name: "getCode", call: "eth_getCode", params: 2, inputFormatter: [l.inputAddressFormatter, l.inputDefaultBlockNumberFormatter] }), new m({ name: "getTransactionByHash", call: "eth_getTransactionByHash", params: 1, inputFormatter: [null], outputFormatter: l.outputTransactionFormatter }), new b({ name: "subscribe", type: "eth", subscriptions: { newBlockHeaders: { subscriptionName: "newHeads", params: 0, outputFormatter: l.outputBlockFormatter } } })], E = {};
          S.forEach(function(e4) {
            e4.attachToObject(E), e4.requestManager = n2.requestManager;
          });
          var x = function(u2, b2, m2, S2, x2) {
            if (!m2)
              return x2 || (x2 = { unsubscribe: function() {
                clearInterval(v2), clearTimeout(g);
              } }), (u2 ? p.resolve(u2) : E.getTransactionReceipt(t3)).catch(function(t4) {
                x2.unsubscribe(), o2 = true, h._fireError({ message: "Failed to check for transaction receipt:", data: t4 }, e3.eventEmitter, e3.reject);
              }).then(function() {
                var t4 = (0, s.default)(i.default.mark(function t5(r5) {
                  var o3, s2, c3;
                  return i.default.wrap(function(t6) {
                    for (; ; )
                      switch (t6.prev = t6.next) {
                        case 0:
                          if (r5 && r5.blockHash) {
                            t6.next = 2;
                            break;
                          }
                          throw new Error("Receipt missing or blockHash null");
                        case 2:
                          if (n2.extraFormatters && n2.extraFormatters.receiptFormatter && (r5 = n2.extraFormatters.receiptFormatter(r5)), !(e3.eventEmitter.listeners("confirmation").length > 0)) {
                            t6.next = 28;
                            break;
                          }
                          if (void 0 !== u2 && 0 === f2) {
                            t6.next = 25;
                            break;
                          }
                          return t6.next = 7, E.getBlockByNumber("latest");
                        case 7:
                          if (s2 = t6.sent, c3 = s2 ? s2.hash : null, !b2) {
                            t6.next = 24;
                            break;
                          }
                          if (!w) {
                            t6.next = 17;
                            break;
                          }
                          return t6.next = 13, E.getBlockByNumber(w.number + 1);
                        case 13:
                          (o3 = t6.sent) && (w = o3, e3.eventEmitter.emit("confirmation", f2, r5, c3)), t6.next = 22;
                          break;
                        case 17:
                          return t6.next = 19, E.getBlockByNumber(r5.blockNumber);
                        case 19:
                          o3 = t6.sent, w = o3, e3.eventEmitter.emit("confirmation", f2, r5, c3);
                        case 22:
                          t6.next = 25;
                          break;
                        case 24:
                          e3.eventEmitter.emit("confirmation", f2, r5, c3);
                        case 25:
                          (b2 && o3 || !b2) && f2++, a2 = false, f2 === n2.transactionConfirmationBlocks + 1 && (x2.unsubscribe(), e3.eventEmitter.removeAllListeners());
                        case 28:
                          return t6.abrupt("return", r5);
                        case 29:
                        case "end":
                          return t6.stop();
                      }
                  }, t5);
                }));
                return function(e4) {
                  return t4.apply(this, arguments);
                };
              }()).then(function() {
                var t4 = (0, s.default)(i.default.mark(function t5(r5) {
                  var s2;
                  return i.default.wrap(function(t6) {
                    for (; ; )
                      switch (t6.prev = t6.next) {
                        case 0:
                          if (!k || o2) {
                            t6.next = 19;
                            break;
                          }
                          if (r5.contractAddress) {
                            t6.next = 5;
                            break;
                          }
                          return a2 && (x2.unsubscribe(), o2 = true), h._fireError(d.NoContractAddressFoundError(r5), e3.eventEmitter, e3.reject, null, r5), t6.abrupt("return");
                        case 5:
                          return t6.prev = 5, t6.next = 8, E.getCode(r5.contractAddress);
                        case 8:
                          s2 = t6.sent, t6.next = 13;
                          break;
                        case 11:
                          t6.prev = 11, t6.t0 = t6.catch(5);
                        case 13:
                          if (s2) {
                            t6.next = 15;
                            break;
                          }
                          return t6.abrupt("return");
                        case 15:
                          true === r5.status && _ || s2.length > 2 ? (e3.eventEmitter.emit("receipt", r5), n2.extraFormatters && n2.extraFormatters.contractDeployFormatter ? e3.resolve(n2.extraFormatters.contractDeployFormatter(r5)) : e3.resolve(r5), a2 && e3.eventEmitter.removeAllListeners()) : h._fireError(d.ContractCodeNotStoredError(r5), e3.eventEmitter, e3.reject, null, r5), a2 && x2.unsubscribe(), o2 = true;
                        case 19:
                          return t6.abrupt("return", r5);
                        case 20:
                        case "end":
                          return t6.stop();
                      }
                  }, t5, null, [[5, 11]]);
                }));
                return function(e4) {
                  return t4.apply(this, arguments);
                };
              }()).then(function() {
                var t4 = (0, s.default)(i.default.mark(function t5(s2) {
                  var u3, c3, f3, p2;
                  return i.default.wrap(function(t6) {
                    for (; ; )
                      switch (t6.prev = t6.next) {
                        case 0:
                          if (k || o2) {
                            t6.next = 35;
                            break;
                          }
                          if (s2.outOfGas || A && A === s2.gasUsed || true !== s2.status && "0x1" !== s2.status && void 0 !== s2.status) {
                            t6.next = 7;
                            break;
                          }
                          e3.eventEmitter.emit("receipt", s2), e3.resolve(s2), a2 && e3.eventEmitter.removeAllListeners(), t6.next = 33;
                          break;
                        case 7:
                          if (JSON.stringify(s2, null, 2), false !== s2.status && "0x0" !== s2.status) {
                            t6.next = 32;
                            break;
                          }
                          if (t6.prev = 9, u3 = null, !n2.handleRevert || "eth_sendTransaction" !== n2.call && "eth_sendRawTransaction" !== n2.call) {
                            t6.next = 24;
                            break;
                          }
                          return c3 = r4.params[0], "eth_sendRawTransaction" === n2.call && (f3 = r4.params[0], p2 = y.parse(f3), c3 = l.inputTransactionFormatter({ data: p2.data, to: p2.to, from: p2.from, gas: p2.gasLimit.toHexString(), gasPrice: p2.gasPrice ? p2.gasPrice.toHexString() : void 0, value: p2.value.toHexString() })), t6.next = 16, n2.getRevertReason(c3, s2.blockNumber);
                        case 16:
                          if (!(u3 = t6.sent)) {
                            t6.next = 21;
                            break;
                          }
                          h._fireError(d.TransactionRevertInstructionError(u3.reason, u3.signature, s2), e3.eventEmitter, e3.reject, null, s2), t6.next = 22;
                          break;
                        case 21:
                          throw false;
                        case 22:
                          t6.next = 25;
                          break;
                        case 24:
                          throw false;
                        case 25:
                          t6.next = 30;
                          break;
                        case 27:
                          t6.prev = 27, t6.t0 = t6.catch(9), h._fireError(d.TransactionRevertedWithoutReasonError(s2), e3.eventEmitter, e3.reject, null, s2);
                        case 30:
                          t6.next = 33;
                          break;
                        case 32:
                          h._fireError(d.TransactionOutOfGasError(s2), e3.eventEmitter, e3.reject, null, s2);
                        case 33:
                          a2 && x2.unsubscribe(), o2 = true;
                        case 35:
                        case "end":
                          return t6.stop();
                      }
                  }, t5, null, [[9, 27]]);
                }));
                return function(e4) {
                  return t4.apply(this, arguments);
                };
              }()).catch(function() {
                c2++, b2 ? c2 - 1 >= n2.transactionPollingTimeout && (x2.unsubscribe(), o2 = true, h._fireError(d.TransactionError("Transaction was not mined within " + n2.transactionPollingTimeout + " seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!"), e3.eventEmitter, e3.reject)) : c2 - 1 >= n2.transactionBlockTimeout && (x2.unsubscribe(), o2 = true, h._fireError(d.TransactionError("Transaction was not mined within " + n2.transactionBlockTimeout + " blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!"), e3.eventEmitter, e3.reject));
              });
            x2.unsubscribe(), o2 = true, h._fireError({ message: "Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.", data: m2 }, e3.eventEmitter, e3.reject);
          }, P = (function(e4) {
            var t4 = false, r5 = function() {
              v2 = setInterval(x.bind(null, e4, true), n2.transactionPollingInterval);
            };
            if (!this.requestManager.provider.on)
              return r5();
            E.subscribe("newBlockHeaders", function(n3, i2, o3) {
              if (t4 = true, n3 || !i2)
                return r5();
              x(e4, false, n3, 0, o3);
            }), g = setTimeout(function() {
              t4 || r5();
            }, 1e3 * this.blockHeaderTimeout);
          }).bind(this);
          E.getTransactionReceipt(t3).then(function(t4) {
            t4 && t4.blockHash ? (e3.eventEmitter.listeners("confirmation").length > 0 && P(t4), x(t4, false)) : o2 || P();
          }).catch(function() {
            o2 || P();
          });
        };
        var v = function(e3, t3) {
          return "number" == typeof e3 ? t3.wallet[e3] : e3 && "object" === (0, u.default)(e3) && e3.address && e3.privateKey ? e3 : t3.wallet[e3.toLowerCase()];
        };
        m.prototype.buildCall = function() {
          var e3 = this, t3 = "eth_sendTransaction" === e3.call || "eth_sendRawTransaction" === e3.call, r4 = "eth_call" === e3.call, n2 = function() {
            var n3 = Array.prototype.slice.call(arguments), i2 = p(!t3), a2 = e3.toPayload(n3);
            e3.hexFormat = false, "eth_getTransactionReceipt" !== e3.call && "eth_getTransactionByHash" !== e3.call && "getBlock" !== e3.name || (e3.hexFormat = a2.params.length < n3.length && "hex" === n3[n3.length - 1]);
            var s2 = function(n4, o2) {
              if (e3.handleRevert && r4 && e3.abiCoder) {
                var s3;
                if (!n4 && e3.isRevertReasonString(o2))
                  s3 = o2.substring(10);
                else if (n4 && n4.data) {
                  var c3;
                  s3 = "object" === (0, u.default)(n4.data) ? (null !== (c3 = n4.data.originalError) && void 0 !== c3 ? c3 : n4.data).data.substring(10) : n4.data.substring(10);
                }
                if (s3) {
                  var f2 = e3.abiCoder.decodeParameter("string", "0x" + s3), l3 = "Error(String)";
                  return void h._fireError(d.RevertInstructionError(f2, l3), i2.eventEmitter, i2.reject, a2.callback, { reason: f2, signature: l3 });
                }
              }
              try {
                o2 = e3.formatOutput(o2);
              } catch (e4) {
                n4 = e4;
              }
              if (o2 instanceof Error && (n4 = o2), n4)
                return n4.error && (n4 = n4.error), h._fireError(n4, i2.eventEmitter, i2.reject, a2.callback);
              a2.callback && a2.callback(null, o2), t3 ? (i2.eventEmitter.emit("transactionHash", o2), e3._confirmTransaction(i2, o2, a2)) : n4 || i2.resolve(o2);
            }, c2 = function(t4) {
              var r5 = f(f({}, a2), {}, { method: "eth_sendRawTransaction", params: [t4.rawTransaction] });
              e3.requestManager.send(r5, s2);
            }, l2 = function(e4, t4) {
              var r5;
              if (t4 && t4.accounts && t4.accounts.wallet && t4.accounts.wallet.length) {
                if ("eth_sendTransaction" === e4.method) {
                  var n4 = e4.params[0];
                  if ((r5 = v(n4 && "object" === (0, u.default)(n4) ? n4.from : null, t4.accounts)) && r5.privateKey)
                    return delete (n4 = JSON.parse(JSON.stringify(n4))).from, t4.defaultChain && !n4.chain && (n4.chain = t4.defaultChain), t4.defaultHardfork && !n4.hardfork && (n4.hardfork = t4.defaultHardfork), t4.defaultCommon && !n4.common && (n4.common = t4.defaultCommon), void t4.accounts.signTransaction(n4, r5.privateKey).then(c2).catch(function(e5) {
                      if ("function" == typeof i2.eventEmitter.listeners && i2.eventEmitter.listeners("error").length) {
                        try {
                          i2.eventEmitter.emit("error", e5);
                        } catch (e6) {
                        }
                        i2.eventEmitter.removeAllListeners(), i2.eventEmitter.catch(function() {
                        });
                      }
                      i2.reject(e5);
                    });
                } else if ("eth_sign" === e4.method) {
                  var o2 = e4.params[1];
                  if ((r5 = v(e4.params[0], t4.accounts)) && r5.privateKey) {
                    var a3 = t4.accounts.sign(o2, r5.privateKey);
                    return e4.callback && e4.callback(null, a3.signature), void i2.resolve(a3.signature);
                  }
                }
              }
              return t4.requestManager.send(e4, s2);
            }, b2 = t3 && !!a2.params[0] && "object" === (0, u.default)(a2.params[0]);
            return b2 && "0x1" === a2.params[0].type && void 0 === a2.params[0].accessList && (a2.params[0].accessList = []), !b2 || void 0 !== a2.params[0].gasPrice || void 0 !== a2.params[0].maxPriorityFeePerGas && void 0 !== a2.params[0].maxFeePerGas ? (t3 && setTimeout(function() {
              i2.eventEmitter.emit("sending", a2);
            }, 0), l2(a2, e3)) : function(e4, t4) {
              return new Promise(function(r5, n4) {
                try {
                  var i3 = new m({ name: "getBlockByNumber", call: "eth_getBlockByNumber", params: 2, inputFormatter: [function(e5) {
                    return e5 ? h.toHex(e5) : "latest";
                  }, function() {
                    return false;
                  }] }).createFunction(e4.requestManager), a3 = new m({ name: "getGasPrice", call: "eth_gasPrice", params: 0 }).createFunction(e4.requestManager);
                  Promise.all([i3(), a3()]).then(function(e5) {
                    var n5 = (0, o.default)(e5, 2), i4 = n5[0], a4 = n5[1];
                    if (("0x2" === t4.type || void 0 === t4.type) && i4 && i4.baseFeePerGas) {
                      var s3, u2;
                      t4.gasPrice ? (s3 = t4.gasPrice, u2 = t4.gasPrice, delete t4.gasPrice) : (s3 = t4.maxPriorityFeePerGas || "0x9502F900", u2 = t4.maxFeePerGas || h.toHex(h.toBN(i4.baseFeePerGas).mul(h.toBN(2)).add(h.toBN(s3)))), r5({ maxFeePerGas: u2, maxPriorityFeePerGas: s3 });
                    } else {
                      if (t4.maxPriorityFeePerGas || t4.maxFeePerGas)
                        throw Error("Network doesn't support eip-1559");
                      r5({ gasPrice: a4 });
                    }
                  });
                } catch (e5) {
                  n4(e5);
                }
              });
            }(e3, a2.params[0]).then(function(r5) {
              void 0 !== r5.gasPrice ? a2.params[0].gasPrice = r5.gasPrice : void 0 !== r5.maxPriorityFeePerGas && void 0 !== r5.maxFeePerGas && (a2.params[0].maxPriorityFeePerGas = r5.maxPriorityFeePerGas, a2.params[0].maxFeePerGas = r5.maxFeePerGas), t3 && setTimeout(function() {
                i2.eventEmitter.emit("sending", a2);
              }, 0), l2(a2, e3);
            }), t3 && setTimeout(function() {
              i2.eventEmitter.emit("sent", a2);
            }, 0), i2.eventEmitter;
          };
          return n2.method = e3, n2.request = this.request.bind(this), n2;
        }, m.prototype.getRevertReason = function(e3, t3) {
          var r4 = this;
          return new Promise(function(n2, i2) {
            new m({ name: "call", call: "eth_call", params: 2, abiCoder: r4.abiCoder, handleRevert: true }).createFunction(r4.requestManager)(e3, h.numberToHex(t3)).then(function() {
              n2(false);
            }).catch(function(e4) {
              e4.reason ? n2({ reason: e4.reason, signature: e4.signature }) : i2(e4);
            });
          });
        }, m.prototype.isRevertReasonString = function(e3) {
          return "string" == typeof e3 && (e3.length - 2) / 2 % 32 == 4 && "0x08c379a0" === e3.substring(0, 10);
        }, m.prototype.request = function() {
          var e3 = this.toPayload(Array.prototype.slice.call(arguments));
          return e3.format = this.formatOutput.bind(this), e3;
        }, e2.exports = m;
      }, 282: (e2, t2, r3) => {
        "use strict";
        var n = r3(8008), i = function(e3) {
          var t3, r4, i2 = new Promise(function() {
            t3 = arguments[0], r4 = arguments[1];
          });
          if (e3)
            return { resolve: t3, reject: r4, eventEmitter: i2 };
          var o = new n();
          return i2._events = o._events, i2.emit = o.emit, i2.on = o.on, i2.once = o.once, i2.off = o.off, i2.listeners = o.listeners, i2.addListener = o.addListener, i2.removeListener = o.removeListener, i2.removeAllListeners = o.removeAllListeners, { resolve: t3, reject: r4, eventEmitter: i2 };
        };
        i.resolve = function(e3) {
          var t3 = i(true);
          return t3.resolve(e3), t3.eventEmitter;
        }, e2.exports = i;
      }, 5229: (e2, t2, r3) => {
        "use strict";
        var n = r3(8155), i = r3(1314).errors, o = function(e3) {
          this.requestManager = e3, this.requests = [];
        };
        o.prototype.add = function(e3) {
          this.requests.push(e3);
        }, o.prototype.execute = function() {
          var e3 = this.requests, t3 = this._sortResponses.bind(this);
          this.requestManager.sendBatch(e3, function(r4, o2) {
            o2 = t3(o2), e3.map(function(e4, t4) {
              return o2[t4] || {};
            }).forEach(function(t4, r5) {
              if (e3[r5].callback) {
                if (t4 && t4.error)
                  return e3[r5].callback(i.ErrorResponse(t4));
                if (!n.isValidResponse(t4))
                  return e3[r5].callback(i.InvalidResponse(t4));
                try {
                  e3[r5].callback(null, e3[r5].format ? e3[r5].format(t4.result) : t4.result);
                } catch (t5) {
                  e3[r5].callback(t5);
                }
              }
            });
          });
        }, o.prototype._sortResponses = function(e3) {
          return (e3 || []).sort(function(e4, t3) {
            return e4.id - t3.id;
          });
        }, e2.exports = o;
      }, 9764: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = null, o = "object" === ("undefined" == typeof globalThis ? "undefined" : (0, n.default)(globalThis)) ? globalThis : void 0;
        if (!o)
          try {
            o = Function("return this")();
          } catch (e3) {
            o = self;
          }
        void 0 !== o.ethereum ? i = o.ethereum : void 0 !== o.web3 && o.web3.currentProvider && (o.web3.currentProvider.sendAsync && (o.web3.currentProvider.send = o.web3.currentProvider.sendAsync, delete o.web3.currentProvider.sendAsync), !o.web3.currentProvider.on && o.web3.currentProvider.connection && "ipcProviderWrapper" === o.web3.currentProvider.connection.constructor.name && (o.web3.currentProvider.on = function(e3, t3) {
          if ("function" != typeof t3)
            throw new Error("The second parameter callback must be a function.");
          "data" === e3 ? this.connection.on("data", function(e4) {
            var r4 = "";
            e4 = e4.toString();
            try {
              r4 = JSON.parse(e4);
            } catch (r5) {
              return t3(new Error("Couldn't parse response data" + e4));
            }
            r4.id || -1 === r4.method.indexOf("_subscription") || t3(null, r4);
          }) : this.connection.on(e3, t3);
        }), i = o.web3.currentProvider), e2.exports = i;
      }, 2033: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(5058).callbackify, o = r3(1314).errors, a = r3(8155), s = r3(5229), u = r3(9764), c = function e3(t3, r4) {
          this.provider = null, this.providers = e3.providers, this.setProvider(t3, r4), this.subscriptions = /* @__PURE__ */ new Map();
        };
        c.givenProvider = u, c.providers = { WebsocketProvider: r3(7651), HttpProvider: r3(4565), IpcProvider: r3(2683) }, c.prototype.setProvider = function(e3, t3) {
          var r4 = this;
          if (e3 && "string" == typeof e3 && this.providers) {
            if (/^http(s)?:\/\//i.test(e3))
              e3 = new this.providers.HttpProvider(e3);
            else if (/^ws(s)?:\/\//i.test(e3))
              e3 = new this.providers.WebsocketProvider(e3);
            else if (e3 && "object" === (0, n.default)(t3) && "function" == typeof t3.connect)
              e3 = new this.providers.IpcProvider(e3, t3);
            else if (e3)
              throw new Error(`Can't autodetect provider for "` + e3 + '"');
          }
          this.provider && this.provider.connected && this.clearSubscriptions(), this.provider = e3 || null, this.provider && this.provider.on && ("function" == typeof e3.request ? this.provider.on("message", function(e4) {
            if (e4 && "eth_subscription" === e4.type && e4.data) {
              var t4 = e4.data;
              t4.subscription && r4.subscriptions.has(t4.subscription) && r4.subscriptions.get(t4.subscription).callback(null, t4.result);
            }
          }) : this.provider.on("data", function(e4, t4) {
            (e4 = e4 || t4).method && e4.params && e4.params.subscription && r4.subscriptions.has(e4.params.subscription) && r4.subscriptions.get(e4.params.subscription).callback(null, e4.params.result);
          }), this.provider.on("connect", function() {
            r4.subscriptions.forEach(function(e4) {
              e4.subscription.resubscribe();
            });
          }), this.provider.on("error", function(e4) {
            r4.subscriptions.forEach(function(t4) {
              t4.callback(e4);
            });
          }), this.provider.on("disconnect", function(e4) {
            r4._isCleanCloseEvent(e4) && !r4._isIpcCloseError(e4) || (r4.subscriptions.forEach(function(t4) {
              t4.callback(o.ConnectionCloseError(e4)), r4.subscriptions.delete(t4.subscription.id);
            }), r4.provider && r4.provider.emit && r4.provider.emit("error", o.ConnectionCloseError(e4))), r4.provider && r4.provider.emit && r4.provider.emit("end", e4);
          }));
        }, c.prototype.send = function(e3, t3) {
          if (t3 = t3 || function() {
          }, !this.provider)
            return t3(o.InvalidProvider());
          var r4 = e3.method, n2 = e3.params, s2 = a.toPayload(r4, n2), u2 = this._jsonrpcResultCallback(t3, s2);
          if (this.provider.request)
            i(this.provider.request.bind(this.provider))({ method: r4, params: n2 }, t3);
          else if (this.provider.sendAsync)
            this.provider.sendAsync(s2, u2);
          else {
            if (!this.provider.send)
              throw new Error("Provider does not have a request or send method to use.");
            this.provider.send(s2, u2);
          }
        }, c.prototype.sendBatch = function(e3, t3) {
          if (!this.provider)
            return t3(o.InvalidProvider());
          var r4 = a.toBatchPayload(e3);
          this.provider[this.provider.sendAsync ? "sendAsync" : "send"](r4, function(e4, r5) {
            return e4 ? t3(e4) : Array.isArray(r5) ? void t3(null, r5) : t3(o.InvalidResponse(r5));
          });
        }, c.prototype.addSubscription = function(e3, t3) {
          if (!this.provider.on)
            throw new Error("The provider doesn't support subscriptions: " + this.provider.constructor.name);
          this.subscriptions.set(e3.id, { callback: t3, subscription: e3 });
        }, c.prototype.removeSubscription = function(e3, t3) {
          if (this.subscriptions.has(e3)) {
            var r4 = this.subscriptions.get(e3).subscription.options.type;
            return this.subscriptions.delete(e3), void this.send({ method: r4 + "_unsubscribe", params: [e3] }, t3);
          }
          "function" == typeof t3 && t3(null);
        }, c.prototype.clearSubscriptions = function(e3) {
          try {
            var t3 = this;
            return this.subscriptions.size > 0 && this.subscriptions.forEach(function(r4, n2) {
              e3 && "syncing" === r4.name || t3.removeSubscription(n2);
            }), this.provider.reset && this.provider.reset(), true;
          } catch (e4) {
            throw new Error("Error while clearing subscriptions: ".concat(e4));
          }
        }, c.prototype._isCleanCloseEvent = function(e3) {
          return "object" === (0, n.default)(e3) && ([1e3].includes(e3.code) || true === e3.wasClean);
        }, c.prototype._isIpcCloseError = function(e3) {
          return "boolean" == typeof e3 && e3;
        }, c.prototype._jsonrpcResultCallback = function(e3, t3) {
          return function(r4, n2) {
            return n2 && n2.id && t3.id !== n2.id ? e3(new Error("Wrong response id ".concat(n2.id, " (expected: ").concat(t3.id, ") in ").concat(JSON.stringify(t3)))) : r4 ? e3(r4) : n2 && n2.error ? e3(o.ErrorResponse(n2)) : a.isValidResponse(n2) ? void e3(null, n2.result) : e3(o.InvalidResponse(n2));
          };
        }, e2.exports = { Manager: c, BatchManager: s };
      }, 8155: (e2) => {
        "use strict";
        var t2 = { messageId: Math.floor(Math.random() * Number.MAX_SAFE_INTEGER), toPayload: function(e3, r3) {
          if (!e3)
            throw new Error('JSONRPC method should be specified for params: "' + JSON.stringify(r3) + '"!');
          return t2.messageId === Number.MAX_SAFE_INTEGER ? t2.messageId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER) : t2.messageId++, { jsonrpc: "2.0", id: t2.messageId, method: e3, params: r3 || [] };
        }, isValidResponse: function(e3) {
          return Array.isArray(e3) ? e3.every(t3) : t3(e3);
          function t3(e4) {
            return !(!e4 || e4.error || "2.0" !== e4.jsonrpc || "number" != typeof e4.id && "string" != typeof e4.id || void 0 === e4.result);
          }
        }, toBatchPayload: function(e3) {
          return e3.map(function(e4) {
            return t2.toPayload(e4.method, e4.params);
          });
        } };
        e2.exports = t2;
      }, 4178: (e2, t2, r3) => {
        "use strict";
        var n = r3(2929), i = function(e3) {
          this.name = e3.name, this.type = e3.type, this.subscriptions = e3.subscriptions || {}, this.requestManager = null;
        };
        i.prototype.setRequestManager = function(e3) {
          this.requestManager = e3;
        }, i.prototype.attachToObject = function(e3) {
          var t3 = this.buildCall(), r4 = this.name.split(".");
          r4.length > 1 ? (e3[r4[0]] = e3[r4[0]] || {}, e3[r4[0]][r4[1]] = t3) : e3[r4[0]] = t3;
        }, i.prototype.buildCall = function() {
          var e3 = this;
          return function() {
            e3.subscriptions[arguments[0]] || console.warn("Subscription " + JSON.stringify(arguments[0]) + " doesn't exist. Subscribing anyway.");
            var t3 = new n({ subscription: e3.subscriptions[arguments[0]] || {}, requestManager: e3.requestManager, type: e3.type });
            return t3.subscribe.apply(t3, arguments);
          };
        }, e2.exports = { subscriptions: i, subscription: n };
      }, 2929: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(1314).errors, o = r3(8008), a = r3(1314).formatters;
        function s(e3) {
          return e3;
        }
        function u(e3) {
          o.call(this), this.id = null, this.callback = s, this.arguments = null, this.lastBlock = null, this.options = { subscription: e3.subscription, type: e3.type, requestManager: e3.requestManager };
        }
        u.prototype = Object.create(o.prototype), u.prototype.constructor = u, u.prototype._extractCallback = function(e3) {
          if ("function" == typeof e3[e3.length - 1])
            return e3.pop();
        }, u.prototype._validateArgs = function(e3) {
          var t3 = this.options.subscription;
          if (t3 || (t3 = {}), t3.params || (t3.params = 0), e3.length !== t3.params)
            throw i.InvalidNumberOfParams(e3.length, t3.params, t3.subscriptionName);
        }, u.prototype._formatInput = function(e3) {
          var t3 = this.options.subscription;
          return t3 && t3.inputFormatter ? t3.inputFormatter.map(function(t4, r4) {
            return t4 ? t4(e3[r4]) : e3[r4];
          }) : e3;
        }, u.prototype._formatOutput = function(e3) {
          var t3 = this.options.subscription;
          return t3 && t3.outputFormatter && e3 ? t3.outputFormatter(e3) : e3;
        }, u.prototype._toPayload = function(e3) {
          var t3 = [];
          if (this.callback = this._extractCallback(e3) || s, this.subscriptionMethod || (this.subscriptionMethod = e3.shift(), this.options.subscription.subscriptionName && (this.subscriptionMethod = this.options.subscription.subscriptionName)), this.arguments || (this.arguments = this._formatInput(e3), this._validateArgs(this.arguments), e3 = []), t3.push(this.subscriptionMethod), t3 = t3.concat(this.arguments), e3.length)
            throw new Error("Only a callback is allowed as parameter on an already instantiated subscription.");
          return { method: this.options.type + "_subscribe", params: t3 };
        }, u.prototype.unsubscribe = function(e3) {
          this.options.requestManager.removeSubscription(this.id, e3), this.id = null, this.lastBlock = null, this.removeAllListeners();
        }, u.prototype.subscribe = function() {
          var e3 = this, t3 = Array.prototype.slice.call(arguments), r4 = this._toPayload(t3);
          if (!r4)
            return this;
          if (!this.options.requestManager.provider)
            return setTimeout(function() {
              var t4 = new Error("No provider set.");
              e3.callback(t4, null, e3), e3.emit("error", t4);
            }, 0), this;
          if (!this.options.requestManager.provider.on)
            return setTimeout(function() {
              var t4 = new Error("The current provider doesn't support subscriptions: " + e3.options.requestManager.provider.constructor.name);
              e3.callback(t4, null, e3), e3.emit("error", t4);
            }, 0), this;
          if (this.lastBlock && this.options.params && "object" === (0, n.default)(this.options.params) && (r4.params[1] = this.options.params, r4.params[1].fromBlock = a.inputBlockNumberFormatter(this.lastBlock + 1)), this.id && this.unsubscribe(), this.options.params = r4.params[1], "logs" === r4.params[0] && r4.params[1] && "object" === (0, n.default)(r4.params[1]) && r4.params[1].hasOwnProperty("fromBlock") && isFinite(r4.params[1].fromBlock)) {
            var i2 = Object.assign({}, r4.params[1]);
            this.options.requestManager.send({ method: "eth_getLogs", params: [i2] }, function(t4, r5) {
              t4 ? setTimeout(function() {
                e3.callback(t4, null, e3), e3.emit("error", t4);
              }, 0) : r5.forEach(function(t5) {
                var r6 = e3._formatOutput(t5);
                e3.callback(null, r6, e3), e3.emit("data", r6);
              });
            });
          }
          return "object" === (0, n.default)(r4.params[1]) && delete r4.params[1].fromBlock, this.options.requestManager.send(r4, function(t4, i3) {
            !t4 && i3 ? (e3.id = i3, e3.method = r4.params[0], e3.options.requestManager.addSubscription(e3, function(t5, r5) {
              t5 ? (e3.callback(t5, false, e3), e3.emit("error", t5)) : (Array.isArray(r5) || (r5 = [r5]), r5.forEach(function(t6) {
                var r6 = e3._formatOutput(t6);
                if (e3.lastBlock = r6 && "object" === (0, n.default)(r6) ? r6.blockNumber : null, "function" == typeof e3.options.subscription.subscriptionHandler)
                  return e3.options.subscription.subscriptionHandler.call(e3, r6);
                e3.emit("data", r6), e3.callback(null, r6, e3);
              }));
            }), e3.emit("connected", i3)) : setTimeout(function() {
              e3.callback(t4, false, e3), e3.emit("error", t4);
            }, 0);
          }), this;
        }, u.prototype.resubscribe = function() {
          this.options.requestManager.removeSubscription(this.id), this.id = null, this.subscribe(this.callback);
        }, e2.exports = u;
      }, 9907: (e2, t2, r3) => {
        "use strict";
        var n = r3(1314).formatters, i = r3(3349), o = r3(8161);
        e2.exports = function(e3) {
          var t3 = function(t4) {
            var r4;
            return t4.property ? (e3[t4.property] || (e3[t4.property] = {}), r4 = e3[t4.property]) : r4 = e3, t4.methods && t4.methods.forEach(function(t5) {
              t5 instanceof i || (t5 = new i(t5)), t5.attachToObject(r4), t5.setRequestManager(e3._requestManager);
            }), e3;
          };
          return t3.formatters = n, t3.utils = o, t3.Method = i, t3;
        };
      }, 606: (e2, t2, r3) => {
        "use strict";
        var n = r3(2033), i = r3(9907);
        e2.exports = { packageInit: function(e3, t3) {
          if (t3 = Array.prototype.slice.call(t3), !e3)
            throw new Error('You need to instantiate using the "new" keyword.');
          Object.defineProperty(e3, "currentProvider", { get: function() {
            return e3._provider;
          }, set: function(t4) {
            return e3.setProvider(t4);
          }, enumerable: true, configurable: true }), t3[0] && t3[0]._requestManager ? e3._requestManager = t3[0]._requestManager : e3._requestManager = new n.Manager(t3[0], t3[1]), e3.givenProvider = n.Manager.givenProvider, e3.providers = n.Manager.providers, e3._provider = e3._requestManager.provider, e3.setProvider || (e3.setProvider = function(t4, r4) {
            return e3._requestManager.setProvider(t4, r4), e3._provider = e3._requestManager.provider, true;
          }), e3.setRequestManager = function(t4) {
            e3._requestManager = t4, e3._provider = t4.provider;
          }, e3.BatchRequest = n.BatchManager.bind(null, e3._requestManager), e3.extend = i(e3);
        }, addProviders: function(e3) {
          e3.givenProvider = n.Manager.givenProvider, e3.providers = n.Manager.providers;
        } };
      }, 9901: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(9033).Buffer, o = r3(8161), a = r3(2914).RQ, s = r3(2914)._R, u = new a(function(e3, t3) {
          return !e3.match(/^u?int/) || Array.isArray(t3) || t3 && "object" === (0, n.default)(t3) && "BN" === t3.constructor.name ? t3 : t3.toString();
        });
        function c() {
        }
        var f = function() {
        };
        f.prototype.encodeFunctionSignature = function(e3) {
          return ("function" == typeof e3 || "object" === (0, n.default)(e3) && e3) && (e3 = o._jsonInterfaceMethodToString(e3)), o.sha3(e3).slice(0, 10);
        }, f.prototype.encodeEventSignature = function(e3) {
          return ("function" == typeof e3 || "object" === (0, n.default)(e3) && e3) && (e3 = o._jsonInterfaceMethodToString(e3)), o.sha3(e3);
        }, f.prototype.encodeParameter = function(e3, t3) {
          return this.encodeParameters([e3], [t3]);
        }, f.prototype.encodeParameters = function(e3, t3) {
          var r4 = this;
          return e3 = r4.mapTypes(e3), t3 = t3.map(function(t4, i2) {
            var o2 = e3[i2];
            return "object" === (0, n.default)(o2) && o2.type && (o2 = o2.type), t4 = r4.formatParam(o2, t4), "string" == typeof o2 && o2.includes("tuple") && function e4(t5, n2) {
              if ("array" === t5.name) {
                if (!t5.type.match(/\[(\d+)\]/))
                  return n2.map(function(r5) {
                    return e4(u._getCoder(s.from(t5.type.replace("[]", ""))), r5);
                  });
                var i3 = parseInt(t5.type.match(/\[(\d+)\]/)[1]);
                if (n2.length !== i3)
                  throw new Error("Array length does not matches with the given input");
                return n2.map(function(r5) {
                  return e4(u._getCoder(s.from(t5.type.replace(/\[\d+\]/, ""))), r5);
                });
              }
              t5.coders.forEach(function(t6, i4) {
                "tuple" === t6.name ? e4(t6, n2[i4]) : n2[i4] = r4.formatParam(t6.name, n2[i4]);
              });
            }(u._getCoder(s.from(o2)), t4), t4;
          }), u.encode(e3, t3);
        }, f.prototype.mapTypes = function(e3) {
          var t3 = this, r4 = [];
          return e3.forEach(function(e4) {
            if ("object" === (0, n.default)(e4) && "function" === e4.type && (e4 = Object.assign({}, e4, { type: "bytes24" })), t3.isSimplifiedStructFormat(e4)) {
              var i2 = Object.keys(e4)[0];
              r4.push(Object.assign(t3.mapStructNameAndType(i2), { components: t3.mapStructToCoderFormat(e4[i2]) }));
            } else
              r4.push(e4);
          }), r4;
        }, f.prototype.isSimplifiedStructFormat = function(e3) {
          return "object" === (0, n.default)(e3) && void 0 === e3.components && void 0 === e3.name;
        }, f.prototype.mapStructNameAndType = function(e3) {
          var t3 = "tuple";
          return e3.indexOf("[]") > -1 && (t3 = "tuple[]", e3 = e3.slice(0, -2)), { type: t3, name: e3 };
        }, f.prototype.mapStructToCoderFormat = function(e3) {
          var t3 = this, r4 = [];
          return Object.keys(e3).forEach(function(i2) {
            "object" !== (0, n.default)(e3[i2]) ? r4.push({ name: i2, type: e3[i2] }) : r4.push(Object.assign(t3.mapStructNameAndType(i2), { components: t3.mapStructToCoderFormat(e3[i2]) }));
          }), r4;
        }, f.prototype.formatParam = function(e3, t3) {
          var r4 = this, n2 = new RegExp(/^bytes([0-9]*)$/), a2 = new RegExp(/^bytes([0-9]*)\[\]$/), s2 = new RegExp(/^(u?int)([0-9]*)$/), u2 = new RegExp(/^(u?int)([0-9]*)\[\]$/);
          if (o.isBN(t3) || o.isBigNumber(t3))
            return t3.toString(10);
          if (e3.match(a2) || e3.match(u2))
            return t3.map(function(t4) {
              return r4.formatParam(e3.replace("[]", ""), t4);
            });
          var c2 = e3.match(s2);
          if (c2) {
            var f2 = parseInt(c2[2] || "256");
            f2 / 8 < t3.length && (t3 = o.leftPad(t3, f2));
          }
          if (c2 = e3.match(n2)) {
            i.isBuffer(t3) && (t3 = o.toHex(t3));
            var d2 = parseInt(c2[1]);
            if (d2) {
              var l = 2 * d2;
              "0x" === t3.substring(0, 2) && (l += 2), t3.length < l && (t3 = o.rightPad(t3, 2 * d2));
            }
            t3.length % 2 == 1 && (t3 = "0x0" + t3.substring(2));
          }
          return t3;
        }, f.prototype.encodeFunctionCall = function(e3, t3) {
          return this.encodeFunctionSignature(e3) + this.encodeParameters(e3.inputs, t3).replace("0x", "");
        }, f.prototype.decodeParameter = function(e3, t3) {
          return this.decodeParameters([e3], t3)[0];
        }, f.prototype.decodeParameters = function(e3, t3) {
          return this.decodeParametersWith(e3, t3, false);
        }, f.prototype.decodeParametersWith = function(e3, t3, r4) {
          if (e3.length > 0 && (!t3 || "0x" === t3 || "0X" === t3))
            throw new Error("Returned values aren't valid, did it run Out of Gas? You might also see this error if you are not using the correct ABI for the contract you are retrieving data from, requesting data from a block number that does not exist, or querying a node which is not fully synced.");
          var i2 = u.decode(this.mapTypes(e3), "0x" + t3.replace(/0x/i, ""), r4), o2 = new c();
          return o2.__length__ = 0, e3.forEach(function(e4, t4) {
            var r5 = i2[o2.__length__], a2 = "object" === (0, n.default)(e4) && e4.type && "string" === e4.type;
            r5 = "0x" !== r5 || a2 || "string" == typeof e4 && "string" === e4 ? r5 : null, o2[t4] = r5, ("function" == typeof e4 || e4 && "object" === (0, n.default)(e4)) && e4.name && (o2[e4.name] = r5), o2.__length__++;
          }), o2;
        }, f.prototype.decodeLog = function(e3, t3, r4) {
          var n2 = this;
          r4 = Array.isArray(r4) ? r4 : [r4], t3 = t3 || "";
          var i2 = [], o2 = [], a2 = 0;
          e3.forEach(function(e4, t4) {
            e4.indexed ? (o2[t4] = ["bool", "int", "uint", "address", "fixed", "ufixed"].find(function(t5) {
              return -1 !== e4.type.indexOf(t5);
            }) ? n2.decodeParameter(e4.type, r4[a2]) : r4[a2], a2++) : i2[t4] = e4;
          });
          var s2 = t3, u2 = s2 ? this.decodeParametersWith(i2, s2, true) : [], f2 = new c();
          return f2.__length__ = 0, e3.forEach(function(e4, t4) {
            f2[t4] = "string" === e4.type ? "" : null, void 0 !== u2[t4] && (f2[t4] = u2[t4]), void 0 !== o2[t4] && (f2[t4] = o2[t4]), e4.name && (f2[e4.name] = f2[t4]), f2.__length__++;
          }), f2;
        };
        var d = new f();
        e2.exports = d;
      }, 9819: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(8847), o = i(r3(3106)), a = i(r3(3355)), s = i(r3(775)), u = i(r3(4519));
        function c(e3, t3) {
          var r4 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var n2 = Object.getOwnPropertySymbols(e3);
            t3 && (n2 = n2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r4.push.apply(r4, n2);
          }
          return r4;
        }
        function f(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r4 = null != arguments[t3] ? arguments[t3] : {};
            t3 % 2 ? c(Object(r4), true).forEach(function(t4) {
              (0, s.default)(e3, t4, r4[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r4)) : c(Object(r4)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r4, t4));
            });
          }
          return e3;
        }
        function d(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r4 = 0, n2 = new Array(t3); r4 < t3; r4++)
            n2[r4] = e3[r4];
          return n2;
        }
        var l = r3(606), h = r3(3349), p = r3(3058), b = r3(4293), y = r3(7799), m = r3(2679), v = r3(8161), g = r3(1314), w = r3(2339).TransactionFactory, A = r3(3863).default, k = r3(3863).Hardfork, _ = r3(3062), S = function(e3) {
          return null == e3;
        }, E = function(e3) {
          return null != e3;
        }, x = function() {
          var e3 = this;
          l.packageInit(this, arguments), delete this.BatchRequest, delete this.extend;
          var t3 = [new h({ name: "getNetworkId", call: "net_version", params: 0, outputFormatter: parseInt }), new h({ name: "getChainId", call: "eth_chainId", params: 0, outputFormatter: v.hexToNumber }), new h({ name: "getGasPrice", call: "eth_gasPrice", params: 0 }), new h({ name: "getTransactionCount", call: "eth_getTransactionCount", params: 2, inputFormatter: [function(e4) {
            if (v.isAddress(e4))
              return e4;
            throw new Error("Address " + e4 + ' is not a valid address to get the "transactionCount".');
          }, function() {
            return "latest";
          }] }), new h({ name: "getBlockByNumber", call: "eth_getBlockByNumber", params: 2, inputFormatter: [function(e4) {
            return e4 ? v.toHex(e4) : "latest";
          }, function() {
            return false;
          }] })];
          this._ethereumCall = {}, t3.forEach(function(t4) {
            t4.attachToObject(e3._ethereumCall), t4.setRequestManager(e3._requestManager);
          }), this.wallet = new O(this);
        };
        function P(e3, t3) {
          return new Promise(function(r4, n2) {
            try {
              (void 0 === t3.type || t3.type < "0x2") && void 0 !== t3.gasPrice ? r4({ gasPrice: t3.gasPrice }) : "0x2" === t3.type && t3.maxFeePerGas && t3.maxPriorityFeePerGas ? r4({ maxFeePerGas: t3.maxFeePerGas, maxPriorityFeePerGas: t3.maxPriorityFeePerGas }) : Promise.all([e3._ethereumCall.getBlockByNumber(), e3._ethereumCall.getGasPrice()]).then(function(e4) {
                var n3 = (0, u.default)(e4, 2), i2 = n3[0], o2 = n3[1];
                if ("0x2" === t3.type && i2 && i2.baseFeePerGas) {
                  var a2, s2;
                  t3.gasPrice ? (a2 = t3.gasPrice, s2 = t3.gasPrice, delete t3.gasPrice) : (a2 = t3.maxPriorityFeePerGas || "0x9502F900", s2 = t3.maxFeePerGas || v.toHex(v.toBN(i2.baseFeePerGas).mul(v.toBN(2)).add(v.toBN(a2)))), r4({ maxFeePerGas: s2, maxPriorityFeePerGas: a2 });
                } else {
                  if (t3.maxPriorityFeePerGas || t3.maxFeePerGas)
                    throw Error("Network doesn't support eip-1559");
                  r4({ gasPrice: o2 });
                }
              }).catch(function(e4) {
                n2(e4);
              });
            } catch (e4) {
              n2(e4);
            }
          });
        }
        function O(e3) {
          this._accounts = e3, this.length = 0, this.defaultKeyName = "web3js_wallet";
        }
        x.prototype._addAccountFunctions = function(e3) {
          var t3 = this;
          return e3.signTransaction = function(r4, n2) {
            return t3.signTransaction(r4, e3.privateKey, n2);
          }, e3.sign = function(r4) {
            return t3.sign(r4, e3.privateKey);
          }, e3.encrypt = function(r4, n2) {
            return t3.encrypt(e3.privateKey, r4, n2);
          }, e3;
        }, x.prototype.create = function(e3) {
          return this._addAccountFunctions(p.create(e3 || v.randomHex(32)));
        }, x.prototype.privateKeyToAccount = function(e3, t3) {
          if (e3.startsWith("0x") || (e3 = "0x" + e3), !t3 && 66 !== e3.length)
            throw new Error("Private key must be 32 bytes long");
          return this._addAccountFunctions(p.fromPrivate(e3));
        }, x.prototype.signTransaction = function(e3, t3, r4) {
          var i2 = this, o2 = false, a2 = {}, s2 = !(!e3 || !(e3.chain && e3.hardfork || e3.common));
          if (r4 = r4 || function() {
          }, !e3)
            return o2 = new Error("No transaction object given!"), r4(o2), Promise.reject(o2);
          if (E(e3.common) && S(e3.common.customChain))
            return o2 = new Error("If tx.common is provided it must have tx.common.customChain"), r4(o2), Promise.reject(o2);
          if (E(e3.common) && S(e3.common.customChain.chainId))
            return o2 = new Error("If tx.common is provided it must have tx.common.customChain and tx.common.customChain.chainId"), r4(o2), Promise.reject(o2);
          if (E(e3.common) && E(e3.common.customChain.chainId) && E(e3.chainId) && e3.chainId !== e3.common.customChain.chainId)
            return o2 = new Error("Chain Id doesnt match in tx.chainId tx.common.customChain.chainId"), r4(o2), Promise.reject(o2);
          function c2(e4) {
            var i3 = function(e5) {
              if (e5.common && e5.chain && e5.hardfork)
                return new Error("Please provide the @ethereumjs/common object or the chain and hardfork property but not all together.");
              if (e5.chain && !e5.hardfork || e5.hardfork && !e5.chain)
                return new Error('When specifying chain and hardfork, both values must be defined. Received "chain": ' + e5.chain + ', "hardfork": ' + e5.hardfork);
              if (!(e5.gas || e5.gasLimit || e5.maxPriorityFeePerGas || e5.maxFeePerGas))
                return new Error('"gas" is missing');
              if (e5.gas && e5.gasPrice) {
                if (e5.gas < 0 || e5.gasPrice < 0)
                  return new Error("Gas or gasPrice is lower than 0");
              } else if (e5.maxPriorityFeePerGas < 0 || e5.maxFeePerGas < 0)
                return new Error("maxPriorityFeePerGas or maxFeePerGas is lower than 0");
              return e5.nonce < 0 || e5.chainId < 0 ? new Error("Nonce or chainId is lower than 0") : void 0;
            }(e4);
            if (i3)
              return r4(i3), Promise.reject(i3);
            try {
              var o3 = g.formatters.inputCallFormatter(Object.assign({}, e4));
              o3.data = o3.data || "0x", o3.value = o3.value || "0x", o3.gasLimit = o3.gasLimit || o3.gas, "0x1" === o3.type && void 0 === o3.accessList && (o3.accessList = []), s2 ? (o3.common && (a2.common = A.forCustomChain(o3.common.baseChain || "mainnet", { name: o3.common.customChain.name || "custom-network", networkId: o3.common.customChain.networkId, chainId: o3.common.customChain.chainId }, o3.common.hardfork || k.London), delete o3.common), o3.chain && (a2.chain = o3.chain, delete o3.chain), o3.hardfork && (a2.hardfork = o3.hardfork, delete o3.hardfork)) : (a2.common = A.forCustomChain("mainnet", { name: "custom-network", networkId: o3.networkId, chainId: o3.chainId }, o3.hardfork || k.London), delete o3.networkId), t3.startsWith("0x") && (t3 = t3.substring(2));
              var u2 = w.fromTxData(o3, a2).sign(n.from(t3, "hex")), c3 = u2.validate(true);
              if (c3.length > 0) {
                var f2, l2 = "Signer Error: ", h2 = function(e5, t4) {
                  var r5 = "undefined" != typeof Symbol && e5[Symbol.iterator] || e5["@@iterator"];
                  if (!r5) {
                    if (Array.isArray(e5) || (r5 = function(e6, t5) {
                      if (e6) {
                        if ("string" == typeof e6)
                          return d(e6, t5);
                        var r6 = Object.prototype.toString.call(e6).slice(8, -1);
                        return "Object" === r6 && e6.constructor && (r6 = e6.constructor.name), "Map" === r6 || "Set" === r6 ? Array.from(e6) : "Arguments" === r6 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r6) ? d(e6, t5) : void 0;
                      }
                    }(e5)) || t4 && e5 && "number" == typeof e5.length) {
                      r5 && (e5 = r5);
                      var n2 = 0, i4 = function() {
                      };
                      return { s: i4, n: function() {
                        return n2 >= e5.length ? { done: true } : { done: false, value: e5[n2++] };
                      }, e: function(e6) {
                        throw e6;
                      }, f: i4 };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                  }
                  var o4, a3 = true, s3 = false;
                  return { s: function() {
                    r5 = r5.call(e5);
                  }, n: function() {
                    var e6 = r5.next();
                    return a3 = e6.done, e6;
                  }, e: function(e6) {
                    s3 = true, o4 = e6;
                  }, f: function() {
                    try {
                      a3 || null == r5.return || r5.return();
                    } finally {
                      if (s3)
                        throw o4;
                    }
                  } };
                }(c3);
                try {
                  for (h2.s(); !(f2 = h2.n()).done; ) {
                    var p2 = f2.value;
                    l2 += "".concat(l2, " ").concat(p2, ".");
                  }
                } catch (e5) {
                  h2.e(e5);
                } finally {
                  h2.f();
                }
                throw new Error(l2);
              }
              var b2 = "0x" + u2.serialize().toString("hex"), y2 = v.keccak256(b2), m2 = { messageHash: "0x" + n.from(u2.getMessageToSign(true)).toString("hex"), v: "0x" + u2.v.toString("hex"), r: "0x" + u2.r.toString("hex"), s: "0x" + u2.s.toString("hex"), rawTransaction: b2, transactionHash: y2 };
              return r4(null, m2), m2;
            } catch (e5) {
              return r4(e5), Promise.reject(e5);
            }
          }
          return e3.type = function(e4) {
            var t4, r5 = void 0 !== e4.maxFeePerGas || void 0 !== e4.maxPriorityFeePerGas;
            if (void 0 !== e4.type ? t4 = v.toHex(e4.type) : void 0 === e4.type && r5 && (t4 = "0x2"), void 0 !== e4.gasPrice && ("0x2" === t4 || r5))
              throw Error("eip-1559 transactions don't support gasPrice");
            if (("0x1" === t4 || "0x0" === t4) && r5)
              throw Error("pre-eip-1559 transaction don't support maxFeePerGas/maxPriorityFeePerGas");
            return r5 || e4.common && e4.common.hardfork && e4.common.hardfork.toLowerCase() === k.London || e4.hardfork && e4.hardfork.toLowerCase() === k.London ? t4 = "0x2" : (e4.accessList || e4.common && e4.common.hardfork && e4.common.hardfork.toLowerCase() === k.Berlin || e4.hardfork && e4.hardfork.toLowerCase() === k.Berlin) && (t4 = "0x1"), t4;
          }(e3), void 0 !== e3.nonce && void 0 !== e3.chainId && (void 0 !== e3.gasPrice || void 0 !== e3.maxFeePerGas && void 0 !== e3.maxPriorityFeePerGas) && s2 ? Promise.resolve(c2(e3)) : Promise.all([S(e3.common) || S(e3.common.customChain.chainId) ? S(e3.chainId) ? i2._ethereumCall.getChainId() : e3.chainId : void 0, S(e3.nonce) ? i2._ethereumCall.getTransactionCount(i2.privateKeyToAccount(t3).address) : e3.nonce, S(s2) ? i2._ethereumCall.getNetworkId() : 1, P(i2, e3)]).then(function(t4) {
            var r5 = (0, u.default)(t4, 4), n2 = r5[0], i3 = r5[1], o3 = r5[2], a3 = r5[3];
            if (S(n2) && S(e3.common) && S(e3.common.customChain.chainId) || S(i3) || S(o3) || S(a3))
              throw new Error(`One of the values "chainId", "networkId", "gasPrice", or "nonce" couldn't be fetched: ` + JSON.stringify(t4));
            return c2(f(f(f({}, e3), S(e3.common) || S(e3.common.customChain.chainId) ? { chainId: n2 } : {}), {}, { nonce: i3, networkId: o3 }, a3));
          });
        }, x.prototype.recoverTransaction = function(e3) {
          var t3 = n.from(e3.slice(2), "hex"), r4 = w.fromSerializedData(t3);
          return v.toChecksumAddress(r4.getSenderAddress().toString("hex"));
        }, x.prototype.hashMessage = function(e3) {
          var t3 = v.isHexStrict(e3) ? e3 : v.utf8ToHex(e3), r4 = v.hexToBytes(t3), i2 = n.from(r4), o2 = "Ethereum Signed Message:\n" + r4.length, a2 = n.from(o2), s2 = n.concat([a2, i2]);
          return _.bufferToHex(_.keccak256(s2));
        }, x.prototype.sign = function(e3, t3) {
          if (t3.startsWith("0x") || (t3 = "0x" + t3), 66 !== t3.length)
            throw new Error("Private key must be 32 bytes long");
          var r4 = this.hashMessage(e3), n2 = p.sign(r4, t3), i2 = p.decodeSignature(n2);
          return { message: e3, messageHash: r4, v: i2[0], r: i2[1], s: i2[2], signature: n2 };
        }, x.prototype.recover = function(e3, t3, r4) {
          var n2 = [].slice.apply(arguments);
          return e3 && "object" === (0, a.default)(e3) ? this.recover(e3.messageHash, p.encodeSignature([e3.v, e3.r, e3.s]), true) : (r4 || (e3 = this.hashMessage(e3)), n2.length >= 4 ? (r4 = "boolean" == typeof (r4 = n2.slice(-1)[0]) && !!r4, this.recover(e3, p.encodeSignature(n2.slice(1, 4)), r4)) : p.recover(e3, t3));
        }, x.prototype.decrypt = function(e3, t3, r4) {
          if ("string" != typeof t3)
            throw new Error("No password given.");
          var i2, s2, u2 = e3 && "object" === (0, a.default)(e3) ? e3 : JSON.parse(r4 ? e3.toLowerCase() : e3);
          if (3 !== u2.version)
            throw new Error("Not a valid V3 wallet");
          if ("scrypt" === u2.crypto.kdf)
            s2 = u2.crypto.kdfparams, i2 = y.syncScrypt(n.from(t3), n.from(s2.salt, "hex"), s2.n, s2.r, s2.p, s2.dklen);
          else {
            if ("pbkdf2" !== u2.crypto.kdf)
              throw new Error("Unsupported key derivation scheme");
            if ("hmac-sha256" !== (s2 = u2.crypto.kdfparams).prf)
              throw new Error("Unsupported parameters to PBKDF2");
            i2 = b.pbkdf2Sync(n.from(t3), n.from(s2.salt, "hex"), s2.c, s2.dklen, "sha256");
          }
          var c2 = n.from(u2.crypto.ciphertext, "hex");
          if (v.sha3(n.from([].concat((0, o.default)(i2.slice(16, 32)), (0, o.default)(c2)))).replace("0x", "") !== u2.crypto.mac)
            throw new Error("Key derivation failed - possibly wrong password");
          var f2 = b.createDecipheriv(u2.crypto.cipher, i2.slice(0, 16), n.from(u2.crypto.cipherparams.iv, "hex")), d2 = "0x" + n.from([].concat((0, o.default)(f2.update(c2)), (0, o.default)(f2.final()))).toString("hex");
          return this.privateKeyToAccount(d2, true);
        }, x.prototype.encrypt = function(e3, t3, r4) {
          var i2, a2 = this.privateKeyToAccount(e3, true), s2 = (r4 = r4 || {}).salt || b.randomBytes(32), u2 = r4.iv || b.randomBytes(16), c2 = r4.kdf || "scrypt", f2 = { dklen: r4.dklen || 32, salt: s2.toString("hex") };
          if ("pbkdf2" === c2)
            f2.c = r4.c || 262144, f2.prf = "hmac-sha256", i2 = b.pbkdf2Sync(n.from(t3), n.from(f2.salt, "hex"), f2.c, f2.dklen, "sha256");
          else {
            if ("scrypt" !== c2)
              throw new Error("Unsupported kdf");
            f2.n = r4.n || 8192, f2.r = r4.r || 8, f2.p = r4.p || 1, i2 = y.syncScrypt(n.from(t3), n.from(f2.salt, "hex"), f2.n, f2.r, f2.p, f2.dklen);
          }
          var d2 = b.createCipheriv(r4.cipher || "aes-128-ctr", i2.slice(0, 16), u2);
          if (!d2)
            throw new Error("Unsupported cipher");
          var l2 = n.from([].concat((0, o.default)(d2.update(n.from(a2.privateKey.replace("0x", ""), "hex"))), (0, o.default)(d2.final()))), h2 = v.sha3(n.from([].concat((0, o.default)(i2.slice(16, 32)), (0, o.default)(l2)))).replace("0x", "");
          return { version: 3, id: m.v4({ random: r4.uuid || b.randomBytes(16) }), address: a2.address.toLowerCase().replace("0x", ""), crypto: { ciphertext: l2.toString("hex"), cipherparams: { iv: u2.toString("hex") }, cipher: r4.cipher || "aes-128-ctr", kdf: c2, kdfparams: f2, mac: h2.toString("hex") } };
        }, O.prototype._findSafeIndex = function(e3) {
          return e3 = e3 || 0, this.hasOwnProperty(e3) ? this._findSafeIndex(e3 + 1) : e3;
        }, O.prototype._currentIndexes = function() {
          return Object.keys(this).map(function(e3) {
            return parseInt(e3);
          }).filter(function(e3) {
            return e3 < 9e20;
          });
        }, O.prototype.create = function(e3, t3) {
          for (var r4 = 0; r4 < e3; ++r4)
            this.add(this._accounts.create(t3).privateKey);
          return this;
        }, O.prototype.add = function(e3) {
          return "string" == typeof e3 && (e3 = this._accounts.privateKeyToAccount(e3)), this[e3.address] ? this[e3.address] : ((e3 = this._accounts.privateKeyToAccount(e3.privateKey)).index = this._findSafeIndex(), this[e3.index] = e3, this[e3.address] = e3, this[e3.address.toLowerCase()] = e3, this.length++, e3);
        }, O.prototype.remove = function(e3) {
          var t3 = this[e3];
          return !(!t3 || !t3.address || (this[t3.address].privateKey = null, delete this[t3.address], this[t3.address.toLowerCase()] && (this[t3.address.toLowerCase()].privateKey = null, delete this[t3.address.toLowerCase()]), this[t3.index].privateKey = null, delete this[t3.index], this.length--, 0));
        }, O.prototype.clear = function() {
          var e3 = this;
          return this._currentIndexes().forEach(function(t3) {
            e3.remove(t3);
          }), this;
        }, O.prototype.encrypt = function(e3, t3) {
          var r4 = this;
          return this._currentIndexes().map(function(n2) {
            return r4[n2].encrypt(e3, t3);
          });
        }, O.prototype.decrypt = function(e3, t3) {
          var r4 = this;
          return e3.forEach(function(e4) {
            var n2 = r4._accounts.decrypt(e4, t3);
            if (!n2)
              throw new Error("Couldn't decrypt accounts. Password wrong?");
            r4.add(n2);
          }), this;
        }, O.prototype.save = function(e3, t3) {
          return localStorage.setItem(t3 || this.defaultKeyName, JSON.stringify(this.encrypt(e3))), true;
        }, O.prototype.load = function(e3, t3) {
          var r4 = localStorage.getItem(t3 || this.defaultKeyName);
          if (r4)
            try {
              r4 = JSON.parse(r4);
            } catch (e4) {
            }
          return this.decrypt(r4 || [], e3);
        }, function(e3) {
          var t3;
          try {
            t3 = self.localStorage;
            var r4 = "__storage_test__";
            return t3.setItem(r4, r4), t3.removeItem(r4), true;
          } catch (e4) {
            return e4 && (22 === e4.code || 1014 === e4.code || "QuotaExceededError" === e4.name || "NS_ERROR_DOM_QUOTA_REACHED" === e4.name) && t3 && 0 !== t3.length;
          }
        }() || (delete O.prototype.save, delete O.prototype.load), e2.exports = x;
      }, 8164: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847), i = n(r3(3106)), o = n(r3(775)), a = n(r3(3355));
        function s(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r4 = 0, n2 = new Array(t3); r4 < t3; r4++)
            n2[r4] = e3[r4];
          return n2;
        }
        function u(e3, t3) {
          var r4 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var n2 = Object.getOwnPropertySymbols(e3);
            t3 && (n2 = n2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r4.push.apply(r4, n2);
          }
          return r4;
        }
        function c(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r4 = null != arguments[t3] ? arguments[t3] : {};
            t3 % 2 ? u(Object(r4), true).forEach(function(t4) {
              (0, o.default)(e3, t4, r4[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r4)) : u(Object(r4)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r4, t4));
            });
          }
          return e3;
        }
        var f = r3(606), d = r3(3349), l = r3(8161), h = r3(4178).subscription, p = r3(1314).formatters, b = r3(1314).errors, y = r3(282), m = r3(9901), v = function e3(t3, r4, n2) {
          var i2 = this, o2 = Array.prototype.slice.call(arguments);
          if (!(this instanceof e3))
            throw new Error('Please use the "new" keyword to instantiate a web3.eth.Contract() object!');
          if (this.setProvider = function() {
            f.packageInit(i2, arguments), i2.clearSubscriptions = i2._requestManager.clearSubscriptions;
          }, f.packageInit(this, [this.constructor]), this.clearSubscriptions = this._requestManager.clearSubscriptions, !t3 || !Array.isArray(t3))
            throw b.ContractMissingABIError();
          this.options = {};
          var s2 = o2[o2.length - 1];
          s2 && "object" === (0, a.default)(s2) && !Array.isArray(s2) && (n2 = s2, this.options = c(c({}, this.options), this._getOrSetDefaultOptions(n2)), r4 && "object" === (0, a.default)(r4) && (r4 = null)), Object.defineProperty(this.options, "address", { set: function(e4) {
            e4 && (i2._address = l.toChecksumAddress(p.inputAddressFormatter(e4)));
          }, get: function() {
            return i2._address;
          }, enumerable: true }), Object.defineProperty(this.options, "jsonInterface", { set: function(e4) {
            return i2.methods = {}, i2.events = {}, i2._jsonInterface = e4.map(function(e5) {
              var t4, r5;
              if (e5.constant = "view" === e5.stateMutability || "pure" === e5.stateMutability || e5.constant, e5.payable = "payable" === e5.stateMutability || e5.payable, e5.name && (r5 = l._jsonInterfaceMethodToString(e5)), "function" === e5.type) {
                if (e5.signature = m.encodeFunctionSignature(r5), t4 = i2._createTxObject.bind({ method: e5, parent: i2 }), i2.methods[e5.name]) {
                  var n3 = i2._createTxObject.bind({ method: e5, parent: i2, nextMethod: i2.methods[e5.name] });
                  i2.methods[e5.name] = n3;
                } else
                  i2.methods[e5.name] = t4;
                i2.methods[e5.signature] = t4, i2.methods[r5] = t4;
              } else if ("event" === e5.type) {
                e5.signature = m.encodeEventSignature(r5);
                var o3 = i2._on.bind(i2, e5.signature);
                i2.events[e5.name] && "bound " !== i2.events[e5.name].name || (i2.events[e5.name] = o3), i2.events[e5.signature] = o3, i2.events[r5] = o3;
              }
              return e5;
            }), i2.events.allEvents = i2._on.bind(i2, "allevents"), i2._jsonInterface;
          }, get: function() {
            return i2._jsonInterface;
          }, enumerable: true });
          var u2 = this.constructor.defaultAccount, d2 = this.constructor.defaultBlock || "latest";
          Object.defineProperty(this, "handleRevert", { get: function() {
            return false === i2.options.handleRevert || true === i2.options.handleRevert ? i2.options.handleRevert : this.constructor.handleRevert;
          }, set: function(e4) {
            i2.options.handleRevert = e4;
          }, enumerable: true }), Object.defineProperty(this, "defaultCommon", { get: function() {
            return i2.options.common || this.constructor.defaultCommon;
          }, set: function(e4) {
            i2.options.common = e4;
          }, enumerable: true }), Object.defineProperty(this, "defaultHardfork", { get: function() {
            return i2.options.hardfork || this.constructor.defaultHardfork;
          }, set: function(e4) {
            i2.options.hardfork = e4;
          }, enumerable: true }), Object.defineProperty(this, "defaultChain", { get: function() {
            return i2.options.chain || this.constructor.defaultChain;
          }, set: function(e4) {
            i2.options.chain = e4;
          }, enumerable: true }), Object.defineProperty(this, "transactionPollingTimeout", { get: function() {
            return 0 === i2.options.transactionPollingTimeout ? i2.options.transactionPollingTimeout : i2.options.transactionPollingTimeout || this.constructor.transactionPollingTimeout;
          }, set: function(e4) {
            i2.options.transactionPollingTimeout = e4;
          }, enumerable: true }), Object.defineProperty(this, "transactionPollingInterval", { get: function() {
            return 0 === i2.options.transactionPollingInterval ? i2.options.transactionPollingInterval : i2.options.transactionPollingInterval || this.constructor.transactionPollingInterval;
          }, set: function(e4) {
            i2.options.transactionPollingInterval = e4;
          }, enumerable: true }), Object.defineProperty(this, "transactionConfirmationBlocks", { get: function() {
            return 0 === i2.options.transactionConfirmationBlocks ? i2.options.transactionConfirmationBlocks : i2.options.transactionConfirmationBlocks || this.constructor.transactionConfirmationBlocks;
          }, set: function(e4) {
            i2.options.transactionConfirmationBlocks = e4;
          }, enumerable: true }), Object.defineProperty(this, "transactionBlockTimeout", { get: function() {
            return 0 === i2.options.transactionBlockTimeout ? i2.options.transactionBlockTimeout : i2.options.transactionBlockTimeout || this.constructor.transactionBlockTimeout;
          }, set: function(e4) {
            i2.options.transactionBlockTimeout = e4;
          }, enumerable: true }), Object.defineProperty(this, "blockHeaderTimeout", { get: function() {
            return 0 === i2.options.blockHeaderTimeout ? i2.options.blockHeaderTimeout : i2.options.blockHeaderTimeout || this.constructor.blockHeaderTimeout;
          }, set: function(e4) {
            i2.options.blockHeaderTimeout = e4;
          }, enumerable: true }), Object.defineProperty(this, "defaultAccount", { get: function() {
            return u2;
          }, set: function(e4) {
            return e4 && (u2 = l.toChecksumAddress(p.inputAddressFormatter(e4))), e4;
          }, enumerable: true }), Object.defineProperty(this, "defaultBlock", { get: function() {
            return d2;
          }, set: function(e4) {
            return d2 = e4, e4;
          }, enumerable: true }), this.methods = {}, this.events = {}, this._address = null, this._jsonInterface = [], this.options.address = r4, this.options.jsonInterface = t3;
        };
        v.setProvider = function(e3, t3) {
          f.packageInit(this, [e3]), this._ethAccounts = t3;
        }, v.prototype._getCallback = function(e3) {
          if (e3 && e3[e3.length - 1] && "function" == typeof e3[e3.length - 1])
            return e3.pop();
        }, v.prototype._checkListener = function(e3, t3) {
          if (t3 === e3)
            throw b.ContractReservedEventError(e3);
        }, v.prototype._getOrSetDefaultOptions = function(e3) {
          var t3 = c({}, e3), r4 = t3.gasPrice ? String(t3.gasPrice) : null, n2 = t3.from ? l.toChecksumAddress(p.inputAddressFormatter(t3.from)) : null;
          return t3.data = t3.data || this.options.data, t3.from = n2 || this.options.from, t3.gasPrice = r4 || this.options.gasPrice, t3.gas = t3.gas || t3.gasLimit || this.options.gas, delete t3.gasLimit, t3;
        }, v.prototype._encodeEventABI = function(e3, t3) {
          var r4 = (t3 = t3 || {}).filter || {}, n2 = {};
          ["fromBlock", "toBlock"].filter(function(e4) {
            return void 0 !== t3[e4];
          }).forEach(function(e4) {
            n2[e4] = p.inputBlockNumberFormatter(t3[e4]);
          });
          var o2 = [];
          if (t3.topics && Array.isArray(t3.topics))
            o2 = (0, i.default)(t3.topics);
          else if (o2 = [], e3 && !e3.anonymous && "ALLEVENTS" !== e3.name && o2.push(e3.signature || m.encodeEventSignature(l.jsonInterfaceMethodToString(e3))), "ALLEVENTS" !== e3.name && e3.inputs) {
            var a2, u2 = function(e4, t4) {
              var r5 = "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
              if (!r5) {
                if (Array.isArray(e4) || (r5 = function(e5, t5) {
                  if (e5) {
                    if ("string" == typeof e5)
                      return s(e5, t5);
                    var r6 = Object.prototype.toString.call(e5).slice(8, -1);
                    return "Object" === r6 && e5.constructor && (r6 = e5.constructor.name), "Map" === r6 || "Set" === r6 ? Array.from(e5) : "Arguments" === r6 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r6) ? s(e5, t5) : void 0;
                  }
                }(e4)) || t4 && e4 && "number" == typeof e4.length) {
                  r5 && (e4 = r5);
                  var n3 = 0, i2 = function() {
                  };
                  return { s: i2, n: function() {
                    return n3 >= e4.length ? { done: true } : { done: false, value: e4[n3++] };
                  }, e: function(e5) {
                    throw e5;
                  }, f: i2 };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var o3, a3 = true, u3 = false;
              return { s: function() {
                r5 = r5.call(e4);
              }, n: function() {
                var e5 = r5.next();
                return a3 = e5.done, e5;
              }, e: function(e5) {
                u3 = true, o3 = e5;
              }, f: function() {
                try {
                  a3 || null == r5.return || r5.return();
                } finally {
                  if (u3)
                    throw o3;
                }
              } };
            }(e3.inputs);
            try {
              var c2 = function() {
                var e4 = a2.value;
                if (!e4.indexed)
                  return "continue";
                var t4 = r4[e4.name];
                if (!t4)
                  return o2.push(null), "continue";
                Array.isArray(t4) ? o2.push(t4.map(function(t5) {
                  return m.encodeParameter(e4.type, t5);
                })) : o2.push(m.encodeParameter(e4.type, t4));
              };
              for (u2.s(); !(a2 = u2.n()).done; )
                c2();
            } catch (e4) {
              u2.e(e4);
            } finally {
              u2.f();
            }
          }
          return o2.length && (n2.topics = o2), this.options.address && (n2.address = this.options.address.toLowerCase()), n2;
        }, v.prototype._decodeEventABI = function(e3) {
          var t3 = this;
          e3.data = e3.data || "", e3.topics = e3.topics || [];
          var r4 = p.outputLogFormatter(e3);
          if ("ALLEVENTS" === t3.name && (t3 = t3.jsonInterface.find(function(t4) {
            return t4.signature === e3.topics[0];
          }) || { anonymous: true }), t3.inputs = t3.inputs || [], !t3.anonymous) {
            var n2 = 0;
            t3.inputs.forEach(function(e4) {
              return e4.indexed ? n2++ : null;
            }), n2 > 0 && e3.topics.length !== n2 + 1 && (t3 = { anonymous: true, inputs: [] });
          }
          var i2 = t3.anonymous ? e3.topics : e3.topics.slice(1);
          return r4.returnValues = m.decodeLog(t3.inputs, e3.data, i2), delete r4.returnValues.__length__, r4.event = t3.name, r4.signature = t3.anonymous || !e3.topics[0] ? null : e3.topics[0], r4.raw = { data: r4.data, topics: r4.topics }, delete r4.data, delete r4.topics, r4;
        }, v.prototype._encodeMethodABI = function() {
          var e3 = this._method.signature, t3 = this.arguments || [], r4 = false, n2 = this._parent.options.jsonInterface.filter(function(t4) {
            return "constructor" === e3 && t4.type === e3 || (t4.signature === e3 || t4.signature === e3.replace("0x", "") || t4.name === e3) && "function" === t4.type;
          }).map(function(e4) {
            var n3 = Array.isArray(e4.inputs) ? e4.inputs.length : 0;
            if (n3 !== t3.length)
              throw new Error("The number of arguments is not matching the methods required number. You need to pass " + n3 + " arguments.");
            return "function" === e4.type && (r4 = e4.signature), Array.isArray(e4.inputs) ? e4.inputs : [];
          }).map(function(e4) {
            return m.encodeParameters(e4, t3).replace("0x", "");
          })[0] || "";
          if ("constructor" === e3) {
            if (!this._deployData)
              throw new Error("The contract has no contract data option set. This is necessary to append the constructor parameters.");
            return this._deployData.startsWith("0x") || (this._deployData = "0x" + this._deployData), this._deployData + n2;
          }
          var i2 = r4 ? r4 + n2 : n2;
          if (!i2)
            throw new Error(`Couldn't find a matching contract method named "` + this._method.name + '".');
          return i2;
        }, v.prototype._decodeMethodReturn = function(e3, t3) {
          if (!t3)
            return null;
          t3 = t3.length >= 2 ? t3.slice(2) : t3;
          var r4 = m.decodeParameters(e3, t3);
          return 1 === r4.__length__ ? r4[0] : (delete r4.__length__, r4);
        }, v.prototype.deploy = function(e3, t3) {
          if ((e3 = e3 || {}).arguments = e3.arguments || [], !(e3 = this._getOrSetDefaultOptions(e3)).data) {
            if ("function" == typeof t3)
              return t3(b.ContractMissingDeployDataError());
            throw b.ContractMissingDeployDataError();
          }
          var r4 = this.options.jsonInterface.find(function(e4) {
            return "constructor" === e4.type;
          }) || {};
          return r4.signature = "constructor", this._createTxObject.apply({ method: r4, parent: this, deployData: e3.data, _ethAccounts: this.constructor._ethAccounts }, e3.arguments);
        }, v.prototype._generateEventOptions = function() {
          var e3 = Array.prototype.slice.call(arguments), t3 = this._getCallback(e3), r4 = "object" === (!!e3[e3.length - 1] && (0, a.default)(e3[e3.length - 1])) ? e3.pop() : {}, n2 = "string" == typeof e3[0] ? e3[0] : "allevents", i2 = "allevents" === n2.toLowerCase() ? { name: "ALLEVENTS", jsonInterface: this.options.jsonInterface } : this.options.jsonInterface.find(function(e4) {
            return "event" === e4.type && (e4.name === n2 || e4.signature === "0x" + n2.replace("0x", ""));
          });
          if (!i2)
            throw b.ContractEventDoesNotExistError(n2);
          if (!l.isAddress(this.options.address))
            throw b.ContractNoAddressDefinedError();
          return { params: this._encodeEventABI(i2, r4), event: i2, filter: r4.filter || {}, callback: t3 };
        }, v.prototype.clone = function() {
          return new this.constructor(this.options.jsonInterface, this.options.address, this.options);
        }, v.prototype.once = function(e3, t3, r4) {
          var n2 = Array.prototype.slice.call(arguments);
          if (!(r4 = this._getCallback(n2)))
            throw b.ContractOnceRequiresCallbackError();
          t3 && delete t3.fromBlock, this._on(e3, t3, function(e4, t4, n3) {
            n3.unsubscribe(), "function" == typeof r4 && r4(e4, t4, n3);
          });
        }, v.prototype._on = function() {
          var e3 = this._generateEventOptions.apply(this, arguments);
          e3.params && e3.params.toBlock && (delete e3.params.toBlock, console.warn("Invalid option: toBlock. Use getPastEvents for specific range.")), this._checkListener("newListener", e3.event.name), this._checkListener("removeListener", e3.event.name);
          var t3 = new h({ subscription: { params: 1, inputFormatter: [p.inputLogFormatter], outputFormatter: this._decodeEventABI.bind(e3.event), subscriptionHandler: function(e4) {
            e4.removed ? this.emit("changed", e4) : this.emit("data", e4), "function" == typeof this.callback && this.callback(null, e4, this);
          } }, type: "eth", requestManager: this._requestManager });
          return t3.subscribe("logs", e3.params, e3.callback || function() {
          }), t3;
        };
        var g = function(e3, t3) {
          if (e3.event && "ALLEVENTS" === e3.event.name && Array.isArray(t3)) {
            var r4 = e3.filter || {}, n2 = Object.keys(r4);
            return n2.length > 0 ? t3.filter(function(e4) {
              return "string" == typeof e4 || n2.every(function(t4) {
                return Array.isArray(r4[t4]) ? r4[t4].some(function(r5) {
                  return String(e4.returnValues[t4]).toUpperCase() === String(r5).toUpperCase();
                }) : String(e4.returnValues[t4]).toUpperCase() === String(r4[t4]).toUpperCase();
              });
            }) : t3;
          }
          return t3;
        };
        v.prototype.getPastEvents = function() {
          var e3 = this._generateEventOptions.apply(this, arguments), t3 = new d({ name: "getPastLogs", call: "eth_getLogs", params: 1, inputFormatter: [p.inputLogFormatter], outputFormatter: this._decodeEventABI.bind(e3.event) });
          t3.setRequestManager(this._requestManager);
          var r4 = t3.buildCall();
          return t3 = null, r4(e3.params, function(t4, r5) {
            "function" == typeof e3.callback && e3.callback(t4, g(e3, r5));
          }).then(g.bind(this, e3));
        }, v.prototype._createTxObject = function() {
          var e3 = Array.prototype.slice.call(arguments), t3 = {};
          if ("function" === this.method.type && (t3.call = this.parent._executeMethod.bind(t3, "call"), t3.call.request = this.parent._executeMethod.bind(t3, "call", true)), t3.send = this.parent._executeMethod.bind(t3, "send"), t3.send.request = this.parent._executeMethod.bind(t3, "send", true), t3.encodeABI = this.parent._encodeMethodABI.bind(t3), t3.estimateGas = this.parent._executeMethod.bind(t3, "estimate"), t3.createAccessList = this.parent._executeMethod.bind(t3, "createAccessList"), e3 && this.method.inputs && e3.length !== this.method.inputs.length) {
            if (this.nextMethod)
              return this.nextMethod.apply(null, e3);
            throw b.InvalidNumberOfParams(e3.length, this.method.inputs.length, this.method.name);
          }
          return t3.arguments = e3 || [], t3._method = this.method, t3._parent = this.parent, t3._ethAccounts = this.parent.constructor._ethAccounts || this._ethAccounts, this.deployData && (t3._deployData = this.deployData), t3;
        }, v.prototype._processExecuteArguments = function(e3, t3) {
          var r4 = {};
          if (r4.type = e3.shift(), r4.callback = this._parent._getCallback(e3), "call" !== r4.type || true === e3[e3.length - 1] || "string" != typeof e3[e3.length - 1] && !isFinite(e3[e3.length - 1]) || (r4.defaultBlock = e3.pop()), r4.options = "object" === (!!e3[e3.length - 1] && (0, a.default)(e3[e3.length - 1])) ? e3.pop() : {}, r4.generateRequest = true === e3[e3.length - 1] && e3.pop(), r4.options = this._parent._getOrSetDefaultOptions(r4.options), r4.options.data = this.encodeABI(), !this._deployData && !l.isAddress(this._parent.options.address))
            throw b.ContractNoAddressDefinedError();
          return this._deployData || (r4.options.to = this._parent.options.address), r4.options.data ? r4 : l._fireError(new Error("Couldn't find a matching contract method, or the number of parameters is wrong."), t3.eventEmitter, t3.reject, r4.callback);
        }, v.prototype._executeMethod = function() {
          var e3 = this, t3 = this._parent._processExecuteArguments.call(this, Array.prototype.slice.call(arguments), r4), r4 = y("send" !== t3.type), n2 = e3.constructor._ethAccounts || e3._ethAccounts;
          if (t3.generateRequest) {
            var i2 = { params: [p.inputCallFormatter.call(this._parent, t3.options)], callback: t3.callback };
            return "call" === t3.type ? (i2.params.push(p.inputDefaultBlockNumberFormatter.call(this._parent, t3.defaultBlock)), i2.method = "eth_call", i2.format = this._parent._decodeMethodReturn.bind(null, this._method.outputs)) : i2.method = "eth_sendTransaction", i2;
          }
          switch (t3.type) {
            case "createAccessList":
              return l.isAddress(t3.options.from) ? new d({ name: "createAccessList", call: "eth_createAccessList", params: 2, inputFormatter: [p.inputTransactionFormatter, p.inputDefaultBlockNumberFormatter], requestManager: e3._parent._requestManager, accounts: n2, defaultAccount: e3._parent.defaultAccount, defaultBlock: e3._parent.defaultBlock }).createFunction()(t3.options, t3.callback) : l._fireError(b.ContractNoFromAddressDefinedError(), r4.eventEmitter, r4.reject, t3.callback);
            case "estimate":
              return new d({ name: "estimateGas", call: "eth_estimateGas", params: 1, inputFormatter: [p.inputCallFormatter], outputFormatter: l.hexToNumber, requestManager: e3._parent._requestManager, accounts: n2, defaultAccount: e3._parent.defaultAccount, defaultBlock: e3._parent.defaultBlock }).createFunction()(t3.options, t3.callback);
            case "call":
              return new d({ name: "call", call: "eth_call", params: 2, inputFormatter: [p.inputCallFormatter, p.inputDefaultBlockNumberFormatter], outputFormatter: function(t4) {
                return e3._parent._decodeMethodReturn(e3._method.outputs, t4);
              }, requestManager: e3._parent._requestManager, accounts: n2, defaultAccount: e3._parent.defaultAccount, defaultBlock: e3._parent.defaultBlock, handleRevert: e3._parent.handleRevert, abiCoder: m }).createFunction()(t3.options, t3.defaultBlock, t3.callback);
            case "send":
              if (!l.isAddress(t3.options.from))
                return l._fireError(b.ContractNoFromAddressDefinedError(), r4.eventEmitter, r4.reject, t3.callback);
              if ("boolean" == typeof this._method.payable && !this._method.payable && t3.options.value && t3.options.value > 0)
                return l._fireError(new Error("Can not send value to non-payable contract method or constructor"), r4.eventEmitter, r4.reject, t3.callback);
              var o2 = { receiptFormatter: function(t4) {
                if (Array.isArray(t4.logs)) {
                  var r5 = t4.logs.map(function(t5) {
                    return e3._parent._decodeEventABI.call({ name: "ALLEVENTS", jsonInterface: e3._parent.options.jsonInterface }, t5);
                  });
                  t4.events = {};
                  var n3 = 0;
                  r5.forEach(function(e4) {
                    e4.event ? t4.events[e4.event] ? Array.isArray(t4.events[e4.event]) ? t4.events[e4.event].push(e4) : t4.events[e4.event] = [t4.events[e4.event], e4] : t4.events[e4.event] = e4 : (t4.events[n3] = e4, n3++);
                  }), delete t4.logs;
                }
                return t4;
              }, contractDeployFormatter: function(t4) {
                var r5 = e3._parent.clone();
                return r5.options.address = t4.contractAddress, r5;
              } };
              return new d({ name: "sendTransaction", call: "eth_sendTransaction", params: 1, inputFormatter: [p.inputTransactionFormatter], requestManager: e3._parent._requestManager, accounts: e3.constructor._ethAccounts || e3._ethAccounts, defaultAccount: e3._parent.defaultAccount, defaultBlock: e3._parent.defaultBlock, transactionBlockTimeout: e3._parent.transactionBlockTimeout, transactionConfirmationBlocks: e3._parent.transactionConfirmationBlocks, transactionPollingTimeout: e3._parent.transactionPollingTimeout, transactionPollingInterval: e3._parent.transactionPollingInterval, defaultCommon: e3._parent.defaultCommon, defaultChain: e3._parent.defaultChain, defaultHardfork: e3._parent.defaultHardfork, handleRevert: e3._parent.handleRevert, extraFormatters: o2, abiCoder: m }).createFunction()(t3.options, t3.callback);
            default:
              throw new Error('Method "' + t3.type + '" not implemented.');
          }
        }, e2.exports = v;
      }, 6764: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847), i = n(r3(2247)), o = n(r3(5698)), a = r3(5160), s = r3(1314).formatters, u = r3(8161), c = r3(1841), f = r3(2867), d = r3(2689);
        function l(e3) {
          this.eth = e3;
          var t3 = null;
          this._detectedAddress = null, this._lastSyncCheck = null, Object.defineProperty(this, "registry", { get: function() {
            return new c(this);
          }, enumerable: true }), Object.defineProperty(this, "resolverMethodHandler", { get: function() {
            return new f(this.registry);
          }, enumerable: true }), Object.defineProperty(this, "registryAddress", { get: function() {
            return t3;
          }, set: function(e4) {
            t3 = null !== e4 ? s.inputAddressFormatter(e4) : e4;
          }, enumerable: true });
        }
        l.prototype.supportsInterface = function(e3, t3, r4) {
          return this.getResolver(e3).then(function(e4) {
            return u.isHexStrict(t3) || (t3 = u.sha3(t3).slice(0, 10)), e4.methods.supportsInterface(t3).call(r4);
          }).catch(function(e4) {
            if ("function" != typeof r4)
              throw e4;
            r4(e4, null);
          });
        }, l.prototype.resolver = function(e3, t3) {
          return this.registry.resolver(e3, t3);
        }, l.prototype.getResolver = function(e3, t3) {
          return this.registry.getResolver(e3, t3);
        }, l.prototype.setResolver = function(e3, t3, r4, n2) {
          return this.registry.setResolver(e3, t3, r4, n2);
        }, l.prototype.setRecord = function(e3, t3, r4, n2, i2, o2) {
          return this.registry.setRecord(e3, t3, r4, n2, i2, o2);
        }, l.prototype.setSubnodeRecord = function(e3, t3, r4, n2, i2, o2, a2) {
          return this.registry.setSubnodeRecord(e3, t3, r4, n2, i2, o2, a2);
        }, l.prototype.setApprovalForAll = function(e3, t3, r4, n2) {
          return this.registry.setApprovalForAll(e3, t3, r4, n2);
        }, l.prototype.isApprovedForAll = function(e3, t3, r4) {
          return this.registry.isApprovedForAll(e3, t3, r4);
        }, l.prototype.recordExists = function(e3, t3) {
          return this.registry.recordExists(e3, t3);
        }, l.prototype.setSubnodeOwner = function(e3, t3, r4, n2, i2) {
          return this.registry.setSubnodeOwner(e3, t3, r4, n2, i2);
        }, l.prototype.getTTL = function(e3, t3) {
          return this.registry.getTTL(e3, t3);
        }, l.prototype.setTTL = function(e3, t3, r4, n2) {
          return this.registry.setTTL(e3, t3, r4, n2);
        }, l.prototype.getOwner = function(e3, t3) {
          return this.registry.getOwner(e3, t3);
        }, l.prototype.setOwner = function(e3, t3, r4, n2) {
          return this.registry.setOwner(e3, t3, r4, n2);
        }, l.prototype.getAddress = function(e3, t3) {
          return this.resolverMethodHandler.method(e3, "addr", []).call(t3);
        }, l.prototype.setAddress = function(e3, t3, r4, n2) {
          return this.resolverMethodHandler.method(e3, "setAddr", [t3]).send(r4, n2);
        }, l.prototype.getPubkey = function(e3, t3) {
          return this.resolverMethodHandler.method(e3, "pubkey", [], null, t3).call(t3);
        }, l.prototype.setPubkey = function(e3, t3, r4, n2, i2) {
          return this.resolverMethodHandler.method(e3, "setPubkey", [t3, r4]).send(n2, i2);
        }, l.prototype.getContent = function(e3, t3) {
          return this.resolverMethodHandler.method(e3, "content", []).call(t3);
        }, l.prototype.setContent = function(e3, t3, r4, n2) {
          return this.resolverMethodHandler.method(e3, "setContent", [t3]).send(r4, n2);
        }, l.prototype.getContenthash = function(e3, t3) {
          return this.resolverMethodHandler.method(e3, "contenthash", [], d.decode).call(t3);
        }, l.prototype.setContenthash = function(e3, t3, r4, n2) {
          var i2;
          try {
            i2 = d.encode(t3);
          } catch (e4) {
            var o2 = new Error("Could not encode " + t3 + ". See docs for supported hash protocols.");
            if ("function" == typeof n2)
              return void n2(o2, null);
            throw o2;
          }
          return this.resolverMethodHandler.method(e3, "setContenthash", [i2]).send(r4, n2);
        }, l.prototype.getMultihash = function(e3, t3) {
          return this.resolverMethodHandler.method(e3, "multihash", []).call(t3);
        }, l.prototype.setMultihash = function(e3, t3, r4, n2) {
          return this.resolverMethodHandler.method(e3, "multihash", [t3]).send(r4, n2);
        }, l.prototype.checkNetwork = (0, o.default)(i.default.mark(function e3() {
          var t3, r4, n2, o2, s2;
          return i.default.wrap(function(e4) {
            for (; ; )
              switch (e4.prev = e4.next) {
                case 0:
                  if (t3 = /* @__PURE__ */ new Date() / 1e3, this._lastSyncCheck && !(t3 - this._lastSyncCheck > 3600)) {
                    e4.next = 9;
                    break;
                  }
                  return e4.next = 4, this.eth.getBlock("latest");
                case 4:
                  if (r4 = e4.sent, !((n2 = t3 - r4.timestamp) > 3600)) {
                    e4.next = 8;
                    break;
                  }
                  throw new Error("Network not synced; last block was " + n2 + " seconds ago");
                case 8:
                  this._lastSyncCheck = t3;
                case 9:
                  if (!this.registryAddress) {
                    e4.next = 11;
                    break;
                  }
                  return e4.abrupt("return", this.registryAddress);
                case 11:
                  if (this._detectedAddress) {
                    e4.next = 20;
                    break;
                  }
                  return e4.next = 14, this.eth.net.getNetworkType();
                case 14:
                  if (o2 = e4.sent, void 0 !== (s2 = a.addresses[o2])) {
                    e4.next = 18;
                    break;
                  }
                  throw new Error("ENS is not supported on network " + o2);
                case 18:
                  return this._detectedAddress = s2, e4.abrupt("return", this._detectedAddress);
                case 20:
                  return e4.abrupt("return", this._detectedAddress);
                case 21:
                case "end":
                  return e4.stop();
              }
          }, e3, this);
        })), e2.exports = l;
      }, 5160: (e2) => {
        "use strict";
        e2.exports = { addresses: { main: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e", ropsten: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e", rinkeby: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e", goerli: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e" }, interfaceIds: { addr: "0x3b3b57de", setAddr: "0x3b3b57de", pubkey: "0xc8690233", setPubkey: "0xc8690233", contenthash: "0xbc1c58d1", setContenthash: "0xbc1c58d1", content: "0xd8389dc5", setContent: "0xd8389dc5" } };
      }, 1841: (e2, t2, r3) => {
        "use strict";
        var n = r3(8164), i = r3(1006), o = r3(282), a = r3(1314).formatters, s = r3(8161), u = r3(3205), c = r3(8384);
        function f(e3) {
          var t3 = this;
          this.ens = e3, this.contract = e3.checkNetwork().then(function(e4) {
            var r4 = new n(u, e4);
            return r4.setProvider(t3.ens.eth.currentProvider), r4;
          });
        }
        f.prototype.owner = function(e3, t3) {
          return console.warn('Deprecated: Please use the "getOwner" method instead of "owner".'), this.getOwner(e3, t3);
        }, f.prototype.getOwner = function(e3, t3) {
          var r4 = new o(true);
          return this.contract.then(function(t4) {
            return t4.methods.owner(i.hash(e3)).call();
          }).then(function(e4) {
            "function" != typeof t3 ? r4.resolve(e4) : t3(e4, e4);
          }).catch(function(e4) {
            "function" != typeof t3 ? r4.reject(e4) : t3(e4, null);
          }), r4.eventEmitter;
        }, f.prototype.setOwner = function(e3, t3, r4, n2) {
          var s2 = new o(true);
          return this.contract.then(function(n3) {
            return n3.methods.setOwner(i.hash(e3), a.inputAddressFormatter(t3)).send(r4);
          }).then(function(e4) {
            "function" != typeof n2 ? s2.resolve(e4) : n2(e4, e4);
          }).catch(function(e4) {
            "function" != typeof n2 ? s2.reject(e4) : n2(e4, null);
          }), s2.eventEmitter;
        }, f.prototype.getTTL = function(e3, t3) {
          var r4 = new o(true);
          return this.contract.then(function(t4) {
            return t4.methods.ttl(i.hash(e3)).call();
          }).then(function(e4) {
            "function" != typeof t3 ? r4.resolve(e4) : t3(e4, e4);
          }).catch(function(e4) {
            "function" != typeof t3 ? r4.reject(e4) : t3(e4, null);
          }), r4.eventEmitter;
        }, f.prototype.setTTL = function(e3, t3, r4, n2) {
          var a2 = new o(true);
          return this.contract.then(function(n3) {
            return n3.methods.setTTL(i.hash(e3), t3).send(r4);
          }).then(function(e4) {
            "function" != typeof n2 ? a2.resolve(e4) : n2(e4, e4);
          }).catch(function(e4) {
            "function" != typeof n2 ? a2.reject(e4) : n2(e4, null);
          }), a2.eventEmitter;
        }, f.prototype.setSubnodeOwner = function(e3, t3, r4, n2, u2) {
          var c2 = new o(true);
          return s.isHexStrict(t3) || (t3 = s.sha3(t3)), this.contract.then(function(o2) {
            return o2.methods.setSubnodeOwner(i.hash(e3), t3, a.inputAddressFormatter(r4)).send(n2);
          }).then(function(e4) {
            "function" != typeof u2 ? c2.resolve(e4) : u2(e4, e4);
          }).catch(function(e4) {
            "function" != typeof u2 ? c2.reject(e4) : u2(e4, null);
          }), c2.eventEmitter;
        }, f.prototype.setRecord = function(e3, t3, r4, n2, s2, u2) {
          var c2 = new o(true);
          return this.contract.then(function(o2) {
            return o2.methods.setRecord(i.hash(e3), a.inputAddressFormatter(t3), a.inputAddressFormatter(r4), n2).send(s2);
          }).then(function(e4) {
            "function" != typeof u2 ? c2.resolve(e4) : u2(e4, e4);
          }).catch(function(e4) {
            "function" != typeof u2 ? c2.reject(e4) : u2(e4, null);
          }), c2.eventEmitter;
        }, f.prototype.setSubnodeRecord = function(e3, t3, r4, n2, u2, c2, f2) {
          var d = new o(true);
          return s.isHexStrict(t3) || (t3 = s.sha3(t3)), this.contract.then(function(o2) {
            return o2.methods.setSubnodeRecord(i.hash(e3), t3, a.inputAddressFormatter(r4), a.inputAddressFormatter(n2), u2).send(c2);
          }).then(function(e4) {
            "function" != typeof f2 ? d.resolve(e4) : f2(e4, e4);
          }).catch(function(e4) {
            "function" != typeof f2 ? d.reject(e4) : f2(e4, null);
          }), d.eventEmitter;
        }, f.prototype.setApprovalForAll = function(e3, t3, r4, n2) {
          var i2 = new o(true);
          return this.contract.then(function(n3) {
            return n3.methods.setApprovalForAll(a.inputAddressFormatter(e3), t3).send(r4);
          }).then(function(e4) {
            "function" != typeof n2 ? i2.resolve(e4) : n2(e4, e4);
          }).catch(function(e4) {
            "function" != typeof n2 ? i2.reject(e4) : n2(e4, null);
          }), i2.eventEmitter;
        }, f.prototype.isApprovedForAll = function(e3, t3, r4) {
          var n2 = new o(true);
          return this.contract.then(function(r5) {
            return r5.methods.isApprovedForAll(a.inputAddressFormatter(e3), a.inputAddressFormatter(t3)).call();
          }).then(function(e4) {
            "function" != typeof r4 ? n2.resolve(e4) : r4(e4, e4);
          }).catch(function(e4) {
            "function" != typeof r4 ? n2.reject(e4) : r4(e4, null);
          }), n2.eventEmitter;
        }, f.prototype.recordExists = function(e3, t3) {
          var r4 = new o(true);
          return this.contract.then(function(t4) {
            return t4.methods.recordExists(i.hash(e3)).call();
          }).then(function(e4) {
            "function" != typeof t3 ? r4.resolve(e4) : t3(e4, e4);
          }).catch(function(e4) {
            "function" != typeof t3 ? r4.reject(e4) : t3(e4, null);
          }), r4.eventEmitter;
        }, f.prototype.resolver = function(e3, t3) {
          return console.warn('Deprecated: Please use the "getResolver" method instead of "resolver".'), this.getResolver(e3, t3);
        }, f.prototype.getResolver = function(e3, t3) {
          var r4 = this;
          return this.contract.then(function(t4) {
            return t4.methods.resolver(i.hash(e3)).call();
          }).then(function(e4) {
            var i2 = new n(c, e4);
            if (i2.setProvider(r4.ens.eth.currentProvider), "function" != typeof t3)
              return i2;
            t3(i2, i2);
          }).catch(function(e4) {
            if ("function" != typeof t3)
              throw e4;
            t3(e4, null);
          });
        }, f.prototype.setResolver = function(e3, t3, r4, n2) {
          var s2 = new o(true);
          return this.contract.then(function(n3) {
            return n3.methods.setResolver(i.hash(e3), a.inputAddressFormatter(t3)).send(r4);
          }).then(function(e4) {
            "function" != typeof n2 ? s2.resolve(e4) : n2(e4, e4);
          }).catch(function(e4) {
            "function" != typeof n2 ? s2.reject(e4) : n2(e4, null);
          }), s2.eventEmitter;
        }, e2.exports = f;
      }, 715: (e2, t2, r3) => {
        "use strict";
        var n = r3(6764);
        e2.exports = n;
      }, 2867: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847), i = n(r3(2247)), o = n(r3(5698)), a = r3(282), s = r3(1006), u = r3(1314).errors, c = r3(5160).interfaceIds;
        function f(e3) {
          this.registry = e3;
        }
        f.prototype.method = function(e3, t3, r4, n2, i2) {
          return { call: this.call.bind({ ensName: e3, methodName: t3, methodArguments: r4, callback: i2, parent: this, outputFormatter: n2 }), send: this.send.bind({ ensName: e3, methodName: t3, methodArguments: r4, callback: i2, parent: this }) };
        }, f.prototype.call = function(e3) {
          var t3 = this, r4 = new a(), n2 = this.parent.prepareArguments(this.ensName, this.methodArguments), s2 = this.outputFormatter || null;
          return this.parent.registry.getResolver(this.ensName).then(function() {
            var a2 = (0, o.default)(i.default.mark(function o2(a3) {
              return i.default.wrap(function(i2) {
                for (; ; )
                  switch (i2.prev = i2.next) {
                    case 0:
                      return i2.next = 2, t3.parent.checkInterfaceSupport(a3, t3.methodName);
                    case 2:
                      t3.parent.handleCall(r4, a3.methods[t3.methodName], n2, s2, e3);
                    case 3:
                    case "end":
                      return i2.stop();
                  }
              }, o2);
            }));
            return function(e4) {
              return a2.apply(this, arguments);
            };
          }()).catch(function(t4) {
            "function" != typeof e3 ? r4.reject(t4) : e3(t4, null);
          }), r4.eventEmitter;
        }, f.prototype.send = function(e3, t3) {
          var r4 = this, n2 = new a(), s2 = this.parent.prepareArguments(this.ensName, this.methodArguments);
          return this.parent.registry.getResolver(this.ensName).then(function() {
            var a2 = (0, o.default)(i.default.mark(function o2(a3) {
              return i.default.wrap(function(i2) {
                for (; ; )
                  switch (i2.prev = i2.next) {
                    case 0:
                      return i2.next = 2, r4.parent.checkInterfaceSupport(a3, r4.methodName);
                    case 2:
                      r4.parent.handleSend(n2, a3.methods[r4.methodName], s2, e3, t3);
                    case 3:
                    case "end":
                      return i2.stop();
                  }
              }, o2);
            }));
            return function(e4) {
              return a2.apply(this, arguments);
            };
          }()).catch(function(e4) {
            "function" != typeof t3 ? n2.reject(e4) : t3(e4, null);
          }), n2.eventEmitter;
        }, f.prototype.handleCall = function(e3, t3, r4, n2, i2) {
          return t3.apply(this, r4).call().then(function(t4) {
            n2 && (t4 = n2(t4)), "function" != typeof i2 ? e3.resolve(t4) : i2(t4, t4);
          }).catch(function(t4) {
            "function" != typeof i2 ? e3.reject(t4) : i2(t4, null);
          }), e3;
        }, f.prototype.handleSend = function(e3, t3, r4, n2, i2) {
          return t3.apply(this, r4).send(n2).on("sending", function() {
            e3.eventEmitter.emit("sending");
          }).on("sent", function() {
            e3.eventEmitter.emit("sent");
          }).on("transactionHash", function(t4) {
            e3.eventEmitter.emit("transactionHash", t4);
          }).on("confirmation", function(t4, r5) {
            e3.eventEmitter.emit("confirmation", t4, r5);
          }).on("receipt", function(t4) {
            e3.eventEmitter.emit("receipt", t4), e3.resolve(t4), "function" == typeof i2 && i2(t4, t4);
          }).on("error", function(t4) {
            e3.eventEmitter.emit("error", t4), "function" != typeof i2 ? e3.reject(t4) : i2(t4, null);
          }), e3;
        }, f.prototype.prepareArguments = function(e3, t3) {
          var r4 = s.hash(e3);
          return t3.length > 0 ? (t3.unshift(r4), t3) : [r4];
        }, f.prototype.checkInterfaceSupport = function() {
          var e3 = (0, o.default)(i.default.mark(function e4(t3, r4) {
            var n2;
            return i.default.wrap(function(e5) {
              for (; ; )
                switch (e5.prev = e5.next) {
                  case 0:
                    if (c[r4]) {
                      e5.next = 2;
                      break;
                    }
                    return e5.abrupt("return");
                  case 2:
                    return n2 = false, e5.prev = 3, e5.next = 6, t3.methods.supportsInterface(c[r4]).call();
                  case 6:
                    n2 = e5.sent, e5.next = 12;
                    break;
                  case 9:
                    e5.prev = 9, e5.t0 = e5.catch(3), console.warn('Could not verify interface of resolver contract at "' + t3.options.address + '". ');
                  case 12:
                    if (n2) {
                      e5.next = 14;
                      break;
                    }
                    throw u.ResolverMethodMissingError(t3.options.address, r4);
                  case 14:
                  case "end":
                    return e5.stop();
                }
            }, e4, null, [[3, 9]]);
          }));
          return function(t3, r4) {
            return e3.apply(this, arguments);
          };
        }(), e2.exports = f;
      }, 2689: (e2, t2, r3) => {
        "use strict";
        var n = r3(4308);
        e2.exports = { decode: function(e3) {
          var t3 = null, r4 = null, i = null;
          if (e3 && e3.error)
            return { protocolType: null, decoded: e3.error };
          if (e3)
            try {
              t3 = n.decode(e3);
              var o = n.getCodec(e3);
              "ipfs-ns" === o ? r4 = "ipfs" : "swarm-ns" === o ? r4 = "bzz" : "onion" === o ? r4 = "onion" : "onion3" === o ? r4 = "onion3" : t3 = e3;
            } catch (e4) {
              i = e4.message;
            }
          return { protocolType: r4, decoded: t3, error: i };
        }, encode: function(e3) {
          var t3, r4, i = false;
          if (e3) {
            var o = e3.match(/^(ipfs|bzz|onion|onion3):\/\/(.*)/) || e3.match(/\/(ipfs)\/(.*)/);
            o && (r4 = o[1], t3 = o[2]);
            try {
              if ("ipfs" === r4)
                t3.length >= 4 && (i = "0x" + n.fromIpfs(t3));
              else if ("bzz" === r4)
                t3.length >= 4 && (i = "0x" + n.fromSwarm(t3));
              else if ("onion" === r4)
                16 === t3.length && (i = "0x" + n.encode("onion", t3));
              else {
                if ("onion3" !== r4)
                  throw new Error("Could not encode content hash: unsupported content type");
                56 === t3.length && (i = "0x" + n.encode("onion3", t3));
              }
            } catch (e4) {
              throw e4;
            }
          }
          return i;
        } };
      }, 3205: (e2) => {
        "use strict";
        e2.exports = [{ constant: true, inputs: [{ name: "node", type: "bytes32" }], name: "resolver", outputs: [{ name: "", type: "address" }], payable: false, type: "function" }, { constant: true, inputs: [{ name: "node", type: "bytes32" }], name: "owner", outputs: [{ name: "", type: "address" }], payable: false, type: "function" }, { constant: false, inputs: [{ name: "node", type: "bytes32" }, { name: "label", type: "bytes32" }, { name: "owner", type: "address" }], name: "setSubnodeOwner", outputs: [], payable: false, type: "function" }, { constant: false, inputs: [{ name: "node", type: "bytes32" }, { name: "ttl", type: "uint64" }], name: "setTTL", outputs: [], payable: false, type: "function" }, { constant: true, inputs: [{ name: "node", type: "bytes32" }], name: "ttl", outputs: [{ name: "", type: "uint64" }], payable: false, type: "function" }, { constant: false, inputs: [{ name: "node", type: "bytes32" }, { name: "resolver", type: "address" }], name: "setResolver", outputs: [], payable: false, type: "function" }, { constant: false, inputs: [{ name: "node", type: "bytes32" }, { name: "owner", type: "address" }], name: "setOwner", outputs: [], payable: false, type: "function" }, { anonymous: false, inputs: [{ indexed: true, name: "node", type: "bytes32" }, { indexed: false, name: "owner", type: "address" }], name: "Transfer", type: "event" }, { anonymous: false, inputs: [{ indexed: true, name: "node", type: "bytes32" }, { indexed: true, name: "label", type: "bytes32" }, { indexed: false, name: "owner", type: "address" }], name: "NewOwner", type: "event" }, { anonymous: false, inputs: [{ indexed: true, name: "node", type: "bytes32" }, { indexed: false, name: "resolver", type: "address" }], name: "NewResolver", type: "event" }, { anonymous: false, inputs: [{ indexed: true, name: "node", type: "bytes32" }, { indexed: false, name: "ttl", type: "uint64" }], name: "NewTTL", type: "event" }, { constant: false, inputs: [{ internalType: "bytes32", name: "node", type: "bytes32" }, { internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "resolver", type: "address" }, { internalType: "uint64", name: "ttl", type: "uint64" }], name: "setRecord", outputs: [], payable: false, stateMutability: "nonpayable", type: "function" }, { constant: false, inputs: [{ internalType: "address", name: "operator", type: "address" }, { internalType: "bool", name: "approved", type: "bool" }], name: "setApprovalForAll", outputs: [], payable: false, stateMutability: "nonpayable", type: "function" }, { anonymous: false, inputs: [{ indexed: true, internalType: "address", name: "owner", type: "address" }, { indexed: true, internalType: "address", name: "operator", type: "address" }, { indexed: false, internalType: "bool", name: "approved", type: "bool" }], name: "ApprovalForAll", type: "event" }, { constant: true, inputs: [{ internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "operator", type: "address" }], name: "isApprovedForAll", outputs: [{ internalType: "bool", name: "", type: "bool" }], payable: false, stateMutability: "view", type: "function" }, { constant: true, inputs: [{ internalType: "bytes32", name: "node", type: "bytes32" }], name: "recordExists", outputs: [{ internalType: "bool", name: "", type: "bool" }], payable: false, stateMutability: "view", type: "function" }, { constant: false, inputs: [{ internalType: "bytes32", name: "node", type: "bytes32" }, { internalType: "bytes32", name: "label", type: "bytes32" }, { internalType: "address", name: "owner", type: "address" }, { internalType: "address", name: "resolver", type: "address" }, { internalType: "uint64", name: "ttl", type: "uint64" }], name: "setSubnodeRecord", outputs: [], payable: false, stateMutability: "nonpayable", type: "function" }];
      }, 8384: (e2) => {
        "use strict";
        e2.exports = [{ constant: true, inputs: [{ name: "interfaceID", type: "bytes4" }], name: "supportsInterface", outputs: [{ name: "", type: "bool" }], payable: false, type: "function" }, { constant: true, inputs: [{ name: "node", type: "bytes32" }, { name: "contentTypes", type: "uint256" }], name: "ABI", outputs: [{ name: "contentType", type: "uint256" }, { name: "data", type: "bytes" }], payable: false, type: "function" }, { constant: false, inputs: [{ name: "node", type: "bytes32" }, { name: "hash", type: "bytes" }], name: "setMultihash", outputs: [], payable: false, stateMutability: "nonpayable", type: "function" }, { constant: true, inputs: [{ name: "node", type: "bytes32" }], name: "multihash", outputs: [{ name: "", type: "bytes" }], payable: false, stateMutability: "view", type: "function" }, { constant: false, inputs: [{ name: "node", type: "bytes32" }, { name: "x", type: "bytes32" }, { name: "y", type: "bytes32" }], name: "setPubkey", outputs: [], payable: false, type: "function" }, { constant: true, inputs: [{ name: "node", type: "bytes32" }], name: "content", outputs: [{ name: "ret", type: "bytes32" }], payable: false, type: "function" }, { constant: true, inputs: [{ name: "node", type: "bytes32" }], name: "addr", outputs: [{ name: "ret", type: "address" }], payable: false, type: "function" }, { constant: false, inputs: [{ name: "node", type: "bytes32" }, { name: "contentType", type: "uint256" }, { name: "data", type: "bytes" }], name: "setABI", outputs: [], payable: false, type: "function" }, { constant: true, inputs: [{ name: "node", type: "bytes32" }], name: "name", outputs: [{ name: "ret", type: "string" }], payable: false, type: "function" }, { constant: false, inputs: [{ name: "node", type: "bytes32" }, { name: "name", type: "string" }], name: "setName", outputs: [], payable: false, type: "function" }, { constant: false, inputs: [{ name: "node", type: "bytes32" }, { name: "hash", type: "bytes32" }], name: "setContent", outputs: [], payable: false, type: "function" }, { constant: true, inputs: [{ name: "node", type: "bytes32" }], name: "pubkey", outputs: [{ name: "x", type: "bytes32" }, { name: "y", type: "bytes32" }], payable: false, type: "function" }, { constant: false, inputs: [{ name: "node", type: "bytes32" }, { name: "addr", type: "address" }], name: "setAddr", outputs: [], payable: false, type: "function" }, { inputs: [{ name: "ensAddr", type: "address" }], payable: false, type: "constructor" }, { anonymous: false, inputs: [{ indexed: true, name: "node", type: "bytes32" }, { indexed: false, name: "a", type: "address" }], name: "AddrChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, name: "node", type: "bytes32" }, { indexed: false, name: "hash", type: "bytes32" }], name: "ContentChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, name: "node", type: "bytes32" }, { indexed: false, name: "name", type: "string" }], name: "NameChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, name: "node", type: "bytes32" }, { indexed: true, name: "contentType", type: "uint256" }], name: "ABIChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, name: "node", type: "bytes32" }, { indexed: false, name: "x", type: "bytes32" }, { indexed: false, name: "y", type: "bytes32" }], name: "PubkeyChanged", type: "event" }, { anonymous: false, inputs: [{ indexed: true, name: "node", type: "bytes32" }, { indexed: false, name: "hash", type: "bytes" }], name: "ContenthashChanged", type: "event" }, { constant: true, inputs: [{ name: "node", type: "bytes32" }], name: "contenthash", outputs: [{ name: "", type: "bytes" }], payable: false, stateMutability: "view", type: "function" }, { constant: false, inputs: [{ name: "node", type: "bytes32" }, { name: "hash", type: "bytes" }], name: "setContenthash", outputs: [], payable: false, stateMutability: "nonpayable", type: "function" }];
      }, 6: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847), i = n(r3(9721)), o = n(r3(8985)), a = r3(8161), s = r3(1734), u = function(e3) {
          var t3 = "A".charCodeAt(0), r4 = "Z".charCodeAt(0);
          return (e3 = (e3 = e3.toUpperCase()).slice(4) + e3.slice(0, 4)).split("").map(function(e4) {
            var n2 = e4.charCodeAt(0);
            return n2 >= t3 && n2 <= r4 ? n2 - t3 + 10 : e4;
          }).join("");
        }, c = function(e3) {
          for (var t3, r4 = e3; r4.length > 2; )
            t3 = r4.slice(0, 9), r4 = parseInt(t3, 10) % 97 + r4.slice(t3.length);
          return parseInt(r4, 10) % 97;
        }, f = function() {
          function e3(t3) {
            (0, i.default)(this, e3), this._iban = t3;
          }
          return (0, o.default)(e3, [{ key: "isValid", value: function() {
            return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && 1 === c(u(this._iban));
          } }, { key: "isDirect", value: function() {
            return 34 === this._iban.length || 35 === this._iban.length;
          } }, { key: "isIndirect", value: function() {
            return 20 === this._iban.length;
          } }, { key: "checksum", value: function() {
            return this._iban.slice(2, 4);
          } }, { key: "institution", value: function() {
            return this.isIndirect() ? this._iban.slice(7, 11) : "";
          } }, { key: "client", value: function() {
            return this.isIndirect() ? this._iban.slice(11) : "";
          } }, { key: "toAddress", value: function() {
            if (this.isDirect()) {
              var e4 = this._iban.slice(4), t3 = new s(e4, 36);
              return a.toChecksumAddress(t3.toString(16, 20));
            }
            return "";
          } }, { key: "toString", value: function() {
            return this._iban;
          } }], [{ key: "toAddress", value: function(t3) {
            if (!(t3 = new e3(t3)).isDirect())
              throw new Error("IBAN is indirect and can't be converted");
            return t3.toAddress();
          } }, { key: "toIban", value: function(t3) {
            return e3.fromAddress(t3).toString();
          } }, { key: "fromAddress", value: function(t3) {
            if (!a.isAddress(t3))
              throw new Error("Provided address is not a valid address: " + t3);
            t3 = t3.replace("0x", "").replace("0X", "");
            var r4 = function(e4, t4) {
              for (var r5 = e4; r5.length < 30; )
                r5 = "0" + r5;
              return r5;
            }(new s(t3, 16).toString(36));
            return e3.fromBban(r4.toUpperCase());
          } }, { key: "fromBban", value: function(t3) {
            return new e3("XE" + ("0" + (98 - c(u("XE00" + t3)))).slice(-2) + t3);
          } }, { key: "createIndirect", value: function(t3) {
            return e3.fromBban("ETH" + t3.institution + t3.identifier);
          } }, { key: "isValid", value: function(t3) {
            return new e3(t3).isValid();
          } }]), e3;
        }();
        e2.exports = f;
      }, 6306: (e2, t2, r3) => {
        "use strict";
        var n = r3(606), i = r3(3349), o = r3(8161), a = r3(473), s = r3(1314).formatters, u = function() {
          var e3 = this;
          n.packageInit(this, arguments), this.net = new a(this);
          var t3 = null, r4 = "latest";
          Object.defineProperty(this, "defaultAccount", { get: function() {
            return t3;
          }, set: function(e4) {
            return e4 && (t3 = o.toChecksumAddress(s.inputAddressFormatter(e4))), u2.forEach(function(e5) {
              e5.defaultAccount = t3;
            }), e4;
          }, enumerable: true }), Object.defineProperty(this, "defaultBlock", { get: function() {
            return r4;
          }, set: function(e4) {
            return r4 = e4, u2.forEach(function(e5) {
              e5.defaultBlock = r4;
            }), e4;
          }, enumerable: true });
          var u2 = [new i({ name: "getAccounts", call: "personal_listAccounts", params: 0, outputFormatter: o.toChecksumAddress }), new i({ name: "newAccount", call: "personal_newAccount", params: 1, inputFormatter: [null], outputFormatter: o.toChecksumAddress }), new i({ name: "unlockAccount", call: "personal_unlockAccount", params: 3, inputFormatter: [s.inputAddressFormatter, null, null] }), new i({ name: "lockAccount", call: "personal_lockAccount", params: 1, inputFormatter: [s.inputAddressFormatter] }), new i({ name: "importRawKey", call: "personal_importRawKey", params: 2 }), new i({ name: "sendTransaction", call: "personal_sendTransaction", params: 2, inputFormatter: [s.inputTransactionFormatter, null] }), new i({ name: "signTransaction", call: "personal_signTransaction", params: 2, inputFormatter: [s.inputTransactionFormatter, null] }), new i({ name: "sign", call: "personal_sign", params: 3, inputFormatter: [s.inputSignFormatter, s.inputAddressFormatter, null] }), new i({ name: "ecRecover", call: "personal_ecRecover", params: 2, inputFormatter: [s.inputSignFormatter, null] })];
          u2.forEach(function(t4) {
            t4.attachToObject(e3), t4.setRequestManager(e3._requestManager), t4.defaultBlock = e3.defaultBlock, t4.defaultAccount = e3.defaultAccount;
          });
        };
        n.addProviders(u), e2.exports = u;
      }, 8130: (e2) => {
        "use strict";
        e2.exports = function(e3) {
          var t2, r3 = this;
          return this.net.getId().then(function(e4) {
            return t2 = e4, r3.getBlock(0);
          }).then(function(r4) {
            var n = "private";
            return "0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3" === r4.hash && 1 === t2 && (n = "main"), "0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d" === r4.hash && 3 === t2 && (n = "ropsten"), "0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177" === r4.hash && 4 === t2 && (n = "rinkeby"), "0xbf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a" === r4.hash && 5 === t2 && (n = "goerli"), "0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9" === r4.hash && 42 === t2 && (n = "kovan"), "function" == typeof e3 && e3(null, n), n;
          }).catch(function(t3) {
            if ("function" != typeof e3)
              throw t3;
            e3(t3);
          });
        };
      }, 6748: (e2, t2, r3) => {
        "use strict";
        var n = r3(606), i = r3(1314), o = r3(4178).subscriptions, a = r3(3349), s = r3(8161), u = r3(473), c = r3(715), f = r3(6306), d = r3(8164), l = r3(6), h = r3(9819), p = r3(9901), b = r3(8130), y = i.formatters, m = function(e3) {
          return "string" == typeof e3[0] && 0 === e3[0].indexOf("0x") ? "eth_getBlockByHash" : "eth_getBlockByNumber";
        }, v = function(e3) {
          return "string" == typeof e3[0] && 0 === e3[0].indexOf("0x") ? "eth_getTransactionByBlockHashAndIndex" : "eth_getTransactionByBlockNumberAndIndex";
        }, g = function(e3) {
          return "string" == typeof e3[0] && 0 === e3[0].indexOf("0x") ? "eth_getUncleByBlockHashAndIndex" : "eth_getUncleByBlockNumberAndIndex";
        }, w = function(e3) {
          return "string" == typeof e3[0] && 0 === e3[0].indexOf("0x") ? "eth_getBlockTransactionCountByHash" : "eth_getBlockTransactionCountByNumber";
        }, A = function(e3) {
          return "string" == typeof e3[0] && 0 === e3[0].indexOf("0x") ? "eth_getUncleCountByBlockHash" : "eth_getUncleCountByBlockNumber";
        }, k = function() {
          var e3 = this;
          n.packageInit(this, arguments);
          var t3 = this.setRequestManager;
          this.setRequestManager = function(r5) {
            return t3(r5), e3.net.setRequestManager(r5), e3.personal.setRequestManager(r5), e3.accounts.setRequestManager(r5), e3.Contract._requestManager = e3._requestManager, e3.Contract.currentProvider = e3._provider, true;
          };
          var r4 = this.setProvider;
          this.setProvider = function() {
            r4.apply(e3, arguments), e3.setRequestManager(e3._requestManager), e3.ens._detectedAddress = null, e3.ens._lastSyncCheck = null;
          };
          var i2, k2, _, S = false, E = null, x = "latest", P = 50, O = 24, B = 750, T = 1e3, C = 10, I = 100;
          Object.defineProperty(this, "handleRevert", { get: function() {
            return S;
          }, set: function(t4) {
            S = t4, e3.Contract.handleRevert = S, R.forEach(function(e4) {
              e4.handleRevert = S;
            });
          }, enumerable: true }), Object.defineProperty(this, "defaultCommon", { get: function() {
            return _;
          }, set: function(t4) {
            _ = t4, e3.Contract.defaultCommon = _, R.forEach(function(e4) {
              e4.defaultCommon = _;
            });
          }, enumerable: true }), Object.defineProperty(this, "defaultHardfork", { get: function() {
            return k2;
          }, set: function(t4) {
            k2 = t4, e3.Contract.defaultHardfork = k2, R.forEach(function(e4) {
              e4.defaultHardfork = k2;
            });
          }, enumerable: true }), Object.defineProperty(this, "defaultChain", { get: function() {
            return i2;
          }, set: function(t4) {
            i2 = t4, e3.Contract.defaultChain = i2, R.forEach(function(e4) {
              e4.defaultChain = i2;
            });
          }, enumerable: true }), Object.defineProperty(this, "transactionPollingTimeout", { get: function() {
            return B;
          }, set: function(t4) {
            B = t4, e3.Contract.transactionPollingTimeout = B, R.forEach(function(e4) {
              e4.transactionPollingTimeout = B;
            });
          }, enumerable: true }), Object.defineProperty(this, "transactionPollingInterval", { get: function() {
            return T;
          }, set: function(t4) {
            T = t4, e3.Contract.transactionPollingInterval = T, R.forEach(function(e4) {
              e4.transactionPollingInterval = T;
            });
          }, enumerable: true }), Object.defineProperty(this, "transactionConfirmationBlocks", { get: function() {
            return O;
          }, set: function(t4) {
            O = t4, e3.Contract.transactionConfirmationBlocks = O, R.forEach(function(e4) {
              e4.transactionConfirmationBlocks = O;
            });
          }, enumerable: true }), Object.defineProperty(this, "transactionBlockTimeout", { get: function() {
            return P;
          }, set: function(t4) {
            P = t4, e3.Contract.transactionBlockTimeout = P, R.forEach(function(e4) {
              e4.transactionBlockTimeout = P;
            });
          }, enumerable: true }), Object.defineProperty(this, "blockHeaderTimeout", { get: function() {
            return C;
          }, set: function(t4) {
            C = t4, e3.Contract.blockHeaderTimeout = C, R.forEach(function(e4) {
              e4.blockHeaderTimeout = C;
            });
          }, enumerable: true }), Object.defineProperty(this, "defaultAccount", { get: function() {
            return E;
          }, set: function(t4) {
            return t4 && (E = s.toChecksumAddress(y.inputAddressFormatter(t4))), e3.Contract.defaultAccount = E, e3.personal.defaultAccount = E, R.forEach(function(e4) {
              e4.defaultAccount = E;
            }), t4;
          }, enumerable: true }), Object.defineProperty(this, "defaultBlock", { get: function() {
            return x;
          }, set: function(t4) {
            return x = t4, e3.Contract.defaultBlock = x, e3.personal.defaultBlock = x, R.forEach(function(e4) {
              e4.defaultBlock = x;
            }), t4;
          }, enumerable: true }), Object.defineProperty(this, "maxListenersWarningThreshold", { get: function() {
            return I;
          }, set: function(t4) {
            e3.currentProvider && e3.currentProvider.setMaxListeners && (I = t4, e3.currentProvider.setMaxListeners(t4));
          }, enumerable: true }), this.clearSubscriptions = e3._requestManager.clearSubscriptions.bind(e3._requestManager), this.removeSubscriptionById = e3._requestManager.removeSubscription.bind(e3._requestManager), this.net = new u(this), this.net.getNetworkType = b.bind(this), this.accounts = new h(this), this.personal = new f(this), this.personal.defaultAccount = this.defaultAccount, this.maxListenersWarningThreshold = I;
          var M = this, U = function() {
            d.apply(this, arguments);
            var e4 = this, t4 = M.setProvider;
            M.setProvider = function() {
              t4.apply(M, arguments), n.packageInit(e4, [M]);
            };
          };
          U.setProvider = function() {
            d.setProvider.apply(this, arguments);
          }, (U.prototype = Object.create(d.prototype)).constructor = U, this.Contract = U, this.Contract.defaultAccount = this.defaultAccount, this.Contract.defaultBlock = this.defaultBlock, this.Contract.transactionBlockTimeout = this.transactionBlockTimeout, this.Contract.transactionConfirmationBlocks = this.transactionConfirmationBlocks, this.Contract.transactionPollingTimeout = this.transactionPollingTimeout, this.Contract.transactionPollingInterval = this.transactionPollingInterval, this.Contract.blockHeaderTimeout = this.blockHeaderTimeout, this.Contract.handleRevert = this.handleRevert, this.Contract._requestManager = this._requestManager, this.Contract._ethAccounts = this.accounts, this.Contract.currentProvider = this._requestManager.provider, this.Iban = l, this.abi = p, this.ens = new c(this);
          var R = [new a({ name: "getNodeInfo", call: "web3_clientVersion" }), new a({ name: "getProtocolVersion", call: "eth_protocolVersion", params: 0 }), new a({ name: "getCoinbase", call: "eth_coinbase", params: 0 }), new a({ name: "isMining", call: "eth_mining", params: 0 }), new a({ name: "getHashrate", call: "eth_hashrate", params: 0, outputFormatter: s.hexToNumber }), new a({ name: "isSyncing", call: "eth_syncing", params: 0, outputFormatter: y.outputSyncingFormatter }), new a({ name: "getGasPrice", call: "eth_gasPrice", params: 0, outputFormatter: y.outputBigNumberFormatter }), new a({ name: "getFeeHistory", call: "eth_feeHistory", params: 3, inputFormatter: [s.numberToHex, y.inputBlockNumberFormatter, null] }), new a({ name: "getAccounts", call: "eth_accounts", params: 0, outputFormatter: s.toChecksumAddress }), new a({ name: "getBlockNumber", call: "eth_blockNumber", params: 0, outputFormatter: s.hexToNumber }), new a({ name: "getBalance", call: "eth_getBalance", params: 2, inputFormatter: [y.inputAddressFormatter, y.inputDefaultBlockNumberFormatter], outputFormatter: y.outputBigNumberFormatter }), new a({ name: "getStorageAt", call: "eth_getStorageAt", params: 3, inputFormatter: [y.inputAddressFormatter, s.numberToHex, y.inputDefaultBlockNumberFormatter] }), new a({ name: "getCode", call: "eth_getCode", params: 2, inputFormatter: [y.inputAddressFormatter, y.inputDefaultBlockNumberFormatter] }), new a({ name: "getBlock", call: m, params: 2, inputFormatter: [y.inputBlockNumberFormatter, function(e4) {
            return !!e4;
          }], outputFormatter: y.outputBlockFormatter }), new a({ name: "getUncle", call: g, params: 2, inputFormatter: [y.inputBlockNumberFormatter, s.numberToHex], outputFormatter: y.outputBlockFormatter }), new a({ name: "getBlockTransactionCount", call: w, params: 1, inputFormatter: [y.inputBlockNumberFormatter], outputFormatter: s.hexToNumber }), new a({ name: "getBlockUncleCount", call: A, params: 1, inputFormatter: [y.inputBlockNumberFormatter], outputFormatter: s.hexToNumber }), new a({ name: "getTransaction", call: "eth_getTransactionByHash", params: 1, inputFormatter: [null], outputFormatter: y.outputTransactionFormatter }), new a({ name: "getTransactionFromBlock", call: v, params: 2, inputFormatter: [y.inputBlockNumberFormatter, s.numberToHex], outputFormatter: y.outputTransactionFormatter }), new a({ name: "getTransactionReceipt", call: "eth_getTransactionReceipt", params: 1, inputFormatter: [null], outputFormatter: y.outputTransactionReceiptFormatter }), new a({ name: "getTransactionCount", call: "eth_getTransactionCount", params: 2, inputFormatter: [y.inputAddressFormatter, y.inputDefaultBlockNumberFormatter], outputFormatter: s.hexToNumber }), new a({ name: "sendSignedTransaction", call: "eth_sendRawTransaction", params: 1, inputFormatter: [null], abiCoder: p }), new a({ name: "signTransaction", call: "eth_signTransaction", params: 1, inputFormatter: [y.inputTransactionFormatter] }), new a({ name: "sendTransaction", call: "eth_sendTransaction", params: 1, inputFormatter: [y.inputTransactionFormatter], abiCoder: p }), new a({ name: "sign", call: "eth_sign", params: 2, inputFormatter: [y.inputSignFormatter, y.inputAddressFormatter], transformPayload: function(e4) {
            return e4.params.reverse(), e4;
          } }), new a({ name: "call", call: "eth_call", params: 2, inputFormatter: [y.inputCallFormatter, y.inputDefaultBlockNumberFormatter], abiCoder: p }), new a({ name: "estimateGas", call: "eth_estimateGas", params: 1, inputFormatter: [y.inputCallFormatter], outputFormatter: s.hexToNumber }), new a({ name: "submitWork", call: "eth_submitWork", params: 3 }), new a({ name: "getWork", call: "eth_getWork", params: 0 }), new a({ name: "getPastLogs", call: "eth_getLogs", params: 1, inputFormatter: [y.inputLogFormatter], outputFormatter: y.outputLogFormatter }), new a({ name: "getChainId", call: "eth_chainId", params: 0, outputFormatter: s.hexToNumber }), new a({ name: "requestAccounts", call: "eth_requestAccounts", params: 0, outputFormatter: s.toChecksumAddress }), new a({ name: "getProof", call: "eth_getProof", params: 3, inputFormatter: [y.inputAddressFormatter, y.inputStorageKeysFormatter, y.inputDefaultBlockNumberFormatter], outputFormatter: y.outputProofFormatter }), new a({ name: "getPendingTransactions", call: "eth_pendingTransactions", params: 0, outputFormatter: y.outputTransactionFormatter }), new a({ name: "createAccessList", call: "eth_createAccessList", params: 2, inputFormatter: [y.inputTransactionFormatter, y.inputDefaultBlockNumberFormatter] }), new o({ name: "subscribe", type: "eth", subscriptions: { newBlockHeaders: { subscriptionName: "newHeads", params: 0, outputFormatter: y.outputBlockFormatter }, pendingTransactions: { subscriptionName: "newPendingTransactions", params: 0 }, logs: { params: 1, inputFormatter: [y.inputLogFormatter], outputFormatter: y.outputLogFormatter, subscriptionHandler: function(e4) {
            e4.removed ? this.emit("changed", e4) : this.emit("data", e4), "function" == typeof this.callback && this.callback(null, e4, this);
          } }, syncing: { params: 0, outputFormatter: y.outputSyncingFormatter, subscriptionHandler: function(e4) {
            var t4 = this;
            true !== this._isSyncing ? (this._isSyncing = true, this.emit("changed", t4._isSyncing), "function" == typeof this.callback && this.callback(null, t4._isSyncing, this), setTimeout(function() {
              t4.emit("data", e4), "function" == typeof t4.callback && t4.callback(null, e4, t4);
            }, 0)) : (this.emit("data", e4), "function" == typeof t4.callback && this.callback(null, e4, this), clearTimeout(this._isSyncingTimeout), this._isSyncingTimeout = setTimeout(function() {
              e4.currentBlock > e4.highestBlock - 200 && (t4._isSyncing = false, t4.emit("changed", t4._isSyncing), "function" == typeof t4.callback && t4.callback(null, t4._isSyncing, t4));
            }, 500));
          } } } })];
          R.forEach(function(t4) {
            t4.attachToObject(e3), t4.setRequestManager(e3._requestManager, e3.accounts), t4.defaultBlock = e3.defaultBlock, t4.defaultAccount = e3.defaultAccount, t4.transactionBlockTimeout = e3.transactionBlockTimeout, t4.transactionConfirmationBlocks = e3.transactionConfirmationBlocks, t4.transactionPollingTimeout = e3.transactionPollingTimeout, t4.transactionPollingInterval = e3.transactionPollingInterval, t4.handleRevert = e3.handleRevert;
          });
        };
        n.addProviders(k), e2.exports = k;
      }, 473: (e2, t2, r3) => {
        "use strict";
        var n = r3(606), i = r3(3349), o = r3(8161), a = function() {
          var e3 = this;
          n.packageInit(this, arguments), [new i({ name: "getId", call: "net_version", params: 0, outputFormatter: parseInt }), new i({ name: "isListening", call: "net_listening", params: 0 }), new i({ name: "getPeerCount", call: "net_peerCount", params: 0, outputFormatter: o.hexToNumber })].forEach(function(t3) {
            t3.attachToObject(e3), t3.setRequestManager(e3._requestManager);
          });
        };
        n.addProviders(a), e2.exports = a;
      }, 4565: (e2, t2, r3) => {
        "use strict";
        var n = r3(1314).errors, i = r3(9519), o = r3(912);
        r3(2439), r3(4258).polyfill(), void 0 === r3.g || r3.g.AbortController || r3(3368);
        var a = function(e3, t3) {
          t3 = t3 || {}, this.withCredentials = t3.withCredentials, this.timeout = t3.timeout || 0, this.headers = t3.headers, this.agent = t3.agent, this.connected = false;
          var r4 = false !== t3.keepAlive;
          this.host = e3 || "http://localhost:8545", this.agent || ("https" === this.host.substring(0, 5) ? this.httpsAgent = new o.Agent({ keepAlive: r4 }) : this.httpAgent = new i.Agent({ keepAlive: r4 }));
        };
        a.prototype.send = function(e3, t3) {
          var r4, i2 = { method: "POST", body: JSON.stringify(e3) }, o2 = {};
          if ("undefined" != typeof AbortController ? r4 = new AbortController() : "undefined" != typeof window && void 0 !== window.AbortController && (r4 = new window.AbortController()), void 0 !== r4 && (i2.signal = r4.signal), "undefined" == typeof XMLHttpRequest) {
            var a2 = { httpsAgent: this.httpsAgent, httpAgent: this.httpAgent };
            this.agent && (a2.httpsAgent = this.agent.https, a2.httpAgent = this.agent.http), "https" === this.host.substring(0, 5) ? i2.agent = a2.httpsAgent : i2.agent = a2.httpAgent;
          }
          this.headers && this.headers.forEach(function(e4) {
            o2[e4.name] = e4.value;
          }), o2["Content-Type"] || (o2["Content-Type"] = "application/json"), this.withCredentials ? i2.credentials = "include" : i2.credentials = "omit", i2.headers = o2, this.timeout > 0 && void 0 !== r4 && (this.timeoutId = setTimeout(function() {
            r4.abort();
          }, this.timeout)), fetch(this.host, i2).then((function(e4) {
            void 0 !== this.timeoutId && clearTimeout(this.timeoutId), e4.json().then(function(e5) {
              t3(null, e5);
            }).catch(function(r5) {
              t3(n.InvalidResponse(e4));
            });
          }).bind(this)).catch((function(e4) {
            void 0 !== this.timeoutId && clearTimeout(this.timeoutId), "AbortError" === e4.name && t3(n.ConnectionTimeout(this.timeout)), t3(n.InvalidConnection(this.host, e4));
          }).bind(this));
        }, a.prototype.disconnect = function() {
        }, a.prototype.supportsSubscriptions = function() {
          return false;
        }, e2.exports = a;
      }, 2683: (e2, t2, r3) => {
        "use strict";
        var n = r3(1314).errors, i = r3(3150), o = function(e3, t3) {
          var r4 = this;
          this.responseCallbacks = {}, this.notificationCallbacks = [], this.path = e3, this.connected = false, this.connection = t3.connect({ path: this.path }), this.addDefaultEvents();
          var n2 = function(e4) {
            var t4 = null;
            Array.isArray(e4) ? e4.forEach(function(e5) {
              r4.responseCallbacks[e5.id] && (t4 = e5.id);
            }) : t4 = e4.id, t4 || -1 === e4.method.indexOf("_subscription") ? r4.responseCallbacks[t4] && (r4.responseCallbacks[t4](null, e4), delete r4.responseCallbacks[t4]) : r4.notificationCallbacks.forEach(function(t5) {
              "function" == typeof t5 && t5(e4);
            });
          };
          "Socket" === t3.constructor.name ? i(this.connection).done(n2) : this.connection.on("data", function(e4) {
            r4._parseResponse(e4.toString()).forEach(n2);
          });
        };
        o.prototype.addDefaultEvents = function() {
          var e3 = this;
          this.connection.on("connect", function() {
            e3.connected = true;
          }), this.connection.on("close", function() {
            e3.connected = false;
          }), this.connection.on("error", function() {
            e3._timeout();
          }), this.connection.on("end", function() {
            e3._timeout();
          }), this.connection.on("timeout", function() {
            e3._timeout();
          });
        }, o.prototype._parseResponse = function(e3) {
          var t3 = this, r4 = [];
          return e3.replace(/\}[\n\r]?\{/g, "}|--|{").replace(/\}\][\n\r]?\[\{/g, "}]|--|[{").replace(/\}[\n\r]?\[\{/g, "}|--|[{").replace(/\}\][\n\r]?\{/g, "}]|--|{").split("|--|").forEach(function(e4) {
            t3.lastChunk && (e4 = t3.lastChunk + e4);
            var i2 = null;
            try {
              i2 = JSON.parse(e4);
            } catch (r5) {
              return t3.lastChunk = e4, clearTimeout(t3.lastChunkTimeout), void (t3.lastChunkTimeout = setTimeout(function() {
                throw t3._timeout(), n.InvalidResponse(e4);
              }, 15e3));
            }
            clearTimeout(t3.lastChunkTimeout), t3.lastChunk = null, i2 && r4.push(i2);
          }), r4;
        }, o.prototype._addResponseCallback = function(e3, t3) {
          var r4 = e3.id || e3[0].id, n2 = e3.method || e3[0].method;
          this.responseCallbacks[r4] = t3, this.responseCallbacks[r4].method = n2;
        }, o.prototype._timeout = function() {
          for (var e3 in this.responseCallbacks)
            this.responseCallbacks.hasOwnProperty(e3) && (this.responseCallbacks[e3](n.InvalidConnection("on IPC")), delete this.responseCallbacks[e3]);
        }, o.prototype.reconnect = function() {
          this.connection.connect({ path: this.path });
        }, o.prototype.send = function(e3, t3) {
          this.connection.writable || this.connection.connect({ path: this.path }), this.connection.write(JSON.stringify(e3)), this._addResponseCallback(e3, t3);
        }, o.prototype.on = function(e3, t3) {
          if ("function" != typeof t3)
            throw new Error("The second parameter callback must be a function.");
          "data" === e3 ? this.notificationCallbacks.push(t3) : this.connection.on(e3, t3);
        }, o.prototype.once = function(e3, t3) {
          if ("function" != typeof t3)
            throw new Error("The second parameter callback must be a function.");
          this.connection.once(e3, t3);
        }, o.prototype.removeListener = function(e3, t3) {
          var r4 = this;
          "data" === e3 ? this.notificationCallbacks.forEach(function(e4, n2) {
            e4 === t3 && r4.notificationCallbacks.splice(n2, 1);
          }) : this.connection.removeListener(e3, t3);
        }, o.prototype.removeAllListeners = function(e3) {
          "data" === e3 ? this.notificationCallbacks = [] : this.connection.removeAllListeners(e3);
        }, o.prototype.reset = function() {
          this._timeout(), this.notificationCallbacks = [], this.connection.removeAllListeners("error"), this.connection.removeAllListeners("end"), this.connection.removeAllListeners("timeout"), this.addDefaultEvents();
        }, o.prototype.supportsSubscriptions = function() {
          return true;
        }, e2.exports = o;
      }, 360: (e2, t2, r3) => {
        "use strict";
        var n = r3(9142), i = r3(9033).Buffer, o = r3(8847)(r3(3355)), a = "[object process]" === Object.prototype.toString.call(void 0 !== n ? n : 0), s = "undefined" != typeof navigator && "ReactNative" === navigator.product, u = null, c = null;
        if (a || s) {
          u = function(e3) {
            return i.from(e3).toString("base64");
          };
          var f = r3(1143);
          if (f.URL) {
            var d = f.URL;
            c = function(e3) {
              return new d(e3);
            };
          } else
            c = r3(1143).parse;
        } else
          u = btoa.bind("object" === ("undefined" == typeof globalThis ? "undefined" : (0, o.default)(globalThis)) ? globalThis : self), c = function(e3) {
            return new URL(e3);
          };
        e2.exports = { parseURL: c, btoa: u };
      }, 7651: (e2, t2, r3) => {
        "use strict";
        var n = r3(8008), i = r3(360), o = r3(1314).errors, a = r3(1158).w3cwebsocket, s = function(e3, t3) {
          n.call(this), t3 = t3 || {}, this.url = e3, this._customTimeout = t3.timeout || 15e3, this.headers = t3.headers || {}, this.protocol = t3.protocol || void 0, this.reconnectOptions = Object.assign({ auto: false, delay: 5e3, maxAttempts: false, onTimeout: false }, t3.reconnect), this.clientConfig = t3.clientConfig || void 0, this.requestOptions = t3.requestOptions || void 0, this.DATA = "data", this.CLOSE = "close", this.ERROR = "error", this.CONNECT = "connect", this.RECONNECT = "reconnect", this.connection = null, this.requestQueue = /* @__PURE__ */ new Map(), this.responseQueue = /* @__PURE__ */ new Map(), this.reconnectAttempts = 0, this.reconnecting = false, this.connectFailedDescription = null;
          var r4 = i.parseURL(e3);
          r4.username && r4.password && (this.headers.authorization = "Basic " + i.btoa(r4.username + ":" + r4.password)), r4.auth && (this.headers.authorization = "Basic " + i.btoa(r4.auth)), Object.defineProperty(this, "connected", { get: function() {
            return this.connection && this.connection.readyState === this.connection.OPEN;
          }, enumerable: true }), this.connect();
        };
        (s.prototype = Object.create(n.prototype)).constructor = s, s.prototype.connect = function() {
          this.connection = new a(this.url, this.protocol, void 0, this.headers, this.requestOptions, this.clientConfig), this._addSocketListeners();
        }, s.prototype._onMessage = function(e3) {
          var t3 = this;
          this._parseResponse("string" == typeof e3.data ? e3.data : "").forEach(function(e4) {
            if (e4.method && -1 !== e4.method.indexOf("_subscription"))
              t3.emit(t3.DATA, e4);
            else {
              var r4 = e4.id;
              Array.isArray(e4) && (r4 = e4[0].id), t3.responseQueue.has(r4) && (void 0 !== t3.responseQueue.get(r4).callback && t3.responseQueue.get(r4).callback(false, e4), t3.responseQueue.delete(r4));
            }
          });
        }, s.prototype._onConnect = function() {
          if (this.emit(this.CONNECT), this.reconnectAttempts = 0, this.reconnecting = false, this.requestQueue.size > 0) {
            var e3 = this;
            this.requestQueue.forEach(function(t3, r4) {
              e3.send(t3.payload, t3.callback), e3.requestQueue.delete(r4);
            });
          }
        }, s.prototype._onConnectFailed = function(e3) {
          this.connectFailedDescription = e3.toString().split("\n")[0];
          var t3 = this;
          this.connectFailedDescription && (e3.description = this.connectFailedDescription, this.connectFailedDescription = null), e3.code = 1006, e3.reason = "connection failed", !this.reconnectOptions.auto || [1e3, 1001].includes(e3.code) && false !== e3.wasClean ? (this.emit(this.ERROR, e3), this.requestQueue.size > 0 && this.requestQueue.forEach(function(r4, n2) {
            r4.callback(o.ConnectionNotOpenError(e3)), t3.requestQueue.delete(n2);
          }), this.responseQueue.size > 0 && this.responseQueue.forEach(function(r4, n2) {
            r4.callback(o.InvalidConnection("on WS", e3)), t3.responseQueue.delete(n2);
          }), this.connection._connection && this.connection._connection.removeAllListeners(), this.connection._client.removeAllListeners(), this.connection._readyState = 3, this.emit(this.CLOSE, e3)) : this.reconnect();
        }, s.prototype._onClose = function(e3) {
          var t3 = this;
          !this.reconnectOptions.auto || [1e3, 1001].includes(e3.code) && false !== e3.wasClean ? (this.emit(this.CLOSE, e3), this.requestQueue.size > 0 && this.requestQueue.forEach(function(r4, n2) {
            r4.callback(o.ConnectionNotOpenError(e3)), t3.requestQueue.delete(n2);
          }), this.responseQueue.size > 0 && this.responseQueue.forEach(function(r4, n2) {
            r4.callback(o.InvalidConnection("on WS", e3)), t3.responseQueue.delete(n2);
          }), this._removeSocketListeners(), this.removeAllListeners()) : this.reconnect();
        }, s.prototype._addSocketListeners = function() {
          this.connection.addEventListener("message", this._onMessage.bind(this)), this.connection.addEventListener("open", this._onConnect.bind(this)), this.connection.addEventListener("close", this._onClose.bind(this)), this.connection._client && (this.connection._client.removeAllListeners("connectFailed"), this.connection._client.on("connectFailed", this._onConnectFailed.bind(this)));
        }, s.prototype._removeSocketListeners = function() {
          this.connection.removeEventListener("message", this._onMessage), this.connection.removeEventListener("open", this._onConnect), this.connection.removeEventListener("close", this._onClose), this.connection._connection && this.connection._client.removeListener("connectFailed", this._onConnectFailed);
        }, s.prototype._parseResponse = function(e3) {
          var t3 = this, r4 = [];
          return e3.replace(/\}[\n\r]?\{/g, "}|--|{").replace(/\}\][\n\r]?\[\{/g, "}]|--|[{").replace(/\}[\n\r]?\[\{/g, "}|--|[{").replace(/\}\][\n\r]?\{/g, "}]|--|{").split("|--|").forEach(function(e4) {
            t3.lastChunk && (e4 = t3.lastChunk + e4);
            var n2 = null;
            try {
              n2 = JSON.parse(e4);
            } catch (r5) {
              return t3.lastChunk = e4, clearTimeout(t3.lastChunkTimeout), void (t3.lastChunkTimeout = setTimeout(function() {
                t3.reconnectOptions.auto && t3.reconnectOptions.onTimeout ? t3.reconnect() : (t3.emit(t3.ERROR, o.ConnectionTimeout(t3._customTimeout)), t3.requestQueue.size > 0 && t3.requestQueue.forEach(function(e5, r6) {
                  e5.callback(o.ConnectionTimeout(t3._customTimeout)), t3.requestQueue.delete(r6);
                }));
              }, t3._customTimeout));
            }
            clearTimeout(t3.lastChunkTimeout), t3.lastChunk = null, n2 && r4.push(n2);
          }), r4;
        }, s.prototype.send = function(e3, t3) {
          var r4 = e3.id, n2 = { payload: e3, callback: t3 };
          if (Array.isArray(e3) && (r4 = e3[0].id), this.connection.readyState === this.connection.CONNECTING || this.reconnecting)
            this.requestQueue.set(r4, n2);
          else {
            if (this.connection.readyState !== this.connection.OPEN)
              return this.requestQueue.delete(r4), this.emit(this.ERROR, o.ConnectionNotOpenError()), void n2.callback(o.ConnectionNotOpenError());
            this.responseQueue.set(r4, n2), this.requestQueue.delete(r4);
            try {
              this.connection.send(JSON.stringify(n2.payload));
            } catch (e4) {
              n2.callback(e4), this.responseQueue.delete(r4);
            }
          }
        }, s.prototype.reset = function() {
          this.responseQueue.clear(), this.requestQueue.clear(), this.removeAllListeners(), this._removeSocketListeners(), this._addSocketListeners();
        }, s.prototype.disconnect = function(e3, t3) {
          this._removeSocketListeners(), this.connection.close(e3 || 1e3, t3);
        }, s.prototype.supportsSubscriptions = function() {
          return true;
        }, s.prototype.reconnect = function() {
          var e3 = this;
          this.reconnecting = true, this.responseQueue.size > 0 && this.responseQueue.forEach(function(t3, r4) {
            try {
              e3.responseQueue.delete(r4), t3.callback(o.PendingRequestsOnReconnectingError());
            } catch (e4) {
              console.error("Error encountered in reconnect: ", e4);
            }
          }), !this.reconnectOptions.maxAttempts || this.reconnectAttempts < this.reconnectOptions.maxAttempts ? setTimeout(function() {
            e3.reconnectAttempts++, e3._removeSocketListeners(), e3.emit(e3.RECONNECT, e3.reconnectAttempts), e3.connect();
          }, this.reconnectOptions.delay) : (this.emit(this.ERROR, o.MaxAttemptsReachedOnReconnectingError()), this.reconnecting = false, this.requestQueue.size > 0 && this.requestQueue.forEach(function(t3, r4) {
            t3.callback(o.MaxAttemptsReachedOnReconnectingError()), e3.requestQueue.delete(r4);
          }));
        }, e2.exports = s;
      }, 2565: (e2, t2, r3) => {
        "use strict";
        var n = r3(606), i = r3(4178).subscriptions, o = r3(3349), a = r3(473), s = function() {
          var e3 = this;
          n.packageInit(this, arguments);
          var t3 = this.setRequestManager;
          this.setRequestManager = function(r5) {
            return t3(r5), e3.net.setRequestManager(r5), true;
          };
          var r4 = this.setProvider;
          this.setProvider = function() {
            r4.apply(e3, arguments), e3.setRequestManager(e3._requestManager);
          }, this.net = new a(this), [new i({ name: "subscribe", type: "shh", subscriptions: { messages: { params: 1 } } }), new o({ name: "getVersion", call: "shh_version", params: 0 }), new o({ name: "getInfo", call: "shh_info", params: 0 }), new o({ name: "setMaxMessageSize", call: "shh_setMaxMessageSize", params: 1 }), new o({ name: "setMinPoW", call: "shh_setMinPoW", params: 1 }), new o({ name: "markTrustedPeer", call: "shh_markTrustedPeer", params: 1 }), new o({ name: "newKeyPair", call: "shh_newKeyPair", params: 0 }), new o({ name: "addPrivateKey", call: "shh_addPrivateKey", params: 1 }), new o({ name: "deleteKeyPair", call: "shh_deleteKeyPair", params: 1 }), new o({ name: "hasKeyPair", call: "shh_hasKeyPair", params: 1 }), new o({ name: "getPublicKey", call: "shh_getPublicKey", params: 1 }), new o({ name: "getPrivateKey", call: "shh_getPrivateKey", params: 1 }), new o({ name: "newSymKey", call: "shh_newSymKey", params: 0 }), new o({ name: "addSymKey", call: "shh_addSymKey", params: 1 }), new o({ name: "generateSymKeyFromPassword", call: "shh_generateSymKeyFromPassword", params: 1 }), new o({ name: "hasSymKey", call: "shh_hasSymKey", params: 1 }), new o({ name: "getSymKey", call: "shh_getSymKey", params: 1 }), new o({ name: "deleteSymKey", call: "shh_deleteSymKey", params: 1 }), new o({ name: "newMessageFilter", call: "shh_newMessageFilter", params: 1 }), new o({ name: "getFilterMessages", call: "shh_getFilterMessages", params: 1 }), new o({ name: "deleteMessageFilter", call: "shh_deleteMessageFilter", params: 1 }), new o({ name: "post", call: "shh_post", params: 1, inputFormatter: [null] }), new o({ name: "unsubscribe", call: "shh_unsubscribe", params: 1 })].forEach(function(t4) {
            t4.attachToObject(e3), t4.setRequestManager(e3._requestManager);
          });
        };
        s.prototype.clearSubscriptions = function() {
          this._requestManager.clearSubscriptions();
        }, n.addProviders(s), e2.exports = s;
      }, 8161: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(7130), o = r3(323), a = r3(747), s = r3(5010), u = r3(1734), c = function e3(t3, r4) {
          var i2 = [];
          return r4.forEach(function(r5) {
            if ("object" === (0, n.default)(r5.components)) {
              if ("tuple" !== r5.type.substring(0, 5))
                throw new Error("components found but type is not tuple; report on GitHub");
              var o2 = "", a2 = r5.type.indexOf("[");
              a2 >= 0 && (o2 = r5.type.substring(a2));
              var s2 = e3(t3, r5.components);
              Array.isArray(s2) && t3 ? i2.push("tuple(" + s2.join(",") + ")" + o2) : t3 ? i2.push("(" + s2 + ")") : i2.push("(" + s2.join(",") + ")" + o2);
            } else
              i2.push(r5.type);
          }), i2;
        }, f = function(e3) {
          if (!o.isHexStrict(e3))
            throw new Error("The parameter must be a valid HEX string.");
          var t3 = "", r4 = 0, n2 = e3.length;
          for ("0x" === e3.substring(0, 2) && (r4 = 2); r4 < n2; r4 += 2) {
            var i2 = parseInt(e3.slice(r4, r4 + 2), 16);
            t3 += String.fromCharCode(i2);
          }
          return t3;
        }, d = function(e3) {
          if (!e3)
            return "0x00";
          for (var t3 = "", r4 = 0; r4 < e3.length; r4++) {
            var n2 = e3.charCodeAt(r4).toString(16);
            t3 += n2.length < 2 ? "0" + n2 : n2;
          }
          return "0x" + t3;
        }, l = function(e3) {
          if (e3 = e3 ? e3.toLowerCase() : "ether", !i.unitMap[e3])
            throw new Error('This unit "' + e3 + `" doesn't exist, please use the one of the following units` + JSON.stringify(i.unitMap, null, 2));
          return e3;
        };
        e2.exports = { _fireError: function(e3, t3, r4, i2, o2) {
          return !e3 || "object" !== (0, n.default)(e3) || e3 instanceof Error || !e3.data || ((e3.data && "object" === (0, n.default)(e3.data) || Array.isArray(e3.data)) && (e3.data = JSON.stringify(e3.data, null, 2)), e3 = e3.message + "\n" + e3.data), "string" == typeof e3 && (e3 = new Error(e3)), "function" == typeof i2 && i2(e3, o2), "function" == typeof r4 && ((t3 && "function" == typeof t3.listeners && t3.listeners("error").length || "function" == typeof i2) && t3.catch(function() {
          }), setTimeout(function() {
            r4(e3);
          }, 1)), t3 && "function" == typeof t3.emit && setTimeout(function() {
            t3.emit("error", e3, o2), t3.removeAllListeners();
          }, 1), t3;
        }, _jsonInterfaceMethodToString: function(e3) {
          return e3 && "object" === (0, n.default)(e3) && e3.name && -1 !== e3.name.indexOf("(") ? e3.name : e3.name + "(" + c(false, e3.inputs).join(",") + ")";
        }, _flattenTypes: c, randomHex: function(e3) {
          return "0x" + s(e3).toString("hex");
        }, BN: o.BN, isBN: o.isBN, isBigNumber: o.isBigNumber, isHex: o.isHex, isHexStrict: o.isHexStrict, sha3: o.sha3, sha3Raw: o.sha3Raw, keccak256: o.sha3, soliditySha3: a.soliditySha3, soliditySha3Raw: a.soliditySha3Raw, encodePacked: a.encodePacked, isAddress: o.isAddress, checkAddressChecksum: o.checkAddressChecksum, toChecksumAddress: function(e3) {
          if (void 0 === e3)
            return "";
          if (!/^(0x)?[0-9a-f]{40}$/i.test(e3))
            throw new Error('Given address "' + e3 + '" is not a valid Ethereum address.');
          e3 = e3.toLowerCase().replace(/^0x/i, "");
          for (var t3 = o.sha3(e3).replace(/^0x/i, ""), r4 = "0x", n2 = 0; n2 < e3.length; n2++)
            parseInt(t3[n2], 16) > 7 ? r4 += e3[n2].toUpperCase() : r4 += e3[n2];
          return r4;
        }, toHex: o.toHex, toBN: o.toBN, bytesToHex: o.bytesToHex, hexToBytes: o.hexToBytes, hexToNumberString: o.hexToNumberString, hexToNumber: o.hexToNumber, toDecimal: o.hexToNumber, numberToHex: o.numberToHex, fromDecimal: o.numberToHex, hexToUtf8: o.hexToUtf8, hexToString: o.hexToUtf8, toUtf8: o.hexToUtf8, stripHexPrefix: o.stripHexPrefix, utf8ToHex: o.utf8ToHex, stringToHex: o.utf8ToHex, fromUtf8: o.utf8ToHex, hexToAscii: f, toAscii: f, asciiToHex: d, fromAscii: d, unitMap: i.unitMap, toWei: function(e3, t3) {
          if (t3 = l(t3), !o.isBN(e3) && "string" != typeof e3)
            throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
          return o.isBN(e3) ? i.toWei(e3, t3) : i.toWei(e3, t3).toString(10);
        }, fromWei: function(e3, t3) {
          if (t3 = l(t3), !o.isBN(e3) && "string" != typeof e3)
            throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
          return o.isBN(e3) ? i.fromWei(e3, t3) : i.fromWei(e3, t3).toString(10);
        }, padLeft: o.leftPad, leftPad: o.leftPad, padRight: o.rightPad, rightPad: o.rightPad, toTwosComplement: o.toTwosComplement, isBloom: o.isBloom, isUserEthereumAddressInBloom: o.isUserEthereumAddressInBloom, isContractAddressInBloom: o.isContractAddressInBloom, isTopic: o.isTopic, isTopicInBloom: o.isTopicInBloom, isInBloom: o.isInBloom, compareBlockNumbers: function(e3, t3) {
          if (e3 === t3)
            return 0;
          if ("genesis" !== e3 && "earliest" !== e3 && 0 !== e3 || "genesis" !== t3 && "earliest" !== t3 && 0 !== t3) {
            if ("genesis" === e3 || "earliest" === e3 || 0 === e3)
              return -1;
            if ("genesis" === t3 || "earliest" === t3 || 0 === t3)
              return 1;
            if ("latest" === e3 || "finalized" === e3)
              return "pending" === t3 ? -1 : 1;
            if ("latest" === t3 || "finalized" === t3)
              return "pending" === e3 ? 1 : -1;
            if ("pending" === e3)
              return 1;
            if ("pending" === t3)
              return -1;
            if ("safe" === e3 || "safe" === t3)
              return;
            var r4 = new u(e3), n2 = new u(t3);
            return r4.lt(n2) ? -1 : r4.eq(n2) ? 0 : 1;
          }
          return 0;
        }, toNumber: o.toNumber };
      }, 747: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(1734), o = r3(323), a = function(e3) {
          var t3 = (0, n.default)(e3);
          if ("string" === t3)
            return o.isHexStrict(e3) ? new i(e3.replace(/0x/i, ""), 16) : new i(e3, 10);
          if ("number" === t3)
            return new i(e3);
          if (o.isBigNumber(e3))
            return new i(e3.toString(10));
          if (o.isBN(e3))
            return e3;
          throw new Error(e3 + " is not a number");
        }, s = function(e3, t3, r4) {
          var n2, s2;
          if ("bytes" === (e3 = function(e4) {
            return e4.startsWith("int[") ? "int256" + e4.slice(3) : "int" === e4 ? "int256" : e4.startsWith("uint[") ? "uint256" + e4.slice(4) : "uint" === e4 ? "uint256" : e4.startsWith("fixed[") ? "fixed128x128" + e4.slice(5) : "fixed" === e4 ? "fixed128x128" : e4.startsWith("ufixed[") ? "ufixed128x128" + e4.slice(6) : "ufixed" === e4 ? "ufixed128x128" : e4;
          }(e3))) {
            if (t3.replace(/^0x/i, "").length % 2 != 0)
              throw new Error("Invalid bytes characters " + t3.length);
            return t3;
          }
          if ("string" === e3)
            return o.utf8ToHex(t3);
          if ("bool" === e3)
            return t3 ? "01" : "00";
          if (e3.startsWith("address")) {
            if (n2 = r4 ? 64 : 40, !o.isAddress(t3))
              throw new Error(t3 + " is not a valid address, or the checksum is invalid.");
            return o.leftPad(t3.toLowerCase(), n2);
          }
          if (n2 = function(e4) {
            var t4 = /^\D+(\d+).*$/.exec(e4);
            return t4 ? parseInt(t4[1], 10) : null;
          }(e3), e3.startsWith("bytes")) {
            if (!n2)
              throw new Error("bytes[] not yet supported in solidity");
            if (r4 && (n2 = 32), n2 < 1 || n2 > 32 || n2 < t3.replace(/^0x/i, "").length / 2)
              throw new Error("Invalid bytes" + n2 + " for " + t3);
            return o.rightPad(t3, 2 * n2);
          }
          if (e3.startsWith("uint")) {
            if (n2 % 8 || n2 < 8 || n2 > 256)
              throw new Error("Invalid uint" + n2 + " size");
            if ((s2 = a(t3)).bitLength() > n2)
              throw new Error("Supplied uint exceeds width: " + n2 + " vs " + s2.bitLength());
            if (s2.lt(new i(0)))
              throw new Error("Supplied uint " + s2.toString() + " is negative");
            return n2 ? o.leftPad(s2.toString("hex"), n2 / 8 * 2) : s2;
          }
          if (e3.startsWith("int")) {
            if (n2 % 8 || n2 < 8 || n2 > 256)
              throw new Error("Invalid int" + n2 + " size");
            if ((s2 = a(t3)).bitLength() > n2)
              throw new Error("Supplied int exceeds width: " + n2 + " vs " + s2.bitLength());
            return s2.lt(new i(0)) ? s2.toTwos(n2).toString("hex") : n2 ? o.leftPad(s2.toString("hex"), n2 / 8 * 2) : s2;
          }
          throw new Error("Unsupported or invalid type: " + e3);
        }, u = function(e3) {
          if (Array.isArray(e3))
            throw new Error("Autodetection of array types is not supported.");
          var t3, r4, a2 = "";
          if (e3 && "object" === (0, n.default)(e3) && (e3.hasOwnProperty("v") || e3.hasOwnProperty("t") || e3.hasOwnProperty("value") || e3.hasOwnProperty("type")) ? (t3 = e3.hasOwnProperty("t") ? e3.t : e3.type, a2 = e3.hasOwnProperty("v") ? e3.v : e3.value) : (t3 = o.toHex(e3, true), a2 = o.toHex(e3), t3.startsWith("int") || t3.startsWith("uint") || (t3 = "bytes")), !t3.startsWith("int") && !t3.startsWith("uint") || "string" != typeof a2 || /^(-)?0x/i.test(a2) || (a2 = new i(a2)), Array.isArray(a2)) {
            if (r4 = function(e4) {
              var t4 = /^\D+\d*\[(\d+)\]$/.exec(e4);
              return t4 ? parseInt(t4[1], 10) : null;
            }(t3), r4 && a2.length !== r4)
              throw new Error(t3 + " is not matching the given array " + JSON.stringify(a2));
            r4 = a2.length;
          }
          return Array.isArray(a2) ? a2.map(function(e4) {
            return s(t3, e4, r4).toString("hex").replace("0x", "");
          }).join("") : s(t3, a2, r4).toString("hex").replace("0x", "");
        };
        e2.exports = { soliditySha3: function() {
          var e3 = Array.prototype.slice.call(arguments).map(u);
          return o.sha3("0x" + e3.join(""));
        }, soliditySha3Raw: function() {
          return o.sha3Raw("0x" + Array.prototype.slice.call(arguments).map(u).join(""));
        }, encodePacked: function() {
          return "0x" + Array.prototype.slice.call(arguments).map(u).join("").toLowerCase();
        } };
      }, 323: (e2, t2, r3) => {
        "use strict";
        var n = r3(9033).Buffer, i = r3(8847), o = i(r3(4519)), a = i(r3(3355)), s = r3(1734), u = r3(7277), c = r3(8632), f = r3(3062), d = r3(9313), l = function(e3) {
          return s.isBN(e3);
        }, h = function(e3) {
          return e3 && e3.constructor && "BigNumber" === e3.constructor.name;
        }, p = function(e3) {
          try {
            return u.apply(null, arguments);
          } catch (t3) {
            throw new Error(t3 + ' Given value: "' + e3 + '"');
          }
        }, b = function(e3) {
          return !!/^(0x)?[0-9a-f]{40}$/i.test(e3) && (!(!/^(0x|0X)?[0-9a-f]{40}$/.test(e3) && !/^(0x|0X)?[0-9A-F]{40}$/.test(e3)) || y(e3));
        }, y = function(e3) {
          e3 = e3.replace(/^0x/i, "");
          for (var t3 = S(e3.toLowerCase()).replace(/^0x/i, ""), r4 = 0; r4 < 40; r4++)
            if (parseInt(t3[r4], 16) > 7 && e3[r4].toUpperCase() !== e3[r4] || parseInt(t3[r4], 16) <= 7 && e3[r4].toLowerCase() !== e3[r4])
              return false;
          return true;
        }, m = function(e3) {
          var t3 = "";
          e3 = (e3 = (e3 = (e3 = (e3 = c.encode(e3)).replace(/^(?:\u0000)*/, "")).split("").reverse().join("")).replace(/^(?:\u0000)*/, "")).split("").reverse().join("");
          for (var r4 = 0; r4 < e3.length; r4++) {
            var n2 = e3.charCodeAt(r4).toString(16);
            t3 += n2.length < 2 ? "0" + n2 : n2;
          }
          return "0x" + t3;
        }, v = function(e3) {
          var t3 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          if (!e3)
            return e3;
          if ("string" == typeof e3 && !A(e3))
            throw new Error('Given value "' + e3 + '" is not a valid hex string.');
          var r4 = p(e3);
          return t3 && (r4 > Number.MAX_SAFE_INTEGER || r4 < Number.MIN_SAFE_INTEGER) ? BigInt(r4) : r4.toNumber();
        }, g = function(e3) {
          if (null == e3)
            return e3;
          if (!isFinite(e3) && !A(e3))
            throw new Error('Given input "' + e3 + '" is not a number.');
          var t3 = p(e3), r4 = t3.toString(16);
          return t3.lt(new s(0)) ? "-0x" + r4.slice(1) : "0x" + r4;
        }, w = function(e3, t3) {
          if (b(e3))
            return t3 ? "address" : "0x" + e3.toLowerCase().replace(/^0x/i, "");
          if ("boolean" == typeof e3)
            return t3 ? "bool" : e3 ? "0x01" : "0x00";
          if (n.isBuffer(e3))
            return "0x" + e3.toString("hex");
          if ("object" === (0, a.default)(e3) && e3 && !h(e3) && !l(e3))
            return t3 ? "string" : m(JSON.stringify(e3));
          if ("string" == typeof e3) {
            if (0 === e3.indexOf("-0x") || 0 === e3.indexOf("-0X"))
              return t3 ? "int256" : g(e3);
            if (0 === e3.indexOf("0x") || 0 === e3.indexOf("0X"))
              return t3 ? "bytes" : e3;
            if (!isFinite(e3))
              return t3 ? "string" : m(e3);
          }
          return t3 ? e3 < 0 ? "int256" : "uint256" : g(e3);
        }, A = function(e3) {
          return ("string" == typeof e3 || "number" == typeof e3) && /^(-)?0x[0-9a-f]*$/i.test(e3);
        }, k = function(e3) {
          return ("string" == typeof e3 || "number" == typeof e3) && /^(-0x|0x)?[0-9a-f]*$/i.test(e3);
        }, _ = "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470", S = function(e3) {
          l(e3) && (e3 = e3.toString()), A(e3) && /^0x/i.test(e3.toString()) ? e3 = f.toBuffer(e3) : "string" == typeof e3 && (e3 = n.from(e3, "utf-8"));
          var t3 = f.bufferToHex(f.keccak256(e3));
          return t3 === _ ? null : t3;
        };
        S._Hash = f.keccak256;
        var E = function(e3) {
          if ("string" == typeof e3 && e3.includes("0x")) {
            var t3 = e3.toLocaleLowerCase().startsWith("-") ? ["-", e3.slice(3)] : ["", e3.slice(2)], r4 = (0, o.default)(t3, 2), n2 = r4[0], i2 = r4[1];
            return new s(n2 + i2, 16);
          }
          return new s(e3);
        };
        Object.setPrototypeOf(E, s), Object.setPrototypeOf(E.prototype, s.prototype), e2.exports = { BN: E, isBN: l, isBigNumber: h, toBN: p, isAddress: b, isBloom: function(e3) {
          return d.isBloom(e3);
        }, isUserEthereumAddressInBloom: function(e3, t3) {
          return d.isUserEthereumAddressInBloom(e3, t3);
        }, isContractAddressInBloom: function(e3, t3) {
          return d.isContractAddressInBloom(e3, t3);
        }, isTopic: function(e3) {
          return d.isTopic(e3);
        }, isTopicInBloom: function(e3, t3) {
          return d.isTopicInBloom(e3, t3);
        }, isInBloom: function(e3, t3) {
          return d.isInBloom(e3, t3);
        }, checkAddressChecksum: y, utf8ToHex: m, hexToUtf8: function(e3) {
          if (!A(e3))
            throw new Error('The parameter "' + e3 + '" must be a valid HEX string.');
          for (var t3 = "", r4 = 0, n2 = (e3 = (e3 = (e3 = (e3 = (e3 = e3.replace(/^0x/i, "")).replace(/^(?:00)*/, "")).split("").reverse().join("")).replace(/^(?:00)*/, "")).split("").reverse().join("")).length, i2 = 0; i2 < n2; i2 += 2)
            r4 = parseInt(e3.slice(i2, i2 + 2), 16), t3 += String.fromCharCode(r4);
          return c.decode(t3);
        }, hexToNumber: v, hexToNumberString: function(e3) {
          if (!e3)
            return e3;
          if ("string" == typeof e3 && !A(e3))
            throw new Error('Given value "' + e3 + '" is not a valid hex string.');
          return p(e3).toString(10);
        }, numberToHex: g, toHex: w, hexToBytes: function(e3) {
          if (e3 = e3.toString(16), !A(e3))
            throw new Error('Given value "' + e3 + '" is not a valid hex string.');
          e3 = e3.replace(/^0x/i, "");
          for (var t3 = [], r4 = 0; r4 < e3.length; r4 += 2)
            t3.push(parseInt(e3.slice(r4, r4 + 2), 16));
          return t3;
        }, bytesToHex: function(e3) {
          for (var t3 = [], r4 = 0; r4 < e3.length; r4++)
            t3.push((e3[r4] >>> 4).toString(16)), t3.push((15 & e3[r4]).toString(16));
          return "0x" + t3.join("");
        }, isHex: k, isHexStrict: A, stripHexPrefix: function(e3) {
          return 0 !== e3 && k(e3) ? e3.replace(/^(-)?0x/i, "$1") : e3;
        }, leftPad: function(e3, t3, r4) {
          var n2 = /^0x/i.test(e3) || "number" == typeof e3, i2 = t3 - (e3 = e3.toString(16).replace(/^0x/i, "")).length + 1 >= 0 ? t3 - e3.length + 1 : 0;
          return (n2 ? "0x" : "") + new Array(i2).join(r4 || "0") + e3;
        }, rightPad: function(e3, t3, r4) {
          var n2 = /^0x/i.test(e3) || "number" == typeof e3, i2 = t3 - (e3 = e3.toString(16).replace(/^0x/i, "")).length + 1 >= 0 ? t3 - e3.length + 1 : 0;
          return (n2 ? "0x" : "") + e3 + new Array(i2).join(r4 || "0");
        }, toTwosComplement: function(e3) {
          return "0x" + p(e3).toTwos(256).toString(16, 64);
        }, sha3: S, sha3Raw: function(e3) {
          return null === (e3 = S(e3)) ? _ : e3;
        }, toNumber: function(e3) {
          var t3 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          return "number" == typeof e3 ? e3 : v(w(e3), t3);
        } };
      }, 7001: (e2, t2, r3) => {
        "use strict";
        var n = r3(8920).i8, i = r3(606), o = r3(6748), a = r3(473), s = r3(6306), u = r3(2565), c = r3(2463), f = r3(8161), d = function() {
          var e3 = this;
          i.packageInit(this, arguments), this.version = n, this.utils = f, this.eth = new o(this), this.shh = new u(this), this.bzz = new c(this);
          var t3 = this.setProvider;
          this.setProvider = function(r4, n2) {
            return t3.apply(e3, arguments), e3.eth.setRequestManager(e3._requestManager), e3.shh.setRequestManager(e3._requestManager), e3.bzz.setProvider(r4), true;
          };
        };
        d.version = n, d.utils = f, d.modules = { Eth: o, Net: a, Personal: s, Shh: u, Bzz: c }, i.addProviders(d), e2.exports = d;
      }, 9214: () => {
      }, 2361: () => {
      }, 4616: () => {
      }, 8768: (e2) => {
        "use strict";
        e2.exports = function(e3, t2) {
          (null == t2 || t2 > e3.length) && (t2 = e3.length);
          for (var r3 = 0, n = new Array(t2); r3 < t2; r3++)
            n[r3] = e3[r3];
          return n;
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 2338: (e2) => {
        "use strict";
        e2.exports = function(e3) {
          if (Array.isArray(e3))
            return e3;
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 7907: (e2, t2, r3) => {
        "use strict";
        var n = r3(8768);
        e2.exports = function(e3) {
          if (Array.isArray(e3))
            return n(e3);
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 8975: (e2) => {
        "use strict";
        e2.exports = function(e3) {
          if (void 0 === e3)
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          return e3;
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 5698: (e2) => {
        "use strict";
        function t2(e3, t3, r3, n, i, o, a) {
          try {
            var s = e3[o](a), u = s.value;
          } catch (e4) {
            return void r3(e4);
          }
          s.done ? t3(u) : Promise.resolve(u).then(n, i);
        }
        e2.exports = function(e3) {
          return function() {
            var r3 = this, n = arguments;
            return new Promise(function(i, o) {
              var a = e3.apply(r3, n);
              function s(e4) {
                t2(a, i, o, s, u, "next", e4);
              }
              function u(e4) {
                t2(a, i, o, s, u, "throw", e4);
              }
              s(void 0);
            });
          };
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 9721: (e2) => {
        "use strict";
        e2.exports = function(e3, t2) {
          if (!(e3 instanceof t2))
            throw new TypeError("Cannot call a class as a function");
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 4727: (e2, t2, r3) => {
        "use strict";
        var n = r3(8746), i = r3(6923);
        function o(t3, r4, a) {
          return i() ? (e2.exports = o = Reflect.construct.bind(), e2.exports.__esModule = true, e2.exports.default = e2.exports) : (e2.exports = o = function(e3, t4, r5) {
            var i2 = [null];
            i2.push.apply(i2, t4);
            var o2 = new (Function.bind.apply(e3, i2))();
            return r5 && n(o2, r5.prototype), o2;
          }, e2.exports.__esModule = true, e2.exports.default = e2.exports), o.apply(null, arguments);
        }
        e2.exports = o, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 8985: (e2, t2, r3) => {
        "use strict";
        var n = r3(2310);
        function i(e3, t3) {
          for (var r4 = 0; r4 < t3.length; r4++) {
            var i2 = t3[r4];
            i2.enumerable = i2.enumerable || false, i2.configurable = true, "value" in i2 && (i2.writable = true), Object.defineProperty(e3, n(i2.key), i2);
          }
        }
        e2.exports = function(e3, t3, r4) {
          return t3 && i(e3.prototype, t3), r4 && i(e3, r4), Object.defineProperty(e3, "prototype", { writable: false }), e3;
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 775: (e2, t2, r3) => {
        "use strict";
        var n = r3(2310);
        e2.exports = function(e3, t3, r4) {
          return (t3 = n(t3)) in e3 ? Object.defineProperty(e3, t3, { value: r4, enumerable: true, configurable: true, writable: true }) : e3[t3] = r4, e3;
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 119: (e2, t2, r3) => {
        "use strict";
        var n = r3(7460);
        function i() {
          return "undefined" != typeof Reflect && Reflect.get ? (e2.exports = i = Reflect.get.bind(), e2.exports.__esModule = true, e2.exports.default = e2.exports) : (e2.exports = i = function(e3, t3, r4) {
            var i2 = n(e3, t3);
            if (i2) {
              var o = Object.getOwnPropertyDescriptor(i2, t3);
              return o.get ? o.get.call(arguments.length < 3 ? e3 : r4) : o.value;
            }
          }, e2.exports.__esModule = true, e2.exports.default = e2.exports), i.apply(this, arguments);
        }
        e2.exports = i, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 1949: (e2) => {
        "use strict";
        function t2(r3) {
          return e2.exports = t2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(e3) {
            return e3.__proto__ || Object.getPrototypeOf(e3);
          }, e2.exports.__esModule = true, e2.exports.default = e2.exports, t2(r3);
        }
        e2.exports = t2, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 5163: (e2, t2, r3) => {
        "use strict";
        var n = r3(8746);
        e2.exports = function(e3, t3) {
          if ("function" != typeof t3 && null !== t3)
            throw new TypeError("Super expression must either be null or a function");
          e3.prototype = Object.create(t3 && t3.prototype, { constructor: { value: e3, writable: true, configurable: true } }), Object.defineProperty(e3, "prototype", { writable: false }), t3 && n(e3, t3);
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 8847: (e2) => {
        "use strict";
        e2.exports = function(e3) {
          return e3 && e3.__esModule ? e3 : { default: e3 };
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 6923: (e2) => {
        "use strict";
        e2.exports = function() {
          if ("undefined" == typeof Reflect || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if ("function" == typeof Proxy)
            return true;
          try {
            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            })), true;
          } catch (e3) {
            return false;
          }
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 1642: (e2) => {
        "use strict";
        e2.exports = function(e3) {
          if ("undefined" != typeof Symbol && null != e3[Symbol.iterator] || null != e3["@@iterator"])
            return Array.from(e3);
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 1436: (e2) => {
        "use strict";
        e2.exports = function(e3, t2) {
          var r3 = null == e3 ? null : "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
          if (null != r3) {
            var n, i, o, a, s = [], u = true, c = false;
            try {
              if (o = (r3 = r3.call(e3)).next, 0 === t2) {
                if (Object(r3) !== r3)
                  return;
                u = false;
              } else
                for (; !(u = (n = o.call(r3)).done) && (s.push(n.value), s.length !== t2); u = true)
                  ;
            } catch (e4) {
              c = true, i = e4;
            } finally {
              try {
                if (!u && null != r3.return && (a = r3.return(), Object(a) !== a))
                  return;
              } finally {
                if (c)
                  throw i;
              }
            }
            return s;
          }
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 2966: (e2) => {
        "use strict";
        e2.exports = function() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 2344: (e2) => {
        "use strict";
        e2.exports = function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 4650: (e2, t2, r3) => {
        "use strict";
        var n = r3(3355).default, i = r3(8975);
        e2.exports = function(e3, t3) {
          if (t3 && ("object" === n(t3) || "function" == typeof t3))
            return t3;
          if (void 0 !== t3)
            throw new TypeError("Derived constructors may only return object or undefined");
          return i(e3);
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 2028: (e2, t2, r3) => {
        "use strict";
        var n = r3(3355).default;
        function i() {
          e2.exports = i = function() {
            return t3;
          }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
          var t3 = {}, r4 = Object.prototype, o = r4.hasOwnProperty, a = Object.defineProperty || function(e3, t4, r5) {
            e3[t4] = r5.value;
          }, s = "function" == typeof Symbol ? Symbol : {}, u = s.iterator || "@@iterator", c = s.asyncIterator || "@@asyncIterator", f = s.toStringTag || "@@toStringTag";
          function d(e3, t4, r5) {
            return Object.defineProperty(e3, t4, { value: r5, enumerable: true, configurable: true, writable: true }), e3[t4];
          }
          try {
            d({}, "");
          } catch (e3) {
            d = function(e4, t4, r5) {
              return e4[t4] = r5;
            };
          }
          function l(e3, t4, r5, n2) {
            var i2 = t4 && t4.prototype instanceof b ? t4 : b, o2 = Object.create(i2.prototype), s2 = new O(n2 || []);
            return a(o2, "_invoke", { value: S(e3, r5, s2) }), o2;
          }
          function h(e3, t4, r5) {
            try {
              return { type: "normal", arg: e3.call(t4, r5) };
            } catch (e4) {
              return { type: "throw", arg: e4 };
            }
          }
          t3.wrap = l;
          var p = {};
          function b() {
          }
          function y() {
          }
          function m() {
          }
          var v = {};
          d(v, u, function() {
            return this;
          });
          var g = Object.getPrototypeOf, w = g && g(g(B([])));
          w && w !== r4 && o.call(w, u) && (v = w);
          var A = m.prototype = b.prototype = Object.create(v);
          function k(e3) {
            ["next", "throw", "return"].forEach(function(t4) {
              d(e3, t4, function(e4) {
                return this._invoke(t4, e4);
              });
            });
          }
          function _(e3, t4) {
            function r5(i3, a2, s2, u2) {
              var c2 = h(e3[i3], e3, a2);
              if ("throw" !== c2.type) {
                var f2 = c2.arg, d2 = f2.value;
                return d2 && "object" == n(d2) && o.call(d2, "__await") ? t4.resolve(d2.__await).then(function(e4) {
                  r5("next", e4, s2, u2);
                }, function(e4) {
                  r5("throw", e4, s2, u2);
                }) : t4.resolve(d2).then(function(e4) {
                  f2.value = e4, s2(f2);
                }, function(e4) {
                  return r5("throw", e4, s2, u2);
                });
              }
              u2(c2.arg);
            }
            var i2;
            a(this, "_invoke", { value: function(e4, n2) {
              function o2() {
                return new t4(function(t5, i3) {
                  r5(e4, n2, t5, i3);
                });
              }
              return i2 = i2 ? i2.then(o2, o2) : o2();
            } });
          }
          function S(e3, t4, r5) {
            var n2 = "suspendedStart";
            return function(i2, o2) {
              if ("executing" === n2)
                throw new Error("Generator is already running");
              if ("completed" === n2) {
                if ("throw" === i2)
                  throw o2;
                return { value: void 0, done: true };
              }
              for (r5.method = i2, r5.arg = o2; ; ) {
                var a2 = r5.delegate;
                if (a2) {
                  var s2 = E(a2, r5);
                  if (s2) {
                    if (s2 === p)
                      continue;
                    return s2;
                  }
                }
                if ("next" === r5.method)
                  r5.sent = r5._sent = r5.arg;
                else if ("throw" === r5.method) {
                  if ("suspendedStart" === n2)
                    throw n2 = "completed", r5.arg;
                  r5.dispatchException(r5.arg);
                } else
                  "return" === r5.method && r5.abrupt("return", r5.arg);
                n2 = "executing";
                var u2 = h(e3, t4, r5);
                if ("normal" === u2.type) {
                  if (n2 = r5.done ? "completed" : "suspendedYield", u2.arg === p)
                    continue;
                  return { value: u2.arg, done: r5.done };
                }
                "throw" === u2.type && (n2 = "completed", r5.method = "throw", r5.arg = u2.arg);
              }
            };
          }
          function E(e3, t4) {
            var r5 = t4.method, n2 = e3.iterator[r5];
            if (void 0 === n2)
              return t4.delegate = null, "throw" === r5 && e3.iterator.return && (t4.method = "return", t4.arg = void 0, E(e3, t4), "throw" === t4.method) || "return" !== r5 && (t4.method = "throw", t4.arg = new TypeError("The iterator does not provide a '" + r5 + "' method")), p;
            var i2 = h(n2, e3.iterator, t4.arg);
            if ("throw" === i2.type)
              return t4.method = "throw", t4.arg = i2.arg, t4.delegate = null, p;
            var o2 = i2.arg;
            return o2 ? o2.done ? (t4[e3.resultName] = o2.value, t4.next = e3.nextLoc, "return" !== t4.method && (t4.method = "next", t4.arg = void 0), t4.delegate = null, p) : o2 : (t4.method = "throw", t4.arg = new TypeError("iterator result is not an object"), t4.delegate = null, p);
          }
          function x(e3) {
            var t4 = { tryLoc: e3[0] };
            1 in e3 && (t4.catchLoc = e3[1]), 2 in e3 && (t4.finallyLoc = e3[2], t4.afterLoc = e3[3]), this.tryEntries.push(t4);
          }
          function P(e3) {
            var t4 = e3.completion || {};
            t4.type = "normal", delete t4.arg, e3.completion = t4;
          }
          function O(e3) {
            this.tryEntries = [{ tryLoc: "root" }], e3.forEach(x, this), this.reset(true);
          }
          function B(e3) {
            if (e3) {
              var t4 = e3[u];
              if (t4)
                return t4.call(e3);
              if ("function" == typeof e3.next)
                return e3;
              if (!isNaN(e3.length)) {
                var r5 = -1, n2 = function t5() {
                  for (; ++r5 < e3.length; )
                    if (o.call(e3, r5))
                      return t5.value = e3[r5], t5.done = false, t5;
                  return t5.value = void 0, t5.done = true, t5;
                };
                return n2.next = n2;
              }
            }
            return { next: T };
          }
          function T() {
            return { value: void 0, done: true };
          }
          return y.prototype = m, a(A, "constructor", { value: m, configurable: true }), a(m, "constructor", { value: y, configurable: true }), y.displayName = d(m, f, "GeneratorFunction"), t3.isGeneratorFunction = function(e3) {
            var t4 = "function" == typeof e3 && e3.constructor;
            return !!t4 && (t4 === y || "GeneratorFunction" === (t4.displayName || t4.name));
          }, t3.mark = function(e3) {
            return Object.setPrototypeOf ? Object.setPrototypeOf(e3, m) : (e3.__proto__ = m, d(e3, f, "GeneratorFunction")), e3.prototype = Object.create(A), e3;
          }, t3.awrap = function(e3) {
            return { __await: e3 };
          }, k(_.prototype), d(_.prototype, c, function() {
            return this;
          }), t3.AsyncIterator = _, t3.async = function(e3, r5, n2, i2, o2) {
            void 0 === o2 && (o2 = Promise);
            var a2 = new _(l(e3, r5, n2, i2), o2);
            return t3.isGeneratorFunction(r5) ? a2 : a2.next().then(function(e4) {
              return e4.done ? e4.value : a2.next();
            });
          }, k(A), d(A, f, "Generator"), d(A, u, function() {
            return this;
          }), d(A, "toString", function() {
            return "[object Generator]";
          }), t3.keys = function(e3) {
            var t4 = Object(e3), r5 = [];
            for (var n2 in t4)
              r5.push(n2);
            return r5.reverse(), function e4() {
              for (; r5.length; ) {
                var n3 = r5.pop();
                if (n3 in t4)
                  return e4.value = n3, e4.done = false, e4;
              }
              return e4.done = true, e4;
            };
          }, t3.values = B, O.prototype = { constructor: O, reset: function(e3) {
            if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(P), !e3)
              for (var t4 in this)
                "t" === t4.charAt(0) && o.call(this, t4) && !isNaN(+t4.slice(1)) && (this[t4] = void 0);
          }, stop: function() {
            this.done = true;
            var e3 = this.tryEntries[0].completion;
            if ("throw" === e3.type)
              throw e3.arg;
            return this.rval;
          }, dispatchException: function(e3) {
            if (this.done)
              throw e3;
            var t4 = this;
            function r5(r6, n3) {
              return a2.type = "throw", a2.arg = e3, t4.next = r6, n3 && (t4.method = "next", t4.arg = void 0), !!n3;
            }
            for (var n2 = this.tryEntries.length - 1; n2 >= 0; --n2) {
              var i2 = this.tryEntries[n2], a2 = i2.completion;
              if ("root" === i2.tryLoc)
                return r5("end");
              if (i2.tryLoc <= this.prev) {
                var s2 = o.call(i2, "catchLoc"), u2 = o.call(i2, "finallyLoc");
                if (s2 && u2) {
                  if (this.prev < i2.catchLoc)
                    return r5(i2.catchLoc, true);
                  if (this.prev < i2.finallyLoc)
                    return r5(i2.finallyLoc);
                } else if (s2) {
                  if (this.prev < i2.catchLoc)
                    return r5(i2.catchLoc, true);
                } else {
                  if (!u2)
                    throw new Error("try statement without catch or finally");
                  if (this.prev < i2.finallyLoc)
                    return r5(i2.finallyLoc);
                }
              }
            }
          }, abrupt: function(e3, t4) {
            for (var r5 = this.tryEntries.length - 1; r5 >= 0; --r5) {
              var n2 = this.tryEntries[r5];
              if (n2.tryLoc <= this.prev && o.call(n2, "finallyLoc") && this.prev < n2.finallyLoc) {
                var i2 = n2;
                break;
              }
            }
            i2 && ("break" === e3 || "continue" === e3) && i2.tryLoc <= t4 && t4 <= i2.finallyLoc && (i2 = null);
            var a2 = i2 ? i2.completion : {};
            return a2.type = e3, a2.arg = t4, i2 ? (this.method = "next", this.next = i2.finallyLoc, p) : this.complete(a2);
          }, complete: function(e3, t4) {
            if ("throw" === e3.type)
              throw e3.arg;
            return "break" === e3.type || "continue" === e3.type ? this.next = e3.arg : "return" === e3.type ? (this.rval = this.arg = e3.arg, this.method = "return", this.next = "end") : "normal" === e3.type && t4 && (this.next = t4), p;
          }, finish: function(e3) {
            for (var t4 = this.tryEntries.length - 1; t4 >= 0; --t4) {
              var r5 = this.tryEntries[t4];
              if (r5.finallyLoc === e3)
                return this.complete(r5.completion, r5.afterLoc), P(r5), p;
            }
          }, catch: function(e3) {
            for (var t4 = this.tryEntries.length - 1; t4 >= 0; --t4) {
              var r5 = this.tryEntries[t4];
              if (r5.tryLoc === e3) {
                var n2 = r5.completion;
                if ("throw" === n2.type) {
                  var i2 = n2.arg;
                  P(r5);
                }
                return i2;
              }
            }
            throw new Error("illegal catch attempt");
          }, delegateYield: function(e3, t4, r5) {
            return this.delegate = { iterator: B(e3), resultName: t4, nextLoc: r5 }, "next" === this.method && (this.arg = void 0), p;
          } }, t3;
        }
        e2.exports = i, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 8746: (e2) => {
        "use strict";
        function t2(r3, n) {
          return e2.exports = t2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e3, t3) {
            return e3.__proto__ = t3, e3;
          }, e2.exports.__esModule = true, e2.exports.default = e2.exports, t2(r3, n);
        }
        e2.exports = t2, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 4519: (e2, t2, r3) => {
        "use strict";
        var n = r3(2338), i = r3(1436), o = r3(6906), a = r3(2966);
        e2.exports = function(e3, t3) {
          return n(e3) || i(e3, t3) || o(e3, t3) || a();
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 7460: (e2, t2, r3) => {
        "use strict";
        var n = r3(1949);
        e2.exports = function(e3, t3) {
          for (; !Object.prototype.hasOwnProperty.call(e3, t3) && null !== (e3 = n(e3)); )
            ;
          return e3;
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 3106: (e2, t2, r3) => {
        "use strict";
        var n = r3(7907), i = r3(1642), o = r3(6906), a = r3(2344);
        e2.exports = function(e3) {
          return n(e3) || i(e3) || o(e3) || a();
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 9662: (e2, t2, r3) => {
        "use strict";
        var n = r3(3355).default;
        e2.exports = function(e3, t3) {
          if ("object" !== n(e3) || null === e3)
            return e3;
          var r4 = e3[Symbol.toPrimitive];
          if (void 0 !== r4) {
            var i = r4.call(e3, t3 || "default");
            if ("object" !== n(i))
              return i;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return ("string" === t3 ? String : Number)(e3);
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 2310: (e2, t2, r3) => {
        "use strict";
        var n = r3(3355).default, i = r3(9662);
        e2.exports = function(e3) {
          var t3 = i(e3, "string");
          return "symbol" === n(t3) ? t3 : String(t3);
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 3355: (e2) => {
        "use strict";
        function t2(r3) {
          return e2.exports = t2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
            return typeof e3;
          } : function(e3) {
            return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
          }, e2.exports.__esModule = true, e2.exports.default = e2.exports, t2(r3);
        }
        e2.exports = t2, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 6906: (e2, t2, r3) => {
        "use strict";
        var n = r3(8768);
        e2.exports = function(e3, t3) {
          if (e3) {
            if ("string" == typeof e3)
              return n(e3, t3);
            var r4 = Object.prototype.toString.call(e3).slice(8, -1);
            return "Object" === r4 && e3.constructor && (r4 = e3.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(e3) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? n(e3, t3) : void 0;
          }
        }, e2.exports.__esModule = true, e2.exports.default = e2.exports;
      }, 2247: (e2, t2, r3) => {
        "use strict";
        var n = r3(8847)(r3(3355)), i = r3(2028)();
        e2.exports = i;
        try {
          regeneratorRuntime = i;
        } catch (e3) {
          "object" === ("undefined" == typeof globalThis ? "undefined" : (0, n.default)(globalThis)) ? globalThis.regeneratorRuntime = i : Function("r", "regeneratorRuntime = r")(i);
        }
      }, 3604: (e2, t2, r3) => {
        "use strict";
        var n = ["BigInt64Array", "BigUint64Array", "Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray"], i = "undefined" == typeof globalThis ? r3.g : globalThis;
        e2.exports = function() {
          for (var e3 = [], t3 = 0; t3 < n.length; t3++)
            "function" == typeof i[n[t3]] && (e3[e3.length] = n[t3]);
          return e3;
        };
      }, 7687: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"goerli","chainId":5,"networkId":5,"defaultHardfork":"istanbul","consensus":{"type":"poa","algorithm":"clique","clique":{"period":15,"epoch":30000}},"comment":"Cross-client PoA test network","url":"https://github.com/goerli/testnet","genesis":{"hash":"0xbf7e331f7f7c1dd2e05159666b3bf8bc7a8a3a9eb1d518969eab529dd9b88c1a","timestamp":"0x5c51a607","gasLimit":10485760,"difficulty":1,"nonce":"0x0000000000000000","extraData":"0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","stateRoot":"0x5d6cded585e73c4e322c30c2f782a336316f17dd85a4863b9d838d2d4b8b3008"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0xa3f5ab08"},{"name":"homestead","block":0,"forkHash":"0xa3f5ab08"},{"name":"tangerineWhistle","block":0,"forkHash":"0xa3f5ab08"},{"name":"spuriousDragon","block":0,"forkHash":"0xa3f5ab08"},{"name":"byzantium","block":0,"forkHash":"0xa3f5ab08"},{"name":"constantinople","block":0,"forkHash":"0xa3f5ab08"},{"name":"petersburg","block":0,"forkHash":"0xa3f5ab08"},{"name":"istanbul","block":1561651,"forkHash":"0xc25efa5c"},{"name":"berlin","block":4460644,"forkHash":"0x757a1c47"},{"name":"london","block":5062605,"forkHash":"0xb8c6299d"},{"name":"merge","block":null,"forkash":null},{"name":"shanghai","block":null,"forkash":null}],"bootstrapNodes":[{"ip":"51.141.78.53","port":30303,"id":"011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a","location":"","comment":"Upstream bootnode 1"},{"ip":"13.93.54.137","port":30303,"id":"176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b","location":"","comment":"Upstream bootnode 2"},{"ip":"94.237.54.114","port":30313,"id":"46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291","location":"","comment":"Upstream bootnode 3"},{"ip":"18.218.250.66","port":30313,"id":"b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949","location":"","comment":"Upstream bootnode 4"},{"ip":"3.11.147.67","port":30303,"id":"a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91","location":"","comment":"Ethereum Foundation bootnode"},{"ip":"51.15.116.226","port":30303,"id":"a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd","location":"","comment":"Goerli Initiative bootnode"},{"ip":"51.15.119.157","port":30303,"id":"807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33","location":"","comment":"Goerli Initiative bootnode"},{"ip":"51.15.119.157","port":40303,"id":"a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd","location":"","comment":"Goerli Initiative bootnode"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net"]}');
      }, 7098: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"kovan","chainId":42,"networkId":42,"defaultHardfork":"istanbul","consensus":{"type":"poa","algorithm":"aura","aura":{}},"comment":"Parity PoA test network","url":"https://kovan-testnet.github.io/website/","genesis":{"hash":"0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9","timestamp":null,"gasLimit":6000000,"difficulty":131072,"nonce":"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","extraData":"0x","stateRoot":"0x2480155b48a1cea17d67dbfdfaafe821c1d19cdd478c5358e8ec56dec24502b2"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0x010ffe56"},{"name":"homestead","block":0,"forkHash":"0x010ffe56"},{"name":"tangerineWhistle","block":0,"forkHash":"0x010ffe56"},{"name":"spuriousDragon","block":0,"forkHash":"0x010ffe56"},{"name":"byzantium","block":5067000,"forkHash":"0x7f83c620"},{"name":"constantinople","block":9200000,"forkHash":"0xa94e3dc4"},{"name":"petersburg","block":10255201,"forkHash":"0x186874aa"},{"name":"istanbul","block":14111141,"forkHash":"0x7f6599a6"},{"name":"berlin","block":null,"forkHash":null},{"name":"london","block":null,"forkHash":null},{"name":"merge","block":null,"forkash":null},{"name":"shanghai","block":null,"forkash":null}],"bootstrapNodes":[{"ip":"116.203.116.241","port":30303,"id":"16898006ba2cd4fa8bf9a3dfe32684c178fa861df144bfc21fe800dc4838a03e342056951fa9fd533dcb0be1219e306106442ff2cf1f7e9f8faa5f2fc1a3aa45","location":"","comment":"1"},{"ip":"3.217.96.11","port":30303,"id":"2909846f78c37510cc0e306f185323b83bb2209e5ff4fdd279d93c60e3f365e3c6e62ad1d2133ff11f9fd6d23ad9c3dad73bb974d53a22f7d1ac5b7dea79d0b0","location":"","comment":"2"},{"ip":"108.61.170.124","port":30303,"id":"740e1c8ea64e71762c71a463a04e2046070a0c9394fcab5891d41301dc473c0cff00ebab5a9bc87fbcb610ab98ac18225ff897bc8b7b38def5975d5ceb0a7d7c","location":"","comment":"3"},{"ip":"157.230.31.163","port":30303,"id":"2909846f78c37510cc0e306f185323b83bb2209e5ff4fdd279d93c60e3f365e3c6e62ad1d2133ff11f9fd6d23ad9c3dad73bb974d53a22f7d1ac5b7dea79d0b0","location":"","comment":"4"}]}');
      }, 7295: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"mainnet","chainId":1,"networkId":1,"defaultHardfork":"istanbul","consensus":{"type":"pow","algorithm":"ethash","ethash":{}},"comment":"The Ethereum main chain","url":"https://ethstats.net/","genesis":{"hash":"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3","timestamp":null,"gasLimit":5000,"difficulty":17179869184,"nonce":"0x0000000000000042","extraData":"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa","stateRoot":"0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0xfc64ec04"},{"name":"homestead","block":1150000,"forkHash":"0x97c2c34c"},{"name":"dao","block":1920000,"forkHash":"0x91d1f948"},{"name":"tangerineWhistle","block":2463000,"forkHash":"0x7a64da13"},{"name":"spuriousDragon","block":2675000,"forkHash":"0x3edd5b10"},{"name":"byzantium","block":4370000,"forkHash":"0xa00bc324"},{"name":"constantinople","block":7280000,"forkHash":"0x668db0af"},{"name":"petersburg","block":7280000,"forkHash":"0x668db0af"},{"name":"istanbul","block":9069000,"forkHash":"0x879d6e30"},{"name":"muirGlacier","block":9200000,"forkHash":"0xe029e991"},{"name":"berlin","block":12244000,"forkHash":"0x0eb440f6"},{"name":"london","block":12965000,"forkHash":"0xb715077d"},{"name":"merge","block":null,"forkash":null},{"name":"shanghai","block":null,"forkash":null}],"bootstrapNodes":[{"ip":"18.138.108.67","port":30303,"id":"d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666","location":"ap-southeast-1-001","comment":"bootnode-aws-ap-southeast-1-001"},{"ip":"3.209.45.79","port":30303,"id":"22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de","location":"us-east-1-001","comment":"bootnode-aws-us-east-1-001"},{"ip":"34.255.23.113","port":30303,"id":"ca6de62fce278f96aea6ec5a2daadb877e51651247cb96ee310a318def462913b653963c155a0ef6c7d50048bba6e6cea881130857413d9f50a621546b590758","location":"eu-west-1-001","comment":"bootnode-aws-eu-west-1-001"},{"ip":"35.158.244.151","port":30303,"id":"279944d8dcd428dffaa7436f25ca0ca43ae19e7bcf94a8fb7d1641651f92d121e972ac2e8f381414b80cc8e5555811c2ec6e1a99bb009b3f53c4c69923e11bd8","location":"eu-central-1-001","comment":"bootnode-aws-eu-central-1-001"},{"ip":"52.187.207.27","port":30303,"id":"8499da03c47d637b20eee24eec3c356c9a2e6148d6fe25ca195c7949ab8ec2c03e3556126b0d7ed644675e78c4318b08691b7b57de10e5f0d40d05b09238fa0a","location":"australiaeast-001","comment":"bootnode-azure-australiaeast-001"},{"ip":"191.234.162.198","port":30303,"id":"103858bdb88756c71f15e9b5e09b56dc1be52f0a5021d46301dbbfb7e130029cc9d0d6f73f693bc29b665770fff7da4d34f3c6379fe12721b5d7a0bcb5ca1fc1","location":"brazilsouth-001","comment":"bootnode-azure-brazilsouth-001"},{"ip":"52.231.165.108","port":30303,"id":"715171f50508aba88aecd1250af392a45a330af91d7b90701c436b618c86aaa1589c9184561907bebbb56439b8f8787bc01f49a7c77276c58c1b09822d75e8e8","location":"koreasouth-001","comment":"bootnode-azure-koreasouth-001"},{"ip":"104.42.217.25","port":30303,"id":"5d6d7cd20d6da4bb83a1d28cadb5d409b64edf314c0335df658c1a54e32c7c4a7ab7823d57c39b6a757556e68ff1df17c748b698544a55cb488b52479a92b60f","location":"westus-001","comment":"bootnode-azure-westus-001"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net"]}');
      }, 439: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"rinkeby","chainId":4,"networkId":4,"defaultHardfork":"istanbul","consensus":{"type":"poa","algorithm":"clique","clique":{"period":15,"epoch":30000}},"comment":"PoA test network","url":"https://www.rinkeby.io","genesis":{"hash":"0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177","timestamp":"0x58ee40ba","gasLimit":4700000,"difficulty":1,"nonce":"0x0000000000000000","extraData":"0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","stateRoot":"0x53580584816f617295ea26c0e17641e0120cab2f0a8ffb53a866fd53aa8e8c2d"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0x3b8e0691"},{"name":"homestead","block":1,"forkHash":"0x60949295"},{"name":"tangerineWhistle","block":2,"forkHash":"0x8bde40dd"},{"name":"spuriousDragon","block":3,"forkHash":"0xcb3a64bb"},{"name":"byzantium","block":1035301,"forkHash":"0x8d748b57"},{"name":"constantinople","block":3660663,"forkHash":"0xe49cab14"},{"name":"petersburg","block":4321234,"forkHash":"0xafec6b27"},{"name":"istanbul","block":5435345,"forkHash":"0xcbdb8838"},{"name":"berlin","block":8290928,"forkHash":"0x6910c8bd"},{"name":"london","block":8897988,"forkHash":"0x8e29f2f3"},{"name":"merge","block":null,"forkash":null},{"name":"shanghai","block":null,"forkash":null}],"bootstrapNodes":[{"ip":"52.169.42.101","port":30303,"id":"a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf","location":"","comment":"IE"},{"ip":"52.3.158.184","port":30303,"id":"343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8","location":"","comment":"INFURA"},{"ip":"159.89.28.211","port":30303,"id":"b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6","location":"","comment":"AKASHA"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.rinkeby.ethdisco.net"]}');
      }, 1227: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"ropsten","chainId":3,"networkId":3,"defaultHardfork":"istanbul","consensus":{"type":"pow","algorithm":"ethash","ethash":{}},"comment":"PoW test network","url":"https://github.com/ethereum/ropsten","genesis":{"hash":"0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d","timestamp":null,"gasLimit":16777216,"difficulty":1048576,"nonce":"0x0000000000000042","extraData":"0x3535353535353535353535353535353535353535353535353535353535353535","stateRoot":"0x217b0bbcfb72e2d57e28f33cb361b9983513177755dc3f33ce3e7022ed62b77b"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0x30c7ddbc"},{"name":"homestead","block":0,"forkHash":"0x30c7ddbc"},{"name":"tangerineWhistle","block":0,"forkHash":"0x30c7ddbc"},{"name":"spuriousDragon","block":10,"forkHash":"0x63760190"},{"name":"byzantium","block":1700000,"forkHash":"0x3ea159c7"},{"name":"constantinople","block":4230000,"forkHash":"0x97b544f3"},{"name":"petersburg","block":4939394,"forkHash":"0xd6e2149b"},{"name":"istanbul","block":6485846,"forkHash":"0x4bc66396"},{"name":"muirGlacier","block":7117117,"forkHash":"0x6727ef90"},{"name":"berlin","block":9812189,"forkHash":"0xa157d377"},{"name":"london","block":10499401,"forkHash":"0x7119b6b3"},{"name":"merge","block":null,"forkash":null},{"name":"shanghai","block":null,"forkash":null}],"bootstrapNodes":[{"ip":"52.176.7.10","port":30303,"id":"30b7ab30a01c124a6cceca36863ece12c4f5fa68e3ba9b0b51407ccc002eeed3b3102d20a88f1c1d3c3154e2449317b8ef95090e77b312d5cc39354f86d5d606","location":"","comment":"US-Azure geth"},{"ip":"52.176.100.77","port":30303,"id":"865a63255b3bb68023b6bffd5095118fcc13e79dcf014fe4e47e065c350c7cc72af2e53eff895f11ba1bbb6a2b33271c1116ee870f266618eadfc2e78aa7349c","location":"","comment":"US-Azure parity"},{"ip":"52.232.243.152","port":30303,"id":"6332792c4a00e3e4ee0926ed89e0d27ef985424d97b6a45bf0f23e51f0dcb5e66b875777506458aea7af6f9e4ffb69f43f3778ee73c81ed9d34c51c4b16b0b0f","location":"","comment":"Parity"},{"ip":"192.81.208.223","port":30303,"id":"94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f09","location":"","comment":"@gpip"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.ropsten.ethdisco.net"]}');
      }, 7523: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"EIP-1559","number":1559,"comment":"Fee market change for ETH 1.0 chain","url":"https://eips.ethereum.org/EIPS/eip-1559","status":"Review","minimumHardfork":"berlin","requiredEIPs":[2930],"gasConfig":{"baseFeeMaxChangeDenominator":{"v":8,"d":"Maximum base fee change denominator"},"elasticityMultiplier":{"v":2,"d":"Maximum block gas target elasticity"},"initialBaseFee":{"v":1000000000,"d":"Initial base fee on first EIP1559 block"}},"gasPrices":{},"vm":{},"pow":{}}');
      }, 3339: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"EIP-2315","number":2315,"comment":"Simple subroutines for the EVM","url":"https://eips.ethereum.org/EIPS/eip-2315","status":"Draft","minimumHardfork":"istanbul","gasConfig":{},"gasPrices":{"beginsub":{"v":2,"d":"Base fee of the BEGINSUB opcode"},"returnsub":{"v":5,"d":"Base fee of the RETURNSUB opcode"},"jumpsub":{"v":10,"d":"Base fee of the JUMPSUB opcode"}},"vm":{},"pow":{}}');
      }, 6769: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"EIP-2537","number":2537,"comment":"BLS12-381 precompiles","url":"https://eips.ethereum.org/EIPS/eip-2537","status":"Draft","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{"Bls12381G1AddGas":{"v":600,"d":"Gas cost of a single BLS12-381 G1 addition precompile-call"},"Bls12381G1MulGas":{"v":12000,"d":"Gas cost of a single BLS12-381 G1 multiplication precompile-call"},"Bls12381G2AddGas":{"v":4500,"d":"Gas cost of a single BLS12-381 G2 addition precompile-call"},"Bls12381G2MulGas":{"v":55000,"d":"Gas cost of a single BLS12-381 G2 multiplication precompile-call"},"Bls12381PairingBaseGas":{"v":115000,"d":"Base gas cost of BLS12-381 pairing check"},"Bls12381PairingPerPairGas":{"v":23000,"d":"Per-pair gas cost of BLS12-381 pairing check"},"Bls12381MapG1Gas":{"v":5500,"d":"Gas cost of BLS12-381 map field element to G1"},"Bls12381MapG2Gas":{"v":110000,"d":"Gas cost of BLS12-381 map field element to G2"},"Bls12381MultiExpGasDiscount":{"v":[[1,1200],[2,888],[3,764],[4,641],[5,594],[6,547],[7,500],[8,453],[9,438],[10,423],[11,408],[12,394],[13,379],[14,364],[15,349],[16,334],[17,330],[18,326],[19,322],[20,318],[21,314],[22,310],[23,306],[24,302],[25,298],[26,294],[27,289],[28,285],[29,281],[30,277],[31,273],[32,269],[33,268],[34,266],[35,265],[36,263],[37,262],[38,260],[39,259],[40,257],[41,256],[42,254],[43,253],[44,251],[45,250],[46,248],[47,247],[48,245],[49,244],[50,242],[51,241],[52,239],[53,238],[54,236],[55,235],[56,233],[57,232],[58,231],[59,229],[60,228],[61,226],[62,225],[63,223],[64,222],[65,221],[66,220],[67,219],[68,219],[69,218],[70,217],[71,216],[72,216],[73,215],[74,214],[75,213],[76,213],[77,212],[78,211],[79,211],[80,210],[81,209],[82,208],[83,208],[84,207],[85,206],[86,205],[87,205],[88,204],[89,203],[90,202],[91,202],[92,201],[93,200],[94,199],[95,199],[96,198],[97,197],[98,196],[99,196],[100,195],[101,194],[102,193],[103,193],[104,192],[105,191],[106,191],[107,190],[108,189],[109,188],[110,188],[111,187],[112,186],[113,185],[114,185],[115,184],[116,183],[117,182],[118,182],[119,181],[120,180],[121,179],[122,179],[123,178],[124,177],[125,176],[126,176],[127,175],[128,174]],"d":"Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair"}},"vm":{},"pow":{}}');
      }, 7897: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"EIP-2565","number":2565,"comment":"ModExp gas cost","url":"https://eips.ethereum.org/EIPS/eip-2565","status":"Last call","minimumHardfork":"byzantium","gasConfig":{},"gasPrices":{"modexpGquaddivisor":{"v":3,"d":"Gquaddivisor from modexp precompile for gas calculation"}},"vm":{},"pow":{}}');
      }, 2170: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"EIP-2718","comment":"Typed Transaction Envelope","url":"https://eips.ethereum.org/EIPS/eip-2718","status":"Draft","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}');
      }, 8436: (e2) => {
        "use strict";
        e2.exports = JSON.parse(`{"name":"EIP-2929","comment":"Gas cost increases for state access opcodes","url":"https://eips.ethereum.org/EIPS/eip-2929","status":"Draft","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{"coldsload":{"v":2100,"d":"Gas cost of the first read of storage from a given location (per transaction)"},"coldaccountaccess":{"v":2600,"d":"Gas cost of the first read of a given address (per transaction)"},"warmstorageread":{"v":100,"d":"Gas cost of reading storage locations which have already loaded 'cold'"},"sstoreCleanGasEIP2200":{"v":2900,"d":"Once per SSTORE operation from clean non-zero to something else"},"sstoreNoopGasEIP2200":{"v":100,"d":"Once per SSTORE operation if the value doesn't change"},"sstoreDirtyGasEIP2200":{"v":100,"d":"Once per SSTORE operation if a dirty value is changed"},"sstoreInitRefundEIP2200":{"v":19900,"d":"Once per SSTORE operation for resetting to the original zero value"},"sstoreCleanRefundEIP2200":{"v":4900,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"call":{"v":0,"d":"Base fee of the CALL opcode"},"callcode":{"v":0,"d":"Base fee of the CALLCODE opcode"},"delegatecall":{"v":0,"d":"Base fee of the DELEGATECALL opcode"},"staticcall":{"v":0,"d":"Base fee of the STATICCALL opcode"},"balance":{"v":0,"d":"Base fee of the BALANCE opcode"},"extcodesize":{"v":0,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":0,"d":"Base fee of the EXTCODECOPY opcode"},"extcodehash":{"v":0,"d":"Base fee of the EXTCODEHASH opcode"},"sload":{"v":0,"d":"Base fee of the SLOAD opcode"},"sstore":{"v":0,"d":"Base fee of the SSTORE opcode"}},"vm":{},"pow":{}}`);
      }, 6213: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"EIP-2930","comment":"Optional access lists","url":"https://eips.ethereum.org/EIPS/eip-2930","status":"Draft","minimumHardfork":"istanbul","requiredEIPs":[2718,2929],"gasConfig":{},"gasPrices":{"accessListStorageKeyCost":{"v":1900,"d":"Gas cost per storage key in an Access List transaction"},"accessListAddressCost":{"v":2400,"d":"Gas cost per storage key in an Access List transaction"}},"vm":{},"pow":{}}');
      }, 5491: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"EIP-3198","number":3198,"comment":"BASEFEE opcode","url":"https://eips.ethereum.org/EIPS/eip-3198","status":"Review","minimumHardfork":"london","gasConfig":{},"gasPrices":{"basefee":{"v":2,"d":"Gas cost of the BASEFEE opcode"}},"vm":{},"pow":{}}');
      }, 7852: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"EIP-3529","comment":"Reduction in refunds","url":"https://eips.ethereum.org/EIPS/eip-3529","status":"Draft","minimumHardfork":"berlin","requiredEIPs":[2929],"gasConfig":{"maxRefundQuotient":{"v":5,"d":"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"}},"gasPrices":{"selfdestructRefund":{"v":0,"d":"Refunded following a selfdestruct operation"},"sstoreClearRefundEIP2200":{"v":4800,"d":"Once per SSTORE operation for clearing an originally existing storage slot"}},"vm":{},"pow":{}}');
      }, 1871: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"EIP-3541","comment":"Reject new contracts starting with the 0xEF byte","url":"https://eips.ethereum.org/EIPS/eip-3541","status":"Draft","minimumHardfork":"berlin","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}');
      }, 7225: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"EIP-3554","comment":"Reduction in refunds","url":"Difficulty Bomb Delay to December 1st 2021","status":"Draft","minimumHardfork":"muirGlacier","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":9500000,"d":"the amount of blocks to delay the difficulty bomb with"}}}');
      }, 8571: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"EIP-3675","number":3675,"comment":"Upgrade consensus to Proof-of-Stake","url":"https://eips.ethereum.org/EIPS/eip-3675","status":"Draft","minimumHardfork":"london","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}');
      }, 15: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"berlin","comment":"HF targeted for July 2020 following the Muir Glacier HF","url":"https://eips.ethereum.org/EIPS/eip-2070","status":"Draft","eips":[2565,2929,2718,2930]}');
      }, 6985: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"byzantium","comment":"Hardfork with new precompiles, instructions and other protocol changes","url":"https://eips.ethereum.org/EIPS/eip-609","status":"Final","gasConfig":{},"gasPrices":{"modexpGquaddivisor":{"v":20,"d":"Gquaddivisor from modexp precompile for gas calculation"},"ecAdd":{"v":500,"d":"Gas costs for curve addition precompile"},"ecMul":{"v":40000,"d":"Gas costs for curve multiplication precompile"},"ecPairing":{"v":100000,"d":"Base gas costs for curve pairing precompile"},"ecPairingWord":{"v":80000,"d":"Gas costs regarding curve pairing precompile input length"},"revert":{"v":0,"d":"Base fee of the REVERT opcode"},"staticcall":{"v":700,"d":"Base fee of the STATICCALL opcode"},"returndatasize":{"v":2,"d":"Base fee of the RETURNDATASIZE opcode"},"returndatacopy":{"v":3,"d":"Base fee of the RETURNDATACOPY opcode"}},"vm":{},"pow":{"minerReward":{"v":"3000000000000000000","d":"the amount a miner get rewarded for mining a block"},"difficultyBombDelay":{"v":3000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}');
      }, 114: (e2) => {
        "use strict";
        e2.exports = JSON.parse(`{"name":"chainstart","comment":"Start of the Ethereum main chain","url":"","status":"","gasConfig":{"minGasLimit":{"v":5000,"d":"Minimum the gas limit may ever be"},"gasLimitBoundDivisor":{"v":1024,"d":"The bound divisor of the gas limit, used in update calculations"},"maxRefundQuotient":{"v":2,"d":"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"}},"gasPrices":{"base":{"v":2,"d":"Gas base cost, used e.g. for ChainID opcode (Istanbul)"},"tierStep":{"v":[0,2,3,5,8,10,20],"d":"Once per operation, for a selection of them"},"exp":{"v":10,"d":"Base fee of the EXP opcode"},"expByte":{"v":10,"d":"Times ceil(log256(exponent)) for the EXP instruction"},"sha3":{"v":30,"d":"Base fee of the SHA3 opcode"},"sha3Word":{"v":6,"d":"Once per word of the SHA3 operation's data"},"sload":{"v":50,"d":"Base fee of the SLOAD opcode"},"sstoreSet":{"v":20000,"d":"Once per SSTORE operation if the zeroness changes from zero"},"sstoreReset":{"v":5000,"d":"Once per SSTORE operation if the zeroness does not change from zero"},"sstoreRefund":{"v":15000,"d":"Once per SSTORE operation if the zeroness changes to zero"},"jumpdest":{"v":1,"d":"Base fee of the JUMPDEST opcode"},"log":{"v":375,"d":"Base fee of the LOG opcode"},"logData":{"v":8,"d":"Per byte in a LOG* operation's data"},"logTopic":{"v":375,"d":"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"},"create":{"v":32000,"d":"Base fee of the CREATE opcode"},"call":{"v":40,"d":"Base fee of the CALL opcode"},"callStipend":{"v":2300,"d":"Free gas given at beginning of call"},"callValueTransfer":{"v":9000,"d":"Paid for CALL when the value transfor is non-zero"},"callNewAccount":{"v":25000,"d":"Paid for CALL when the destination address didn't exist prior"},"selfdestructRefund":{"v":24000,"d":"Refunded following a selfdestruct operation"},"memory":{"v":3,"d":"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"},"quadCoeffDiv":{"v":512,"d":"Divisor for the quadratic particle of the memory cost equation"},"createData":{"v":200,"d":""},"tx":{"v":21000,"d":"Per transaction. NOTE: Not payable on data of calls between transactions"},"txCreation":{"v":32000,"d":"The cost of creating a contract via tx"},"txDataZero":{"v":4,"d":"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"},"txDataNonZero":{"v":68,"d":"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"},"copy":{"v":3,"d":"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"},"ecRecover":{"v":3000,"d":""},"sha256":{"v":60,"d":""},"sha256Word":{"v":12,"d":""},"ripemd160":{"v":600,"d":""},"ripemd160Word":{"v":120,"d":""},"identity":{"v":15,"d":""},"identityWord":{"v":3,"d":""},"stop":{"v":0,"d":"Base fee of the STOP opcode"},"add":{"v":3,"d":"Base fee of the ADD opcode"},"mul":{"v":5,"d":"Base fee of the MUL opcode"},"sub":{"v":3,"d":"Base fee of the SUB opcode"},"div":{"v":5,"d":"Base fee of the DIV opcode"},"sdiv":{"v":5,"d":"Base fee of the SDIV opcode"},"mod":{"v":5,"d":"Base fee of the MOD opcode"},"smod":{"v":5,"d":"Base fee of the SMOD opcode"},"addmod":{"v":8,"d":"Base fee of the ADDMOD opcode"},"mulmod":{"v":8,"d":"Base fee of the MULMOD opcode"},"signextend":{"v":5,"d":"Base fee of the SIGNEXTEND opcode"},"lt":{"v":3,"d":"Base fee of the LT opcode"},"gt":{"v":3,"d":"Base fee of the GT opcode"},"slt":{"v":3,"d":"Base fee of the SLT opcode"},"sgt":{"v":3,"d":"Base fee of the SGT opcode"},"eq":{"v":3,"d":"Base fee of the EQ opcode"},"iszero":{"v":3,"d":"Base fee of the ISZERO opcode"},"and":{"v":3,"d":"Base fee of the AND opcode"},"or":{"v":3,"d":"Base fee of the OR opcode"},"xor":{"v":3,"d":"Base fee of the XOR opcode"},"not":{"v":3,"d":"Base fee of the NOT opcode"},"byte":{"v":3,"d":"Base fee of the BYTE opcode"},"address":{"v":2,"d":"Base fee of the ADDRESS opcode"},"balance":{"v":20,"d":"Base fee of the BALANCE opcode"},"origin":{"v":2,"d":"Base fee of the ORIGIN opcode"},"caller":{"v":2,"d":"Base fee of the CALLER opcode"},"callvalue":{"v":2,"d":"Base fee of the CALLVALUE opcode"},"calldataload":{"v":3,"d":"Base fee of the CALLDATALOAD opcode"},"calldatasize":{"v":2,"d":"Base fee of the CALLDATASIZE opcode"},"calldatacopy":{"v":3,"d":"Base fee of the CALLDATACOPY opcode"},"codesize":{"v":2,"d":"Base fee of the CODESIZE opcode"},"codecopy":{"v":3,"d":"Base fee of the CODECOPY opcode"},"gasprice":{"v":2,"d":"Base fee of the GASPRICE opcode"},"extcodesize":{"v":20,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":20,"d":"Base fee of the EXTCODECOPY opcode"},"blockhash":{"v":20,"d":"Base fee of the BLOCKHASH opcode"},"coinbase":{"v":2,"d":"Base fee of the COINBASE opcode"},"timestamp":{"v":2,"d":"Base fee of the TIMESTAMP opcode"},"number":{"v":2,"d":"Base fee of the NUMBER opcode"},"difficulty":{"v":2,"d":"Base fee of the DIFFICULTY opcode"},"gaslimit":{"v":2,"d":"Base fee of the GASLIMIT opcode"},"pop":{"v":2,"d":"Base fee of the POP opcode"},"mload":{"v":3,"d":"Base fee of the MLOAD opcode"},"mstore":{"v":3,"d":"Base fee of the MSTORE opcode"},"mstore8":{"v":3,"d":"Base fee of the MSTORE8 opcode"},"sstore":{"v":0,"d":"Base fee of the SSTORE opcode"},"jump":{"v":8,"d":"Base fee of the JUMP opcode"},"jumpi":{"v":10,"d":"Base fee of the JUMPI opcode"},"pc":{"v":2,"d":"Base fee of the PC opcode"},"msize":{"v":2,"d":"Base fee of the MSIZE opcode"},"gas":{"v":2,"d":"Base fee of the GAS opcode"},"push":{"v":3,"d":"Base fee of the PUSH opcode"},"dup":{"v":3,"d":"Base fee of the DUP opcode"},"swap":{"v":3,"d":"Base fee of the SWAP opcode"},"callcode":{"v":40,"d":"Base fee of the CALLCODE opcode"},"return":{"v":0,"d":"Base fee of the RETURN opcode"},"invalid":{"v":0,"d":"Base fee of the INVALID opcode"},"selfdestruct":{"v":0,"d":"Base fee of the SELFDESTRUCT opcode"}},"vm":{"stackLimit":{"v":1024,"d":"Maximum size of VM stack allowed"},"callCreateDepth":{"v":1024,"d":"Maximum depth of call/create stack"},"maxExtraDataSize":{"v":32,"d":"Maximum size extra data may be after Genesis"}},"pow":{"minimumDifficulty":{"v":131072,"d":"The minimum that the difficulty may ever be"},"difficultyBoundDivisor":{"v":2048,"d":"The bound divisor of the difficulty, used in the update calculations"},"durationLimit":{"v":13,"d":"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"},"epochDuration":{"v":30000,"d":"Duration between proof-of-work epochs"},"timebombPeriod":{"v":100000,"d":"Exponential difficulty timebomb period"},"minerReward":{"v":"5000000000000000000","d":"the amount a miner get rewarded for mining a block"},"difficultyBombDelay":{"v":0,"d":"the amount of blocks to delay the difficulty bomb with"}}}`);
      }, 5993: (e2) => {
        "use strict";
        e2.exports = JSON.parse(`{"name":"constantinople","comment":"Postponed hardfork including EIP-1283 (SSTORE gas metering changes)","url":"https://eips.ethereum.org/EIPS/eip-1013","status":"Final","gasConfig":{},"gasPrices":{"netSstoreNoopGas":{"v":200,"d":"Once per SSTORE operation if the value doesn't change"},"netSstoreInitGas":{"v":20000,"d":"Once per SSTORE operation from clean zero"},"netSstoreCleanGas":{"v":5000,"d":"Once per SSTORE operation from clean non-zero"},"netSstoreDirtyGas":{"v":200,"d":"Once per SSTORE operation from dirty"},"netSstoreClearRefund":{"v":15000,"d":"Once per SSTORE operation for clearing an originally existing storage slot"},"netSstoreResetRefund":{"v":4800,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"netSstoreResetClearRefund":{"v":19800,"d":"Once per SSTORE operation for resetting to the original zero value"},"shl":{"v":3,"d":"Base fee of the SHL opcode"},"shr":{"v":3,"d":"Base fee of the SHR opcode"},"sar":{"v":3,"d":"Base fee of the SAR opcode"},"extcodehash":{"v":400,"d":"Base fee of the EXTCODEHASH opcode"},"create2":{"v":32000,"d":"Base fee of the CREATE2 opcode"}},"vm":{},"pow":{"minerReward":{"v":"2000000000000000000","d":"The amount a miner gets rewarded for mining a block"},"difficultyBombDelay":{"v":5000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}`);
      }, 7197: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"dao","comment":"DAO rescue hardfork","url":"https://eips.ethereum.org/EIPS/eip-779","status":"Final","gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}');
      }, 2800: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"homestead","comment":"Homestead hardfork with protocol and network changes","url":"https://eips.ethereum.org/EIPS/eip-606","status":"Final","gasConfig":{},"gasPrices":{"delegatecall":{"v":40,"d":"Base fee of the DELEGATECALL opcode"}},"vm":{},"pow":{}}');
      }, 3166: (e2) => {
        "use strict";
        e2.exports = JSON.parse(`{"name":"istanbul","comment":"HF targeted for December 2019 following the Constantinople/Petersburg HF","url":"https://eips.ethereum.org/EIPS/eip-1679","status":"Draft","gasConfig":{},"gasPrices":{"blake2Round":{"v":1,"d":"Gas cost per round for the Blake2 F precompile"},"ecAdd":{"v":150,"d":"Gas costs for curve addition precompile"},"ecMul":{"v":6000,"d":"Gas costs for curve multiplication precompile"},"ecPairing":{"v":45000,"d":"Base gas costs for curve pairing precompile"},"ecPairingWord":{"v":34000,"d":"Gas costs regarding curve pairing precompile input length"},"txDataNonZero":{"v":16,"d":"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"},"sstoreSentryGasEIP2200":{"v":2300,"d":"Minimum gas required to be present for an SSTORE call, not consumed"},"sstoreNoopGasEIP2200":{"v":800,"d":"Once per SSTORE operation if the value doesn't change"},"sstoreDirtyGasEIP2200":{"v":800,"d":"Once per SSTORE operation if a dirty value is changed"},"sstoreInitGasEIP2200":{"v":20000,"d":"Once per SSTORE operation from clean zero to non-zero"},"sstoreInitRefundEIP2200":{"v":19200,"d":"Once per SSTORE operation for resetting to the original zero value"},"sstoreCleanGasEIP2200":{"v":5000,"d":"Once per SSTORE operation from clean non-zero to something else"},"sstoreCleanRefundEIP2200":{"v":4200,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"sstoreClearRefundEIP2200":{"v":15000,"d":"Once per SSTORE operation for clearing an originally existing storage slot"},"balance":{"v":700,"d":"Base fee of the BALANCE opcode"},"extcodehash":{"v":700,"d":"Base fee of the EXTCODEHASH opcode"},"chainid":{"v":2,"d":"Base fee of the CHAINID opcode"},"selfbalance":{"v":5,"d":"Base fee of the SELFBALANCE opcode"},"sload":{"v":800,"d":"Base fee of the SLOAD opcode"}},"vm":{},"pow":{}}`);
      }, 1250: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"london","comment":"HF targeted for July 2021 following the Berlin fork","url":"https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md","status":"Draft","eips":[1559,3198,3529,3541]}');
      }, 8648: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"merge","comment":"Hardfork to upgrade the consensus mechanism to Proof-of-Stake","url":"https://github.com/ethereum/pm/issues/361","status":"pre-Draft","consensus":{"type":"pos","algorithm":"casper","casper":{}},"eips":[3675]}');
      }, 2946: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"muirGlacier","comment":"HF to delay the difficulty bomb","url":"https://eips.ethereum.org/EIPS/eip-2384","status":"Final","gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":9000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}');
      }, 4064: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"petersburg","comment":"Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople","url":"https://eips.ethereum.org/EIPS/eip-1716","status":"Draft","gasConfig":{},"gasPrices":{"netSstoreNoopGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreInitGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreCleanGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreDirtyGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreClearRefund":{"v":null,"d":"Removed along EIP-1283"},"netSstoreResetRefund":{"v":null,"d":"Removed along EIP-1283"},"netSstoreResetClearRefund":{"v":null,"d":"Removed along EIP-1283"}},"vm":{},"pow":{}}');
      }, 5553: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"shanghai","comment":"Next feature hardfork after the London HF","url":"https://github.com/ethereum/pm/issues/356","status":"Pre-Draft","eips":[]}');
      }, 716: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"spuriousDragon","comment":"HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit","url":"https://eips.ethereum.org/EIPS/eip-607","status":"Final","gasConfig":{},"gasPrices":{"expByte":{"v":50,"d":"Times ceil(log256(exponent)) for the EXP instruction"}},"vm":{"maxCodeSize":{"v":24576,"d":"Maximum length of contract code"}},"pow":{}}');
      }, 2302: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"name":"tangerineWhistle","comment":"Hardfork with gas cost changes for IO-heavy operations","url":"https://eips.ethereum.org/EIPS/eip-608","status":"Final","gasConfig":{},"gasPrices":{"sload":{"v":200,"d":"Once per SLOAD operation"},"call":{"v":700,"d":"Once per CALL operation & message call transaction"},"extcodesize":{"v":700,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":700,"d":"Base fee of the EXTCODECOPY opcode"},"balance":{"v":400,"d":"Base fee of the BALANCE opcode"},"delegatecall":{"v":700,"d":"Base fee of the DELEGATECALL opcode"},"callcode":{"v":700,"d":"Base fee of the CALLCODE opcode"},"selfdestruct":{"v":5000,"d":"Base fee of the SELFDESTRUCT opcode"}},"vm":{},"pow":{}}');
      }, 4946: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}}');
      }, 5207: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}}');
      }, 1308: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}');
      }, 3630: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"identity":0,"ip4":4,"tcp":6,"sha1":17,"sha2-256":18,"sha2-512":19,"sha3-512":20,"sha3-384":21,"sha3-256":22,"sha3-224":23,"shake-128":24,"shake-256":25,"keccak-224":26,"keccak-256":27,"keccak-384":28,"keccak-512":29,"blake3":30,"dccp":33,"murmur3-128":34,"murmur3-32":35,"ip6":41,"ip6zone":42,"path":47,"multicodec":48,"multihash":49,"multiaddr":50,"multibase":51,"dns":53,"dns4":54,"dns6":55,"dnsaddr":56,"protobuf":80,"cbor":81,"raw":85,"dbl-sha2-256":86,"rlp":96,"bencode":99,"dag-pb":112,"dag-cbor":113,"libp2p-key":114,"git-raw":120,"torrent-info":123,"torrent-file":124,"leofcoin-block":129,"leofcoin-tx":130,"leofcoin-pr":131,"sctp":132,"dag-jose":133,"dag-cose":134,"eth-block":144,"eth-block-list":145,"eth-tx-trie":146,"eth-tx":147,"eth-tx-receipt-trie":148,"eth-tx-receipt":149,"eth-state-trie":150,"eth-account-snapshot":151,"eth-storage-trie":152,"bitcoin-block":176,"bitcoin-tx":177,"bitcoin-witness-commitment":178,"zcash-block":192,"zcash-tx":193,"stellar-block":208,"stellar-tx":209,"md4":212,"md5":213,"bmt":214,"decred-block":224,"decred-tx":225,"ipld-ns":226,"ipfs-ns":227,"swarm-ns":228,"ipns-ns":229,"zeronet":230,"secp256k1-pub":231,"bls12_381-g1-pub":234,"bls12_381-g2-pub":235,"x25519-pub":236,"ed25519-pub":237,"dash-block":240,"dash-tx":241,"swarm-manifest":250,"swarm-feed":251,"udp":273,"p2p-webrtc-star":275,"p2p-webrtc-direct":276,"p2p-stardust":277,"p2p-circuit":290,"dag-json":297,"udt":301,"utp":302,"unix":400,"p2p":421,"ipfs":421,"https":443,"onion":444,"onion3":445,"garlic64":446,"garlic32":447,"tls":448,"quic":460,"ws":477,"wss":478,"p2p-websocket-star":479,"http":480,"json":512,"messagepack":513,"libp2p-peer-record":769,"sha2-256-trunc254-padded":4114,"ripemd-128":4178,"ripemd-160":4179,"ripemd-256":4180,"ripemd-320":4181,"x11":4352,"sm3-256":21325,"blake2b-8":45569,"blake2b-16":45570,"blake2b-24":45571,"blake2b-32":45572,"blake2b-40":45573,"blake2b-48":45574,"blake2b-56":45575,"blake2b-64":45576,"blake2b-72":45577,"blake2b-80":45578,"blake2b-88":45579,"blake2b-96":45580,"blake2b-104":45581,"blake2b-112":45582,"blake2b-120":45583,"blake2b-128":45584,"blake2b-136":45585,"blake2b-144":45586,"blake2b-152":45587,"blake2b-160":45588,"blake2b-168":45589,"blake2b-176":45590,"blake2b-184":45591,"blake2b-192":45592,"blake2b-200":45593,"blake2b-208":45594,"blake2b-216":45595,"blake2b-224":45596,"blake2b-232":45597,"blake2b-240":45598,"blake2b-248":45599,"blake2b-256":45600,"blake2b-264":45601,"blake2b-272":45602,"blake2b-280":45603,"blake2b-288":45604,"blake2b-296":45605,"blake2b-304":45606,"blake2b-312":45607,"blake2b-320":45608,"blake2b-328":45609,"blake2b-336":45610,"blake2b-344":45611,"blake2b-352":45612,"blake2b-360":45613,"blake2b-368":45614,"blake2b-376":45615,"blake2b-384":45616,"blake2b-392":45617,"blake2b-400":45618,"blake2b-408":45619,"blake2b-416":45620,"blake2b-424":45621,"blake2b-432":45622,"blake2b-440":45623,"blake2b-448":45624,"blake2b-456":45625,"blake2b-464":45626,"blake2b-472":45627,"blake2b-480":45628,"blake2b-488":45629,"blake2b-496":45630,"blake2b-504":45631,"blake2b-512":45632,"blake2s-8":45633,"blake2s-16":45634,"blake2s-24":45635,"blake2s-32":45636,"blake2s-40":45637,"blake2s-48":45638,"blake2s-56":45639,"blake2s-64":45640,"blake2s-72":45641,"blake2s-80":45642,"blake2s-88":45643,"blake2s-96":45644,"blake2s-104":45645,"blake2s-112":45646,"blake2s-120":45647,"blake2s-128":45648,"blake2s-136":45649,"blake2s-144":45650,"blake2s-152":45651,"blake2s-160":45652,"blake2s-168":45653,"blake2s-176":45654,"blake2s-184":45655,"blake2s-192":45656,"blake2s-200":45657,"blake2s-208":45658,"blake2s-216":45659,"blake2s-224":45660,"blake2s-232":45661,"blake2s-240":45662,"blake2s-248":45663,"blake2s-256":45664,"skein256-8":45825,"skein256-16":45826,"skein256-24":45827,"skein256-32":45828,"skein256-40":45829,"skein256-48":45830,"skein256-56":45831,"skein256-64":45832,"skein256-72":45833,"skein256-80":45834,"skein256-88":45835,"skein256-96":45836,"skein256-104":45837,"skein256-112":45838,"skein256-120":45839,"skein256-128":45840,"skein256-136":45841,"skein256-144":45842,"skein256-152":45843,"skein256-160":45844,"skein256-168":45845,"skein256-176":45846,"skein256-184":45847,"skein256-192":45848,"skein256-200":45849,"skein256-208":45850,"skein256-216":45851,"skein256-224":45852,"skein256-232":45853,"skein256-240":45854,"skein256-248":45855,"skein256-256":45856,"skein512-8":45857,"skein512-16":45858,"skein512-24":45859,"skein512-32":45860,"skein512-40":45861,"skein512-48":45862,"skein512-56":45863,"skein512-64":45864,"skein512-72":45865,"skein512-80":45866,"skein512-88":45867,"skein512-96":45868,"skein512-104":45869,"skein512-112":45870,"skein512-120":45871,"skein512-128":45872,"skein512-136":45873,"skein512-144":45874,"skein512-152":45875,"skein512-160":45876,"skein512-168":45877,"skein512-176":45878,"skein512-184":45879,"skein512-192":45880,"skein512-200":45881,"skein512-208":45882,"skein512-216":45883,"skein512-224":45884,"skein512-232":45885,"skein512-240":45886,"skein512-248":45887,"skein512-256":45888,"skein512-264":45889,"skein512-272":45890,"skein512-280":45891,"skein512-288":45892,"skein512-296":45893,"skein512-304":45894,"skein512-312":45895,"skein512-320":45896,"skein512-328":45897,"skein512-336":45898,"skein512-344":45899,"skein512-352":45900,"skein512-360":45901,"skein512-368":45902,"skein512-376":45903,"skein512-384":45904,"skein512-392":45905,"skein512-400":45906,"skein512-408":45907,"skein512-416":45908,"skein512-424":45909,"skein512-432":45910,"skein512-440":45911,"skein512-448":45912,"skein512-456":45913,"skein512-464":45914,"skein512-472":45915,"skein512-480":45916,"skein512-488":45917,"skein512-496":45918,"skein512-504":45919,"skein512-512":45920,"skein1024-8":45921,"skein1024-16":45922,"skein1024-24":45923,"skein1024-32":45924,"skein1024-40":45925,"skein1024-48":45926,"skein1024-56":45927,"skein1024-64":45928,"skein1024-72":45929,"skein1024-80":45930,"skein1024-88":45931,"skein1024-96":45932,"skein1024-104":45933,"skein1024-112":45934,"skein1024-120":45935,"skein1024-128":45936,"skein1024-136":45937,"skein1024-144":45938,"skein1024-152":45939,"skein1024-160":45940,"skein1024-168":45941,"skein1024-176":45942,"skein1024-184":45943,"skein1024-192":45944,"skein1024-200":45945,"skein1024-208":45946,"skein1024-216":45947,"skein1024-224":45948,"skein1024-232":45949,"skein1024-240":45950,"skein1024-248":45951,"skein1024-256":45952,"skein1024-264":45953,"skein1024-272":45954,"skein1024-280":45955,"skein1024-288":45956,"skein1024-296":45957,"skein1024-304":45958,"skein1024-312":45959,"skein1024-320":45960,"skein1024-328":45961,"skein1024-336":45962,"skein1024-344":45963,"skein1024-352":45964,"skein1024-360":45965,"skein1024-368":45966,"skein1024-376":45967,"skein1024-384":45968,"skein1024-392":45969,"skein1024-400":45970,"skein1024-408":45971,"skein1024-416":45972,"skein1024-424":45973,"skein1024-432":45974,"skein1024-440":45975,"skein1024-448":45976,"skein1024-456":45977,"skein1024-464":45978,"skein1024-472":45979,"skein1024-480":45980,"skein1024-488":45981,"skein1024-496":45982,"skein1024-504":45983,"skein1024-512":45984,"skein1024-520":45985,"skein1024-528":45986,"skein1024-536":45987,"skein1024-544":45988,"skein1024-552":45989,"skein1024-560":45990,"skein1024-568":45991,"skein1024-576":45992,"skein1024-584":45993,"skein1024-592":45994,"skein1024-600":45995,"skein1024-608":45996,"skein1024-616":45997,"skein1024-624":45998,"skein1024-632":45999,"skein1024-640":46000,"skein1024-648":46001,"skein1024-656":46002,"skein1024-664":46003,"skein1024-672":46004,"skein1024-680":46005,"skein1024-688":46006,"skein1024-696":46007,"skein1024-704":46008,"skein1024-712":46009,"skein1024-720":46010,"skein1024-728":46011,"skein1024-736":46012,"skein1024-744":46013,"skein1024-752":46014,"skein1024-760":46015,"skein1024-768":46016,"skein1024-776":46017,"skein1024-784":46018,"skein1024-792":46019,"skein1024-800":46020,"skein1024-808":46021,"skein1024-816":46022,"skein1024-824":46023,"skein1024-832":46024,"skein1024-840":46025,"skein1024-848":46026,"skein1024-856":46027,"skein1024-864":46028,"skein1024-872":46029,"skein1024-880":46030,"skein1024-888":46031,"skein1024-896":46032,"skein1024-904":46033,"skein1024-912":46034,"skein1024-920":46035,"skein1024-928":46036,"skein1024-936":46037,"skein1024-944":46038,"skein1024-952":46039,"skein1024-960":46040,"skein1024-968":46041,"skein1024-976":46042,"skein1024-984":46043,"skein1024-992":46044,"skein1024-1000":46045,"skein1024-1008":46046,"skein1024-1016":46047,"skein1024-1024":46048,"poseidon-bls12_381-a2-fc1":46081,"poseidon-bls12_381-a2-fc1-sc":46082,"zeroxcert-imprint-256":52753,"fil-commitment-unsealed":61697,"fil-commitment-sealed":61698,"holochain-adr-v0":8417572,"holochain-adr-v1":8483108,"holochain-key-v0":9728292,"holochain-key-v1":9793828,"holochain-sig-v0":10645796,"holochain-sig-v1":10711332}');
      }, 9799: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}');
      }, 8597: (e2) => {
        "use strict";
        e2.exports = { i8: "6.5.4" };
      }, 4070: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"identity":0,"ip4":4,"tcp":6,"sha1":17,"sha2-256":18,"sha2-512":19,"sha3-512":20,"sha3-384":21,"sha3-256":22,"sha3-224":23,"shake-128":24,"shake-256":25,"keccak-224":26,"keccak-256":27,"keccak-384":28,"keccak-512":29,"dccp":33,"murmur3-128":34,"murmur3-32":35,"ip6":41,"ip6zone":42,"path":47,"multicodec":48,"multihash":49,"multiaddr":50,"multibase":51,"dns":53,"dns4":54,"dns6":55,"dnsaddr":56,"protobuf":80,"cbor":81,"raw":85,"dbl-sha2-256":86,"rlp":96,"bencode":99,"dag-pb":112,"dag-cbor":113,"libp2p-key":114,"git-raw":120,"torrent-info":123,"torrent-file":124,"leofcoin-block":129,"leofcoin-tx":130,"leofcoin-pr":131,"sctp":132,"eth-block":144,"eth-block-list":145,"eth-tx-trie":146,"eth-tx":147,"eth-tx-receipt-trie":148,"eth-tx-receipt":149,"eth-state-trie":150,"eth-account-snapshot":151,"eth-storage-trie":152,"bitcoin-block":176,"bitcoin-tx":177,"zcash-block":192,"zcash-tx":193,"stellar-block":208,"stellar-tx":209,"md4":212,"md5":213,"bmt":214,"decred-block":224,"decred-tx":225,"ipld-ns":226,"ipfs-ns":227,"swarm-ns":228,"ipns-ns":229,"zeronet":230,"ed25519-pub":237,"dash-block":240,"dash-tx":241,"swarm-manifest":250,"swarm-feed":251,"udp":273,"p2p-webrtc-star":275,"p2p-webrtc-direct":276,"p2p-stardust":277,"p2p-circuit":290,"dag-json":297,"udt":301,"utp":302,"unix":400,"p2p":421,"ipfs":421,"https":443,"onion":444,"onion3":445,"garlic64":446,"garlic32":447,"tls":448,"quic":460,"ws":477,"wss":478,"p2p-websocket-star":479,"http":480,"json":512,"messagepack":513,"x11":4352,"blake2b-8":45569,"blake2b-16":45570,"blake2b-24":45571,"blake2b-32":45572,"blake2b-40":45573,"blake2b-48":45574,"blake2b-56":45575,"blake2b-64":45576,"blake2b-72":45577,"blake2b-80":45578,"blake2b-88":45579,"blake2b-96":45580,"blake2b-104":45581,"blake2b-112":45582,"blake2b-120":45583,"blake2b-128":45584,"blake2b-136":45585,"blake2b-144":45586,"blake2b-152":45587,"blake2b-160":45588,"blake2b-168":45589,"blake2b-176":45590,"blake2b-184":45591,"blake2b-192":45592,"blake2b-200":45593,"blake2b-208":45594,"blake2b-216":45595,"blake2b-224":45596,"blake2b-232":45597,"blake2b-240":45598,"blake2b-248":45599,"blake2b-256":45600,"blake2b-264":45601,"blake2b-272":45602,"blake2b-280":45603,"blake2b-288":45604,"blake2b-296":45605,"blake2b-304":45606,"blake2b-312":45607,"blake2b-320":45608,"blake2b-328":45609,"blake2b-336":45610,"blake2b-344":45611,"blake2b-352":45612,"blake2b-360":45613,"blake2b-368":45614,"blake2b-376":45615,"blake2b-384":45616,"blake2b-392":45617,"blake2b-400":45618,"blake2b-408":45619,"blake2b-416":45620,"blake2b-424":45621,"blake2b-432":45622,"blake2b-440":45623,"blake2b-448":45624,"blake2b-456":45625,"blake2b-464":45626,"blake2b-472":45627,"blake2b-480":45628,"blake2b-488":45629,"blake2b-496":45630,"blake2b-504":45631,"blake2b-512":45632,"blake2s-8":45633,"blake2s-16":45634,"blake2s-24":45635,"blake2s-32":45636,"blake2s-40":45637,"blake2s-48":45638,"blake2s-56":45639,"blake2s-64":45640,"blake2s-72":45641,"blake2s-80":45642,"blake2s-88":45643,"blake2s-96":45644,"blake2s-104":45645,"blake2s-112":45646,"blake2s-120":45647,"blake2s-128":45648,"blake2s-136":45649,"blake2s-144":45650,"blake2s-152":45651,"blake2s-160":45652,"blake2s-168":45653,"blake2s-176":45654,"blake2s-184":45655,"blake2s-192":45656,"blake2s-200":45657,"blake2s-208":45658,"blake2s-216":45659,"blake2s-224":45660,"blake2s-232":45661,"blake2s-240":45662,"blake2s-248":45663,"blake2s-256":45664,"skein256-8":45825,"skein256-16":45826,"skein256-24":45827,"skein256-32":45828,"skein256-40":45829,"skein256-48":45830,"skein256-56":45831,"skein256-64":45832,"skein256-72":45833,"skein256-80":45834,"skein256-88":45835,"skein256-96":45836,"skein256-104":45837,"skein256-112":45838,"skein256-120":45839,"skein256-128":45840,"skein256-136":45841,"skein256-144":45842,"skein256-152":45843,"skein256-160":45844,"skein256-168":45845,"skein256-176":45846,"skein256-184":45847,"skein256-192":45848,"skein256-200":45849,"skein256-208":45850,"skein256-216":45851,"skein256-224":45852,"skein256-232":45853,"skein256-240":45854,"skein256-248":45855,"skein256-256":45856,"skein512-8":45857,"skein512-16":45858,"skein512-24":45859,"skein512-32":45860,"skein512-40":45861,"skein512-48":45862,"skein512-56":45863,"skein512-64":45864,"skein512-72":45865,"skein512-80":45866,"skein512-88":45867,"skein512-96":45868,"skein512-104":45869,"skein512-112":45870,"skein512-120":45871,"skein512-128":45872,"skein512-136":45873,"skein512-144":45874,"skein512-152":45875,"skein512-160":45876,"skein512-168":45877,"skein512-176":45878,"skein512-184":45879,"skein512-192":45880,"skein512-200":45881,"skein512-208":45882,"skein512-216":45883,"skein512-224":45884,"skein512-232":45885,"skein512-240":45886,"skein512-248":45887,"skein512-256":45888,"skein512-264":45889,"skein512-272":45890,"skein512-280":45891,"skein512-288":45892,"skein512-296":45893,"skein512-304":45894,"skein512-312":45895,"skein512-320":45896,"skein512-328":45897,"skein512-336":45898,"skein512-344":45899,"skein512-352":45900,"skein512-360":45901,"skein512-368":45902,"skein512-376":45903,"skein512-384":45904,"skein512-392":45905,"skein512-400":45906,"skein512-408":45907,"skein512-416":45908,"skein512-424":45909,"skein512-432":45910,"skein512-440":45911,"skein512-448":45912,"skein512-456":45913,"skein512-464":45914,"skein512-472":45915,"skein512-480":45916,"skein512-488":45917,"skein512-496":45918,"skein512-504":45919,"skein512-512":45920,"skein1024-8":45921,"skein1024-16":45922,"skein1024-24":45923,"skein1024-32":45924,"skein1024-40":45925,"skein1024-48":45926,"skein1024-56":45927,"skein1024-64":45928,"skein1024-72":45929,"skein1024-80":45930,"skein1024-88":45931,"skein1024-96":45932,"skein1024-104":45933,"skein1024-112":45934,"skein1024-120":45935,"skein1024-128":45936,"skein1024-136":45937,"skein1024-144":45938,"skein1024-152":45939,"skein1024-160":45940,"skein1024-168":45941,"skein1024-176":45942,"skein1024-184":45943,"skein1024-192":45944,"skein1024-200":45945,"skein1024-208":45946,"skein1024-216":45947,"skein1024-224":45948,"skein1024-232":45949,"skein1024-240":45950,"skein1024-248":45951,"skein1024-256":45952,"skein1024-264":45953,"skein1024-272":45954,"skein1024-280":45955,"skein1024-288":45956,"skein1024-296":45957,"skein1024-304":45958,"skein1024-312":45959,"skein1024-320":45960,"skein1024-328":45961,"skein1024-336":45962,"skein1024-344":45963,"skein1024-352":45964,"skein1024-360":45965,"skein1024-368":45966,"skein1024-376":45967,"skein1024-384":45968,"skein1024-392":45969,"skein1024-400":45970,"skein1024-408":45971,"skein1024-416":45972,"skein1024-424":45973,"skein1024-432":45974,"skein1024-440":45975,"skein1024-448":45976,"skein1024-456":45977,"skein1024-464":45978,"skein1024-472":45979,"skein1024-480":45980,"skein1024-488":45981,"skein1024-496":45982,"skein1024-504":45983,"skein1024-512":45984,"skein1024-520":45985,"skein1024-528":45986,"skein1024-536":45987,"skein1024-544":45988,"skein1024-552":45989,"skein1024-560":45990,"skein1024-568":45991,"skein1024-576":45992,"skein1024-584":45993,"skein1024-592":45994,"skein1024-600":45995,"skein1024-608":45996,"skein1024-616":45997,"skein1024-624":45998,"skein1024-632":45999,"skein1024-640":46000,"skein1024-648":46001,"skein1024-656":46002,"skein1024-664":46003,"skein1024-672":46004,"skein1024-680":46005,"skein1024-688":46006,"skein1024-696":46007,"skein1024-704":46008,"skein1024-712":46009,"skein1024-720":46010,"skein1024-728":46011,"skein1024-736":46012,"skein1024-744":46013,"skein1024-752":46014,"skein1024-760":46015,"skein1024-768":46016,"skein1024-776":46017,"skein1024-784":46018,"skein1024-792":46019,"skein1024-800":46020,"skein1024-808":46021,"skein1024-816":46022,"skein1024-824":46023,"skein1024-832":46024,"skein1024-840":46025,"skein1024-848":46026,"skein1024-856":46027,"skein1024-864":46028,"skein1024-872":46029,"skein1024-880":46030,"skein1024-888":46031,"skein1024-896":46032,"skein1024-904":46033,"skein1024-912":46034,"skein1024-920":46035,"skein1024-928":46036,"skein1024-936":46037,"skein1024-944":46038,"skein1024-952":46039,"skein1024-960":46040,"skein1024-968":46041,"skein1024-976":46042,"skein1024-984":46043,"skein1024-992":46044,"skein1024-1000":46045,"skein1024-1008":46046,"skein1024-1016":46047,"skein1024-1024":46048,"holochain-adr-v0":8417572,"holochain-adr-v1":8483108,"holochain-key-v0":9728292,"holochain-key-v1":9793828,"holochain-sig-v0":10645796,"holochain-sig-v1":10711332}');
      }, 2562: (e2) => {
        "use strict";
        e2.exports = JSON.parse('{"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}');
      }, 9794: (e2) => {
        "use strict";
        e2.exports = { version: "1.0.34" };
      }, 8920: (e2) => {
        "use strict";
        e2.exports = { i8: "1.10.0" };
      } }, t = {};
      function r2(n) {
        var i = t[n];
        if (void 0 !== i)
          return i.exports;
        var o = t[n] = { id: n, loaded: false, exports: {} };
        return e[n](o, o.exports, r2), o.loaded = true, o.exports;
      }
      return r2.amdO = {}, r2.g = function() {
        if ("object" == typeof globalThis)
          return globalThis;
        try {
          return this || new Function("return this")();
        } catch (e2) {
          if ("object" == typeof window)
            return window;
        }
      }(), r2.nmd = (e2) => (e2.paths = [], e2.children || (e2.children = []), e2), r2(7001);
    })());
  }
});

// node_modules/web3-core-helpers/lib/errors.js
var require_errors = __commonJS({
  "node_modules/web3-core-helpers/lib/errors.js"(exports, module) {
    "use strict";
    module.exports = {
      ErrorResponse: function(result) {
        var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);
        var data = !!result.error && !!result.error.data ? result.error.data : null;
        var err = new Error("Returned error: " + message);
        err.data = data;
        return err;
      },
      InvalidNumberOfParams: function(got, expected, method) {
        return new Error('Invalid number of parameters for "' + method + '". Got ' + got + " expected " + expected + "!");
      },
      InvalidConnection: function(host, event) {
        return this.ConnectionError("CONNECTION ERROR: Couldn't connect to node " + host + ".", event);
      },
      InvalidProvider: function() {
        return new Error("Provider not set or invalid");
      },
      InvalidResponse: function(result) {
        var message = !!result && !!result.error && !!result.error.message ? result.error.message : "Invalid JSON RPC response: " + JSON.stringify(result);
        return new Error(message);
      },
      ConnectionTimeout: function(ms) {
        return new Error("CONNECTION TIMEOUT: timeout of " + ms + " ms achived");
      },
      ConnectionNotOpenError: function(event) {
        return this.ConnectionError("connection not open on send()", event);
      },
      ConnectionCloseError: function(event) {
        if (typeof event === "object" && event.code && event.reason) {
          return this.ConnectionError("CONNECTION ERROR: The connection got closed with the close code `" + event.code + "` and the following reason string `" + event.reason + "`", event);
        }
        return new Error("CONNECTION ERROR: The connection closed unexpectedly");
      },
      MaxAttemptsReachedOnReconnectingError: function() {
        return new Error("Maximum number of reconnect attempts reached!");
      },
      PendingRequestsOnReconnectingError: function() {
        return new Error("CONNECTION ERROR: Provider started to reconnect before the response got received!");
      },
      ConnectionError: function(msg, event) {
        const error = new Error(msg);
        if (event) {
          error.code = event.code;
          error.reason = event.reason;
          if (event.description) {
            error.description = event.description;
          }
        }
        return error;
      },
      RevertInstructionError: function(reason, signature2) {
        var error = new Error("Your request got reverted with the following reason string: " + reason);
        error.reason = reason;
        error.signature = signature2;
        return error;
      },
      TransactionRevertInstructionError: function(reason, signature2, receipt) {
        var error = new Error("Transaction has been reverted by the EVM:\n" + JSON.stringify(receipt, null, 2));
        error.reason = reason;
        error.signature = signature2;
        error.receipt = receipt;
        return error;
      },
      TransactionError: function(message, receipt) {
        var error = new Error(message);
        error.receipt = receipt;
        return error;
      },
      NoContractAddressFoundError: function(receipt) {
        return this.TransactionError("The transaction receipt didn't contain a contract address.", receipt);
      },
      ContractCodeNotStoredError: function(receipt) {
        return this.TransactionError("The contract code couldn't be stored, please check your gas limit.", receipt);
      },
      TransactionRevertedWithoutReasonError: function(receipt) {
        return this.TransactionError("Transaction has been reverted by the EVM:\n" + JSON.stringify(receipt, null, 2), receipt);
      },
      TransactionOutOfGasError: function(receipt) {
        return this.TransactionError("Transaction ran out of gas. Please provide more gas:\n" + JSON.stringify(receipt, null, 2), receipt);
      },
      ResolverMethodMissingError: function(address, name2) {
        return new Error("The resolver at " + address + 'does not implement requested method: "' + name2 + '".');
      },
      ContractMissingABIError: function() {
        return new Error("You must provide the json interface of the contract when instantiating a contract object.");
      },
      ContractOnceRequiresCallbackError: function() {
        return new Error("Once requires a callback as the second parameter.");
      },
      ContractEventDoesNotExistError: function(eventName) {
        return new Error('Event "' + eventName + `" doesn't exist in this contract.`);
      },
      ContractReservedEventError: function(type) {
        return new Error('The event "' + type + `" is a reserved event name, you can't use it.`);
      },
      ContractMissingDeployDataError: function() {
        return new Error('No "data" specified in neither the given options, nor the default options.');
      },
      ContractNoAddressDefinedError: function() {
        return new Error("This contract object doesn't have address set yet, please set an address first.");
      },
      ContractNoFromAddressDefinedError: function() {
        return new Error('No "from" address specified in neither the given options, nor the default options.');
      }
    };
  }
});

// node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "node_modules/base64-js/index.js"(exports) {
    "use strict";
    exports.byteLength = byteLength;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    var i;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1)
        validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i2;
      for (i2 = 0; i2 < len2; i2 += 4) {
        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i2 = start; i2 < end; i2 += 3) {
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// node_modules/ieee754/index.js
var require_ieee754 = __commonJS({
  "node_modules/ieee754/index.js"(exports) {
    exports.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
      }
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
      }
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };
    exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
      }
      e = e << mLen | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
      }
      buffer[offset + i - d] |= s * 128;
    };
  }
});

// node_modules/buffer/index.js
var require_buffer = __commonJS({
  "node_modules/buffer/index.js"(exports) {
    "use strict";
    var base64 = require_base64_js();
    var ieee754 = require_ieee754();
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports.Buffer = Buffer2;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
    }
    function typedArraySupport() {
      try {
        var arr = new Uint8Array(1);
        var proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer2.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this))
          return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer2.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this))
          return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      var buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function Buffer2(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          );
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer2.poolSize = 8192;
    function from(value, encodingOrOffset, length) {
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "number") {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        );
      }
      var valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer2.from(valueOf, encodingOrOffset, length);
      }
      var b = fromObject(value);
      if (b)
        return b;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer2.from(
          value[Symbol.toPrimitive]("string"),
          encodingOrOffset,
          length
        );
      }
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    Buffer2.from = function(value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer2, Uint8Array);
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      }
      return createBuffer(size);
    }
    Buffer2.alloc = function(size, fill, encoding) {
      return alloc(size, fill, encoding);
    };
    function allocUnsafe(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    Buffer2.allocUnsafe = function(size) {
      return allocUnsafe(size);
    };
    Buffer2.allocUnsafeSlow = function(size) {
      return allocUnsafe(size);
    };
    function fromString(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer2.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      var length = byteLength(string, encoding) | 0;
      var buf = createBuffer(length);
      var actual = buf.write(string, encoding);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      var buf = createBuffer(length);
      for (var i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      var buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array);
      } else if (length === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer2.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer2.alloc(+length);
    }
    Buffer2.isBuffer = function isBuffer(b) {
      return b != null && b._isBuffer === true && b !== Buffer2.prototype;
    };
    Buffer2.compare = function compare(a, b) {
      if (isInstance(a, Uint8Array))
        a = Buffer2.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array))
        b = Buffer2.from(b, b.offset, b.byteLength);
      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        );
      }
      if (a === b)
        return 0;
      var x = a.length;
      var y = b.length;
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    Buffer2.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer2.concat = function concat2(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer2.alloc(0);
      }
      var i;
      if (length === void 0) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }
      var buffer = Buffer2.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer.length) {
            Buffer2.from(buf).copy(buffer, pos);
          } else {
            Uint8Array.prototype.set.call(
              buffer,
              buf,
              pos
            );
          }
        } else if (!Buffer2.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer, pos);
        }
        pos += buf.length;
      }
      return buffer;
    };
    function byteLength(string, encoding) {
      if (Buffer2.isBuffer(string)) {
        return string.length;
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
        );
      }
      var len = string.length;
      var mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0)
        return 0;
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.byteLength = byteLength;
    function slowToString(encoding, start, end) {
      var loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding)
        encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.prototype._isBuffer = true;
    function swap(b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }
    Buffer2.prototype.swap16 = function swap16() {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this;
    };
    Buffer2.prototype.swap32 = function swap32() {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this;
    };
    Buffer2.prototype.swap64 = function swap64() {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this;
    };
    Buffer2.prototype.toString = function toString() {
      var length = this.length;
      if (length === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
    Buffer2.prototype.equals = function equals(b) {
      if (!Buffer2.isBuffer(b))
        throw new TypeError("Argument must be a Buffer");
      if (this === b)
        return true;
      return Buffer2.compare(this, b) === 0;
    };
    Buffer2.prototype.inspect = function inspect4() {
      var str = "";
      var max = exports.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max)
        str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
    }
    Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer2.from(target, target.offset, target.byteLength);
      }
      if (!Buffer2.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
        );
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);
      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
      if (buffer.length === 0)
        return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer.length - 1;
      }
      if (byteOffset < 0)
        byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir)
          return -1;
        else
          byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir)
          byteOffset = 0;
        else
          return -1;
      }
      if (typeof val === "string") {
        val = Buffer2.from(val, encoding);
      }
      if (Buffer2.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i2) {
        if (indexSize === 1) {
          return buf[i2];
        } else {
          return buf.readUInt16BE(i2 * indexSize);
        }
      }
      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1)
              foundIndex = i;
            if (i - foundIndex + 1 === valLength)
              return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1)
              i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength)
          byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break;
            }
          }
          if (found)
            return i;
        }
      }
      return -1;
    }
    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      var strLen = string.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed))
          return i;
        buf[offset + i] = parsed;
      }
      return i;
    }
    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
    }
    function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
    }
    function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }
    Buffer2.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      var remaining = this.length - offset;
      if (length === void 0 || length > remaining)
        length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer2.prototype.toJSON = function toJSON2() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];
      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      var res = "";
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      var len = buf.length;
      if (!start || start < 0)
        start = 0;
      if (!end || end < 0 || end > len)
        end = len;
      var out = "";
      for (var i = start; i < end; ++i) {
        out += hexSliceLookupTable[buf[i]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = "";
      for (var i = 0; i < bytes.length - 1; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res;
    }
    Buffer2.prototype.slice = function slice(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0)
          end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start)
        end = start;
      var newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer2.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0)
        throw new RangeError("offset is not uint");
      if (offset + ext > length)
        throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul3 = 1;
      var i = 0;
      while (++i < byteLength2 && (mul3 *= 256)) {
        val += this[offset + i] * mul3;
      }
      return val;
    };
    Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      var val = this[offset + --byteLength2];
      var mul3 = 1;
      while (byteLength2 > 0 && (mul3 *= 256)) {
        val += this[offset + --byteLength2] * mul3;
      }
      return val;
    };
    Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul3 = 1;
      var i = 0;
      while (++i < byteLength2 && (mul3 *= 256)) {
        val += this[offset + i] * mul3;
      }
      mul3 *= 128;
      if (val >= mul3)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var i = byteLength2;
      var mul3 = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul3 *= 256)) {
        val += this[offset + --i] * mul3;
      }
      mul3 *= 128;
      if (val >= mul3)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128))
        return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };
    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };
    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };
    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max, min) {
      if (!Buffer2.isBuffer(buf))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min)
        throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
    }
    Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var mul3 = 1;
      var i = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul3 *= 256)) {
        this[offset + i] = value / mul3 & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength2 = byteLength2 >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var i = byteLength2 - 1;
      var mul3 = 1;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul3 *= 256)) {
        this[offset + i] = value / mul3 & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i = 0;
      var mul3 = 1;
      var sub = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul3 *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul3 >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i = byteLength2 - 1;
      var mul3 = 1;
      var sub = 0;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul3 *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul3 >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 127, -128);
      if (value < 0)
        value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0)
        value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function checkIEEE754(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
      if (offset < 0)
        throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer2.isBuffer(target))
        throw new TypeError("argument should be a Buffer");
      if (!start)
        start = 0;
      if (!end && end !== 0)
        end = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end > 0 && end < start)
        end = start;
      if (end === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("Index out of range");
      if (end < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end > this.length)
        end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      var len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, end),
          targetStart
        );
      }
      return len;
    };
    Buffer2.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (encoding === "utf8" && code < 128 || encoding === "latin1") {
            val = code;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val)
        val = 0;
      var i;
      if (typeof val === "number") {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
        var len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }
      return this;
    };
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2)
        return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];
      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            } else if (i + 1 === length) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0)
            break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0)
            break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0)
            break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0)
            break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        byteArray.push(str.charCodeAt(i) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0)
          break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if (i + offset >= dst.length || i >= src.length)
          break;
        dst[i + offset] = src[i];
      }
      return i;
    }
    function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      var alphabet = "0123456789abcdef";
      var table = new Array(256);
      for (var i = 0; i < 16; ++i) {
        var i16 = i * 16;
        for (var j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i] + alphabet[j];
        }
      }
      return table;
    }();
  }
});

// node_modules/ethjs-unit/node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  "node_modules/ethjs-unit/node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base2, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        Buffer2 = require_buffer().Buffer;
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
        }
        if (base2 === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base2, start);
        }
        if (number[0] === "-") {
          this.negative = 1;
        }
        this.strip();
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base2, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex(str, start, end) {
        var r2 = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 <<= 4;
          if (c >= 49 && c <= 54) {
            r2 |= c - 49 + 10;
          } else if (c >= 17 && c <= 22) {
            r2 |= c - 17 + 10;
          } else {
            r2 |= c & 15;
          }
        }
        return r2;
      }
      BN3.prototype._parseHex = function _parseHex(number, start) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
        }
        this.strip();
      };
      function parseBase(str, start, end, mul3) {
        var r2 = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul3;
          if (c >= 49) {
            r2 += c - 49 + 10;
          } else if (c >= 17) {
            r2 += c - 17 + 10;
          } else {
            r2 += c;
          }
        }
        return r2;
      }
      BN3.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base2);
          for (i = 0; i < mod; i++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN3.prototype.clone = function clone() {
        var r2 = new BN3(null);
        this.copy(r2);
        return r2;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN3.prototype.inspect = function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base2, padding2) {
        base2 = base2 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modn(groupBase).toString(base2);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16);
      };
      BN3.prototype.toBuffer = function toBuffer(endian, length) {
        assert2(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26)
            break;
        }
        return r2;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN3.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN3(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul3;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert2(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN3(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modn = function modn(num) {
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN3.prototype.idivn = function idivn(num) {
        assert2(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN3(1);
        var B = new BN3(0);
        var C = new BN3(0);
        var D = new BN3(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN3.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN3(1);
        var x2 = new BN3(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p) {
        this.name = name2;
        this.p = new BN3(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          r2.strip();
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN3._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg3(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add3(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul3(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN3(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert2(i < m);
          var b = this.pow(c, new BN3(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN3(1);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a, b) {
        if (a.isZero() || b.isZero())
          return new BN3(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/number-to-bn/node_modules/bn.js/lib/bn.js
var require_bn2 = __commonJS({
  "node_modules/number-to-bn/node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base2, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        Buffer2 = require_buffer().Buffer;
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
        }
        if (base2 === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base2, start);
        }
        if (number[0] === "-") {
          this.negative = 1;
        }
        this.strip();
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base2, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex(str, start, end) {
        var r2 = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 <<= 4;
          if (c >= 49 && c <= 54) {
            r2 |= c - 49 + 10;
          } else if (c >= 17 && c <= 22) {
            r2 |= c - 17 + 10;
          } else {
            r2 |= c & 15;
          }
        }
        return r2;
      }
      BN3.prototype._parseHex = function _parseHex(number, start) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
        }
        this.strip();
      };
      function parseBase(str, start, end, mul3) {
        var r2 = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul3;
          if (c >= 49) {
            r2 += c - 49 + 10;
          } else if (c >= 17) {
            r2 += c - 17 + 10;
          } else {
            r2 += c;
          }
        }
        return r2;
      }
      BN3.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base2);
          for (i = 0; i < mod; i++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN3.prototype.clone = function clone() {
        var r2 = new BN3(null);
        this.copy(r2);
        return r2;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN3.prototype.inspect = function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base2, padding2) {
        base2 = base2 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modn(groupBase).toString(base2);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16);
      };
      BN3.prototype.toBuffer = function toBuffer(endian, length) {
        assert2(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26)
            break;
        }
        return r2;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN3.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN3(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul3;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert2(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN3(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modn = function modn(num) {
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN3.prototype.idivn = function idivn(num) {
        assert2(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN3(1);
        var B = new BN3(0);
        var C = new BN3(0);
        var D = new BN3(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN3.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN3(1);
        var x2 = new BN3(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p) {
        this.name = name2;
        this.p = new BN3(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          r2.strip();
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN3._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg3(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add3(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul3(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN3(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert2(i < m);
          var b = this.pow(c, new BN3(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN3(1);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a, b) {
        if (a.isZero() || b.isZero())
          return new BN3(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/is-hex-prefixed/src/index.js
var require_src = __commonJS({
  "node_modules/is-hex-prefixed/src/index.js"(exports, module) {
    module.exports = function isHexPrefixed(str) {
      if (typeof str !== "string") {
        throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + typeof str + ", while checking isHexPrefixed.");
      }
      return str.slice(0, 2) === "0x";
    };
  }
});

// node_modules/strip-hex-prefix/src/index.js
var require_src2 = __commonJS({
  "node_modules/strip-hex-prefix/src/index.js"(exports, module) {
    var isHexPrefixed = require_src();
    module.exports = function stripHexPrefix(str) {
      if (typeof str !== "string") {
        return str;
      }
      return isHexPrefixed(str) ? str.slice(2) : str;
    };
  }
});

// node_modules/number-to-bn/src/index.js
var require_src3 = __commonJS({
  "node_modules/number-to-bn/src/index.js"(exports, module) {
    var BN3 = require_bn2();
    var stripHexPrefix = require_src2();
    module.exports = function numberToBN(arg) {
      if (typeof arg === "string" || typeof arg === "number") {
        var multiplier = new BN3(1);
        var formattedString = String(arg).toLowerCase().trim();
        var isHexPrefixed = formattedString.substr(0, 2) === "0x" || formattedString.substr(0, 3) === "-0x";
        var stringArg = stripHexPrefix(formattedString);
        if (stringArg.substr(0, 1) === "-") {
          stringArg = stripHexPrefix(stringArg.slice(1));
          multiplier = new BN3(-1, 10);
        }
        stringArg = stringArg === "" ? "0" : stringArg;
        if (!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/) || stringArg.match(/^[a-fA-F]+$/) || isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/)) {
          return new BN3(stringArg, 16).mul(multiplier);
        }
        if ((stringArg.match(/^-?[0-9]+$/) || stringArg === "") && isHexPrefixed === false) {
          return new BN3(stringArg, 10).mul(multiplier);
        }
      } else if (typeof arg === "object" && arg.toString && (!arg.pop && !arg.push)) {
        if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {
          return new BN3(arg.toString(10), 10);
        }
      }
      throw new Error("[number-to-bn] while converting number " + JSON.stringify(arg) + " to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.");
    };
  }
});

// node_modules/ethjs-unit/lib/index.js
var require_lib = __commonJS({
  "node_modules/ethjs-unit/lib/index.js"(exports, module) {
    "use strict";
    var BN3 = require_bn();
    var numberToBN = require_src3();
    var zero = new BN3(0);
    var negative1 = new BN3(-1);
    var unitMap = {
      "noether": "0",
      // eslint-disable-line
      "wei": "1",
      // eslint-disable-line
      "kwei": "1000",
      // eslint-disable-line
      "Kwei": "1000",
      // eslint-disable-line
      "babbage": "1000",
      // eslint-disable-line
      "femtoether": "1000",
      // eslint-disable-line
      "mwei": "1000000",
      // eslint-disable-line
      "Mwei": "1000000",
      // eslint-disable-line
      "lovelace": "1000000",
      // eslint-disable-line
      "picoether": "1000000",
      // eslint-disable-line
      "gwei": "1000000000",
      // eslint-disable-line
      "Gwei": "1000000000",
      // eslint-disable-line
      "shannon": "1000000000",
      // eslint-disable-line
      "nanoether": "1000000000",
      // eslint-disable-line
      "nano": "1000000000",
      // eslint-disable-line
      "szabo": "1000000000000",
      // eslint-disable-line
      "microether": "1000000000000",
      // eslint-disable-line
      "micro": "1000000000000",
      // eslint-disable-line
      "finney": "1000000000000000",
      // eslint-disable-line
      "milliether": "1000000000000000",
      // eslint-disable-line
      "milli": "1000000000000000",
      // eslint-disable-line
      "ether": "1000000000000000000",
      // eslint-disable-line
      "kether": "1000000000000000000000",
      // eslint-disable-line
      "grand": "1000000000000000000000",
      // eslint-disable-line
      "mether": "1000000000000000000000000",
      // eslint-disable-line
      "gether": "1000000000000000000000000000",
      // eslint-disable-line
      "tether": "1000000000000000000000000000000"
    };
    function getValueOfUnit(unitInput) {
      var unit = unitInput ? unitInput.toLowerCase() : "ether";
      var unitValue = unitMap[unit];
      if (typeof unitValue !== "string") {
        throw new Error("[ethjs-unit] the unit provided " + unitInput + " doesn't exists, please use the one of the following units " + JSON.stringify(unitMap, null, 2));
      }
      return new BN3(unitValue, 10);
    }
    function numberToString(arg) {
      if (typeof arg === "string") {
        if (!arg.match(/^-?[0-9.]+$/)) {
          throw new Error("while converting number to string, invalid number value '" + arg + "', should be a number matching (^-?[0-9.]+).");
        }
        return arg;
      } else if (typeof arg === "number") {
        return String(arg);
      } else if (typeof arg === "object" && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {
        if (arg.toPrecision) {
          return String(arg.toPrecision());
        } else {
          return arg.toString(10);
        }
      }
      throw new Error("while converting number to string, invalid number value '" + arg + "' type " + typeof arg + ".");
    }
    function fromWei(weiInput, unit, optionsInput) {
      var wei = numberToBN(weiInput);
      var negative = wei.lt(zero);
      var base2 = getValueOfUnit(unit);
      var baseLength = unitMap[unit].length - 1 || 1;
      var options = optionsInput || {};
      if (negative) {
        wei = wei.mul(negative1);
      }
      var fraction = wei.mod(base2).toString(10);
      while (fraction.length < baseLength) {
        fraction = "0" + fraction;
      }
      if (!options.pad) {
        fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
      }
      var whole = wei.div(base2).toString(10);
      if (options.commify) {
        whole = whole.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      }
      var value = "" + whole + (fraction == "0" ? "" : "." + fraction);
      if (negative) {
        value = "-" + value;
      }
      return value;
    }
    function toWei(etherInput, unit) {
      var ether = numberToString(etherInput);
      var base2 = getValueOfUnit(unit);
      var baseLength = unitMap[unit].length - 1 || 1;
      var negative = ether.substring(0, 1) === "-";
      if (negative) {
        ether = ether.substring(1);
      }
      if (ether === ".") {
        throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei, invalid value");
      }
      var comps = ether.split(".");
      if (comps.length > 2) {
        throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei,  too many decimal points");
      }
      var whole = comps[0], fraction = comps[1];
      if (!whole) {
        whole = "0";
      }
      if (!fraction) {
        fraction = "0";
      }
      if (fraction.length > baseLength) {
        throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei, too many decimal places");
      }
      while (fraction.length < baseLength) {
        fraction += "0";
      }
      whole = new BN3(whole);
      fraction = new BN3(fraction);
      var wei = whole.mul(base2).add(fraction);
      if (negative) {
        wei = wei.mul(negative1);
      }
      return new BN3(wei.toString(10), 10);
    }
    module.exports = {
      unitMap,
      numberToString,
      getValueOfUnit,
      fromWei,
      toWei
    };
  }
});

// browser-external:buffer
var require_buffer2 = __commonJS({
  "browser-external:buffer"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key2) {
        if (key2 !== "__esModule" && key2 !== "__proto__" && key2 !== "constructor" && key2 !== "splice") {
          console.warn(`Module "buffer" has been externalized for browser compatibility. Cannot access "buffer.${key2}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/web3-utils/node_modules/bn.js/lib/bn.js
var require_bn3 = __commonJS({
  "node_modules/web3-utils/node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base2, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer2().Buffer;
        }
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base2 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base2, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert2(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul3) {
        var r2 = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul3;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert2(c >= 0 && b < mul3, "Invalid character");
          r2 += b;
        }
        return r2;
      }
      BN3.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base2);
          for (i = 0; i < mod; i++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN3.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN3.prototype.clone = function clone() {
        var r2 = new BN3(null);
        this.copy(r2);
        return r2;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN3.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect4;
        } catch (e) {
          BN3.prototype.inspect = inspect4;
        }
      } else {
        BN3.prototype.inspect = inspect4;
      }
      function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base2, padding2) {
        base2 = base2 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modrn(groupBase).toString(base2);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN3.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN3.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN3.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26)
            break;
        }
        return r2;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN3.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN3(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul3;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN3(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN3.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN3.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN3(1);
        var B = new BN3(0);
        var C = new BN3(0);
        var D = new BN3(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN3.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN3(1);
        var x2 = new BN3(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p) {
        this.name = name2;
        this.p = new BN3(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN3._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg3(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add3(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul3(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN3(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert2(i < m);
          var b = this.pow(c, new BN3(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a, b) {
        if (a.isZero() || b.isZero())
          return new BN3(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/utf8/utf8.js
var require_utf8 = __commonJS({
  "node_modules/utf8/utf8.js"(exports) {
    (function(root) {
      var stringFromCharCode = String.fromCharCode;
      function ucs2decode(string) {
        var output = [];
        var counter = 0;
        var length = string.length;
        var value;
        var extra;
        while (counter < length) {
          value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      function ucs2encode(array) {
        var length = array.length;
        var index = -1;
        var value;
        var output = "";
        while (++index < length) {
          value = array[index];
          if (value > 65535) {
            value -= 65536;
            output += stringFromCharCode(value >>> 10 & 1023 | 55296);
            value = 56320 | value & 1023;
          }
          output += stringFromCharCode(value);
        }
        return output;
      }
      function checkScalarValue(codePoint) {
        if (codePoint >= 55296 && codePoint <= 57343) {
          throw Error(
            "Lone surrogate U+" + codePoint.toString(16).toUpperCase() + " is not a scalar value"
          );
        }
      }
      function createByte(codePoint, shift) {
        return stringFromCharCode(codePoint >> shift & 63 | 128);
      }
      function encodeCodePoint(codePoint) {
        if ((codePoint & 4294967168) == 0) {
          return stringFromCharCode(codePoint);
        }
        var symbol = "";
        if ((codePoint & 4294965248) == 0) {
          symbol = stringFromCharCode(codePoint >> 6 & 31 | 192);
        } else if ((codePoint & 4294901760) == 0) {
          checkScalarValue(codePoint);
          symbol = stringFromCharCode(codePoint >> 12 & 15 | 224);
          symbol += createByte(codePoint, 6);
        } else if ((codePoint & 4292870144) == 0) {
          symbol = stringFromCharCode(codePoint >> 18 & 7 | 240);
          symbol += createByte(codePoint, 12);
          symbol += createByte(codePoint, 6);
        }
        symbol += stringFromCharCode(codePoint & 63 | 128);
        return symbol;
      }
      function utf8encode(string) {
        var codePoints = ucs2decode(string);
        var length = codePoints.length;
        var index = -1;
        var codePoint;
        var byteString = "";
        while (++index < length) {
          codePoint = codePoints[index];
          byteString += encodeCodePoint(codePoint);
        }
        return byteString;
      }
      function readContinuationByte() {
        if (byteIndex >= byteCount) {
          throw Error("Invalid byte index");
        }
        var continuationByte = byteArray[byteIndex] & 255;
        byteIndex++;
        if ((continuationByte & 192) == 128) {
          return continuationByte & 63;
        }
        throw Error("Invalid continuation byte");
      }
      function decodeSymbol() {
        var byte1;
        var byte2;
        var byte3;
        var byte4;
        var codePoint;
        if (byteIndex > byteCount) {
          throw Error("Invalid byte index");
        }
        if (byteIndex == byteCount) {
          return false;
        }
        byte1 = byteArray[byteIndex] & 255;
        byteIndex++;
        if ((byte1 & 128) == 0) {
          return byte1;
        }
        if ((byte1 & 224) == 192) {
          byte2 = readContinuationByte();
          codePoint = (byte1 & 31) << 6 | byte2;
          if (codePoint >= 128) {
            return codePoint;
          } else {
            throw Error("Invalid continuation byte");
          }
        }
        if ((byte1 & 240) == 224) {
          byte2 = readContinuationByte();
          byte3 = readContinuationByte();
          codePoint = (byte1 & 15) << 12 | byte2 << 6 | byte3;
          if (codePoint >= 2048) {
            checkScalarValue(codePoint);
            return codePoint;
          } else {
            throw Error("Invalid continuation byte");
          }
        }
        if ((byte1 & 248) == 240) {
          byte2 = readContinuationByte();
          byte3 = readContinuationByte();
          byte4 = readContinuationByte();
          codePoint = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
          if (codePoint >= 65536 && codePoint <= 1114111) {
            return codePoint;
          }
        }
        throw Error("Invalid UTF-8 detected");
      }
      var byteArray;
      var byteCount;
      var byteIndex;
      function utf8decode(byteString) {
        byteArray = ucs2decode(byteString);
        byteCount = byteArray.length;
        byteIndex = 0;
        var codePoints = [];
        var tmp;
        while ((tmp = decodeSymbol()) !== false) {
          codePoints.push(tmp);
        }
        return ucs2encode(codePoints);
      }
      root.version = "3.0.0";
      root.encode = utf8encode;
      root.decode = utf8decode;
    })(typeof exports === "undefined" ? exports.utf8 = {} : exports);
  }
});

// node_modules/ethereumjs-util/node_modules/bn.js/lib/bn.js
var require_bn4 = __commonJS({
  "node_modules/ethereumjs-util/node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base2, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer2().Buffer;
        }
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base2 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base2, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert2(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul3) {
        var r2 = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul3;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert2(c >= 0 && b < mul3, "Invalid character");
          r2 += b;
        }
        return r2;
      }
      BN3.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base2);
          for (i = 0; i < mod; i++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN3.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN3.prototype.clone = function clone() {
        var r2 = new BN3(null);
        this.copy(r2);
        return r2;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN3.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect4;
        } catch (e) {
          BN3.prototype.inspect = inspect4;
        }
      } else {
        BN3.prototype.inspect = inspect4;
      }
      function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base2, padding2) {
        base2 = base2 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modrn(groupBase).toString(base2);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN3.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN3.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN3.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26)
            break;
        }
        return r2;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN3.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN3(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul3;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN3(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN3.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN3.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN3(1);
        var B = new BN3(0);
        var C = new BN3(0);
        var D = new BN3(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN3.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN3(1);
        var x2 = new BN3(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p) {
        this.name = name2;
        this.p = new BN3(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN3._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg3(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add3(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul3(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN3(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert2(i < m);
          var b = this.pow(c, new BN3(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a, b) {
        if (a.isZero() || b.isZero())
          return new BN3(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/rlp/node_modules/bn.js/lib/bn.js
var require_bn5 = __commonJS({
  "node_modules/rlp/node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base2, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer2().Buffer;
        }
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base2 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base2, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert2(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul3) {
        var r2 = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul3;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert2(c >= 0 && b < mul3, "Invalid character");
          r2 += b;
        }
        return r2;
      }
      BN3.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base2);
          for (i = 0; i < mod; i++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN3.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN3.prototype.clone = function clone() {
        var r2 = new BN3(null);
        this.copy(r2);
        return r2;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN3.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect4;
        } catch (e) {
          BN3.prototype.inspect = inspect4;
        }
      } else {
        BN3.prototype.inspect = inspect4;
      }
      function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base2, padding2) {
        base2 = base2 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modrn(groupBase).toString(base2);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN3.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN3.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN3.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26)
            break;
        }
        return r2;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN3.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN3(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul3;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN3(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN3.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN3.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN3(1);
        var B = new BN3(0);
        var C = new BN3(0);
        var D = new BN3(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN3.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN3(1);
        var x2 = new BN3(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p) {
        this.name = name2;
        this.p = new BN3(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN3._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg3(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add3(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul3(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN3(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert2(i < m);
          var b = this.pow(c, new BN3(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a, b) {
        if (a.isZero() || b.isZero())
          return new BN3(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/rlp/dist.browser/index.js
var require_dist = __commonJS({
  "node_modules/rlp/dist.browser/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLength = exports.decode = exports.encode = void 0;
    var bn_js_1 = __importDefault(require_bn5());
    function encode4(input) {
      if (Array.isArray(input)) {
        var output = [];
        for (var i = 0; i < input.length; i++) {
          output.push(encode4(input[i]));
        }
        var buf = Buffer.concat(output);
        return Buffer.concat([encodeLength(buf.length, 192), buf]);
      } else {
        var inputBuf = toBuffer(input);
        return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
      }
    }
    exports.encode = encode4;
    function safeParseInt(v, base2) {
      if (v[0] === "0" && v[1] === "0") {
        throw new Error("invalid RLP: extra zeros");
      }
      return parseInt(v, base2);
    }
    function encodeLength(len, offset) {
      if (len < 56) {
        return Buffer.from([len + offset]);
      } else {
        var hexLength = intToHex(len);
        var lLength = hexLength.length / 2;
        var firstByte = intToHex(offset + 55 + lLength);
        return Buffer.from(firstByte + hexLength, "hex");
      }
    }
    function decode3(input, stream) {
      if (stream === void 0) {
        stream = false;
      }
      if (!input || input.length === 0) {
        return Buffer.from([]);
      }
      var inputBuffer = toBuffer(input);
      var decoded = _decode2(inputBuffer);
      if (stream) {
        return decoded;
      }
      if (decoded.remainder.length !== 0) {
        throw new Error("invalid remainder");
      }
      return decoded.data;
    }
    exports.decode = decode3;
    function getLength2(input) {
      if (!input || input.length === 0) {
        return Buffer.from([]);
      }
      var inputBuffer = toBuffer(input);
      var firstByte = inputBuffer[0];
      if (firstByte <= 127) {
        return inputBuffer.length;
      } else if (firstByte <= 183) {
        return firstByte - 127;
      } else if (firstByte <= 191) {
        return firstByte - 182;
      } else if (firstByte <= 247) {
        return firstByte - 191;
      } else {
        var llength = firstByte - 246;
        var length_1 = safeParseInt(inputBuffer.slice(1, llength).toString("hex"), 16);
        return llength + length_1;
      }
    }
    exports.getLength = getLength2;
    function _decode2(input) {
      var length, llength, data, innerRemainder, d;
      var decoded = [];
      var firstByte = input[0];
      if (firstByte <= 127) {
        return {
          data: input.slice(0, 1),
          remainder: input.slice(1)
        };
      } else if (firstByte <= 183) {
        length = firstByte - 127;
        if (firstByte === 128) {
          data = Buffer.from([]);
        } else {
          data = input.slice(1, length);
        }
        if (length === 2 && data[0] < 128) {
          throw new Error("invalid rlp encoding: byte must be less 0x80");
        }
        return {
          data,
          remainder: input.slice(length)
        };
      } else if (firstByte <= 191) {
        llength = firstByte - 182;
        if (input.length - 1 < llength) {
          throw new Error("invalid RLP: not enough bytes for string length");
        }
        length = safeParseInt(input.slice(1, llength).toString("hex"), 16);
        if (length <= 55) {
          throw new Error("invalid RLP: expected string length to be greater than 55");
        }
        data = input.slice(llength, length + llength);
        if (data.length < length) {
          throw new Error("invalid RLP: not enough bytes for string");
        }
        return {
          data,
          remainder: input.slice(length + llength)
        };
      } else if (firstByte <= 247) {
        length = firstByte - 191;
        innerRemainder = input.slice(1, length);
        while (innerRemainder.length) {
          d = _decode2(innerRemainder);
          decoded.push(d.data);
          innerRemainder = d.remainder;
        }
        return {
          data: decoded,
          remainder: input.slice(length)
        };
      } else {
        llength = firstByte - 246;
        length = safeParseInt(input.slice(1, llength).toString("hex"), 16);
        var totalLength = llength + length;
        if (totalLength > input.length) {
          throw new Error("invalid rlp: total length is larger than the data");
        }
        innerRemainder = input.slice(llength, totalLength);
        if (innerRemainder.length === 0) {
          throw new Error("invalid rlp, List has a invalid length");
        }
        while (innerRemainder.length) {
          d = _decode2(innerRemainder);
          decoded.push(d.data);
          innerRemainder = d.remainder;
        }
        return {
          data: decoded,
          remainder: input.slice(totalLength)
        };
      }
    }
    function isHexPrefixed(str) {
      return str.slice(0, 2) === "0x";
    }
    function stripHexPrefix(str) {
      if (typeof str !== "string") {
        return str;
      }
      return isHexPrefixed(str) ? str.slice(2) : str;
    }
    function intToHex(integer) {
      if (integer < 0) {
        throw new Error("Invalid integer as argument, must be unsigned!");
      }
      var hex = integer.toString(16);
      return hex.length % 2 ? "0" + hex : hex;
    }
    function padToEven(a) {
      return a.length % 2 ? "0" + a : a;
    }
    function intToBuffer(integer) {
      var hex = intToHex(integer);
      return Buffer.from(hex, "hex");
    }
    function toBuffer(v) {
      if (!Buffer.isBuffer(v)) {
        if (typeof v === "string") {
          if (isHexPrefixed(v)) {
            return Buffer.from(padToEven(stripHexPrefix(v)), "hex");
          } else {
            return Buffer.from(v);
          }
        } else if (typeof v === "number" || typeof v === "bigint") {
          if (!v) {
            return Buffer.from([]);
          } else {
            return intToBuffer(v);
          }
        } else if (v === null || v === void 0) {
          return Buffer.from([]);
        } else if (v instanceof Uint8Array) {
          return Buffer.from(v);
        } else if (bn_js_1.default.isBN(v)) {
          return Buffer.from(v.toArray());
        } else {
          throw new Error("invalid type");
        }
      }
      return v;
    }
  }
});

// node_modules/ethereumjs-util/dist.browser/externals.js
var require_externals = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/externals.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.rlp = exports.BN = void 0;
    var bn_js_1 = __importDefault(require_bn4());
    exports.BN = bn_js_1.default;
    var rlp = __importStar(require_dist());
    exports.rlp = rlp;
  }
});

// node_modules/ethereumjs-util/dist.browser/constants.js
var require_constants = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = exports.MAX_UINT64 = void 0;
    var buffer_1 = require_buffer();
    var externals_1 = require_externals();
    exports.MAX_UINT64 = new externals_1.BN("ffffffffffffffff", 16);
    exports.MAX_INTEGER = new externals_1.BN("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16);
    exports.TWO_POW256 = new externals_1.BN("10000000000000000000000000000000000000000000000000000000000000000", 16);
    exports.KECCAK256_NULL_S = "c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
    exports.KECCAK256_NULL = buffer_1.Buffer.from(exports.KECCAK256_NULL_S, "hex");
    exports.KECCAK256_RLP_ARRAY_S = "1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347";
    exports.KECCAK256_RLP_ARRAY = buffer_1.Buffer.from(exports.KECCAK256_RLP_ARRAY_S, "hex");
    exports.KECCAK256_RLP_S = "56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421";
    exports.KECCAK256_RLP = buffer_1.Buffer.from(exports.KECCAK256_RLP_S, "hex");
  }
});

// browser-external:assert
var require_assert = __commonJS({
  "browser-external:assert"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key2) {
        if (key2 !== "__esModule" && key2 !== "__proto__" && key2 !== "constructor" && key2 !== "splice") {
          console.warn(`Module "assert" has been externalized for browser compatibility. Cannot access "assert.${key2}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/secp256k1/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/secp256k1/lib/index.js"(exports, module) {
    var errors = {
      IMPOSSIBLE_CASE: "Impossible case. Please create issue.",
      TWEAK_ADD: "The tweak was out of range or the resulted private key is invalid",
      TWEAK_MUL: "The tweak was out of range or equal to zero",
      CONTEXT_RANDOMIZE_UNKNOW: "Unknow error on context randomization",
      SECKEY_INVALID: "Private Key is invalid",
      PUBKEY_PARSE: "Public Key could not be parsed",
      PUBKEY_SERIALIZE: "Public Key serialization error",
      PUBKEY_COMBINE: "The sum of the public keys is not valid",
      SIG_PARSE: "Signature could not be parsed",
      SIGN: "The nonce generation function failed, or the private key was invalid",
      RECOVER: "Public key could not be recover",
      ECDH: "Scalar was invalid (zero or overflow)"
    };
    function assert2(cond, msg) {
      if (!cond)
        throw new Error(msg);
    }
    function isUint8Array(name2, value, length) {
      assert2(value instanceof Uint8Array, `Expected ${name2} to be an Uint8Array`);
      if (length !== void 0) {
        if (Array.isArray(length)) {
          const numbers = length.join(", ");
          const msg = `Expected ${name2} to be an Uint8Array with length [${numbers}]`;
          assert2(length.includes(value.length), msg);
        } else {
          const msg = `Expected ${name2} to be an Uint8Array with length ${length}`;
          assert2(value.length === length, msg);
        }
      }
    }
    function isCompressed(value) {
      assert2(toTypeString(value) === "Boolean", "Expected compressed to be a Boolean");
    }
    function getAssertedOutput(output = (len) => new Uint8Array(len), length) {
      if (typeof output === "function")
        output = output(length);
      isUint8Array("output", output, length);
      return output;
    }
    function toTypeString(value) {
      return Object.prototype.toString.call(value).slice(8, -1);
    }
    module.exports = (secp256k1) => {
      return {
        contextRandomize(seed) {
          assert2(
            seed === null || seed instanceof Uint8Array,
            "Expected seed to be an Uint8Array or null"
          );
          if (seed !== null)
            isUint8Array("seed", seed, 32);
          switch (secp256k1.contextRandomize(seed)) {
            case 1:
              throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW);
          }
        },
        privateKeyVerify(seckey) {
          isUint8Array("private key", seckey, 32);
          return secp256k1.privateKeyVerify(seckey) === 0;
        },
        privateKeyNegate(seckey) {
          isUint8Array("private key", seckey, 32);
          switch (secp256k1.privateKeyNegate(seckey)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        privateKeyTweakAdd(seckey, tweak) {
          isUint8Array("private key", seckey, 32);
          isUint8Array("tweak", tweak, 32);
          switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.TWEAK_ADD);
          }
        },
        privateKeyTweakMul(seckey, tweak) {
          isUint8Array("private key", seckey, 32);
          isUint8Array("tweak", tweak, 32);
          switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
            case 0:
              return seckey;
            case 1:
              throw new Error(errors.TWEAK_MUL);
          }
        },
        publicKeyVerify(pubkey) {
          isUint8Array("public key", pubkey, [33, 65]);
          return secp256k1.publicKeyVerify(pubkey) === 0;
        },
        publicKeyCreate(seckey, compressed = true, output) {
          isUint8Array("private key", seckey, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyCreate(output, seckey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SECKEY_INVALID);
            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyConvert(pubkey, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyConvert(output, pubkey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyNegate(pubkey, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyNegate(output, pubkey)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyCombine(pubkeys, compressed = true, output) {
          assert2(Array.isArray(pubkeys), "Expected public keys to be an Array");
          assert2(pubkeys.length > 0, "Expected public keys array will have more than zero items");
          for (const pubkey of pubkeys) {
            isUint8Array("public key", pubkey, [33, 65]);
          }
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyCombine(output, pubkeys)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_COMBINE);
            case 3:
              throw new Error(errors.PUBKEY_SERIALIZE);
          }
        },
        publicKeyTweakAdd(pubkey, tweak, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("tweak", tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.TWEAK_ADD);
          }
        },
        publicKeyTweakMul(pubkey, tweak, compressed = true, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("tweak", tweak, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.TWEAK_MUL);
          }
        },
        signatureNormalize(sig) {
          isUint8Array("signature", sig, 64);
          switch (secp256k1.signatureNormalize(sig)) {
            case 0:
              return sig;
            case 1:
              throw new Error(errors.SIG_PARSE);
          }
        },
        signatureExport(sig, output) {
          isUint8Array("signature", sig, 64);
          output = getAssertedOutput(output, 72);
          const obj = { output, outputlen: 72 };
          switch (secp256k1.signatureExport(obj, sig)) {
            case 0:
              return output.slice(0, obj.outputlen);
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        signatureImport(sig, output) {
          isUint8Array("signature", sig);
          output = getAssertedOutput(output, 64);
          switch (secp256k1.signatureImport(output, sig)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdsaSign(msg32, seckey, options = {}, output) {
          isUint8Array("message", msg32, 32);
          isUint8Array("private key", seckey, 32);
          assert2(toTypeString(options) === "Object", "Expected options to be an Object");
          if (options.data !== void 0)
            isUint8Array("options.data", options.data);
          if (options.noncefn !== void 0)
            assert2(toTypeString(options.noncefn) === "Function", "Expected options.noncefn to be a Function");
          output = getAssertedOutput(output, 64);
          const obj = { signature: output, recid: null };
          switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
            case 0:
              return obj;
            case 1:
              throw new Error(errors.SIGN);
            case 2:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdsaVerify(sig, msg32, pubkey) {
          isUint8Array("signature", sig, 64);
          isUint8Array("message", msg32, 32);
          isUint8Array("public key", pubkey, [33, 65]);
          switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
            case 0:
              return true;
            case 3:
              return false;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.PUBKEY_PARSE);
          }
        },
        ecdsaRecover(sig, recid, msg32, compressed = true, output) {
          isUint8Array("signature", sig, 64);
          assert2(
            toTypeString(recid) === "Number" && recid >= 0 && recid <= 3,
            "Expected recovery id to be a Number within interval [0, 3]"
          );
          isUint8Array("message", msg32, 32);
          isCompressed(compressed);
          output = getAssertedOutput(output, compressed ? 33 : 65);
          switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.SIG_PARSE);
            case 2:
              throw new Error(errors.RECOVER);
            case 3:
              throw new Error(errors.IMPOSSIBLE_CASE);
          }
        },
        ecdh(pubkey, seckey, options = {}, output) {
          isUint8Array("public key", pubkey, [33, 65]);
          isUint8Array("private key", seckey, 32);
          assert2(toTypeString(options) === "Object", "Expected options to be an Object");
          if (options.data !== void 0)
            isUint8Array("options.data", options.data);
          if (options.hashfn !== void 0) {
            assert2(toTypeString(options.hashfn) === "Function", "Expected options.hashfn to be a Function");
            if (options.xbuf !== void 0)
              isUint8Array("options.xbuf", options.xbuf, 32);
            if (options.ybuf !== void 0)
              isUint8Array("options.ybuf", options.ybuf, 32);
            isUint8Array("output", output);
          } else {
            output = getAssertedOutput(output, 32);
          }
          switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
            case 0:
              return output;
            case 1:
              throw new Error(errors.PUBKEY_PARSE);
            case 2:
              throw new Error(errors.ECDH);
          }
        }
      };
    };
  }
});

// node_modules/elliptic/package.json
var require_package = __commonJS({
  "node_modules/elliptic/package.json"(exports, module) {
    module.exports = {
      name: "elliptic",
      version: "6.5.4",
      description: "EC cryptography",
      main: "lib/elliptic.js",
      files: [
        "lib"
      ],
      scripts: {
        lint: "eslint lib test",
        "lint:fix": "npm run lint -- --fix",
        unit: "istanbul test _mocha --reporter=spec test/index.js",
        test: "npm run lint && npm run unit",
        version: "grunt dist && git add dist/"
      },
      repository: {
        type: "git",
        url: "git@github.com:indutny/elliptic"
      },
      keywords: [
        "EC",
        "Elliptic",
        "curve",
        "Cryptography"
      ],
      author: "Fedor Indutny <fedor@indutny.com>",
      license: "MIT",
      bugs: {
        url: "https://github.com/indutny/elliptic/issues"
      },
      homepage: "https://github.com/indutny/elliptic",
      devDependencies: {
        brfs: "^2.0.2",
        coveralls: "^3.1.0",
        eslint: "^7.6.0",
        grunt: "^1.2.1",
        "grunt-browserify": "^5.3.0",
        "grunt-cli": "^1.3.2",
        "grunt-contrib-connect": "^3.0.0",
        "grunt-contrib-copy": "^1.0.0",
        "grunt-contrib-uglify": "^5.0.0",
        "grunt-mocha-istanbul": "^5.0.2",
        "grunt-saucelabs": "^9.0.1",
        istanbul: "^0.4.5",
        mocha: "^8.0.1"
      },
      dependencies: {
        "bn.js": "^4.11.9",
        brorand: "^1.1.0",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.1",
        inherits: "^2.0.4",
        "minimalistic-assert": "^1.0.1",
        "minimalistic-crypto-utils": "^1.0.1"
      }
    };
  }
});

// node_modules/bn.js/lib/bn.js
var require_bn6 = __commonJS({
  "node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base2, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer2().Buffer;
        }
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base2 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base2, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          return c - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start, end, mul3) {
        var r2 = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul3;
          if (c >= 49) {
            r2 += c - 49 + 10;
          } else if (c >= 17) {
            r2 += c - 17 + 10;
          } else {
            r2 += c;
          }
        }
        return r2;
      }
      BN3.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base2);
          for (i = 0; i < mod; i++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN3.prototype.clone = function clone() {
        var r2 = new BN3(null);
        this.copy(r2);
        return r2;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN3.prototype.inspect = function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base2, padding2) {
        base2 = base2 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modn(groupBase).toString(base2);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16);
      };
      BN3.prototype.toBuffer = function toBuffer(endian, length) {
        assert2(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26)
            break;
        }
        return r2;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN3.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN3(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul3;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert2(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN3(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modn = function modn(num) {
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN3.prototype.idivn = function idivn(num) {
        assert2(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN3(1);
        var B = new BN3(0);
        var C = new BN3(0);
        var D = new BN3(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN3.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN3(1);
        var x2 = new BN3(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p) {
        this.name = name2;
        this.p = new BN3(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN3._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg3(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add3(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul3(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN3(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert2(i < m);
          var b = this.pow(c, new BN3(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a, b) {
        if (a.isZero() || b.isZero())
          return new BN3(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/minimalistic-assert/index.js
var require_minimalistic_assert = __commonJS({
  "node_modules/minimalistic-assert/index.js"(exports, module) {
    module.exports = assert2;
    function assert2(val, msg) {
      if (!val)
        throw new Error(msg || "Assertion failed");
    }
    assert2.equal = function assertEqual2(l, r2, msg) {
      if (l != r2)
        throw new Error(msg || "Assertion failed: " + l + " != " + r2);
    };
  }
});

// node_modules/minimalistic-crypto-utils/lib/utils.js
var require_utils = __commonJS({
  "node_modules/minimalistic-crypto-utils/lib/utils.js"(exports) {
    "use strict";
    var utils = exports;
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== "string") {
        for (var i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
        return res;
      }
      if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 255;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils.toArray = toArray;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    utils.zero2 = zero2;
    function toHex4(msg) {
      var res = "";
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex4;
    utils.encode = function encode4(arr, enc) {
      if (enc === "hex")
        return toHex4(arr);
      else
        return arr;
    };
  }
});

// node_modules/elliptic/lib/elliptic/utils.js
var require_utils2 = __commonJS({
  "node_modules/elliptic/lib/elliptic/utils.js"(exports) {
    "use strict";
    var utils = exports;
    var BN3 = require_bn6();
    var minAssert = require_minimalistic_assert();
    var minUtils = require_utils();
    utils.assert = minAssert;
    utils.toArray = minUtils.toArray;
    utils.zero2 = minUtils.zero2;
    utils.toHex = minUtils.toHex;
    utils.encode = minUtils.encode;
    function getNAF2(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);
      var ws = 1 << w + 1;
      var k = num.clone();
      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }
        naf[i] = z;
        k.iushrn(1);
      }
      return naf;
    }
    utils.getNAF = getNAF2;
    function getJSF2(k1, k2) {
      var jsf = [
        [],
        []
      ];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
      return jsf;
    }
    utils.getJSF = getJSF2;
    function cachedProperty(obj, name2, computer) {
      var key2 = "_" + name2;
      obj.prototype[name2] = function cachedProperty2() {
        return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;
    function parseBytes(bytes) {
      return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
    }
    utils.parseBytes = parseBytes;
    function intFromLE(bytes) {
      return new BN3(bytes, "hex", "le");
    }
    utils.intFromLE = intFromLE;
  }
});

// node_modules/brorand/index.js
var require_brorand = __commonJS({
  "node_modules/brorand/index.js"(exports, module) {
    var r2;
    module.exports = function rand2(len) {
      if (!r2)
        r2 = new Rand(null);
      return r2.generate(len);
    };
    function Rand(rand2) {
      this.rand = rand2;
    }
    module.exports.Rand = Rand;
    Rand.prototype.generate = function generate2(len) {
      return this._rand(len);
    };
    Rand.prototype._rand = function _rand(n) {
      if (this.rand.getBytes)
        return this.rand.getBytes(n);
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };
    if (typeof self === "object") {
      if (self.crypto && self.crypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.crypto.getRandomValues(arr);
          return arr;
        };
      } else if (self.msCrypto && self.msCrypto.getRandomValues) {
        Rand.prototype._rand = function _rand(n) {
          var arr = new Uint8Array(n);
          self.msCrypto.getRandomValues(arr);
          return arr;
        };
      } else if (typeof window === "object") {
        Rand.prototype._rand = function() {
          throw new Error("Not implemented yet");
        };
      }
    } else {
      try {
        crypto2 = require_crypto();
        if (typeof crypto2.randomBytes !== "function")
          throw new Error("Not supported");
        Rand.prototype._rand = function _rand(n) {
          return crypto2.randomBytes(n);
        };
      } catch (e) {
      }
    }
    var crypto2;
  }
});

// node_modules/elliptic/lib/elliptic/curve/base.js
var require_base = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/base.js"(exports, module) {
    "use strict";
    var BN3 = require_bn6();
    var utils = require_utils2();
    var getNAF2 = utils.getNAF;
    var getJSF2 = utils.getJSF;
    var assert2 = utils.assert;
    function BaseCurve2(type, conf) {
      this.type = type;
      this.p = new BN3(conf.p, 16);
      this.red = conf.prime ? BN3.red(conf.prime) : BN3.mont(this.p);
      this.zero = new BN3(0).toRed(this.red);
      this.one = new BN3(1).toRed(this.red);
      this.two = new BN3(2).toRed(this.red);
      this.n = conf.n && new BN3(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);
      this._bitLength = this.n ? this.n.bitLength() : 0;
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    module.exports = BaseCurve2;
    BaseCurve2.prototype.point = function point3() {
      throw new Error("Not implemented");
    };
    BaseCurve2.prototype.validate = function validate5() {
      throw new Error("Not implemented");
    };
    BaseCurve2.prototype._fixedNafMul = function _fixedNafMul2(p, k) {
      assert2(p.precomputed);
      var doubles = p._getDoubles();
      var naf = getNAF2(k, 1, this._bitLength);
      var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }
      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };
    BaseCurve2.prototype._wnafMul = function _wnafMul2(p, k) {
      var w = 4;
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF2(k, w, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);
        if (i < 0)
          break;
        var z = naf[i];
        assert2(z !== 0);
        if (p.type === "affine") {
          if (z > 0)
            acc = acc.mixedAdd(wnd[z - 1 >> 1]);
          else
            acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else {
          if (z > 0)
            acc = acc.add(wnd[z - 1 >> 1]);
          else
            acc = acc.add(wnd[-z - 1 >> 1].neg());
        }
      }
      return p.type === "affine" ? acc.toP() : acc;
    };
    BaseCurve2.prototype._wnafMulAdd = function _wnafMulAdd2(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF2(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF2(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }
        var comb = [
          points[a],
          /* 1 */
          null,
          /* 3 */
          null,
          /* 5 */
          points[b]
          /* 7 */
        ];
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
          -3,
          /* -1 -1 */
          -1,
          /* -1 0 */
          -5,
          /* -1 1 */
          -7,
          /* 0 -1 */
          0,
          /* 0 0 */
          7,
          /* 0 1 */
          5,
          /* 1 -1 */
          1,
          /* 1 0 */
          3
          /* 1 1 */
        ];
        var jsf = getJSF2(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;
          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;
        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;
        for (j = 0; j < len; j++) {
          var z = tmp[j];
          p;
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][z - 1 >> 1];
          else if (z < 0)
            p = wnd[j][-z - 1 >> 1].neg();
          if (p.type === "affine")
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      for (i = 0; i < len; i++)
        wnd[i] = null;
      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };
    function BasePoint2(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve2.BasePoint = BasePoint2;
    BasePoint2.prototype.eq = function eq4() {
      throw new Error("Not implemented");
    };
    BasePoint2.prototype.validate = function validate5() {
      return this.curve.validate(this);
    };
    BaseCurve2.prototype.decodePoint = function decodePoint2(bytes, enc) {
      bytes = utils.toArray(bytes, enc);
      var len = this.p.byteLength();
      if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6)
          assert2(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7)
          assert2(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(
          bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len)
        );
        return res;
      } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
      }
      throw new Error("Unknown point format");
    };
    BasePoint2.prototype.encodeCompressed = function encodeCompressed2(enc) {
      return this.encode(enc, true);
    };
    BasePoint2.prototype._encode = function _encode3(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray("be", len);
      if (compact)
        return [this.getY().isEven() ? 2 : 3].concat(x);
      return [4].concat(x, this.getY().toArray("be", len));
    };
    BasePoint2.prototype.encode = function encode4(enc, compact) {
      return utils.encode(this._encode(compact), enc);
    };
    BasePoint2.prototype.precompute = function precompute2(power) {
      if (this.precomputed)
        return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint2.prototype._hasDoubles = function _hasDoubles2(k) {
      if (!this.precomputed)
        return false;
      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;
      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };
    BasePoint2.prototype._getDoubles = function _getDoubles2(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      var doubles = [this];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step,
        points: doubles
      };
    };
    BasePoint2.prototype._getNAFPoints = function _getNAFPoints2(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      var res = [this];
      var max = (1 << wnd) - 1;
      var dbl3 = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl3);
      return {
        wnd,
        points: res
      };
    };
    BasePoint2.prototype._getBeta = function _getBeta3() {
      return null;
    };
    BasePoint2.prototype.dblp = function dblp3(k) {
      var r2 = this;
      for (var i = 0; i < k; i++)
        r2 = r2.dbl();
      return r2;
    };
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports, module) {
    if (typeof Object.create === "function") {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/elliptic/lib/elliptic/curve/short.js
var require_short = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/short.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var BN3 = require_bn6();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var assert2 = utils.assert;
    function ShortCurve2(conf) {
      Base.call(this, "short", conf);
      this.a = new BN3(conf.a, 16).toRed(this.red);
      this.b = new BN3(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();
      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits(ShortCurve2, Base);
    module.exports = ShortCurve2;
    ShortCurve2.prototype._getEndomorphism = function _getEndomorphism2(conf) {
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new BN3(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new BN3(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new BN3(vec.a, 16),
            b: new BN3(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
      return {
        beta,
        lambda,
        basis
      };
    };
    ShortCurve2.prototype._getEndoRoots = function _getEndoRoots2(num) {
      var red = num === this.p ? this.red : BN3.mont(num);
      var tinv = new BN3(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s = new BN3(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [l1, l2];
    };
    ShortCurve2.prototype._getEndoBasis = function _getEndoBasis2(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u = lambda;
      var v = this.n.clone();
      var x1 = new BN3(1);
      var y1 = new BN3(0);
      var x2 = new BN3(0);
      var y2 = new BN3(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a2;
      var b2;
      var prevR;
      var i = 0;
      var r2;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r2 = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r2.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r2.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r2;
        v = u;
        u = r2;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r2.neg();
      b2 = x;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }
      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 }
      ];
    };
    ShortCurve2.prototype._endoSplit = function _endoSplit2(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];
      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1, k2 };
    };
    ShortCurve2.prototype.pointFromX = function pointFromX2(x, odd) {
      x = new BN3(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
      return this.point(x, y);
    };
    ShortCurve2.prototype.validate = function validate5(point3) {
      if (point3.inf)
        return true;
      var x = point3.x;
      var y = point3.y;
      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    ShortCurve2.prototype._endoWnafMulAdd = function _endoWnafMulAdd2(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };
    function Point2(curve, x, y, isRed) {
      Base.BasePoint.call(this, curve, "affine");
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new BN3(x, 16);
        this.y = new BN3(y, 16);
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits(Point2, Base.BasePoint);
    ShortCurve2.prototype.point = function point3(x, y, isRed) {
      return new Point2(this, x, y, isRed);
    };
    ShortCurve2.prototype.pointFromJSON = function pointFromJSON2(obj, red) {
      return Point2.fromJSON(this, obj, red);
    };
    Point2.prototype._getBeta = function _getBeta3() {
      if (!this.curve.endo)
        return;
      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    Point2.prototype.toJSON = function toJSON2() {
      if (!this.precomputed)
        return [this.x, this.y];
      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      }];
    };
    Point2.fromJSON = function fromJSON2(curve, obj, red) {
      if (typeof obj === "string")
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;
      function obj2point(obj2) {
        return curve.point(obj2[0], obj2[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    Point2.prototype.inspect = function inspect4() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Point2.prototype.isInfinity = function isInfinity3() {
      return this.inf;
    };
    Point2.prototype.add = function add3(p) {
      if (this.inf)
        return p;
      if (p.inf)
        return this;
      if (this.eq(p))
        return this.dbl();
      if (this.neg().eq(p))
        return this.curve.point(null, null);
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);
      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point2.prototype.dbl = function dbl3() {
      if (this.inf)
        return this;
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
      var a = this.curve.a;
      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point2.prototype.getX = function getX2() {
      return this.x.fromRed();
    };
    Point2.prototype.getY = function getY2() {
      return this.y.fromRed();
    };
    Point2.prototype.mul = function mul3(k) {
      k = new BN3(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k]);
      else
        return this.curve._wnafMul(this, k);
    };
    Point2.prototype.mulAdd = function mulAdd2(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point2.prototype.jmulAdd = function jmulAdd2(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point2.prototype.eq = function eq4(p) {
      return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };
    Point2.prototype.neg = function neg3(_precompute) {
      if (this.inf)
        return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    Point2.prototype.toJ = function toJ2() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    function JPoint2(curve, x, y, z) {
      Base.BasePoint.call(this, curve, "jacobian");
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN3(0);
      } else {
        this.x = new BN3(x, 16);
        this.y = new BN3(y, 16);
        this.z = new BN3(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
    }
    inherits(JPoint2, Base.BasePoint);
    ShortCurve2.prototype.jpoint = function jpoint2(x, y, z) {
      return new JPoint2(this, x, y, z);
    };
    JPoint2.prototype.toP = function toP2() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint2.prototype.neg = function neg3() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint2.prototype.add = function add3(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));
      var h = u1.redSub(u2);
      var r2 = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r2.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype.mixedAdd = function mixedAdd2(p) {
      if (this.isInfinity())
        return p.toJ();
      if (p.isInfinity())
        return this;
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);
      var h = u1.redSub(u2);
      var r2 = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r2.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype.dblp = function dblp3(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();
      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r2 = this;
        for (i = 0; i < pow; i++)
          r2 = r2.dbl();
        return r2;
      }
      var a = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint2.prototype.dbl = function dbl3() {
      if (this.isInfinity())
        return this;
      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };
    JPoint2.prototype._zeroDbl = function _zeroDbl2() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx);
        var t = m.redSqr().redISub(s).redISub(s);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t;
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a = this.x.redSqr();
        var b = this.y.redSqr();
        var c = b.redSqr();
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        var e = a.redAdd(a).redIAdd(a);
        var f = e.redSqr();
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f.redISub(d).redISub(d);
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype._threeDbl = function _threeDbl2() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t = m.redSqr().redISub(s).redISub(s);
        nx = t;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype._dbl = function _dbl2() {
      var a = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype.trpl = function trpl2() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m = xx.redAdd(xx).redIAdd(xx);
      var mm = m.redSqr();
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      var ee = e.redSqr();
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint2.prototype.mul = function mul3(k, kbase) {
      k = new BN3(k, kbase);
      return this.curve._wnafMul(this, k);
    };
    JPoint2.prototype.eq = function eq4(p) {
      if (p.type === "affine")
        return this.eq(p.toJ());
      if (this === p)
        return true;
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };
    JPoint2.prototype.eqXToP = function eqXToP2(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    JPoint2.prototype.inspect = function inspect4() {
      if (this.isInfinity())
        return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    JPoint2.prototype.isInfinity = function isInfinity3() {
      return this.z.cmpn(0) === 0;
    };
  }
});

// node_modules/elliptic/lib/elliptic/curve/mont.js
var require_mont = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/mont.js"(exports, module) {
    "use strict";
    var BN3 = require_bn6();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var utils = require_utils2();
    function MontCurve(conf) {
      Base.call(this, "mont", conf);
      this.a = new BN3(conf.a, 16).toRed(this.red);
      this.b = new BN3(conf.b, 16).toRed(this.red);
      this.i4 = new BN3(4).toRed(this.red).redInvm();
      this.two = new BN3(2).toRed(this.red);
      this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    inherits(MontCurve, Base);
    module.exports = MontCurve;
    MontCurve.prototype.validate = function validate5(point3) {
      var x = point3.normalize().x;
      var x2 = x.redSqr();
      var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
      var y = rhs.redSqrt();
      return y.redSqr().cmp(rhs) === 0;
    };
    function Point2(curve, x, z) {
      Base.BasePoint.call(this, curve, "projective");
      if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
      } else {
        this.x = new BN3(x, 16);
        this.z = new BN3(z, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
      }
    }
    inherits(Point2, Base.BasePoint);
    MontCurve.prototype.decodePoint = function decodePoint2(bytes, enc) {
      return this.point(utils.toArray(bytes, enc), 1);
    };
    MontCurve.prototype.point = function point3(x, z) {
      return new Point2(this, x, z);
    };
    MontCurve.prototype.pointFromJSON = function pointFromJSON2(obj) {
      return Point2.fromJSON(this, obj);
    };
    Point2.prototype.precompute = function precompute2() {
    };
    Point2.prototype._encode = function _encode3() {
      return this.getX().toArray("be", this.curve.p.byteLength());
    };
    Point2.fromJSON = function fromJSON2(curve, obj) {
      return new Point2(curve, obj[0], obj[1] || curve.one);
    };
    Point2.prototype.inspect = function inspect4() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point2.prototype.isInfinity = function isInfinity3() {
      return this.z.cmpn(0) === 0;
    };
    Point2.prototype.dbl = function dbl3() {
      var a = this.x.redAdd(this.z);
      var aa = a.redSqr();
      var b = this.x.redSub(this.z);
      var bb = b.redSqr();
      var c = aa.redSub(bb);
      var nx = aa.redMul(bb);
      var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
      return this.curve.point(nx, nz);
    };
    Point2.prototype.add = function add3() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point2.prototype.diffAdd = function diffAdd(p, diff) {
      var a = this.x.redAdd(this.z);
      var b = this.x.redSub(this.z);
      var c = p.x.redAdd(p.z);
      var d = p.x.redSub(p.z);
      var da = d.redMul(a);
      var cb = c.redMul(b);
      var nx = diff.z.redMul(da.redAdd(cb).redSqr());
      var nz = diff.x.redMul(da.redISub(cb).redSqr());
      return this.curve.point(nx, nz);
    };
    Point2.prototype.mul = function mul3(k) {
      var t = k.clone();
      var a = this;
      var b = this.curve.point(null, null);
      var c = this;
      for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
        bits.push(t.andln(1));
      for (var i = bits.length - 1; i >= 0; i--) {
        if (bits[i] === 0) {
          a = a.diffAdd(b, c);
          b = b.dbl();
        } else {
          b = a.diffAdd(b, c);
          a = a.dbl();
        }
      }
      return b;
    };
    Point2.prototype.mulAdd = function mulAdd2() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point2.prototype.jumlAdd = function jumlAdd() {
      throw new Error("Not supported on Montgomery curve");
    };
    Point2.prototype.eq = function eq4(other) {
      return this.getX().cmp(other.getX()) === 0;
    };
    Point2.prototype.normalize = function normalize() {
      this.x = this.x.redMul(this.z.redInvm());
      this.z = this.curve.one;
      return this;
    };
    Point2.prototype.getX = function getX2() {
      this.normalize();
      return this.x.fromRed();
    };
  }
});

// node_modules/elliptic/lib/elliptic/curve/edwards.js
var require_edwards = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/edwards.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var BN3 = require_bn6();
    var inherits = require_inherits_browser();
    var Base = require_base();
    var assert2 = utils.assert;
    function EdwardsCurve(conf) {
      this.twisted = (conf.a | 0) !== 1;
      this.mOneA = this.twisted && (conf.a | 0) === -1;
      this.extended = this.mOneA;
      Base.call(this, "edwards", conf);
      this.a = new BN3(conf.a, 16).umod(this.red.m);
      this.a = this.a.toRed(this.red);
      this.c = new BN3(conf.c, 16).toRed(this.red);
      this.c2 = this.c.redSqr();
      this.d = new BN3(conf.d, 16).toRed(this.red);
      this.dd = this.d.redAdd(this.d);
      assert2(!this.twisted || this.c.fromRed().cmpn(1) === 0);
      this.oneC = (conf.c | 0) === 1;
    }
    inherits(EdwardsCurve, Base);
    module.exports = EdwardsCurve;
    EdwardsCurve.prototype._mulA = function _mulA(num) {
      if (this.mOneA)
        return num.redNeg();
      else
        return this.a.redMul(num);
    };
    EdwardsCurve.prototype._mulC = function _mulC(num) {
      if (this.oneC)
        return num;
      else
        return this.c.redMul(num);
    };
    EdwardsCurve.prototype.jpoint = function jpoint2(x, y, z, t) {
      return this.point(x, y, z, t);
    };
    EdwardsCurve.prototype.pointFromX = function pointFromX2(x, odd) {
      x = new BN3(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var x2 = x.redSqr();
      var rhs = this.c2.redSub(this.a.redMul(x2));
      var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
      var y2 = rhs.redMul(lhs.redInvm());
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
      return this.point(x, y);
    };
    EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
      y = new BN3(y, 16);
      if (!y.red)
        y = y.toRed(this.red);
      var y2 = y.redSqr();
      var lhs = y2.redSub(this.c2);
      var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
      var x2 = lhs.redMul(rhs.redInvm());
      if (x2.cmp(this.zero) === 0) {
        if (odd)
          throw new Error("invalid point");
        else
          return this.point(this.zero, y);
      }
      var x = x2.redSqrt();
      if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      if (x.fromRed().isOdd() !== odd)
        x = x.redNeg();
      return this.point(x, y);
    };
    EdwardsCurve.prototype.validate = function validate5(point3) {
      if (point3.isInfinity())
        return true;
      point3.normalize();
      var x2 = point3.x.redSqr();
      var y2 = point3.y.redSqr();
      var lhs = x2.redMul(this.a).redAdd(y2);
      var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
      return lhs.cmp(rhs) === 0;
    };
    function Point2(curve, x, y, z, t) {
      Base.BasePoint.call(this, curve, "projective");
      if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
      } else {
        this.x = new BN3(x, 16);
        this.y = new BN3(y, 16);
        this.z = z ? new BN3(z, 16) : this.curve.one;
        this.t = t && new BN3(t, 16);
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        if (!this.z.red)
          this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red)
          this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        if (this.curve.extended && !this.t) {
          this.t = this.x.redMul(this.y);
          if (!this.zOne)
            this.t = this.t.redMul(this.z.redInvm());
        }
      }
    }
    inherits(Point2, Base.BasePoint);
    EdwardsCurve.prototype.pointFromJSON = function pointFromJSON2(obj) {
      return Point2.fromJSON(this, obj);
    };
    EdwardsCurve.prototype.point = function point3(x, y, z, t) {
      return new Point2(this, x, y, z, t);
    };
    Point2.fromJSON = function fromJSON2(curve, obj) {
      return new Point2(curve, obj[0], obj[1], obj[2]);
    };
    Point2.prototype.inspect = function inspect4() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Point2.prototype.isInfinity = function isInfinity3() {
      return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
    };
    Point2.prototype._extDbl = function _extDbl() {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = this.z.redSqr();
      c = c.redIAdd(c);
      var d = this.curve._mulA(a);
      var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
      var g = d.redAdd(b);
      var f = g.redSub(c);
      var h = d.redSub(b);
      var nx = e.redMul(f);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point2.prototype._projDbl = function _projDbl() {
      var b = this.x.redAdd(this.y).redSqr();
      var c = this.x.redSqr();
      var d = this.y.redSqr();
      var nx;
      var ny;
      var nz;
      var e;
      var h;
      var j;
      if (this.curve.twisted) {
        e = this.curve._mulA(c);
        var f = e.redAdd(d);
        if (this.zOne) {
          nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
          ny = f.redMul(e.redSub(d));
          nz = f.redSqr().redSub(f).redSub(f);
        } else {
          h = this.z.redSqr();
          j = f.redSub(h).redISub(h);
          nx = b.redSub(c).redISub(d).redMul(j);
          ny = f.redMul(e.redSub(d));
          nz = f.redMul(j);
        }
      } else {
        e = c.redAdd(d);
        h = this.curve._mulC(this.z).redSqr();
        j = e.redSub(h).redSub(h);
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        nz = e.redMul(j);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point2.prototype.dbl = function dbl3() {
      if (this.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extDbl();
      else
        return this._projDbl();
    };
    Point2.prototype._extAdd = function _extAdd(p) {
      var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
      var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
      var c = this.t.redMul(this.curve.dd).redMul(p.t);
      var d = this.z.redMul(p.z.redAdd(p.z));
      var e = b.redSub(a);
      var f = d.redSub(c);
      var g = d.redAdd(c);
      var h = b.redAdd(a);
      var nx = e.redMul(f);
      var ny = g.redMul(h);
      var nt = e.redMul(h);
      var nz = f.redMul(g);
      return this.curve.point(nx, ny, nz, nt);
    };
    Point2.prototype._projAdd = function _projAdd(p) {
      var a = this.z.redMul(p.z);
      var b = a.redSqr();
      var c = this.x.redMul(p.x);
      var d = this.y.redMul(p.y);
      var e = this.curve.d.redMul(c).redMul(d);
      var f = b.redSub(e);
      var g = b.redAdd(e);
      var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
      var nx = a.redMul(f).redMul(tmp);
      var ny;
      var nz;
      if (this.curve.twisted) {
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        nz = f.redMul(g);
      } else {
        ny = a.redMul(g).redMul(d.redSub(c));
        nz = this.curve._mulC(f).redMul(g);
      }
      return this.curve.point(nx, ny, nz);
    };
    Point2.prototype.add = function add3(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
      if (this.curve.extended)
        return this._extAdd(p);
      else
        return this._projAdd(p);
    };
    Point2.prototype.mul = function mul3(k) {
      if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else
        return this.curve._wnafMul(this, k);
    };
    Point2.prototype.mulAdd = function mulAdd2(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
    };
    Point2.prototype.jmulAdd = function jmulAdd2(k1, p, k2) {
      return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
    };
    Point2.prototype.normalize = function normalize() {
      if (this.zOne)
        return this;
      var zi = this.z.redInvm();
      this.x = this.x.redMul(zi);
      this.y = this.y.redMul(zi);
      if (this.t)
        this.t = this.t.redMul(zi);
      this.z = this.curve.one;
      this.zOne = true;
      return this;
    };
    Point2.prototype.neg = function neg3() {
      return this.curve.point(
        this.x.redNeg(),
        this.y,
        this.z,
        this.t && this.t.redNeg()
      );
    };
    Point2.prototype.getX = function getX2() {
      this.normalize();
      return this.x.fromRed();
    };
    Point2.prototype.getY = function getY2() {
      this.normalize();
      return this.y.fromRed();
    };
    Point2.prototype.eq = function eq4(other) {
      return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
    };
    Point2.prototype.eqXToP = function eqXToP2(x) {
      var rx = x.toRed(this.curve.red).redMul(this.z);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(this.z);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    Point2.prototype.toP = Point2.prototype.normalize;
    Point2.prototype.mixedAdd = Point2.prototype.add;
  }
});

// node_modules/elliptic/lib/elliptic/curve/index.js
var require_curve = __commonJS({
  "node_modules/elliptic/lib/elliptic/curve/index.js"(exports) {
    "use strict";
    var curve = exports;
    curve.base = require_base();
    curve.short = require_short();
    curve.mont = require_mont();
    curve.edwards = require_edwards();
  }
});

// node_modules/hash.js/lib/hash/utils.js
var require_utils3 = __commonJS({
  "node_modules/hash.js/lib/hash/utils.js"(exports) {
    "use strict";
    var assert2 = require_minimalistic_assert();
    var inherits = require_inherits_browser();
    exports.inherits = inherits;
    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 64512) !== 55296) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 64512) === 56320;
    }
    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === "string") {
        if (!enc) {
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = c >> 6 | 192;
              res[p++] = c & 63 | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
              res[p++] = c >> 18 | 240;
              res[p++] = c >> 12 & 63 | 128;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            } else {
              res[p++] = c >> 12 | 224;
              res[p++] = c >> 6 & 63 | 128;
              res[p++] = c & 63 | 128;
            }
          }
        } else if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    exports.toArray = toArray;
    function toHex4(msg) {
      var res = "";
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    exports.toHex = toHex4;
    function htonl(w) {
      var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
      return res >>> 0;
    }
    exports.htonl = htonl;
    function toHex32(msg, endian) {
      var res = "";
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === "little")
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    exports.toHex32 = toHex32;
    function zero2(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    exports.zero2 = zero2;
    function zero8(word) {
      if (word.length === 7)
        return "0" + word;
      else if (word.length === 6)
        return "00" + word;
      else if (word.length === 5)
        return "000" + word;
      else if (word.length === 4)
        return "0000" + word;
      else if (word.length === 3)
        return "00000" + word;
      else if (word.length === 2)
        return "000000" + word;
      else if (word.length === 1)
        return "0000000" + word;
      else
        return word;
    }
    exports.zero8 = zero8;
    function join32(msg, start, end, endian) {
      var len = end - start;
      assert2(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === "big")
          w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else
          w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    exports.join32 = join32;
    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === "big") {
          res[k] = m >>> 24;
          res[k + 1] = m >>> 16 & 255;
          res[k + 2] = m >>> 8 & 255;
          res[k + 3] = m & 255;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = m >>> 16 & 255;
          res[k + 1] = m >>> 8 & 255;
          res[k] = m & 255;
        }
      }
      return res;
    }
    exports.split32 = split32;
    function rotr32(w, b) {
      return w >>> b | w << 32 - b;
    }
    exports.rotr32 = rotr32;
    function rotl32(w, b) {
      return w << b | w >>> 32 - b;
    }
    exports.rotl32 = rotl32;
    function sum32(a, b) {
      return a + b >>> 0;
    }
    exports.sum32 = sum32;
    function sum32_3(a, b, c) {
      return a + b + c >>> 0;
    }
    exports.sum32_3 = sum32_3;
    function sum32_4(a, b, c, d) {
      return a + b + c + d >>> 0;
    }
    exports.sum32_4 = sum32_4;
    function sum32_5(a, b, c, d, e) {
      return a + b + c + d + e >>> 0;
    }
    exports.sum32_5 = sum32_5;
    function sum64(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    exports.sum64 = sum64;
    function sum64_hi(ah, al, bh, bl) {
      var lo = al + bl >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    exports.sum64_hi = sum64_hi;
    function sum64_lo(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    exports.sum64_lo = sum64_lo;
    function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    exports.sum64_4_hi = sum64_4_hi;
    function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    exports.sum64_4_lo = sum64_4_lo;
    function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = lo + bl >>> 0;
      carry += lo < al ? 1 : 0;
      lo = lo + cl >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = lo + dl >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = lo + el >>> 0;
      carry += lo < el ? 1 : 0;
      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    exports.sum64_5_hi = sum64_5_hi;
    function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;
      return lo >>> 0;
    }
    exports.sum64_5_lo = sum64_5_lo;
    function rotr64_hi(ah, al, num) {
      var r2 = al << 32 - num | ah >>> num;
      return r2 >>> 0;
    }
    exports.rotr64_hi = rotr64_hi;
    function rotr64_lo(ah, al, num) {
      var r2 = ah << 32 - num | al >>> num;
      return r2 >>> 0;
    }
    exports.rotr64_lo = rotr64_lo;
    function shr64_hi(ah, al, num) {
      return ah >>> num;
    }
    exports.shr64_hi = shr64_hi;
    function shr64_lo(ah, al, num) {
      var r2 = ah << 32 - num | al >>> num;
      return r2 >>> 0;
    }
    exports.shr64_lo = shr64_lo;
  }
});

// node_modules/hash.js/lib/hash/common.js
var require_common = __commonJS({
  "node_modules/hash.js/lib/hash/common.js"(exports) {
    "use strict";
    var utils = require_utils3();
    var assert2 = require_minimalistic_assert();
    function BlockHash() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = "big";
      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    exports.BlockHash = BlockHash;
    BlockHash.prototype.update = function update2(msg, enc) {
      msg = utils.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;
      if (this.pending.length >= this._delta8) {
        msg = this.pending;
        var r2 = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r2, msg.length);
        if (this.pending.length === 0)
          this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r2, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }
      return this;
    };
    BlockHash.prototype.digest = function digest(enc) {
      this.update(this._pad());
      assert2(this.pending === null);
      return this._digest(enc);
    };
    BlockHash.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - (len + this.padLength) % bytes;
      var res = new Array(k + this.padLength);
      res[0] = 128;
      for (var i = 1; i < k; i++)
        res[i] = 0;
      len <<= 3;
      if (this.endian === "big") {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len & 255;
      } else {
        res[i++] = len & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 24 & 255;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }
      return res;
    };
  }
});

// node_modules/hash.js/lib/hash/sha/common.js
var require_common2 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/common.js"(exports) {
    "use strict";
    var utils = require_utils3();
    var rotr32 = utils.rotr32;
    function ft_1(s, x, y, z) {
      if (s === 0)
        return ch32(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32(x, y, z);
    }
    exports.ft_1 = ft_1;
    function ch32(x, y, z) {
      return x & y ^ ~x & z;
    }
    exports.ch32 = ch32;
    function maj32(x, y, z) {
      return x & y ^ x & z ^ y & z;
    }
    exports.maj32 = maj32;
    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    exports.p32 = p32;
    function s0_256(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    exports.s0_256 = s0_256;
    function s1_256(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    exports.s1_256 = s1_256;
    function g0_256(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
    }
    exports.g0_256 = g0_256;
    function g1_256(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
    }
    exports.g1_256 = g1_256;
  }
});

// node_modules/hash.js/lib/hash/sha/1.js
var require__ = __commonJS({
  "node_modules/hash.js/lib/hash/sha/1.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var common = require_common();
    var shaCommon = require_common2();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_5 = utils.sum32_5;
    var ft_1 = shaCommon.ft_1;
    var BlockHash = common.BlockHash;
    var sha1_K = [
      1518500249,
      1859775393,
      2400959708,
      3395469782
    ];
    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();
      BlockHash.call(this);
      this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
      ];
      this.W = new Array(80);
    }
    utils.inherits(SHA1, BlockHash);
    module.exports = SHA1;
    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;
    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
    };
    SHA1.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/256.js
var require__2 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/256.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var common = require_common();
    var shaCommon = require_common2();
    var assert2 = require_minimalistic_assert();
    var sum32 = utils.sum32;
    var sum32_4 = utils.sum32_4;
    var sum32_5 = utils.sum32_5;
    var ch32 = shaCommon.ch32;
    var maj32 = shaCommon.maj32;
    var s0_256 = shaCommon.s0_256;
    var s1_256 = shaCommon.s1_256;
    var g0_256 = shaCommon.g0_256;
    var g1_256 = shaCommon.g1_256;
    var BlockHash = common.BlockHash;
    var sha256_K = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();
      BlockHash.call(this);
      this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils.inherits(SHA256, BlockHash);
    module.exports = SHA256;
    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;
    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;
      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];
      assert2(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
      }
      this.h[0] = sum32(this.h[0], a);
      this.h[1] = sum32(this.h[1], b);
      this.h[2] = sum32(this.h[2], c);
      this.h[3] = sum32(this.h[3], d);
      this.h[4] = sum32(this.h[4], e);
      this.h[5] = sum32(this.h[5], f);
      this.h[6] = sum32(this.h[6], g);
      this.h[7] = sum32(this.h[7], h);
    };
    SHA256.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/224.js
var require__3 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/224.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var SHA256 = require__2();
    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();
      SHA256.call(this);
      this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
      ];
    }
    utils.inherits(SHA224, SHA256);
    module.exports = SHA224;
    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;
    SHA224.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 7), "big");
      else
        return utils.split32(this.h.slice(0, 7), "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha/512.js
var require__4 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/512.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var common = require_common();
    var assert2 = require_minimalistic_assert();
    var rotr64_hi = utils.rotr64_hi;
    var rotr64_lo = utils.rotr64_lo;
    var shr64_hi = utils.shr64_hi;
    var shr64_lo = utils.shr64_lo;
    var sum64 = utils.sum64;
    var sum64_hi = utils.sum64_hi;
    var sum64_lo = utils.sum64_lo;
    var sum64_4_hi = utils.sum64_4_hi;
    var sum64_4_lo = utils.sum64_4_lo;
    var sum64_5_hi = utils.sum64_5_hi;
    var sum64_5_lo = utils.sum64_5_lo;
    var BlockHash = common.BlockHash;
    var sha512_K = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();
      BlockHash.call(this);
      this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
      ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils.inherits(SHA512, BlockHash);
    module.exports = SHA512;
    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;
    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
        W[i + 1] = sum64_4_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo
        );
      }
    };
    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);
      var W = this.W;
      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];
      assert2(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        var T1_lo = sum64_5_lo(
          c0_hi,
          c0_lo,
          c1_hi,
          c1_lo,
          c2_hi,
          c2_lo,
          c3_hi,
          c3_lo,
          c4_hi,
          c4_lo
        );
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }
      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };
    SHA512.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "big");
      else
        return utils.split32(this.h, "big");
    };
    function ch64_hi(xh, xl, yh, yl, zh) {
      var r2 = xh & yh ^ ~xh & zh;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r2 = xl & yl ^ ~xl & zl;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function maj64_hi(xh, xl, yh, yl, zh) {
      var r2 = xh & yh ^ xh & zh ^ yh & zh;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r2 = xl & yl ^ xl & zl ^ yl & zl;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);
      var c2_hi = rotr64_hi(xl, xh, 7);
      var r2 = c0_hi ^ c1_hi ^ c2_hi;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);
      var c2_lo = rotr64_lo(xl, xh, 7);
      var r2 = c0_lo ^ c1_lo ^ c2_lo;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);
      var r2 = c0_hi ^ c1_hi ^ c2_hi;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);
      var r2 = c0_lo ^ c1_lo ^ c2_lo;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);
      var r2 = c0_hi ^ c1_hi ^ c2_hi;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);
      var r2 = c0_lo ^ c1_lo ^ c2_lo;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);
      var c2_hi = shr64_hi(xh, xl, 6);
      var r2 = c0_hi ^ c1_hi ^ c2_hi;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);
      var c2_lo = shr64_lo(xh, xl, 6);
      var r2 = c0_lo ^ c1_lo ^ c2_lo;
      if (r2 < 0)
        r2 += 4294967296;
      return r2;
    }
  }
});

// node_modules/hash.js/lib/hash/sha/384.js
var require__5 = __commonJS({
  "node_modules/hash.js/lib/hash/sha/384.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var SHA512 = require__4();
    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();
      SHA512.call(this);
      this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
      ];
    }
    utils.inherits(SHA384, SHA512);
    module.exports = SHA384;
    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;
    SHA384.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h.slice(0, 12), "big");
      else
        return utils.split32(this.h.slice(0, 12), "big");
    };
  }
});

// node_modules/hash.js/lib/hash/sha.js
var require_sha = __commonJS({
  "node_modules/hash.js/lib/hash/sha.js"(exports) {
    "use strict";
    exports.sha1 = require__();
    exports.sha224 = require__3();
    exports.sha256 = require__2();
    exports.sha384 = require__5();
    exports.sha512 = require__4();
  }
});

// node_modules/hash.js/lib/hash/ripemd.js
var require_ripemd = __commonJS({
  "node_modules/hash.js/lib/hash/ripemd.js"(exports) {
    "use strict";
    var utils = require_utils3();
    var common = require_common();
    var rotl32 = utils.rotl32;
    var sum32 = utils.sum32;
    var sum32_3 = utils.sum32_3;
    var sum32_4 = utils.sum32_4;
    var BlockHash = common.BlockHash;
    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();
      BlockHash.call(this);
      this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      this.endian = "little";
    }
    utils.inherits(RIPEMD160, BlockHash);
    exports.ripemd160 = RIPEMD160;
    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;
    RIPEMD160.prototype._update = function update2(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(
            sum32_4(A, f(j, B, C, D), msg[r2[j] + start], K(j)),
            s[j]
          ),
          E
        );
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]
          ),
          Eh
        );
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };
    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === "hex")
        return utils.toHex32(this.h, "little");
      else
        return utils.split32(this.h, "little");
    };
    function f(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return x & y | ~x & z;
      else if (j <= 47)
        return (x | ~y) ^ z;
      else if (j <= 63)
        return x & z | y & ~z;
      else
        return x ^ (y | ~z);
    }
    function K(j) {
      if (j <= 15)
        return 0;
      else if (j <= 31)
        return 1518500249;
      else if (j <= 47)
        return 1859775393;
      else if (j <= 63)
        return 2400959708;
      else
        return 2840853838;
    }
    function Kh(j) {
      if (j <= 15)
        return 1352829926;
      else if (j <= 31)
        return 1548603684;
      else if (j <= 47)
        return 1836072691;
      else if (j <= 63)
        return 2053994217;
      else
        return 0;
    }
    var r2 = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var rh = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var s = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sh = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
  }
});

// node_modules/hash.js/lib/hash/hmac.js
var require_hmac = __commonJS({
  "node_modules/hash.js/lib/hash/hmac.js"(exports, module) {
    "use strict";
    var utils = require_utils3();
    var assert2 = require_minimalistic_assert();
    function Hmac(hash2, key2, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash2, key2, enc);
      this.Hash = hash2;
      this.blockSize = hash2.blockSize / 8;
      this.outSize = hash2.outSize / 8;
      this.inner = null;
      this.outer = null;
      this._init(utils.toArray(key2, enc));
    }
    module.exports = Hmac;
    Hmac.prototype._init = function init2(key2) {
      if (key2.length > this.blockSize)
        key2 = new this.Hash().update(key2).digest();
      assert2(key2.length <= this.blockSize);
      for (var i = key2.length; i < this.blockSize; i++)
        key2.push(0);
      for (i = 0; i < key2.length; i++)
        key2[i] ^= 54;
      this.inner = new this.Hash().update(key2);
      for (i = 0; i < key2.length; i++)
        key2[i] ^= 106;
      this.outer = new this.Hash().update(key2);
    };
    Hmac.prototype.update = function update2(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };
    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };
  }
});

// node_modules/hash.js/lib/hash.js
var require_hash = __commonJS({
  "node_modules/hash.js/lib/hash.js"(exports) {
    var hash2 = exports;
    hash2.utils = require_utils3();
    hash2.common = require_common();
    hash2.sha = require_sha();
    hash2.ripemd = require_ripemd();
    hash2.hmac = require_hmac();
    hash2.sha1 = hash2.sha.sha1;
    hash2.sha256 = hash2.sha.sha256;
    hash2.sha224 = hash2.sha.sha224;
    hash2.sha384 = hash2.sha.sha384;
    hash2.sha512 = hash2.sha.sha512;
    hash2.ripemd160 = hash2.ripemd.ripemd160;
  }
});

// node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js
var require_secp256k1 = __commonJS({
  "node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js"(exports, module) {
    module.exports = {
      doubles: {
        step: 4,
        points: [
          [
            "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
            "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
          ],
          [
            "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
            "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
          ],
          [
            "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
            "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
          ],
          [
            "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
            "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
          ],
          [
            "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
            "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
          ],
          [
            "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
            "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
          ],
          [
            "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
            "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
          ],
          [
            "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
            "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
          ],
          [
            "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
            "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
          ],
          [
            "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
            "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
          ],
          [
            "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
            "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
          ],
          [
            "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
            "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
          ],
          [
            "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
            "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
          ],
          [
            "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
            "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
          ],
          [
            "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
            "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
          ],
          [
            "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
            "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
          ],
          [
            "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
            "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
          ],
          [
            "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
            "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
          ],
          [
            "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
            "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
          ],
          [
            "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
            "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
          ],
          [
            "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
            "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
          ],
          [
            "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
            "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
          ],
          [
            "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
            "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
          ],
          [
            "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
            "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
          ],
          [
            "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
            "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
          ],
          [
            "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
            "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
          ],
          [
            "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
            "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
          ],
          [
            "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
            "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
          ],
          [
            "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
            "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
          ],
          [
            "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
            "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
          ],
          [
            "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
            "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
          ],
          [
            "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
            "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
          ],
          [
            "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
            "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
          ],
          [
            "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
            "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
          ],
          [
            "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
            "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
          ],
          [
            "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
            "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
          ],
          [
            "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
            "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
          ],
          [
            "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
            "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
          ],
          [
            "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
            "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
          ],
          [
            "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
            "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
          ],
          [
            "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
            "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
          ],
          [
            "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
            "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
          ],
          [
            "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
            "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
          ],
          [
            "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
            "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
          ],
          [
            "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
            "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
          ],
          [
            "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
            "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
          ],
          [
            "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
            "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
          ],
          [
            "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
            "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
          ],
          [
            "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
            "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
          ],
          [
            "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
            "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
          ],
          [
            "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
            "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
          ],
          [
            "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
            "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
          ],
          [
            "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
            "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
          ],
          [
            "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
            "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
          ],
          [
            "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
            "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
          ],
          [
            "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
            "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
          ],
          [
            "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
            "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
          ],
          [
            "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
            "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
          ],
          [
            "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
            "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
          ],
          [
            "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
            "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
          ],
          [
            "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
            "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
          ],
          [
            "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
            "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
          ],
          [
            "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
            "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
          ],
          [
            "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
            "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
          ],
          [
            "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
            "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
          ]
        ]
      },
      naf: {
        wnd: 7,
        points: [
          [
            "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
            "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
          ],
          [
            "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
            "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
          ],
          [
            "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
            "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
          ],
          [
            "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
            "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
          ],
          [
            "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
            "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
          ],
          [
            "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
            "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
          ],
          [
            "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
            "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
          ],
          [
            "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
            "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
          ],
          [
            "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
            "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
          ],
          [
            "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
            "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
          ],
          [
            "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
            "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
          ],
          [
            "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
            "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
          ],
          [
            "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
            "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
          ],
          [
            "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
            "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
          ],
          [
            "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
            "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
          ],
          [
            "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
            "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
          ],
          [
            "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
            "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
          ],
          [
            "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
            "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
          ],
          [
            "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
            "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
          ],
          [
            "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
            "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
          ],
          [
            "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
            "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
          ],
          [
            "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
            "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
          ],
          [
            "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
            "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
          ],
          [
            "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
            "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
          ],
          [
            "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
            "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
          ],
          [
            "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
            "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
          ],
          [
            "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
            "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
          ],
          [
            "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
            "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
          ],
          [
            "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
            "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
          ],
          [
            "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
            "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
          ],
          [
            "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
            "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
          ],
          [
            "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
            "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
          ],
          [
            "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
            "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
          ],
          [
            "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
            "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
          ],
          [
            "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
            "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
          ],
          [
            "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
            "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
          ],
          [
            "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
            "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
          ],
          [
            "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
            "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
          ],
          [
            "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
            "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
          ],
          [
            "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
            "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
          ],
          [
            "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
            "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
          ],
          [
            "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
            "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
          ],
          [
            "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
            "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
          ],
          [
            "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
            "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
          ],
          [
            "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
            "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
          ],
          [
            "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
            "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
          ],
          [
            "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
            "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
          ],
          [
            "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
            "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
          ],
          [
            "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
            "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
          ],
          [
            "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
            "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
          ],
          [
            "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
            "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
          ],
          [
            "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
            "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
          ],
          [
            "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
            "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
          ],
          [
            "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
            "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
          ],
          [
            "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
            "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
          ],
          [
            "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
            "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
          ],
          [
            "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
            "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
          ],
          [
            "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
            "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
          ],
          [
            "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
            "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
          ],
          [
            "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
            "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
          ],
          [
            "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
            "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
          ],
          [
            "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
            "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
          ],
          [
            "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
            "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
          ],
          [
            "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
            "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
          ],
          [
            "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
            "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
          ],
          [
            "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
            "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
          ],
          [
            "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
            "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
          ],
          [
            "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
            "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
          ],
          [
            "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
            "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
          ],
          [
            "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
            "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
          ],
          [
            "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
            "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
          ],
          [
            "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
            "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
          ],
          [
            "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
            "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
          ],
          [
            "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
            "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
          ],
          [
            "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
            "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
          ],
          [
            "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
            "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
          ],
          [
            "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
            "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
          ],
          [
            "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
            "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
          ],
          [
            "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
            "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
          ],
          [
            "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
            "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
          ],
          [
            "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
            "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
          ],
          [
            "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
            "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
          ],
          [
            "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
            "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
          ],
          [
            "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
            "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
          ],
          [
            "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
            "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
          ],
          [
            "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
            "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
          ],
          [
            "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
            "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
          ],
          [
            "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
            "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
          ],
          [
            "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
            "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
          ],
          [
            "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
            "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
          ],
          [
            "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
            "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
          ],
          [
            "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
            "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
          ],
          [
            "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
            "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
          ],
          [
            "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
            "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
          ],
          [
            "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
            "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
          ],
          [
            "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
            "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
          ],
          [
            "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
            "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
          ],
          [
            "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
            "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
          ],
          [
            "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
            "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
          ],
          [
            "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
            "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
          ],
          [
            "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
            "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
          ],
          [
            "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
            "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
          ],
          [
            "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
            "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
          ],
          [
            "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
            "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
          ],
          [
            "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
            "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
          ],
          [
            "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
            "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
          ],
          [
            "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
            "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
          ],
          [
            "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
            "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
          ],
          [
            "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
            "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
          ],
          [
            "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
            "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
          ],
          [
            "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
            "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
          ],
          [
            "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
            "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
          ],
          [
            "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
            "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
          ],
          [
            "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
            "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
          ],
          [
            "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
            "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
          ],
          [
            "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
            "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
          ],
          [
            "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
            "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
          ],
          [
            "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
            "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
          ],
          [
            "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
            "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
          ],
          [
            "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
            "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
          ],
          [
            "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
            "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
          ],
          [
            "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
            "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
          ],
          [
            "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
            "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
          ],
          [
            "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
            "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
          ],
          [
            "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
            "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
          ],
          [
            "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
            "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
          ],
          [
            "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
            "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
          ]
        ]
      }
    };
  }
});

// node_modules/elliptic/lib/elliptic/curves.js
var require_curves = __commonJS({
  "node_modules/elliptic/lib/elliptic/curves.js"(exports) {
    "use strict";
    var curves = exports;
    var hash2 = require_hash();
    var curve = require_curve();
    var utils = require_utils2();
    var assert2 = utils.assert;
    function PresetCurve(options) {
      if (options.type === "short")
        this.curve = new curve.short(options);
      else if (options.type === "edwards")
        this.curve = new curve.edwards(options);
      else
        this.curve = new curve.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert2(this.g.validate(), "Invalid curve");
      assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves.PresetCurve = PresetCurve;
    function defineCurve(name2, options) {
      Object.defineProperty(curves, name2, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve2 = new PresetCurve(options);
          Object.defineProperty(curves, name2, {
            configurable: true,
            enumerable: true,
            value: curve2
          });
          return curve2;
        }
      });
    }
    defineCurve("p192", {
      type: "short",
      prime: "p192",
      p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
      b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
      n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
      ]
    });
    defineCurve("p224", {
      type: "short",
      prime: "p224",
      p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
      b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
      n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
      ]
    });
    defineCurve("p256", {
      type: "short",
      prime: null,
      p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
      a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
      b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
      n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
      ]
    });
    defineCurve("p384", {
      type: "short",
      prime: null,
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
      a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
      b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
      n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
      hash: hash2.sha384,
      gRed: false,
      g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
      ]
    });
    defineCurve("p521", {
      type: "short",
      prime: null,
      p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
      a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
      b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
      n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
      hash: hash2.sha512,
      gRed: false,
      g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
      ]
    });
    defineCurve("curve25519", {
      type: "mont",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "76d06",
      b: "1",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "9"
      ]
    });
    defineCurve("ed25519", {
      type: "edwards",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "-1",
      c: "1",
      // -121665 * (121666^(-1)) (mod P)
      d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
      ]
    });
    var pre;
    try {
      pre = require_secp256k1();
    } catch (e) {
      pre = void 0;
    }
    defineCurve("secp256k1", {
      type: "short",
      prime: "k256",
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
      a: "0",
      b: "7",
      n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
      h: "1",
      hash: hash2.sha256,
      // Precomputed endomorphism
      beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
      lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
      basis: [
        {
          a: "3086d221a7d46bcde86c90e49284eb15",
          b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
          a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
          b: "3086d221a7d46bcde86c90e49284eb15"
        }
      ],
      gRed: false,
      g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre
      ]
    });
  }
});

// node_modules/hmac-drbg/lib/hmac-drbg.js
var require_hmac_drbg = __commonJS({
  "node_modules/hmac-drbg/lib/hmac-drbg.js"(exports, module) {
    "use strict";
    var hash2 = require_hash();
    var utils = require_utils();
    var assert2 = require_minimalistic_assert();
    function HmacDRBG2(options) {
      if (!(this instanceof HmacDRBG2))
        return new HmacDRBG2(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;
      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;
      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;
      var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
      var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
      var pers = utils.toArray(options.pers, options.persEnc || "hex");
      assert2(
        entropy.length >= this.minEntropy / 8,
        "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
      );
      this._init(entropy, nonce, pers);
    }
    module.exports = HmacDRBG2;
    HmacDRBG2.prototype._init = function init2(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0;
        this.V[i] = 1;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 281474976710656;
    };
    HmacDRBG2.prototype._hmac = function hmac2() {
      return new hash2.hmac(this.hash, this.K);
    };
    HmacDRBG2.prototype._update = function update2(seed) {
      var kmac = this._hmac().update(this.V).update([0]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;
      this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };
    HmacDRBG2.prototype.reseed = function reseed2(entropy, entropyEnc, add3, addEnc) {
      if (typeof entropyEnc !== "string") {
        addEnc = add3;
        add3 = entropyEnc;
        entropyEnc = null;
      }
      entropy = utils.toArray(entropy, entropyEnc);
      add3 = utils.toArray(add3, addEnc);
      assert2(
        entropy.length >= this.minEntropy / 8,
        "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
      );
      this._update(entropy.concat(add3 || []));
      this._reseed = 1;
    };
    HmacDRBG2.prototype.generate = function generate2(len, enc, add3, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error("Reseed is required");
      if (typeof enc !== "string") {
        addEnc = add3;
        add3 = enc;
        enc = null;
      }
      if (add3) {
        add3 = utils.toArray(add3, addEnc || "hex");
        this._update(add3);
      }
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len);
      this._update(add3);
      this._reseed++;
      return utils.encode(res, enc);
    };
  }
});

// node_modules/elliptic/lib/elliptic/ec/key.js
var require_key = __commonJS({
  "node_modules/elliptic/lib/elliptic/ec/key.js"(exports, module) {
    "use strict";
    var BN3 = require_bn6();
    var utils = require_utils2();
    var assert2 = utils.assert;
    function KeyPair2(ec2, options) {
      this.ec = ec2;
      this.priv = null;
      this.pub = null;
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    module.exports = KeyPair2;
    KeyPair2.fromPublic = function fromPublic2(ec2, pub, enc) {
      if (pub instanceof KeyPair2)
        return pub;
      return new KeyPair2(ec2, {
        pub,
        pubEnc: enc
      });
    };
    KeyPair2.fromPrivate = function fromPrivate2(ec2, priv, enc) {
      if (priv instanceof KeyPair2)
        return priv;
      return new KeyPair2(ec2, {
        priv,
        privEnc: enc
      });
    };
    KeyPair2.prototype.validate = function validate5() {
      var pub = this.getPublic();
      if (pub.isInfinity())
        return { result: false, reason: "Invalid public key" };
      if (!pub.validate())
        return { result: false, reason: "Public key is not a point" };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: "Public key * N != O" };
      return { result: true, reason: null };
    };
    KeyPair2.prototype.getPublic = function getPublic2(compact, enc) {
      if (typeof compact === "string") {
        enc = compact;
        compact = null;
      }
      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
      if (!enc)
        return this.pub;
      return this.pub.encode(enc, compact);
    };
    KeyPair2.prototype.getPrivate = function getPrivate2(enc) {
      if (enc === "hex")
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };
    KeyPair2.prototype._importPrivate = function _importPrivate2(key2, enc) {
      this.priv = new BN3(key2, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair2.prototype._importPublic = function _importPublic2(key2, enc) {
      if (key2.x || key2.y) {
        if (this.ec.curve.type === "mont") {
          assert2(key2.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
          assert2(key2.x && key2.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key2.x, key2.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key2, enc);
    };
    KeyPair2.prototype.derive = function derive2(pub) {
      if (!pub.validate()) {
        assert2(pub.validate(), "public point not validated");
      }
      return pub.mul(this.priv).getX();
    };
    KeyPair2.prototype.sign = function sign3(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair2.prototype.verify = function verify3(msg, signature2) {
      return this.ec.verify(msg, signature2, this);
    };
    KeyPair2.prototype.inspect = function inspect4() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
  }
});

// node_modules/elliptic/lib/elliptic/ec/signature.js
var require_signature = __commonJS({
  "node_modules/elliptic/lib/elliptic/ec/signature.js"(exports, module) {
    "use strict";
    var BN3 = require_bn6();
    var utils = require_utils2();
    var assert2 = utils.assert;
    function Signature2(options, enc) {
      if (options instanceof Signature2)
        return options;
      if (this._importDER(options, enc))
        return;
      assert2(options.r && options.s, "Signature without r or s");
      this.r = new BN3(options.r, 16);
      this.s = new BN3(options.s, 16);
      if (options.recoveryParam === void 0)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    module.exports = Signature2;
    function Position2() {
      this.place = 0;
    }
    function getLength2(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 128)) {
        return initial;
      }
      var octetLen = initial & 15;
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }
      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }
      if (val <= 127) {
        return false;
      }
      p.place = off;
      return val;
    }
    function rmPadding2(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 128) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }
    Signature2.prototype._importDER = function _importDER2(data, enc) {
      data = utils.toArray(data, enc);
      var p = new Position2();
      if (data[p.place++] !== 48) {
        return false;
      }
      var len = getLength2(data, p);
      if (len === false) {
        return false;
      }
      if (len + p.place !== data.length) {
        return false;
      }
      if (data[p.place++] !== 2) {
        return false;
      }
      var rlen = getLength2(data, p);
      if (rlen === false) {
        return false;
      }
      var r2 = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 2) {
        return false;
      }
      var slen = getLength2(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r2[0] === 0) {
        if (r2[1] & 128) {
          r2 = r2.slice(1);
        } else {
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 128) {
          s = s.slice(1);
        } else {
          return false;
        }
      }
      this.r = new BN3(r2);
      this.s = new BN3(s);
      this.recoveryParam = null;
      return true;
    };
    function constructLength2(arr, len) {
      if (len < 128) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 128);
      while (--octets) {
        arr.push(len >>> (octets << 3) & 255);
      }
      arr.push(len);
    }
    Signature2.prototype.toDER = function toDER2(enc) {
      var r2 = this.r.toArray();
      var s = this.s.toArray();
      if (r2[0] & 128)
        r2 = [0].concat(r2);
      if (s[0] & 128)
        s = [0].concat(s);
      r2 = rmPadding2(r2);
      s = rmPadding2(s);
      while (!s[0] && !(s[1] & 128)) {
        s = s.slice(1);
      }
      var arr = [2];
      constructLength2(arr, r2.length);
      arr = arr.concat(r2);
      arr.push(2);
      constructLength2(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [48];
      constructLength2(res, backHalf.length);
      res = res.concat(backHalf);
      return utils.encode(res, enc);
    };
  }
});

// node_modules/elliptic/lib/elliptic/ec/index.js
var require_ec = __commonJS({
  "node_modules/elliptic/lib/elliptic/ec/index.js"(exports, module) {
    "use strict";
    var BN3 = require_bn6();
    var HmacDRBG2 = require_hmac_drbg();
    var utils = require_utils2();
    var curves = require_curves();
    var rand2 = require_brorand();
    var assert2 = utils.assert;
    var KeyPair2 = require_key();
    var Signature2 = require_signature();
    function EC2(options) {
      if (!(this instanceof EC2))
        return new EC2(options);
      if (typeof options === "string") {
        assert2(
          Object.prototype.hasOwnProperty.call(curves, options),
          "Unknown curve " + options
        );
        options = curves[options];
      }
      if (options instanceof curves.PresetCurve)
        options = { curve: options };
      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);
      this.hash = options.hash || options.curve.hash;
    }
    module.exports = EC2;
    EC2.prototype.keyPair = function keyPair2(options) {
      return new KeyPair2(this, options);
    };
    EC2.prototype.keyFromPrivate = function keyFromPrivate2(priv, enc) {
      return KeyPair2.fromPrivate(this, priv, enc);
    };
    EC2.prototype.keyFromPublic = function keyFromPublic2(pub, enc) {
      return KeyPair2.fromPublic(this, pub, enc);
    };
    EC2.prototype.genKeyPair = function genKeyPair2(options) {
      if (!options)
        options = {};
      var drbg = new HmacDRBG2({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand2(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new BN3(2));
      for (; ; ) {
        var priv = new BN3(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    EC2.prototype._truncateToN = function _truncateToN2(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };
    EC2.prototype.sign = function sign3(msg, key2, enc, options) {
      if (typeof enc === "object") {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};
      key2 = this.keyFromPrivate(key2, enc);
      msg = this._truncateToN(new BN3(msg, 16));
      var bytes = this.n.byteLength();
      var bkey = key2.getPrivate().toArray("be", bytes);
      var nonce = msg.toArray("be", bytes);
      var drbg = new HmacDRBG2({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
      });
      var ns1 = this.n.sub(new BN3(1));
      for (var iter = 0; ; iter++) {
        var k = options.k ? options.k(iter) : new BN3(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;
        var kpX = kp.getX();
        var r2 = kpX.umod(this.n);
        if (r2.cmpn(0) === 0)
          continue;
        var s = k.invm(this.n).mul(r2.mul(key2.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r2) !== 0 ? 2 : 0);
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }
        return new Signature2({ r: r2, s, recoveryParam });
      }
    };
    EC2.prototype.verify = function verify3(msg, signature2, key2, enc) {
      msg = this._truncateToN(new BN3(msg, 16));
      key2 = this.keyFromPublic(key2, enc);
      signature2 = new Signature2(signature2, "hex");
      var r2 = signature2.r;
      var s = signature2.s;
      if (r2.cmpn(1) < 0 || r2.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r2).umod(this.n);
      var p;
      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key2.getPublic(), u2);
        if (p.isInfinity())
          return false;
        return p.getX().umod(this.n).cmp(r2) === 0;
      }
      p = this.g.jmulAdd(u1, key2.getPublic(), u2);
      if (p.isInfinity())
        return false;
      return p.eqXToP(r2);
    };
    EC2.prototype.recoverPubKey = function(msg, signature2, j, enc) {
      assert2((3 & j) === j, "The recovery param is more than two bits");
      signature2 = new Signature2(signature2, enc);
      var n = this.n;
      var e = new BN3(msg);
      var r2 = signature2.r;
      var s = signature2.s;
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error("Unable to find sencond key candinate");
      if (isSecondKey)
        r2 = this.curve.pointFromX(r2.add(this.curve.n), isYOdd);
      else
        r2 = this.curve.pointFromX(r2, isYOdd);
      var rInv = signature2.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);
      return this.g.mulAdd(s1, r2, s2);
    };
    EC2.prototype.getKeyRecoveryParam = function(e, signature2, Q, enc) {
      signature2 = new Signature2(signature2, enc);
      if (signature2.recoveryParam !== null)
        return signature2.recoveryParam;
      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature2, i);
        } catch (e2) {
          continue;
        }
        if (Qprime.eq(Q))
          return i;
      }
      throw new Error("Unable to find valid recovery factor");
    };
  }
});

// node_modules/elliptic/lib/elliptic/eddsa/key.js
var require_key2 = __commonJS({
  "node_modules/elliptic/lib/elliptic/eddsa/key.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var assert2 = utils.assert;
    var parseBytes = utils.parseBytes;
    var cachedProperty = utils.cachedProperty;
    function KeyPair2(eddsa, params) {
      this.eddsa = eddsa;
      this._secret = parseBytes(params.secret);
      if (eddsa.isPoint(params.pub))
        this._pub = params.pub;
      else
        this._pubBytes = parseBytes(params.pub);
    }
    KeyPair2.fromPublic = function fromPublic2(eddsa, pub) {
      if (pub instanceof KeyPair2)
        return pub;
      return new KeyPair2(eddsa, { pub });
    };
    KeyPair2.fromSecret = function fromSecret(eddsa, secret) {
      if (secret instanceof KeyPair2)
        return secret;
      return new KeyPair2(eddsa, { secret });
    };
    KeyPair2.prototype.secret = function secret() {
      return this._secret;
    };
    cachedProperty(KeyPair2, "pubBytes", function pubBytes() {
      return this.eddsa.encodePoint(this.pub());
    });
    cachedProperty(KeyPair2, "pub", function pub() {
      if (this._pubBytes)
        return this.eddsa.decodePoint(this._pubBytes);
      return this.eddsa.g.mul(this.priv());
    });
    cachedProperty(KeyPair2, "privBytes", function privBytes() {
      var eddsa = this.eddsa;
      var hash2 = this.hash();
      var lastIx = eddsa.encodingLength - 1;
      var a = hash2.slice(0, eddsa.encodingLength);
      a[0] &= 248;
      a[lastIx] &= 127;
      a[lastIx] |= 64;
      return a;
    });
    cachedProperty(KeyPair2, "priv", function priv() {
      return this.eddsa.decodeInt(this.privBytes());
    });
    cachedProperty(KeyPair2, "hash", function hash2() {
      return this.eddsa.hash().update(this.secret()).digest();
    });
    cachedProperty(KeyPair2, "messagePrefix", function messagePrefix2() {
      return this.hash().slice(this.eddsa.encodingLength);
    });
    KeyPair2.prototype.sign = function sign3(message) {
      assert2(this._secret, "KeyPair can only verify");
      return this.eddsa.sign(message, this);
    };
    KeyPair2.prototype.verify = function verify3(message, sig) {
      return this.eddsa.verify(message, sig, this);
    };
    KeyPair2.prototype.getSecret = function getSecret(enc) {
      assert2(this._secret, "KeyPair is public only");
      return utils.encode(this.secret(), enc);
    };
    KeyPair2.prototype.getPublic = function getPublic2(enc) {
      return utils.encode(this.pubBytes(), enc);
    };
    module.exports = KeyPair2;
  }
});

// node_modules/elliptic/lib/elliptic/eddsa/signature.js
var require_signature2 = __commonJS({
  "node_modules/elliptic/lib/elliptic/eddsa/signature.js"(exports, module) {
    "use strict";
    var BN3 = require_bn6();
    var utils = require_utils2();
    var assert2 = utils.assert;
    var cachedProperty = utils.cachedProperty;
    var parseBytes = utils.parseBytes;
    function Signature2(eddsa, sig) {
      this.eddsa = eddsa;
      if (typeof sig !== "object")
        sig = parseBytes(sig);
      if (Array.isArray(sig)) {
        sig = {
          R: sig.slice(0, eddsa.encodingLength),
          S: sig.slice(eddsa.encodingLength)
        };
      }
      assert2(sig.R && sig.S, "Signature without R or S");
      if (eddsa.isPoint(sig.R))
        this._R = sig.R;
      if (sig.S instanceof BN3)
        this._S = sig.S;
      this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
      this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
    }
    cachedProperty(Signature2, "S", function S() {
      return this.eddsa.decodeInt(this.Sencoded());
    });
    cachedProperty(Signature2, "R", function R() {
      return this.eddsa.decodePoint(this.Rencoded());
    });
    cachedProperty(Signature2, "Rencoded", function Rencoded() {
      return this.eddsa.encodePoint(this.R());
    });
    cachedProperty(Signature2, "Sencoded", function Sencoded() {
      return this.eddsa.encodeInt(this.S());
    });
    Signature2.prototype.toBytes = function toBytes() {
      return this.Rencoded().concat(this.Sencoded());
    };
    Signature2.prototype.toHex = function toHex4() {
      return utils.encode(this.toBytes(), "hex").toUpperCase();
    };
    module.exports = Signature2;
  }
});

// node_modules/elliptic/lib/elliptic/eddsa/index.js
var require_eddsa = __commonJS({
  "node_modules/elliptic/lib/elliptic/eddsa/index.js"(exports, module) {
    "use strict";
    var hash2 = require_hash();
    var curves = require_curves();
    var utils = require_utils2();
    var assert2 = utils.assert;
    var parseBytes = utils.parseBytes;
    var KeyPair2 = require_key2();
    var Signature2 = require_signature2();
    function EDDSA(curve) {
      assert2(curve === "ed25519", "only tested with ed25519 so far");
      if (!(this instanceof EDDSA))
        return new EDDSA(curve);
      curve = curves[curve].curve;
      this.curve = curve;
      this.g = curve.g;
      this.g.precompute(curve.n.bitLength() + 1);
      this.pointClass = curve.point().constructor;
      this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
      this.hash = hash2.sha512;
    }
    module.exports = EDDSA;
    EDDSA.prototype.sign = function sign3(message, secret) {
      message = parseBytes(message);
      var key2 = this.keyFromSecret(secret);
      var r2 = this.hashInt(key2.messagePrefix(), message);
      var R = this.g.mul(r2);
      var Rencoded = this.encodePoint(R);
      var s_ = this.hashInt(Rencoded, key2.pubBytes(), message).mul(key2.priv());
      var S = r2.add(s_).umod(this.curve.n);
      return this.makeSignature({ R, S, Rencoded });
    };
    EDDSA.prototype.verify = function verify3(message, sig, pub) {
      message = parseBytes(message);
      sig = this.makeSignature(sig);
      var key2 = this.keyFromPublic(pub);
      var h = this.hashInt(sig.Rencoded(), key2.pubBytes(), message);
      var SG = this.g.mul(sig.S());
      var RplusAh = sig.R().add(key2.pub().mul(h));
      return RplusAh.eq(SG);
    };
    EDDSA.prototype.hashInt = function hashInt() {
      var hash3 = this.hash();
      for (var i = 0; i < arguments.length; i++)
        hash3.update(arguments[i]);
      return utils.intFromLE(hash3.digest()).umod(this.curve.n);
    };
    EDDSA.prototype.keyFromPublic = function keyFromPublic2(pub) {
      return KeyPair2.fromPublic(this, pub);
    };
    EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
      return KeyPair2.fromSecret(this, secret);
    };
    EDDSA.prototype.makeSignature = function makeSignature(sig) {
      if (sig instanceof Signature2)
        return sig;
      return new Signature2(this, sig);
    };
    EDDSA.prototype.encodePoint = function encodePoint(point3) {
      var enc = point3.getY().toArray("le", this.encodingLength);
      enc[this.encodingLength - 1] |= point3.getX().isOdd() ? 128 : 0;
      return enc;
    };
    EDDSA.prototype.decodePoint = function decodePoint2(bytes) {
      bytes = utils.parseBytes(bytes);
      var lastIx = bytes.length - 1;
      var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
      var xIsOdd = (bytes[lastIx] & 128) !== 0;
      var y = utils.intFromLE(normed);
      return this.curve.pointFromY(y, xIsOdd);
    };
    EDDSA.prototype.encodeInt = function encodeInt(num) {
      return num.toArray("le", this.encodingLength);
    };
    EDDSA.prototype.decodeInt = function decodeInt(bytes) {
      return utils.intFromLE(bytes);
    };
    EDDSA.prototype.isPoint = function isPoint(val) {
      return val instanceof this.pointClass;
    };
  }
});

// node_modules/elliptic/lib/elliptic.js
var require_elliptic = __commonJS({
  "node_modules/elliptic/lib/elliptic.js"(exports) {
    "use strict";
    var elliptic = exports;
    elliptic.version = require_package().version;
    elliptic.utils = require_utils2();
    elliptic.rand = require_brorand();
    elliptic.curve = require_curve();
    elliptic.curves = require_curves();
    elliptic.ec = require_ec();
    elliptic.eddsa = require_eddsa();
  }
});

// node_modules/secp256k1/lib/elliptic.js
var require_elliptic2 = __commonJS({
  "node_modules/secp256k1/lib/elliptic.js"(exports, module) {
    var EC2 = require_elliptic().ec;
    var ec2 = new EC2("secp256k1");
    var ecparams = ec2.curve;
    var BN3 = ecparams.n.constructor;
    function loadCompressedPublicKey(first, xbuf) {
      let x = new BN3(xbuf);
      if (x.cmp(ecparams.p) >= 0)
        return null;
      x = x.toRed(ecparams.red);
      let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
      if (first === 3 !== y.isOdd())
        y = y.redNeg();
      return ec2.keyPair({ pub: { x, y } });
    }
    function loadUncompressedPublicKey(first, xbuf, ybuf) {
      let x = new BN3(xbuf);
      let y = new BN3(ybuf);
      if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0)
        return null;
      x = x.toRed(ecparams.red);
      y = y.toRed(ecparams.red);
      if ((first === 6 || first === 7) && y.isOdd() !== (first === 7))
        return null;
      const x3 = x.redSqr().redIMul(x);
      if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero())
        return null;
      return ec2.keyPair({ pub: { x, y } });
    }
    function loadPublicKey(pubkey) {
      const first = pubkey[0];
      switch (first) {
        case 2:
        case 3:
          if (pubkey.length !== 33)
            return null;
          return loadCompressedPublicKey(first, pubkey.subarray(1, 33));
        case 4:
        case 6:
        case 7:
          if (pubkey.length !== 65)
            return null;
          return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));
        default:
          return null;
      }
    }
    function savePublicKey(output, point3) {
      const pubkey = point3.encode(null, output.length === 33);
      for (let i = 0; i < output.length; ++i)
        output[i] = pubkey[i];
    }
    module.exports = {
      contextRandomize() {
        return 0;
      },
      privateKeyVerify(seckey) {
        const bn = new BN3(seckey);
        return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1;
      },
      privateKeyNegate(seckey) {
        const bn = new BN3(seckey);
        const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, "be", 32);
        seckey.set(negate);
        return 0;
      },
      privateKeyTweakAdd(seckey, tweak) {
        const bn = new BN3(tweak);
        if (bn.cmp(ecparams.n) >= 0)
          return 1;
        bn.iadd(new BN3(seckey));
        if (bn.cmp(ecparams.n) >= 0)
          bn.isub(ecparams.n);
        if (bn.isZero())
          return 1;
        const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
        seckey.set(tweaked);
        return 0;
      },
      privateKeyTweakMul(seckey, tweak) {
        let bn = new BN3(tweak);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero())
          return 1;
        bn.imul(new BN3(seckey));
        if (bn.cmp(ecparams.n) >= 0)
          bn = bn.umod(ecparams.n);
        const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
        seckey.set(tweaked);
        return 0;
      },
      publicKeyVerify(pubkey) {
        const pair = loadPublicKey(pubkey);
        return pair === null ? 1 : 0;
      },
      publicKeyCreate(output, seckey) {
        const bn = new BN3(seckey);
        if (bn.cmp(ecparams.n) >= 0 || bn.isZero())
          return 1;
        const point3 = ec2.keyFromPrivate(seckey).getPublic();
        savePublicKey(output, point3);
        return 0;
      },
      publicKeyConvert(output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 1;
        const point3 = pair.getPublic();
        savePublicKey(output, point3);
        return 0;
      },
      publicKeyNegate(output, pubkey) {
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 1;
        const point3 = pair.getPublic();
        point3.y = point3.y.redNeg();
        savePublicKey(output, point3);
        return 0;
      },
      publicKeyCombine(output, pubkeys) {
        const pairs = new Array(pubkeys.length);
        for (let i = 0; i < pubkeys.length; ++i) {
          pairs[i] = loadPublicKey(pubkeys[i]);
          if (pairs[i] === null)
            return 1;
        }
        let point3 = pairs[0].getPublic();
        for (let i = 1; i < pairs.length; ++i)
          point3 = point3.add(pairs[i].pub);
        if (point3.isInfinity())
          return 2;
        savePublicKey(output, point3);
        return 0;
      },
      publicKeyTweakAdd(output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 1;
        tweak = new BN3(tweak);
        if (tweak.cmp(ecparams.n) >= 0)
          return 2;
        const point3 = pair.getPublic().add(ecparams.g.mul(tweak));
        if (point3.isInfinity())
          return 2;
        savePublicKey(output, point3);
        return 0;
      },
      publicKeyTweakMul(output, pubkey, tweak) {
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 1;
        tweak = new BN3(tweak);
        if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero())
          return 2;
        const point3 = pair.getPublic().mul(tweak);
        savePublicKey(output, point3);
        return 0;
      },
      signatureNormalize(sig) {
        const r2 = new BN3(sig.subarray(0, 32));
        const s = new BN3(sig.subarray(32, 64));
        if (r2.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0)
          return 1;
        if (s.cmp(ec2.nh) === 1) {
          sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, "be", 32), 32);
        }
        return 0;
      },
      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureExport(obj, sig) {
        const sigR = sig.subarray(0, 32);
        const sigS = sig.subarray(32, 64);
        if (new BN3(sigR).cmp(ecparams.n) >= 0)
          return 1;
        if (new BN3(sigS).cmp(ecparams.n) >= 0)
          return 1;
        const { output } = obj;
        let r2 = output.subarray(4, 4 + 33);
        r2[0] = 0;
        r2.set(sigR, 1);
        let lenR = 33;
        let posR = 0;
        for (; lenR > 1 && r2[posR] === 0 && !(r2[posR + 1] & 128); --lenR, ++posR)
          ;
        r2 = r2.subarray(posR);
        if (r2[0] & 128)
          return 1;
        if (lenR > 1 && r2[0] === 0 && !(r2[1] & 128))
          return 1;
        let s = output.subarray(6 + 33, 6 + 33 + 33);
        s[0] = 0;
        s.set(sigS, 1);
        let lenS = 33;
        let posS = 0;
        for (; lenS > 1 && s[posS] === 0 && !(s[posS + 1] & 128); --lenS, ++posS)
          ;
        s = s.subarray(posS);
        if (s[0] & 128)
          return 1;
        if (lenS > 1 && s[0] === 0 && !(s[1] & 128))
          return 1;
        obj.outputlen = 6 + lenR + lenS;
        output[0] = 48;
        output[1] = obj.outputlen - 2;
        output[2] = 2;
        output[3] = r2.length;
        output.set(r2, 4);
        output[4 + lenR] = 2;
        output[5 + lenR] = s.length;
        output.set(s, 6 + lenR);
        return 0;
      },
      // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
      // Adapted for Uint8Array instead Buffer
      signatureImport(output, sig) {
        if (sig.length < 8)
          return 1;
        if (sig.length > 72)
          return 1;
        if (sig[0] !== 48)
          return 1;
        if (sig[1] !== sig.length - 2)
          return 1;
        if (sig[2] !== 2)
          return 1;
        const lenR = sig[3];
        if (lenR === 0)
          return 1;
        if (5 + lenR >= sig.length)
          return 1;
        if (sig[4 + lenR] !== 2)
          return 1;
        const lenS = sig[5 + lenR];
        if (lenS === 0)
          return 1;
        if (6 + lenR + lenS !== sig.length)
          return 1;
        if (sig[4] & 128)
          return 1;
        if (lenR > 1 && sig[4] === 0 && !(sig[5] & 128))
          return 1;
        if (sig[lenR + 6] & 128)
          return 1;
        if (lenS > 1 && sig[lenR + 6] === 0 && !(sig[lenR + 7] & 128))
          return 1;
        let sigR = sig.subarray(4, 4 + lenR);
        if (sigR.length === 33 && sigR[0] === 0)
          sigR = sigR.subarray(1);
        if (sigR.length > 32)
          return 1;
        let sigS = sig.subarray(6 + lenR);
        if (sigS.length === 33 && sigS[0] === 0)
          sigS = sigS.slice(1);
        if (sigS.length > 32)
          throw new Error("S length is too long");
        let r2 = new BN3(sigR);
        if (r2.cmp(ecparams.n) >= 0)
          r2 = new BN3(0);
        let s = new BN3(sig.subarray(6 + lenR));
        if (s.cmp(ecparams.n) >= 0)
          s = new BN3(0);
        output.set(r2.toArrayLike(Uint8Array, "be", 32), 0);
        output.set(s.toArrayLike(Uint8Array, "be", 32), 32);
        return 0;
      },
      ecdsaSign(obj, message, seckey, data, noncefn) {
        if (noncefn) {
          const _noncefn = noncefn;
          noncefn = (counter) => {
            const nonce = _noncefn(message, seckey, null, data, counter);
            const isValid = nonce instanceof Uint8Array && nonce.length === 32;
            if (!isValid)
              throw new Error("This is the way");
            return new BN3(nonce);
          };
        }
        const d = new BN3(seckey);
        if (d.cmp(ecparams.n) >= 0 || d.isZero())
          return 1;
        let sig;
        try {
          sig = ec2.sign(message, seckey, { canonical: true, k: noncefn, pers: data });
        } catch (err) {
          return 1;
        }
        obj.signature.set(sig.r.toArrayLike(Uint8Array, "be", 32), 0);
        obj.signature.set(sig.s.toArrayLike(Uint8Array, "be", 32), 32);
        obj.recid = sig.recoveryParam;
        return 0;
      },
      ecdsaVerify(sig, msg32, pubkey) {
        const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) };
        const sigr = new BN3(sigObj.r);
        const sigs = new BN3(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0)
          return 1;
        if (sigs.cmp(ec2.nh) === 1 || sigr.isZero() || sigs.isZero())
          return 3;
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 2;
        const point3 = pair.getPublic();
        const isValid = ec2.verify(msg32, sigObj, point3);
        return isValid ? 0 : 3;
      },
      ecdsaRecover(output, sig, recid, msg32) {
        const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) };
        const sigr = new BN3(sigObj.r);
        const sigs = new BN3(sigObj.s);
        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0)
          return 1;
        if (sigr.isZero() || sigs.isZero())
          return 2;
        let point3;
        try {
          point3 = ec2.recoverPubKey(msg32, sigObj, recid);
        } catch (err) {
          return 2;
        }
        savePublicKey(output, point3);
        return 0;
      },
      ecdh(output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
        const pair = loadPublicKey(pubkey);
        if (pair === null)
          return 1;
        const scalar = new BN3(seckey);
        if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero())
          return 2;
        const point3 = pair.getPublic().mul(scalar);
        if (hashfn === void 0) {
          const data2 = point3.encode(null, true);
          const sha256 = ec2.hash().update(data2).digest();
          for (let i = 0; i < 32; ++i)
            output[i] = sha256[i];
        } else {
          if (!xbuf)
            xbuf = new Uint8Array(32);
          const x = point3.getX().toArray("be", 32);
          for (let i = 0; i < 32; ++i)
            xbuf[i] = x[i];
          if (!ybuf)
            ybuf = new Uint8Array(32);
          const y = point3.getY().toArray("be", 32);
          for (let i = 0; i < 32; ++i)
            ybuf[i] = y[i];
          const hash2 = hashfn(xbuf, ybuf, data);
          const isValid = hash2 instanceof Uint8Array && hash2.length === output.length;
          if (!isValid)
            return 2;
          output.set(hash2);
        }
        return 0;
      }
    };
  }
});

// node_modules/secp256k1/elliptic.js
var require_elliptic3 = __commonJS({
  "node_modules/secp256k1/elliptic.js"(exports, module) {
    module.exports = require_lib2()(require_elliptic2());
  }
});

// node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "node_modules/safe-buffer/index.js"(exports, module) {
    var buffer = require_buffer();
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key2 in src) {
        dst[key2] = src[key2];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer2.prototype);
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/randombytes/browser.js
var require_browser = __commonJS({
  "node_modules/randombytes/browser.js"(exports, module) {
    "use strict";
    var MAX_BYTES = 65536;
    var MAX_UINT32 = 4294967295;
    function oldBrowser() {
      throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
    }
    var Buffer2 = require_safe_buffer().Buffer;
    var crypto2 = globalThis.crypto || globalThis.msCrypto;
    if (crypto2 && crypto2.getRandomValues) {
      module.exports = randomBytes;
    } else {
      module.exports = oldBrowser;
    }
    function randomBytes(size, cb) {
      if (size > MAX_UINT32)
        throw new RangeError("requested too many random bytes");
      var bytes = Buffer2.allocUnsafe(size);
      if (size > 0) {
        if (size > MAX_BYTES) {
          for (var generated = 0; generated < size; generated += MAX_BYTES) {
            crypto2.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
          }
        } else {
          crypto2.getRandomValues(bytes);
        }
      }
      if (typeof cb === "function") {
        return process.nextTick(function() {
          cb(null, bytes);
        });
      }
      return bytes;
    }
  }
});

// node_modules/ethereum-cryptography/random.js
var require_random = __commonJS({
  "node_modules/ethereum-cryptography/random.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var randombytes = require_browser();
    function getRandomBytes(bytes) {
      return new Promise(function(resolve, reject) {
        randombytes(bytes, function(err, resp) {
          if (err) {
            reject(err);
            return;
          }
          resolve(resp);
        });
      });
    }
    exports.getRandomBytes = getRandomBytes;
    function getRandomBytesSync(bytes) {
      return randombytes(bytes);
    }
    exports.getRandomBytesSync = getRandomBytesSync;
  }
});

// node_modules/ethereum-cryptography/secp256k1.js
var require_secp256k12 = __commonJS({
  "node_modules/ethereum-cryptography/secp256k1.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator2 = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    function __export2(m) {
      for (var p in m)
        if (!exports.hasOwnProperty(p))
          exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    var secp256k1_1 = require_elliptic3();
    var random_1 = require_random();
    var SECP256K1_PRIVATE_KEY_SIZE = 32;
    function createPrivateKey() {
      return __awaiter2(this, void 0, void 0, function() {
        var pk;
        return __generator2(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (false)
                return [3, 2];
              return [4, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
            case 1:
              pk = _a2.sent();
              if (secp256k1_1.privateKeyVerify(pk)) {
                return [2, pk];
              }
              return [3, 0];
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
    exports.createPrivateKey = createPrivateKey;
    function createPrivateKeySync() {
      while (true) {
        var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
        if (secp256k1_1.privateKeyVerify(pk)) {
          return pk;
        }
      }
    }
    exports.createPrivateKeySync = createPrivateKeySync;
    __export2(require_elliptic3());
  }
});

// node_modules/ethereumjs-util/dist.browser/internal.js
var require_internal = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/internal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;
    function isHexPrefixed(str) {
      if (typeof str !== "string") {
        throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat(typeof str));
      }
      return str[0] === "0" && str[1] === "x";
    }
    exports.isHexPrefixed = isHexPrefixed;
    var stripHexPrefix = function(str) {
      if (typeof str !== "string")
        throw new Error("[stripHexPrefix] input must be type 'string', received ".concat(typeof str));
      return isHexPrefixed(str) ? str.slice(2) : str;
    };
    exports.stripHexPrefix = stripHexPrefix;
    function padToEven(value) {
      var a = value;
      if (typeof a !== "string") {
        throw new Error("[padToEven] value must be type 'string', received ".concat(typeof a));
      }
      if (a.length % 2)
        a = "0".concat(a);
      return a;
    }
    exports.padToEven = padToEven;
    function getBinarySize(str) {
      if (typeof str !== "string") {
        throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat(typeof str));
      }
      return Buffer.byteLength(str, "utf8");
    }
    exports.getBinarySize = getBinarySize;
    function arrayContainsArray(superset, subset, some) {
      if (Array.isArray(superset) !== true) {
        throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat(typeof superset, "'"));
      }
      if (Array.isArray(subset) !== true) {
        throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat(typeof subset, "'"));
      }
      return subset[some ? "some" : "every"](function(value) {
        return superset.indexOf(value) >= 0;
      });
    }
    exports.arrayContainsArray = arrayContainsArray;
    function toAscii(hex) {
      var str = "";
      var i = 0;
      var l = hex.length;
      if (hex.substring(0, 2) === "0x")
        i = 2;
      for (; i < l; i += 2) {
        var code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
      }
      return str;
    }
    exports.toAscii = toAscii;
    function fromUtf8(stringValue) {
      var str = Buffer.from(stringValue, "utf8");
      return "0x".concat(padToEven(str.toString("hex")).replace(/^0+|0+$/g, ""));
    }
    exports.fromUtf8 = fromUtf8;
    function fromAscii(stringValue) {
      var hex = "";
      for (var i = 0; i < stringValue.length; i++) {
        var code = stringValue.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? "0".concat(n) : n;
      }
      return "0x".concat(hex);
    }
    exports.fromAscii = fromAscii;
    function getKeys(params, key2, allowEmpty) {
      if (!Array.isArray(params)) {
        throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat(typeof params));
      }
      if (typeof key2 !== "string") {
        throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat(typeof params));
      }
      var result = [];
      for (var i = 0; i < params.length; i++) {
        var value = params[i][key2];
        if (allowEmpty && !value) {
          value = "";
        } else if (typeof value !== "string") {
          throw new Error("invalid abi - expected type 'string', received ".concat(typeof value));
        }
        result.push(value);
      }
      return result;
    }
    exports.getKeys = getKeys;
    function isHexString2(value, length) {
      if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/))
        return false;
      if (length && value.length !== 2 + 2 * length)
        return false;
      return true;
    }
    exports.isHexString = isHexString2;
  }
});

// node_modules/ethereumjs-util/dist.browser/helpers.js
var require_helpers = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/helpers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;
    var internal_1 = require_internal();
    var assertIsHexString = function(input) {
      if (!(0, internal_1.isHexString)(input)) {
        var msg = "This method only supports 0x-prefixed hex strings but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports.assertIsHexString = assertIsHexString;
    var assertIsBuffer = function(input) {
      if (!Buffer.isBuffer(input)) {
        var msg = "This method only supports Buffer but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports.assertIsBuffer = assertIsBuffer;
    var assertIsArray = function(input) {
      if (!Array.isArray(input)) {
        var msg = "This method only supports number arrays but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports.assertIsArray = assertIsArray;
    var assertIsString = function(input) {
      if (typeof input !== "string") {
        var msg = "This method only supports strings but input was: ".concat(input);
        throw new Error(msg);
      }
    };
    exports.assertIsString = assertIsString;
  }
});

// node_modules/ethereumjs-util/dist.browser/bytes.js
var require_bytes = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/bytes.js"(exports) {
    "use strict";
    var __values2 = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read2 = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r2, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r2 = i.next()).done)
          ar.push(r2.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r2 && !r2.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;
    var externals_1 = require_externals();
    var internal_1 = require_internal();
    var helpers_1 = require_helpers();
    var intToHex = function(i) {
      if (!Number.isSafeInteger(i) || i < 0) {
        throw new Error("Received an invalid integer type: ".concat(i));
      }
      return "0x".concat(i.toString(16));
    };
    exports.intToHex = intToHex;
    var intToBuffer = function(i) {
      var hex = (0, exports.intToHex)(i);
      return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), "hex");
    };
    exports.intToBuffer = intToBuffer;
    var zeros2 = function(bytes) {
      return Buffer.allocUnsafe(bytes).fill(0);
    };
    exports.zeros = zeros2;
    var setLength = function(msg, length, right) {
      var buf = (0, exports.zeros)(length);
      if (right) {
        if (msg.length < length) {
          msg.copy(buf);
          return buf;
        }
        return msg.slice(0, length);
      } else {
        if (msg.length < length) {
          msg.copy(buf, length - msg.length);
          return buf;
        }
        return msg.slice(-length);
      }
    };
    var setLengthLeft = function(msg, length) {
      (0, helpers_1.assertIsBuffer)(msg);
      return setLength(msg, length, false);
    };
    exports.setLengthLeft = setLengthLeft;
    var setLengthRight = function(msg, length) {
      (0, helpers_1.assertIsBuffer)(msg);
      return setLength(msg, length, true);
    };
    exports.setLengthRight = setLengthRight;
    var stripZeros2 = function(a) {
      var first = a[0];
      while (a.length > 0 && first.toString() === "0") {
        a = a.slice(1);
        first = a[0];
      }
      return a;
    };
    var unpadBuffer = function(a) {
      (0, helpers_1.assertIsBuffer)(a);
      return stripZeros2(a);
    };
    exports.unpadBuffer = unpadBuffer;
    var unpadArray = function(a) {
      (0, helpers_1.assertIsArray)(a);
      return stripZeros2(a);
    };
    exports.unpadArray = unpadArray;
    var unpadHexString = function(a) {
      (0, helpers_1.assertIsHexString)(a);
      a = (0, internal_1.stripHexPrefix)(a);
      return stripZeros2(a);
    };
    exports.unpadHexString = unpadHexString;
    var toBuffer = function(v) {
      if (v === null || v === void 0) {
        return Buffer.allocUnsafe(0);
      }
      if (Buffer.isBuffer(v)) {
        return Buffer.from(v);
      }
      if (Array.isArray(v) || v instanceof Uint8Array) {
        return Buffer.from(v);
      }
      if (typeof v === "string") {
        if (!(0, internal_1.isHexString)(v)) {
          throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(v));
        }
        return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), "hex");
      }
      if (typeof v === "number") {
        return (0, exports.intToBuffer)(v);
      }
      if (externals_1.BN.isBN(v)) {
        if (v.isNeg()) {
          throw new Error("Cannot convert negative BN to buffer. Given: ".concat(v));
        }
        return v.toArrayLike(Buffer);
      }
      if (v.toArray) {
        return Buffer.from(v.toArray());
      }
      if (v.toBuffer) {
        return Buffer.from(v.toBuffer());
      }
      throw new Error("invalid type");
    };
    exports.toBuffer = toBuffer;
    var bufferToInt = function(buf) {
      return new externals_1.BN((0, exports.toBuffer)(buf)).toNumber();
    };
    exports.bufferToInt = bufferToInt;
    var bufferToHex = function(buf) {
      buf = (0, exports.toBuffer)(buf);
      return "0x" + buf.toString("hex");
    };
    exports.bufferToHex = bufferToHex;
    var fromSigned = function(num) {
      return new externals_1.BN(num).fromTwos(256);
    };
    exports.fromSigned = fromSigned;
    var toUnsigned = function(num) {
      return Buffer.from(num.toTwos(256).toArray());
    };
    exports.toUnsigned = toUnsigned;
    var addHexPrefix = function(str) {
      if (typeof str !== "string") {
        return str;
      }
      return (0, internal_1.isHexPrefixed)(str) ? str : "0x" + str;
    };
    exports.addHexPrefix = addHexPrefix;
    var toUtf8 = function(hex) {
      var zerosRegexp = /^(00)+|(00)+$/g;
      hex = (0, internal_1.stripHexPrefix)(hex);
      if (hex.length % 2 !== 0) {
        throw new Error("Invalid non-even hex string input for toUtf8() provided");
      }
      var bufferVal = Buffer.from(hex.replace(zerosRegexp, ""), "hex");
      return bufferVal.toString("utf8");
    };
    exports.toUtf8 = toUtf8;
    var baToJSON = function(ba) {
      if (Buffer.isBuffer(ba)) {
        return "0x".concat(ba.toString("hex"));
      } else if (ba instanceof Array) {
        var array = [];
        for (var i = 0; i < ba.length; i++) {
          array.push((0, exports.baToJSON)(ba[i]));
        }
        return array;
      }
    };
    exports.baToJSON = baToJSON;
    var validateNoLeadingZeroes = function(values) {
      var e_1, _a2;
      try {
        for (var _b = __values2(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var _d = __read2(_c.value, 2), k = _d[0], v = _d[1];
          if (v !== void 0 && v.length > 0 && v[0] === 0) {
            throw new Error("".concat(k, " cannot have leading zeroes, received: ").concat(v.toString("hex")));
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    };
    exports.validateNoLeadingZeroes = validateNoLeadingZeroes;
    function arrToBufArr(arr) {
      if (!Array.isArray(arr)) {
        return Buffer.from(arr);
      }
      return arr.map(function(a) {
        return arrToBufArr(a);
      });
    }
    exports.arrToBufArr = arrToBufArr;
    function bufArrToArr(arr) {
      if (!Array.isArray(arr)) {
        return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);
      }
      return arr.map(function(a) {
        return bufArrToArr(a);
      });
    }
    exports.bufArrToArr = bufArrToArr;
  }
});

// node_modules/ethereum-cryptography/hash-utils.js
var require_hash_utils = __commonJS({
  "node_modules/ethereum-cryptography/hash-utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function createHashFunction(hashConstructor) {
      return function(msg) {
        var hash2 = hashConstructor();
        hash2.update(msg);
        return Buffer.from(hash2.digest());
      };
    }
    exports.createHashFunction = createHashFunction;
  }
});

// browser-external:events
var require_events = __commonJS({
  "browser-external:events"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key2) {
        if (key2 !== "__esModule" && key2 !== "__proto__" && key2 !== "constructor" && key2 !== "splice") {
          console.warn(`Module "events" has been externalized for browser compatibility. Cannot access "events.${key2}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/readable-stream/lib/internal/streams/stream-browser.js
var require_stream_browser = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports, module) {
    module.exports = require_events().EventEmitter;
  }
});

// browser-external:util
var require_util = __commonJS({
  "browser-external:util"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key2) {
        if (key2 !== "__esModule" && key2 !== "__proto__" && key2 !== "constructor" && key2 !== "splice") {
          console.warn(`Module "util" has been externalized for browser compatibility. Cannot access "util.${key2}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module) {
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key2) {
          _defineProperty(target, key2, source[key2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key2) {
          Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
        });
      }
      return target;
    }
    function _defineProperty(obj, key2, value) {
      key2 = _toPropertyKey(key2);
      if (key2 in obj) {
        Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key2] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key2 = _toPrimitive(arg, "string");
      return typeof key2 === "symbol" ? key2 : String(key2);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var _require = require_buffer();
    var Buffer2 = _require.Buffer;
    var _require2 = require_util();
    var inspect4 = _require2.inspect;
    var custom = inspect4 && inspect4.custom || "inspect";
    function copyBuffer(src, target, offset) {
      Buffer2.prototype.copy.call(src, target, offset);
    }
    module.exports = function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      _createClass(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0)
            this.tail.next = entry;
          else
            this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0)
            this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0)
            return;
          var ret = this.head.data;
          if (this.length === 1)
            this.head = this.tail = null;
          else
            this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s) {
          if (this.length === 0)
            return "";
          var p = this.head;
          var ret = "" + p.data;
          while (p = p.next)
            ret += s + p.data;
          return ret;
        }
      }, {
        key: "concat",
        value: function concat2(n) {
          if (this.length === 0)
            return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;
          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }
          return ret;
        }
        // Consumes a specified amount of bytes or characters from the buffered data.
      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;
          if (n < this.head.data.length) {
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            ret = this.shift();
          } else {
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        }
        // Consumes a specified amount of characters from the buffered data.
      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;
          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length)
              ret += str;
            else
              ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
        // Consumes a specified amount of bytes from the buffered data.
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer2.allocUnsafe(n);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;
          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
        // Make sure the linked list only shows the minimal necessary information.
      }, {
        key: custom,
        value: function value(_, options) {
          return inspect4(this, _objectSpread(_objectSpread({}, options), {}, {
            // Only inspect one level.
            depth: 0,
            // It should not recurse.
            customInspect: false
          }));
        }
      }]);
      return BufferList;
    }();
  }
});

// node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module) {
    "use strict";
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          process.nextTick(emitCloseNT, _this);
          cb(err2);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self2, err) {
      emitErrorNT(self2, err);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      if (self2._writableState && !self2._writableState.emitClose)
        return;
      if (self2._readableState && !self2._readableState.emitClose)
        return;
      self2.emit("close");
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    function errorOrDestroy(stream, err) {
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy)
        stream.destroy(err);
      else
        stream.emit("error", err);
    }
    module.exports = {
      destroy,
      undestroy,
      errorOrDestroy
    };
  }
});

// node_modules/readable-stream/errors-browser.js
var require_errors_browser = __commonJS({
  "node_modules/readable-stream/errors-browser.js"(exports, module) {
    "use strict";
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var codes = {};
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = function(_Base) {
        _inheritsLoose(NodeError2, _Base);
        function NodeError2(arg1, arg2, arg3) {
          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError2;
      }(Base);
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
          return String(i);
        });
        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith2(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_INVALID_OPT_VALUE", function(name2, value) {
      return 'The value "' + value + '" is invalid for option "' + name2 + '"';
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name2, expected, actual) {
      var determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      var msg;
      if (endsWith2(name2, " argument")) {
        msg = "The ".concat(name2, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      } else {
        var type = includes(name2, ".") ? "property" : "argument";
        msg = 'The "'.concat(name2, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      }
      msg += ". Received type ".concat(typeof actual);
      return msg;
    }, TypeError);
    createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name2) {
      return "The " + name2 + " method is not implemented";
    });
    createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    createErrorType("ERR_STREAM_DESTROYED", function(name2) {
      return "Cannot call " + name2 + " after a stream was destroyed";
    });
    createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
      return "Unknown encoding: " + arg;
    }, TypeError);
    createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    module.exports.codes = codes;
  }
});

// node_modules/readable-stream/lib/internal/streams/state.js
var require_state = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/state.js"(exports, module) {
    "use strict";
    var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name2 = isDuplex ? duplexKey : "highWaterMark";
          throw new ERR_INVALID_OPT_VALUE(name2, hwm);
        }
        return Math.floor(hwm);
      }
      return state.objectMode ? 16 : 16 * 1024;
    }
    module.exports = {
      getHighWaterMark
    };
  }
});

// node_modules/util-deprecate/browser.js
var require_browser2 = __commonJS({
  "node_modules/util-deprecate/browser.js"(exports, module) {
    module.exports = deprecate;
    function deprecate(fn, msg) {
      if (config("noDeprecation")) {
        return fn;
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (config("throwDeprecation")) {
            throw new Error(msg);
          } else if (config("traceDeprecation")) {
            console.trace(msg);
          } else {
            console.warn(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    }
    function config(name2) {
      try {
        if (!globalThis.localStorage)
          return false;
      } catch (_) {
        return false;
      }
      var val = globalThis.localStorage[name2];
      if (null == val)
        return false;
      return String(val).toLowerCase() === "true";
    }
  }
});

// node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable = __commonJS({
  "node_modules/readable-stream/lib/_stream_writable.js"(exports, module) {
    "use strict";
    module.exports = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var Duplex;
    Writable.WritableState = WritableState;
    var internalUtil = {
      deprecate: require_browser2()
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_buffer().Buffer;
    var OurUint8Array = (typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    require_inherits_browser()(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.writableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object))
            return true;
          if (this !== Writable)
            return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance2(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex();
      var isDuplex = this instanceof Duplex;
      if (!isDuplex && !realHasInstance.call(Writable, this))
        return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.final === "function")
          this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function writeAfterEnd(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END();
      errorOrDestroy(stream, er);
      process.nextTick(cb, er);
    }
    function validChunk(stream, state, chunk, cb) {
      var er;
      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== "string" && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
      }
      if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
      }
      return true;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf)
        encoding = "buffer";
      else if (!encoding)
        encoding = state.defaultEncoding;
      if (typeof cb !== "function")
        cb = nop;
      if (state.ending)
        writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
          clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
        throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed)
        state.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev)
        stream._writev(chunk, state.onwrite);
      else
        stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) {
        process.nextTick(cb, er);
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
      } else {
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== "function")
        throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state);
      if (er)
        onwriteError(stream, state, sync, er, cb);
      else {
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          process.nextTick(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished)
        onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf)
            allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null)
          state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0)
        this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending)
        endWritable(this, state, cb);
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err) {
        state.pendingcb--;
        if (err) {
          errorOrDestroy(stream, err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          process.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
          if (state.autoDestroy) {
            var rState = stream._readableState;
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished)
          process.nextTick(cb);
        else
          stream.once("finish", cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function set(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      cb(err);
    };
  }
});

// node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex = __commonJS({
  "node_modules/readable-stream/lib/_stream_duplex.js"(exports, module) {
    "use strict";
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key2 in obj)
        keys2.push(key2);
      return keys2;
    };
    module.exports = Duplex;
    var Readable = require_stream_readable();
    var Writable = require_stream_writable();
    require_inherits_browser()(Duplex, Readable);
    {
      keys = objectKeys(Writable.prototype);
      for (v = 0; v < keys.length; v++) {
        method = keys[v];
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    var keys;
    var method;
    var v;
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      this.allowHalfOpen = true;
      if (options) {
        if (options.readable === false)
          this.readable = false;
        if (options.writable === false)
          this.writable = false;
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once("end", onend);
        }
      }
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function onend() {
      if (this._writableState.ended)
        return;
      process.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
  }
});

// node_modules/string_decoder/lib/string_decoder.js
var require_string_decoder = __commonJS({
  "node_modules/string_decoder/lib/string_decoder.js"(exports) {
    "use strict";
    var Buffer2 = require_safe_buffer().Buffer;
    var isEncoding = Buffer2.isEncoding || function(encoding) {
      encoding = "" + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc)
        return "utf8";
      var retried;
      while (true) {
        switch (enc) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return enc;
          default:
            if (retried)
              return;
            enc = ("" + enc).toLowerCase();
            retried = true;
        }
      }
    }
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
        throw new Error("Unknown encoding: " + enc);
      return nenc || enc;
    }
    exports.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case "utf16le":
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case "utf8":
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case "base64":
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer2.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function(buf) {
      if (buf.length === 0)
        return "";
      var r2;
      var i;
      if (this.lastNeed) {
        r2 = this.fillLast(buf);
        if (r2 === void 0)
          return "";
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length)
        return r2 ? r2 + this.text(buf, i) : this.text(buf, i);
      return r2 || "";
    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function(buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    function utf8CheckByte(byte) {
      if (byte <= 127)
        return 0;
      else if (byte >> 5 === 6)
        return 2;
      else if (byte >> 4 === 14)
        return 3;
      else if (byte >> 3 === 30)
        return 4;
      return byte >> 6 === 2 ? -1 : -2;
    }
    function utf8CheckIncomplete(self2, buf, i) {
      var j = buf.length - 1;
      if (j < i)
        return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2)
            nb = 0;
          else
            self2.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    function utf8CheckExtraBytes(self2, buf, p) {
      if ((buf[0] & 192) !== 128) {
        self2.lastNeed = 0;
        return "�";
      }
      if (self2.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
          self2.lastNeed = 1;
          return "�";
        }
        if (self2.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 192) !== 128) {
            self2.lastNeed = 2;
            return "�";
          }
        }
      }
    }
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r2 = utf8CheckExtraBytes(this, buf, p);
      if (r2 !== void 0)
        return r2;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed)
        return buf.toString("utf8", i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString("utf8", i, end);
    }
    function utf8End(buf) {
      var r2 = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r2 + "�";
      return r2;
    }
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r2 = buf.toString("utf16le", i);
        if (r2) {
          var c = r2.charCodeAt(r2.length - 1);
          if (c >= 55296 && c <= 56319) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r2.slice(0, -1);
          }
        }
        return r2;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString("utf16le", i, buf.length - 1);
    }
    function utf16End(buf) {
      var r2 = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r2 + this.lastChar.toString("utf16le", 0, end);
      }
      return r2;
    }
    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0)
        return buf.toString("base64", i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString("base64", i, buf.length - n);
    }
    function base64End(buf) {
      var r2 = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r2 + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
      return r2;
    }
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : "";
    }
  }
});

// node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module) {
    "use strict";
    var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop3() {
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function eos(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop3);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish2() {
        if (!stream.writable)
          onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish2() {
        writable = false;
        writableEnded = true;
        if (!readable)
          callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend2() {
        readable = false;
        readableEnded = true;
        if (!writable)
          callback.call(stream);
      };
      var onerror = function onerror2(err) {
        callback.call(stream, err);
      };
      var onclose = function onclose2() {
        var err;
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
      var onrequest = function onrequest2() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !stream._writableState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    }
    module.exports = eos;
  }
});

// node_modules/readable-stream/lib/internal/streams/async_iterator.js
var require_async_iterator = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports, module) {
    "use strict";
    var _Object$setPrototypeO;
    function _defineProperty(obj, key2, value) {
      key2 = _toPropertyKey(key2);
      if (key2 in obj) {
        Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key2] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key2 = _toPrimitive(arg, "string");
      return typeof key2 === "symbol" ? key2 : String(key2);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var finished = require_end_of_stream();
    var kLastResolve = Symbol("lastResolve");
    var kLastReject = Symbol("lastReject");
    var kError = Symbol("error");
    var kEnded = Symbol("ended");
    var kLastPromise = Symbol("lastPromise");
    var kHandlePromise = Symbol("handlePromise");
    var kStream = Symbol("stream");
    function createIterResult(value, done) {
      return {
        value,
        done
      };
    }
    function readAndResolve(iter) {
      var resolve = iter[kLastResolve];
      if (resolve !== null) {
        var data = iter[kStream].read();
        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve(createIterResult(data, false));
        }
      }
    }
    function onReadable(iter) {
      process.nextTick(readAndResolve, iter);
    }
    function wrapForNext(lastPromise, iter) {
      return function(resolve, reject) {
        lastPromise.then(function() {
          if (iter[kEnded]) {
            resolve(createIterResult(void 0, true));
            return;
          }
          iter[kHandlePromise](resolve, reject);
        }, reject);
      };
    }
    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
    });
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
      next: function next() {
        var _this = this;
        var error = this[kError];
        if (error !== null) {
          return Promise.reject(error);
        }
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(void 0, true));
        }
        if (this[kStream].destroyed) {
          return new Promise(function(resolve, reject) {
            process.nextTick(function() {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve(createIterResult(void 0, true));
              }
            });
          });
        }
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          var data = this[kStream].read();
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
          promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
      return this;
    }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
      return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve(createIterResult(void 0, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
      var _Object$create;
      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
          var data = iterator[kStream].read();
          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var reject = iterator[kLastReject];
          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }
          iterator[kError] = err;
          return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(void 0, true));
        }
        iterator[kEnded] = true;
      });
      stream.on("readable", onReadable.bind(null, iterator));
      return iterator;
    };
    module.exports = createReadableStreamAsyncIterator;
  }
});

// node_modules/readable-stream/lib/internal/streams/from-browser.js
var require_from_browser = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/from-browser.js"(exports, module) {
    module.exports = function() {
      throw new Error("Readable.from is not available in the browser");
    };
  }
});

// node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable = __commonJS({
  "node_modules/readable-stream/lib/_stream_readable.js"(exports, module) {
    "use strict";
    module.exports = Readable;
    var Duplex;
    Readable.ReadableState = ReadableState;
    var EE = require_events().EventEmitter;
    var EElistenerCount = function EElistenerCount2(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_buffer().Buffer;
    var OurUint8Array = (typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var debugUtil = require_util();
    var debug;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function debug2() {
      };
    }
    var BufferList = require_buffer_list();
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    require_inherits_browser()(Readable, Stream);
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function")
        return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.readableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder)
          StringDecoder = require_string_decoder().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable))
        return new Readable(options);
      var isDuplex = this instanceof Duplex;
      this._readableState = new ReadableState(options, this, isDuplex);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function")
          this._read = options.read;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function set(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug("readableAddChunk", chunk);
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck)
          er = chunkInvalid(state, chunk);
        if (er) {
          errorOrDestroy(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted)
              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            else
              addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0)
                addChunk(stream, state, chunk, false);
              else
                maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      }
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);
        if (state.needReadable)
          emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
      }
      return er;
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder)
        StringDecoder = require_string_decoder().StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      var p = this._readableState.buffer.head;
      var content = "";
      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }
      this._readableState.buffer.clear();
      if (content !== "")
        this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended)
        return 0;
      if (state.objectMode)
        return 1;
      if (n !== n) {
        if (state.flowing && state.length)
          return state.buffer.head.data.length;
        else
          return state.length;
      }
      if (n > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length)
        return n;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n) {
      debug("read", n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0)
        state.emittedReadable = false;
      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0)
          state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading)
          n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0)
        ret = fromList(n, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n && state.ended)
          endReadable(this);
      }
      if (ret !== null)
        this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      debug("onEofChunk");
      if (state.ended)
        return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        emitReadable(stream);
      } else {
        state.needReadable = false;
        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      debug("emitReadable", state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      var state = stream._readableState;
      debug("emitReadable_", state.destroyed, state.length, state.ended);
      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
      }
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted)
        process.nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0)
          errorOrDestroy(dest, er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain)
          state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipesCount === 0)
        return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes)
          return this;
        if (!dest)
          dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest)
          dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i = 0; i < len; i++)
          dests[i].emit("unpipe", this, {
            hasUnpiped: false
          });
        return this;
      }
      var index = indexOf(state.pipes, dest);
      if (index === -1)
        return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      var state = this._readableState;
      if (ev === "data") {
        state.readableListening = this.listenerCount("readable") > 0;
        if (state.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug("on readable", state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.removeListener = function(ev, fn) {
      var res = Stream.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable.prototype.removeAllListeners = function(ev) {
      var res = Stream.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      var state = self2._readableState;
      state.readableListening = self2.listenerCount("readable") > 0;
      if (state.resumeScheduled && !state.paused) {
        state.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      }
    }
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state.paused = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug("resume", state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading)
        stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState.paused = true;
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null)
        ;
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0))
          return;
        else if (!state.objectMode && (!chunk || !chunk.length))
          return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i in stream) {
        if (this[i] === void 0 && typeof stream[i] === "function") {
          this[i] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    if (typeof Symbol === "function") {
      Readable.prototype[Symbol.asyncIterator] = function() {
        if (createReadableStreamAsyncIterator === void 0) {
          createReadableStreamAsyncIterator = require_async_iterator();
        }
        return createReadableStreamAsyncIterator(this);
      };
    }
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, "readableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, "readableFlowing", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    });
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, "readableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    });
    function fromList(n, state) {
      if (state.length === 0)
        return null;
      var ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.first();
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      debug("endReadable", state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug("endReadableNT", state.endEmitted, state.length);
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
          var wState = stream._writableState;
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    if (typeof Symbol === "function") {
      Readable.from = function(iterable, opts) {
        if (from === void 0) {
          from = require_from_browser();
        }
        return from(Readable, iterable, opts);
      };
    }
    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x)
          return i;
      }
      return -1;
    }
  }
});

// node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform = __commonJS({
  "node_modules/readable-stream/lib/_stream_transform.js"(exports, module) {
    "use strict";
    module.exports = Transform;
    var _require$codes = require_errors_browser().codes;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
    var Duplex = require_stream_duplex();
    require_inherits_browser()(Transform, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (cb === null) {
        return this.emit("error", new ERR_MULTIPLE_CALLBACK());
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform))
        return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function")
          this._transform = options.transform;
        if (typeof options.flush === "function")
          this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function" && !this._readableState.destroyed) {
        this._flush(function(er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform.prototype._transform = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
    };
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform.prototype._destroy = function(err, cb) {
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
      });
    };
    function done(stream, er, data) {
      if (er)
        return stream.emit("error", er);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length)
        throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming)
        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
  }
});

// node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough = __commonJS({
  "node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module) {
    "use strict";
    module.exports = PassThrough;
    var Transform = require_stream_transform();
    require_inherits_browser()(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough))
        return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/pipeline.js
var require_pipeline = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports, module) {
    "use strict";
    var eos;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    var _require$codes = require_errors_browser().codes;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    function noop3(err) {
      if (err)
        throw err;
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on("close", function() {
        closed = true;
      });
      if (eos === void 0)
        eos = require_end_of_stream();
      eos(stream, {
        readable: reading,
        writable: writing
      }, function(err) {
        if (err)
          return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err) {
        if (closed)
          return;
        if (destroyed)
          return;
        destroyed = true;
        if (isRequest(stream))
          return stream.abort();
        if (typeof stream.destroy === "function")
          return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
      };
    }
    function call(fn) {
      fn();
    }
    function pipe(from, to) {
      return from.pipe(to);
    }
    function popCallback(streams) {
      if (!streams.length)
        return noop3;
      if (typeof streams[streams.length - 1] !== "function")
        return noop3;
      return streams.pop();
    }
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
      var callback = popCallback(streams);
      if (Array.isArray(streams[0]))
        streams = streams[0];
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS("streams");
      }
      var error;
      var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
          if (!error)
            error = err;
          if (err)
            destroys.forEach(call);
          if (reading)
            return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }
    module.exports = pipeline;
  }
});

// node_modules/readable-stream/readable-browser.js
var require_readable_browser = __commonJS({
  "node_modules/readable-stream/readable-browser.js"(exports, module) {
    exports = module.exports = require_stream_readable();
    exports.Stream = exports;
    exports.Readable = exports;
    exports.Writable = require_stream_writable();
    exports.Duplex = require_stream_duplex();
    exports.Transform = require_stream_transform();
    exports.PassThrough = require_stream_passthrough();
    exports.finished = require_end_of_stream();
    exports.pipeline = require_pipeline();
  }
});

// node_modules/keccak/lib/api/keccak.js
var require_keccak = __commonJS({
  "node_modules/keccak/lib/api/keccak.js"(exports, module) {
    var { Transform } = require_readable_browser();
    module.exports = (KeccakState) => class Keccak extends Transform {
      constructor(rate, capacity, delimitedSuffix, hashBitLength, options) {
        super(options);
        this._rate = rate;
        this._capacity = capacity;
        this._delimitedSuffix = delimitedSuffix;
        this._hashBitLength = hashBitLength;
        this._options = options;
        this._state = new KeccakState();
        this._state.initialize(rate, capacity);
        this._finalized = false;
      }
      _transform(chunk, encoding, callback) {
        let error = null;
        try {
          this.update(chunk, encoding);
        } catch (err) {
          error = err;
        }
        callback(error);
      }
      _flush(callback) {
        let error = null;
        try {
          this.push(this.digest());
        } catch (err) {
          error = err;
        }
        callback(error);
      }
      update(data, encoding) {
        if (!Buffer.isBuffer(data) && typeof data !== "string")
          throw new TypeError("Data must be a string or a buffer");
        if (this._finalized)
          throw new Error("Digest already called");
        if (!Buffer.isBuffer(data))
          data = Buffer.from(data, encoding);
        this._state.absorb(data);
        return this;
      }
      digest(encoding) {
        if (this._finalized)
          throw new Error("Digest already called");
        this._finalized = true;
        if (this._delimitedSuffix)
          this._state.absorbLastFewBits(this._delimitedSuffix);
        let digest = this._state.squeeze(this._hashBitLength / 8);
        if (encoding !== void 0)
          digest = digest.toString(encoding);
        this._resetState();
        return digest;
      }
      // remove result from memory
      _resetState() {
        this._state.initialize(this._rate, this._capacity);
        return this;
      }
      // because sometimes we need hash right now and little later
      _clone() {
        const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
        this._state.copy(clone._state);
        clone._finalized = this._finalized;
        return clone;
      }
    };
  }
});

// node_modules/keccak/lib/api/shake.js
var require_shake = __commonJS({
  "node_modules/keccak/lib/api/shake.js"(exports, module) {
    var { Transform } = require_readable_browser();
    module.exports = (KeccakState) => class Shake extends Transform {
      constructor(rate, capacity, delimitedSuffix, options) {
        super(options);
        this._rate = rate;
        this._capacity = capacity;
        this._delimitedSuffix = delimitedSuffix;
        this._options = options;
        this._state = new KeccakState();
        this._state.initialize(rate, capacity);
        this._finalized = false;
      }
      _transform(chunk, encoding, callback) {
        let error = null;
        try {
          this.update(chunk, encoding);
        } catch (err) {
          error = err;
        }
        callback(error);
      }
      _flush() {
      }
      _read(size) {
        this.push(this.squeeze(size));
      }
      update(data, encoding) {
        if (!Buffer.isBuffer(data) && typeof data !== "string")
          throw new TypeError("Data must be a string or a buffer");
        if (this._finalized)
          throw new Error("Squeeze already called");
        if (!Buffer.isBuffer(data))
          data = Buffer.from(data, encoding);
        this._state.absorb(data);
        return this;
      }
      squeeze(dataByteLength, encoding) {
        if (!this._finalized) {
          this._finalized = true;
          this._state.absorbLastFewBits(this._delimitedSuffix);
        }
        let data = this._state.squeeze(dataByteLength);
        if (encoding !== void 0)
          data = data.toString(encoding);
        return data;
      }
      _resetState() {
        this._state.initialize(this._rate, this._capacity);
        return this;
      }
      _clone() {
        const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);
        this._state.copy(clone._state);
        clone._finalized = this._finalized;
        return clone;
      }
    };
  }
});

// node_modules/keccak/lib/api/index.js
var require_api = __commonJS({
  "node_modules/keccak/lib/api/index.js"(exports, module) {
    var createKeccak = require_keccak();
    var createShake = require_shake();
    module.exports = function(KeccakState) {
      const Keccak = createKeccak(KeccakState);
      const Shake = createShake(KeccakState);
      return function(algorithm, options) {
        const hash2 = typeof algorithm === "string" ? algorithm.toLowerCase() : algorithm;
        switch (hash2) {
          case "keccak224":
            return new Keccak(1152, 448, null, 224, options);
          case "keccak256":
            return new Keccak(1088, 512, null, 256, options);
          case "keccak384":
            return new Keccak(832, 768, null, 384, options);
          case "keccak512":
            return new Keccak(576, 1024, null, 512, options);
          case "sha3-224":
            return new Keccak(1152, 448, 6, 224, options);
          case "sha3-256":
            return new Keccak(1088, 512, 6, 256, options);
          case "sha3-384":
            return new Keccak(832, 768, 6, 384, options);
          case "sha3-512":
            return new Keccak(576, 1024, 6, 512, options);
          case "shake128":
            return new Shake(1344, 256, 31, options);
          case "shake256":
            return new Shake(1088, 512, 31, options);
          default:
            throw new Error("Invald algorithm: " + algorithm);
        }
      };
    };
  }
});

// node_modules/keccak/lib/keccak-state-unroll.js
var require_keccak_state_unroll = __commonJS({
  "node_modules/keccak/lib/keccak-state-unroll.js"(exports) {
    var P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
    exports.p1600 = function(s) {
      for (let round = 0; round < 24; ++round) {
        const lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        const hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        const lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        const hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        const lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        const hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        const lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        const hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        const lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        const hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
        let lo = lo4 ^ (lo1 << 1 | hi1 >>> 31);
        let hi = hi4 ^ (hi1 << 1 | lo1 >>> 31);
        const t1slo0 = s[0] ^ lo;
        const t1shi0 = s[1] ^ hi;
        const t1slo5 = s[10] ^ lo;
        const t1shi5 = s[11] ^ hi;
        const t1slo10 = s[20] ^ lo;
        const t1shi10 = s[21] ^ hi;
        const t1slo15 = s[30] ^ lo;
        const t1shi15 = s[31] ^ hi;
        const t1slo20 = s[40] ^ lo;
        const t1shi20 = s[41] ^ hi;
        lo = lo0 ^ (lo2 << 1 | hi2 >>> 31);
        hi = hi0 ^ (hi2 << 1 | lo2 >>> 31);
        const t1slo1 = s[2] ^ lo;
        const t1shi1 = s[3] ^ hi;
        const t1slo6 = s[12] ^ lo;
        const t1shi6 = s[13] ^ hi;
        const t1slo11 = s[22] ^ lo;
        const t1shi11 = s[23] ^ hi;
        const t1slo16 = s[32] ^ lo;
        const t1shi16 = s[33] ^ hi;
        const t1slo21 = s[42] ^ lo;
        const t1shi21 = s[43] ^ hi;
        lo = lo1 ^ (lo3 << 1 | hi3 >>> 31);
        hi = hi1 ^ (hi3 << 1 | lo3 >>> 31);
        const t1slo2 = s[4] ^ lo;
        const t1shi2 = s[5] ^ hi;
        const t1slo7 = s[14] ^ lo;
        const t1shi7 = s[15] ^ hi;
        const t1slo12 = s[24] ^ lo;
        const t1shi12 = s[25] ^ hi;
        const t1slo17 = s[34] ^ lo;
        const t1shi17 = s[35] ^ hi;
        const t1slo22 = s[44] ^ lo;
        const t1shi22 = s[45] ^ hi;
        lo = lo2 ^ (lo4 << 1 | hi4 >>> 31);
        hi = hi2 ^ (hi4 << 1 | lo4 >>> 31);
        const t1slo3 = s[6] ^ lo;
        const t1shi3 = s[7] ^ hi;
        const t1slo8 = s[16] ^ lo;
        const t1shi8 = s[17] ^ hi;
        const t1slo13 = s[26] ^ lo;
        const t1shi13 = s[27] ^ hi;
        const t1slo18 = s[36] ^ lo;
        const t1shi18 = s[37] ^ hi;
        const t1slo23 = s[46] ^ lo;
        const t1shi23 = s[47] ^ hi;
        lo = lo3 ^ (lo0 << 1 | hi0 >>> 31);
        hi = hi3 ^ (hi0 << 1 | lo0 >>> 31);
        const t1slo4 = s[8] ^ lo;
        const t1shi4 = s[9] ^ hi;
        const t1slo9 = s[18] ^ lo;
        const t1shi9 = s[19] ^ hi;
        const t1slo14 = s[28] ^ lo;
        const t1shi14 = s[29] ^ hi;
        const t1slo19 = s[38] ^ lo;
        const t1shi19 = s[39] ^ hi;
        const t1slo24 = s[48] ^ lo;
        const t1shi24 = s[49] ^ hi;
        const t2slo0 = t1slo0;
        const t2shi0 = t1shi0;
        const t2slo16 = t1shi5 << 4 | t1slo5 >>> 28;
        const t2shi16 = t1slo5 << 4 | t1shi5 >>> 28;
        const t2slo7 = t1slo10 << 3 | t1shi10 >>> 29;
        const t2shi7 = t1shi10 << 3 | t1slo10 >>> 29;
        const t2slo23 = t1shi15 << 9 | t1slo15 >>> 23;
        const t2shi23 = t1slo15 << 9 | t1shi15 >>> 23;
        const t2slo14 = t1slo20 << 18 | t1shi20 >>> 14;
        const t2shi14 = t1shi20 << 18 | t1slo20 >>> 14;
        const t2slo10 = t1slo1 << 1 | t1shi1 >>> 31;
        const t2shi10 = t1shi1 << 1 | t1slo1 >>> 31;
        const t2slo1 = t1shi6 << 12 | t1slo6 >>> 20;
        const t2shi1 = t1slo6 << 12 | t1shi6 >>> 20;
        const t2slo17 = t1slo11 << 10 | t1shi11 >>> 22;
        const t2shi17 = t1shi11 << 10 | t1slo11 >>> 22;
        const t2slo8 = t1shi16 << 13 | t1slo16 >>> 19;
        const t2shi8 = t1slo16 << 13 | t1shi16 >>> 19;
        const t2slo24 = t1slo21 << 2 | t1shi21 >>> 30;
        const t2shi24 = t1shi21 << 2 | t1slo21 >>> 30;
        const t2slo20 = t1shi2 << 30 | t1slo2 >>> 2;
        const t2shi20 = t1slo2 << 30 | t1shi2 >>> 2;
        const t2slo11 = t1slo7 << 6 | t1shi7 >>> 26;
        const t2shi11 = t1shi7 << 6 | t1slo7 >>> 26;
        const t2slo2 = t1shi12 << 11 | t1slo12 >>> 21;
        const t2shi2 = t1slo12 << 11 | t1shi12 >>> 21;
        const t2slo18 = t1slo17 << 15 | t1shi17 >>> 17;
        const t2shi18 = t1shi17 << 15 | t1slo17 >>> 17;
        const t2slo9 = t1shi22 << 29 | t1slo22 >>> 3;
        const t2shi9 = t1slo22 << 29 | t1shi22 >>> 3;
        const t2slo5 = t1slo3 << 28 | t1shi3 >>> 4;
        const t2shi5 = t1shi3 << 28 | t1slo3 >>> 4;
        const t2slo21 = t1shi8 << 23 | t1slo8 >>> 9;
        const t2shi21 = t1slo8 << 23 | t1shi8 >>> 9;
        const t2slo12 = t1slo13 << 25 | t1shi13 >>> 7;
        const t2shi12 = t1shi13 << 25 | t1slo13 >>> 7;
        const t2slo3 = t1slo18 << 21 | t1shi18 >>> 11;
        const t2shi3 = t1shi18 << 21 | t1slo18 >>> 11;
        const t2slo19 = t1shi23 << 24 | t1slo23 >>> 8;
        const t2shi19 = t1slo23 << 24 | t1shi23 >>> 8;
        const t2slo15 = t1slo4 << 27 | t1shi4 >>> 5;
        const t2shi15 = t1shi4 << 27 | t1slo4 >>> 5;
        const t2slo6 = t1slo9 << 20 | t1shi9 >>> 12;
        const t2shi6 = t1shi9 << 20 | t1slo9 >>> 12;
        const t2slo22 = t1shi14 << 7 | t1slo14 >>> 25;
        const t2shi22 = t1slo14 << 7 | t1shi14 >>> 25;
        const t2slo13 = t1slo19 << 8 | t1shi19 >>> 24;
        const t2shi13 = t1shi19 << 8 | t1slo19 >>> 24;
        const t2slo4 = t1slo24 << 14 | t1shi24 >>> 18;
        const t2shi4 = t1shi24 << 14 | t1slo24 >>> 18;
        s[0] = t2slo0 ^ ~t2slo1 & t2slo2;
        s[1] = t2shi0 ^ ~t2shi1 & t2shi2;
        s[10] = t2slo5 ^ ~t2slo6 & t2slo7;
        s[11] = t2shi5 ^ ~t2shi6 & t2shi7;
        s[20] = t2slo10 ^ ~t2slo11 & t2slo12;
        s[21] = t2shi10 ^ ~t2shi11 & t2shi12;
        s[30] = t2slo15 ^ ~t2slo16 & t2slo17;
        s[31] = t2shi15 ^ ~t2shi16 & t2shi17;
        s[40] = t2slo20 ^ ~t2slo21 & t2slo22;
        s[41] = t2shi20 ^ ~t2shi21 & t2shi22;
        s[2] = t2slo1 ^ ~t2slo2 & t2slo3;
        s[3] = t2shi1 ^ ~t2shi2 & t2shi3;
        s[12] = t2slo6 ^ ~t2slo7 & t2slo8;
        s[13] = t2shi6 ^ ~t2shi7 & t2shi8;
        s[22] = t2slo11 ^ ~t2slo12 & t2slo13;
        s[23] = t2shi11 ^ ~t2shi12 & t2shi13;
        s[32] = t2slo16 ^ ~t2slo17 & t2slo18;
        s[33] = t2shi16 ^ ~t2shi17 & t2shi18;
        s[42] = t2slo21 ^ ~t2slo22 & t2slo23;
        s[43] = t2shi21 ^ ~t2shi22 & t2shi23;
        s[4] = t2slo2 ^ ~t2slo3 & t2slo4;
        s[5] = t2shi2 ^ ~t2shi3 & t2shi4;
        s[14] = t2slo7 ^ ~t2slo8 & t2slo9;
        s[15] = t2shi7 ^ ~t2shi8 & t2shi9;
        s[24] = t2slo12 ^ ~t2slo13 & t2slo14;
        s[25] = t2shi12 ^ ~t2shi13 & t2shi14;
        s[34] = t2slo17 ^ ~t2slo18 & t2slo19;
        s[35] = t2shi17 ^ ~t2shi18 & t2shi19;
        s[44] = t2slo22 ^ ~t2slo23 & t2slo24;
        s[45] = t2shi22 ^ ~t2shi23 & t2shi24;
        s[6] = t2slo3 ^ ~t2slo4 & t2slo0;
        s[7] = t2shi3 ^ ~t2shi4 & t2shi0;
        s[16] = t2slo8 ^ ~t2slo9 & t2slo5;
        s[17] = t2shi8 ^ ~t2shi9 & t2shi5;
        s[26] = t2slo13 ^ ~t2slo14 & t2slo10;
        s[27] = t2shi13 ^ ~t2shi14 & t2shi10;
        s[36] = t2slo18 ^ ~t2slo19 & t2slo15;
        s[37] = t2shi18 ^ ~t2shi19 & t2shi15;
        s[46] = t2slo23 ^ ~t2slo24 & t2slo20;
        s[47] = t2shi23 ^ ~t2shi24 & t2shi20;
        s[8] = t2slo4 ^ ~t2slo0 & t2slo1;
        s[9] = t2shi4 ^ ~t2shi0 & t2shi1;
        s[18] = t2slo9 ^ ~t2slo5 & t2slo6;
        s[19] = t2shi9 ^ ~t2shi5 & t2shi6;
        s[28] = t2slo14 ^ ~t2slo10 & t2slo11;
        s[29] = t2shi14 ^ ~t2shi10 & t2shi11;
        s[38] = t2slo19 ^ ~t2slo15 & t2slo16;
        s[39] = t2shi19 ^ ~t2shi15 & t2shi16;
        s[48] = t2slo24 ^ ~t2slo20 & t2slo21;
        s[49] = t2shi24 ^ ~t2shi20 & t2shi21;
        s[0] ^= P1600_ROUND_CONSTANTS[round * 2];
        s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1];
      }
    };
  }
});

// node_modules/keccak/lib/keccak.js
var require_keccak2 = __commonJS({
  "node_modules/keccak/lib/keccak.js"(exports, module) {
    var keccakState = require_keccak_state_unroll();
    function Keccak() {
      this.state = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ];
      this.blockSize = null;
      this.count = 0;
      this.squeezing = false;
    }
    Keccak.prototype.initialize = function(rate, capacity) {
      for (let i = 0; i < 50; ++i)
        this.state[i] = 0;
      this.blockSize = rate / 8;
      this.count = 0;
      this.squeezing = false;
    };
    Keccak.prototype.absorb = function(data) {
      for (let i = 0; i < data.length; ++i) {
        this.state[~~(this.count / 4)] ^= data[i] << 8 * (this.count % 4);
        this.count += 1;
        if (this.count === this.blockSize) {
          keccakState.p1600(this.state);
          this.count = 0;
        }
      }
    };
    Keccak.prototype.absorbLastFewBits = function(bits) {
      this.state[~~(this.count / 4)] ^= bits << 8 * (this.count % 4);
      if ((bits & 128) !== 0 && this.count === this.blockSize - 1)
        keccakState.p1600(this.state);
      this.state[~~((this.blockSize - 1) / 4)] ^= 128 << 8 * ((this.blockSize - 1) % 4);
      keccakState.p1600(this.state);
      this.count = 0;
      this.squeezing = true;
    };
    Keccak.prototype.squeeze = function(length) {
      if (!this.squeezing)
        this.absorbLastFewBits(1);
      const output = Buffer.alloc(length);
      for (let i = 0; i < length; ++i) {
        output[i] = this.state[~~(this.count / 4)] >>> 8 * (this.count % 4) & 255;
        this.count += 1;
        if (this.count === this.blockSize) {
          keccakState.p1600(this.state);
          this.count = 0;
        }
      }
      return output;
    };
    Keccak.prototype.copy = function(dest) {
      for (let i = 0; i < 50; ++i)
        dest.state[i] = this.state[i];
      dest.blockSize = this.blockSize;
      dest.count = this.count;
      dest.squeezing = this.squeezing;
    };
    module.exports = Keccak;
  }
});

// node_modules/keccak/js.js
var require_js = __commonJS({
  "node_modules/keccak/js.js"(exports, module) {
    module.exports = require_api()(require_keccak2());
  }
});

// node_modules/ethereum-cryptography/keccak.js
var require_keccak3 = __commonJS({
  "node_modules/ethereum-cryptography/keccak.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var hash_utils_1 = require_hash_utils();
    var createKeccakHash = require_js();
    exports.keccak224 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak224");
    });
    exports.keccak256 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak256");
    });
    exports.keccak384 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak384");
    });
    exports.keccak512 = hash_utils_1.createHashFunction(function() {
      return createKeccakHash("keccak512");
    });
  }
});

// node_modules/hash-base/index.js
var require_hash_base = __commonJS({
  "node_modules/hash-base/index.js"(exports, module) {
    "use strict";
    var Buffer2 = require_safe_buffer().Buffer;
    var Transform = require_readable_browser().Transform;
    var inherits = require_inherits_browser();
    function throwIfNotStringOrBuffer(val, prefix) {
      if (!Buffer2.isBuffer(val) && typeof val !== "string") {
        throw new TypeError(prefix + " must be a string or a buffer");
      }
    }
    function HashBase(blockSize) {
      Transform.call(this);
      this._block = Buffer2.allocUnsafe(blockSize);
      this._blockSize = blockSize;
      this._blockOffset = 0;
      this._length = [0, 0, 0, 0];
      this._finalized = false;
    }
    inherits(HashBase, Transform);
    HashBase.prototype._transform = function(chunk, encoding, callback) {
      var error = null;
      try {
        this.update(chunk, encoding);
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype._flush = function(callback) {
      var error = null;
      try {
        this.push(this.digest());
      } catch (err) {
        error = err;
      }
      callback(error);
    };
    HashBase.prototype.update = function(data, encoding) {
      throwIfNotStringOrBuffer(data, "Data");
      if (this._finalized)
        throw new Error("Digest already called");
      if (!Buffer2.isBuffer(data))
        data = Buffer2.from(data, encoding);
      var block = this._block;
      var offset = 0;
      while (this._blockOffset + data.length - offset >= this._blockSize) {
        for (var i = this._blockOffset; i < this._blockSize; )
          block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
      }
      while (offset < data.length)
        block[this._blockOffset++] = data[offset++];
      for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
        this._length[j] += carry;
        carry = this._length[j] / 4294967296 | 0;
        if (carry > 0)
          this._length[j] -= 4294967296 * carry;
      }
      return this;
    };
    HashBase.prototype._update = function() {
      throw new Error("_update is not implemented");
    };
    HashBase.prototype.digest = function(encoding) {
      if (this._finalized)
        throw new Error("Digest already called");
      this._finalized = true;
      var digest = this._digest();
      if (encoding !== void 0)
        digest = digest.toString(encoding);
      this._block.fill(0);
      this._blockOffset = 0;
      for (var i = 0; i < 4; ++i)
        this._length[i] = 0;
      return digest;
    };
    HashBase.prototype._digest = function() {
      throw new Error("_digest is not implemented");
    };
    module.exports = HashBase;
  }
});

// node_modules/md5.js/index.js
var require_md5 = __commonJS({
  "node_modules/md5.js/index.js"(exports, module) {
    "use strict";
    var inherits = require_inherits_browser();
    var HashBase = require_hash_base();
    var Buffer2 = require_safe_buffer().Buffer;
    var ARRAY16 = new Array(16);
    function MD5() {
      HashBase.call(this, 64);
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
    }
    inherits(MD5, HashBase);
    MD5.prototype._update = function() {
      var M = ARRAY16;
      for (var i = 0; i < 16; ++i)
        M[i] = this._block.readInt32LE(i * 4);
      var a = this._a;
      var b = this._b;
      var c = this._c;
      var d = this._d;
      a = fnF(a, b, c, d, M[0], 3614090360, 7);
      d = fnF(d, a, b, c, M[1], 3905402710, 12);
      c = fnF(c, d, a, b, M[2], 606105819, 17);
      b = fnF(b, c, d, a, M[3], 3250441966, 22);
      a = fnF(a, b, c, d, M[4], 4118548399, 7);
      d = fnF(d, a, b, c, M[5], 1200080426, 12);
      c = fnF(c, d, a, b, M[6], 2821735955, 17);
      b = fnF(b, c, d, a, M[7], 4249261313, 22);
      a = fnF(a, b, c, d, M[8], 1770035416, 7);
      d = fnF(d, a, b, c, M[9], 2336552879, 12);
      c = fnF(c, d, a, b, M[10], 4294925233, 17);
      b = fnF(b, c, d, a, M[11], 2304563134, 22);
      a = fnF(a, b, c, d, M[12], 1804603682, 7);
      d = fnF(d, a, b, c, M[13], 4254626195, 12);
      c = fnF(c, d, a, b, M[14], 2792965006, 17);
      b = fnF(b, c, d, a, M[15], 1236535329, 22);
      a = fnG(a, b, c, d, M[1], 4129170786, 5);
      d = fnG(d, a, b, c, M[6], 3225465664, 9);
      c = fnG(c, d, a, b, M[11], 643717713, 14);
      b = fnG(b, c, d, a, M[0], 3921069994, 20);
      a = fnG(a, b, c, d, M[5], 3593408605, 5);
      d = fnG(d, a, b, c, M[10], 38016083, 9);
      c = fnG(c, d, a, b, M[15], 3634488961, 14);
      b = fnG(b, c, d, a, M[4], 3889429448, 20);
      a = fnG(a, b, c, d, M[9], 568446438, 5);
      d = fnG(d, a, b, c, M[14], 3275163606, 9);
      c = fnG(c, d, a, b, M[3], 4107603335, 14);
      b = fnG(b, c, d, a, M[8], 1163531501, 20);
      a = fnG(a, b, c, d, M[13], 2850285829, 5);
      d = fnG(d, a, b, c, M[2], 4243563512, 9);
      c = fnG(c, d, a, b, M[7], 1735328473, 14);
      b = fnG(b, c, d, a, M[12], 2368359562, 20);
      a = fnH(a, b, c, d, M[5], 4294588738, 4);
      d = fnH(d, a, b, c, M[8], 2272392833, 11);
      c = fnH(c, d, a, b, M[11], 1839030562, 16);
      b = fnH(b, c, d, a, M[14], 4259657740, 23);
      a = fnH(a, b, c, d, M[1], 2763975236, 4);
      d = fnH(d, a, b, c, M[4], 1272893353, 11);
      c = fnH(c, d, a, b, M[7], 4139469664, 16);
      b = fnH(b, c, d, a, M[10], 3200236656, 23);
      a = fnH(a, b, c, d, M[13], 681279174, 4);
      d = fnH(d, a, b, c, M[0], 3936430074, 11);
      c = fnH(c, d, a, b, M[3], 3572445317, 16);
      b = fnH(b, c, d, a, M[6], 76029189, 23);
      a = fnH(a, b, c, d, M[9], 3654602809, 4);
      d = fnH(d, a, b, c, M[12], 3873151461, 11);
      c = fnH(c, d, a, b, M[15], 530742520, 16);
      b = fnH(b, c, d, a, M[2], 3299628645, 23);
      a = fnI(a, b, c, d, M[0], 4096336452, 6);
      d = fnI(d, a, b, c, M[7], 1126891415, 10);
      c = fnI(c, d, a, b, M[14], 2878612391, 15);
      b = fnI(b, c, d, a, M[5], 4237533241, 21);
      a = fnI(a, b, c, d, M[12], 1700485571, 6);
      d = fnI(d, a, b, c, M[3], 2399980690, 10);
      c = fnI(c, d, a, b, M[10], 4293915773, 15);
      b = fnI(b, c, d, a, M[1], 2240044497, 21);
      a = fnI(a, b, c, d, M[8], 1873313359, 6);
      d = fnI(d, a, b, c, M[15], 4264355552, 10);
      c = fnI(c, d, a, b, M[6], 2734768916, 15);
      b = fnI(b, c, d, a, M[13], 1309151649, 21);
      a = fnI(a, b, c, d, M[4], 4149444226, 6);
      d = fnI(d, a, b, c, M[11], 3174756917, 10);
      c = fnI(c, d, a, b, M[2], 718787259, 15);
      b = fnI(b, c, d, a, M[9], 3951481745, 21);
      this._a = this._a + a | 0;
      this._b = this._b + b | 0;
      this._c = this._c + c | 0;
      this._d = this._d + d | 0;
    };
    MD5.prototype._digest = function() {
      this._block[this._blockOffset++] = 128;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer = Buffer2.allocUnsafe(16);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      return buffer;
    };
    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }
    function fnF(a, b, c, d, m, k, s) {
      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
    }
    function fnG(a, b, c, d, m, k, s) {
      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
    }
    function fnH(a, b, c, d, m, k, s) {
      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
    }
    function fnI(a, b, c, d, m, k, s) {
      return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
    }
    module.exports = MD5;
  }
});

// node_modules/ripemd160/index.js
var require_ripemd160 = __commonJS({
  "node_modules/ripemd160/index.js"(exports, module) {
    "use strict";
    var Buffer2 = require_buffer().Buffer;
    var inherits = require_inherits_browser();
    var HashBase = require_hash_base();
    var ARRAY16 = new Array(16);
    var zl = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      7,
      4,
      13,
      1,
      10,
      6,
      15,
      3,
      12,
      0,
      9,
      5,
      2,
      14,
      11,
      8,
      3,
      10,
      14,
      4,
      9,
      15,
      8,
      1,
      2,
      7,
      0,
      6,
      13,
      11,
      5,
      12,
      1,
      9,
      11,
      10,
      0,
      8,
      12,
      4,
      13,
      3,
      7,
      15,
      14,
      5,
      6,
      2,
      4,
      0,
      5,
      9,
      7,
      12,
      2,
      10,
      14,
      1,
      3,
      8,
      11,
      6,
      15,
      13
    ];
    var zr = [
      5,
      14,
      7,
      0,
      9,
      2,
      11,
      4,
      13,
      6,
      15,
      8,
      1,
      10,
      3,
      12,
      6,
      11,
      3,
      7,
      0,
      13,
      5,
      10,
      14,
      15,
      8,
      12,
      4,
      9,
      1,
      2,
      15,
      5,
      1,
      3,
      7,
      14,
      6,
      9,
      11,
      8,
      12,
      2,
      10,
      0,
      4,
      13,
      8,
      6,
      4,
      1,
      3,
      11,
      15,
      0,
      5,
      12,
      2,
      13,
      9,
      7,
      10,
      14,
      12,
      15,
      10,
      4,
      1,
      5,
      8,
      7,
      6,
      2,
      13,
      14,
      0,
      3,
      9,
      11
    ];
    var sl = [
      11,
      14,
      15,
      12,
      5,
      8,
      7,
      9,
      11,
      13,
      14,
      15,
      6,
      7,
      9,
      8,
      7,
      6,
      8,
      13,
      11,
      9,
      7,
      15,
      7,
      12,
      15,
      9,
      11,
      7,
      13,
      12,
      11,
      13,
      6,
      7,
      14,
      9,
      13,
      15,
      14,
      8,
      13,
      6,
      5,
      12,
      7,
      5,
      11,
      12,
      14,
      15,
      14,
      15,
      9,
      8,
      9,
      14,
      5,
      6,
      8,
      6,
      5,
      12,
      9,
      15,
      5,
      11,
      6,
      8,
      13,
      12,
      5,
      12,
      13,
      14,
      11,
      8,
      5,
      6
    ];
    var sr = [
      8,
      9,
      9,
      11,
      13,
      15,
      15,
      5,
      7,
      7,
      8,
      11,
      14,
      14,
      12,
      6,
      9,
      13,
      15,
      7,
      12,
      8,
      9,
      11,
      7,
      7,
      12,
      7,
      6,
      15,
      13,
      11,
      9,
      7,
      15,
      11,
      8,
      6,
      6,
      14,
      12,
      13,
      5,
      14,
      13,
      13,
      7,
      5,
      15,
      5,
      8,
      11,
      14,
      14,
      6,
      14,
      6,
      9,
      12,
      9,
      12,
      5,
      15,
      8,
      8,
      5,
      12,
      9,
      12,
      5,
      14,
      6,
      8,
      13,
      6,
      5,
      15,
      13,
      11,
      11
    ];
    var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];
    var hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];
    function RIPEMD160() {
      HashBase.call(this, 64);
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
    }
    inherits(RIPEMD160, HashBase);
    RIPEMD160.prototype._update = function() {
      var words = ARRAY16;
      for (var j = 0; j < 16; ++j)
        words[j] = this._block.readInt32LE(j * 4);
      var al = this._a | 0;
      var bl = this._b | 0;
      var cl = this._c | 0;
      var dl = this._d | 0;
      var el = this._e | 0;
      var ar = this._a | 0;
      var br = this._b | 0;
      var cr = this._c | 0;
      var dr = this._d | 0;
      var er = this._e | 0;
      for (var i = 0; i < 80; i += 1) {
        var tl;
        var tr;
        if (i < 16) {
          tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
          tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
          tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
          tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
          tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
          tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
          tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
          tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
        } else {
          tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
          tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
      }
      var t = this._b + cl + dr | 0;
      this._b = this._c + dl + er | 0;
      this._c = this._d + el + ar | 0;
      this._d = this._e + al + br | 0;
      this._e = this._a + bl + cr | 0;
      this._a = t;
    };
    RIPEMD160.prototype._digest = function() {
      this._block[this._blockOffset++] = 128;
      if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
      }
      this._block.fill(0, this._blockOffset, 56);
      this._block.writeUInt32LE(this._length[0], 56);
      this._block.writeUInt32LE(this._length[1], 60);
      this._update();
      var buffer = Buffer2.alloc ? Buffer2.alloc(20) : new Buffer2(20);
      buffer.writeInt32LE(this._a, 0);
      buffer.writeInt32LE(this._b, 4);
      buffer.writeInt32LE(this._c, 8);
      buffer.writeInt32LE(this._d, 12);
      buffer.writeInt32LE(this._e, 16);
      return buffer;
    };
    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }
    function fn1(a, b, c, d, e, m, k, s) {
      return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
    }
    function fn2(a, b, c, d, e, m, k, s) {
      return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
    }
    function fn3(a, b, c, d, e, m, k, s) {
      return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
    }
    function fn4(a, b, c, d, e, m, k, s) {
      return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
    }
    function fn5(a, b, c, d, e, m, k, s) {
      return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
    }
    module.exports = RIPEMD160;
  }
});

// node_modules/sha.js/hash.js
var require_hash2 = __commonJS({
  "node_modules/sha.js/hash.js"(exports, module) {
    var Buffer2 = require_safe_buffer().Buffer;
    function Hash(blockSize, finalSize) {
      this._block = Buffer2.alloc(blockSize);
      this._finalSize = finalSize;
      this._blockSize = blockSize;
      this._len = 0;
    }
    Hash.prototype.update = function(data, enc) {
      if (typeof data === "string") {
        enc = enc || "utf8";
        data = Buffer2.from(data, enc);
      }
      var block = this._block;
      var blockSize = this._blockSize;
      var length = data.length;
      var accum = this._len;
      for (var offset = 0; offset < length; ) {
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for (var i = 0; i < remainder; i++) {
          block[assigned + i] = data[offset + i];
        }
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) {
          this._update(block);
        }
      }
      this._len += length;
      return this;
    };
    Hash.prototype.digest = function(enc) {
      var rem = this._len % this._blockSize;
      this._block[rem] = 128;
      this._block.fill(0, rem + 1);
      if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
      }
      var bits = this._len * 8;
      if (bits <= 4294967295) {
        this._block.writeUInt32BE(bits, this._blockSize - 4);
      } else {
        var lowBits = (bits & 4294967295) >>> 0;
        var highBits = (bits - lowBits) / 4294967296;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
      }
      this._update(this._block);
      var hash2 = this._hash();
      return enc ? hash2.toString(enc) : hash2;
    };
    Hash.prototype._update = function() {
      throw new Error("_update must be implemented by subclass");
    };
    module.exports = Hash;
  }
});

// node_modules/sha.js/sha.js
var require_sha2 = __commonJS({
  "node_modules/sha.js/sha.js"(exports, module) {
    var inherits = require_inherits_browser();
    var Hash = require_hash2();
    var Buffer2 = require_safe_buffer().Buffer;
    var K = [
      1518500249,
      1859775393,
      2400959708 | 0,
      3395469782 | 0
    ];
    var W = new Array(80);
    function Sha() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits(Sha, Hash);
    Sha.prototype.init = function() {
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
      return this;
    };
    function rotl5(num) {
      return num << 5 | num >>> 27;
    }
    function rotl30(num) {
      return num << 30 | num >>> 2;
    }
    function ft(s, b, c, d) {
      if (s === 0)
        return b & c | ~b & d;
      if (s === 2)
        return b & c | b & d | c & d;
      return b ^ c ^ d;
    }
    Sha.prototype._update = function(M) {
      var W2 = this._w;
      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      for (var i = 0; i < 16; ++i)
        W2[i] = M.readInt32BE(i * 4);
      for (; i < 80; ++i)
        W2[i] = W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16];
      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W2[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
      }
      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
    };
    Sha.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(20);
      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);
      return H;
    };
    module.exports = Sha;
  }
});

// node_modules/sha.js/sha1.js
var require_sha1 = __commonJS({
  "node_modules/sha.js/sha1.js"(exports, module) {
    var inherits = require_inherits_browser();
    var Hash = require_hash2();
    var Buffer2 = require_safe_buffer().Buffer;
    var K = [
      1518500249,
      1859775393,
      2400959708 | 0,
      3395469782 | 0
    ];
    var W = new Array(80);
    function Sha1() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits(Sha1, Hash);
    Sha1.prototype.init = function() {
      this._a = 1732584193;
      this._b = 4023233417;
      this._c = 2562383102;
      this._d = 271733878;
      this._e = 3285377520;
      return this;
    };
    function rotl1(num) {
      return num << 1 | num >>> 31;
    }
    function rotl5(num) {
      return num << 5 | num >>> 27;
    }
    function rotl30(num) {
      return num << 30 | num >>> 2;
    }
    function ft(s, b, c, d) {
      if (s === 0)
        return b & c | ~b & d;
      if (s === 2)
        return b & c | b & d | c & d;
      return b ^ c ^ d;
    }
    Sha1.prototype._update = function(M) {
      var W2 = this._w;
      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      for (var i = 0; i < 16; ++i)
        W2[i] = M.readInt32BE(i * 4);
      for (; i < 80; ++i)
        W2[i] = rotl1(W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16]);
      for (var j = 0; j < 80; ++j) {
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W2[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
      }
      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
    };
    Sha1.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(20);
      H.writeInt32BE(this._a | 0, 0);
      H.writeInt32BE(this._b | 0, 4);
      H.writeInt32BE(this._c | 0, 8);
      H.writeInt32BE(this._d | 0, 12);
      H.writeInt32BE(this._e | 0, 16);
      return H;
    };
    module.exports = Sha1;
  }
});

// node_modules/sha.js/sha256.js
var require_sha256 = __commonJS({
  "node_modules/sha.js/sha256.js"(exports, module) {
    var inherits = require_inherits_browser();
    var Hash = require_hash2();
    var Buffer2 = require_safe_buffer().Buffer;
    var K = [
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ];
    var W = new Array(64);
    function Sha256() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits(Sha256, Hash);
    Sha256.prototype.init = function() {
      this._a = 1779033703;
      this._b = 3144134277;
      this._c = 1013904242;
      this._d = 2773480762;
      this._e = 1359893119;
      this._f = 2600822924;
      this._g = 528734635;
      this._h = 1541459225;
      return this;
    };
    function ch(x, y, z) {
      return z ^ x & (y ^ z);
    }
    function maj(x, y, z) {
      return x & y | z & (x | y);
    }
    function sigma0(x) {
      return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
    }
    function sigma1(x) {
      return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
    }
    function gamma0(x) {
      return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
    }
    function gamma1(x) {
      return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
    }
    Sha256.prototype._update = function(M) {
      var W2 = this._w;
      var a = this._a | 0;
      var b = this._b | 0;
      var c = this._c | 0;
      var d = this._d | 0;
      var e = this._e | 0;
      var f = this._f | 0;
      var g = this._g | 0;
      var h = this._h | 0;
      for (var i = 0; i < 16; ++i)
        W2[i] = M.readInt32BE(i * 4);
      for (; i < 64; ++i)
        W2[i] = gamma1(W2[i - 2]) + W2[i - 7] + gamma0(W2[i - 15]) + W2[i - 16] | 0;
      for (var j = 0; j < 64; ++j) {
        var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W2[j] | 0;
        var T2 = sigma0(a) + maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
      }
      this._a = a + this._a | 0;
      this._b = b + this._b | 0;
      this._c = c + this._c | 0;
      this._d = d + this._d | 0;
      this._e = e + this._e | 0;
      this._f = f + this._f | 0;
      this._g = g + this._g | 0;
      this._h = h + this._h | 0;
    };
    Sha256.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(32);
      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
      H.writeInt32BE(this._h, 28);
      return H;
    };
    module.exports = Sha256;
  }
});

// node_modules/sha.js/sha224.js
var require_sha224 = __commonJS({
  "node_modules/sha.js/sha224.js"(exports, module) {
    var inherits = require_inherits_browser();
    var Sha256 = require_sha256();
    var Hash = require_hash2();
    var Buffer2 = require_safe_buffer().Buffer;
    var W = new Array(64);
    function Sha224() {
      this.init();
      this._w = W;
      Hash.call(this, 64, 56);
    }
    inherits(Sha224, Sha256);
    Sha224.prototype.init = function() {
      this._a = 3238371032;
      this._b = 914150663;
      this._c = 812702999;
      this._d = 4144912697;
      this._e = 4290775857;
      this._f = 1750603025;
      this._g = 1694076839;
      this._h = 3204075428;
      return this;
    };
    Sha224.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(28);
      H.writeInt32BE(this._a, 0);
      H.writeInt32BE(this._b, 4);
      H.writeInt32BE(this._c, 8);
      H.writeInt32BE(this._d, 12);
      H.writeInt32BE(this._e, 16);
      H.writeInt32BE(this._f, 20);
      H.writeInt32BE(this._g, 24);
      return H;
    };
    module.exports = Sha224;
  }
});

// node_modules/sha.js/sha512.js
var require_sha512 = __commonJS({
  "node_modules/sha.js/sha512.js"(exports, module) {
    var inherits = require_inherits_browser();
    var Hash = require_hash2();
    var Buffer2 = require_safe_buffer().Buffer;
    var K = [
      1116352408,
      3609767458,
      1899447441,
      602891725,
      3049323471,
      3964484399,
      3921009573,
      2173295548,
      961987163,
      4081628472,
      1508970993,
      3053834265,
      2453635748,
      2937671579,
      2870763221,
      3664609560,
      3624381080,
      2734883394,
      310598401,
      1164996542,
      607225278,
      1323610764,
      1426881987,
      3590304994,
      1925078388,
      4068182383,
      2162078206,
      991336113,
      2614888103,
      633803317,
      3248222580,
      3479774868,
      3835390401,
      2666613458,
      4022224774,
      944711139,
      264347078,
      2341262773,
      604807628,
      2007800933,
      770255983,
      1495990901,
      1249150122,
      1856431235,
      1555081692,
      3175218132,
      1996064986,
      2198950837,
      2554220882,
      3999719339,
      2821834349,
      766784016,
      2952996808,
      2566594879,
      3210313671,
      3203337956,
      3336571891,
      1034457026,
      3584528711,
      2466948901,
      113926993,
      3758326383,
      338241895,
      168717936,
      666307205,
      1188179964,
      773529912,
      1546045734,
      1294757372,
      1522805485,
      1396182291,
      2643833823,
      1695183700,
      2343527390,
      1986661051,
      1014477480,
      2177026350,
      1206759142,
      2456956037,
      344077627,
      2730485921,
      1290863460,
      2820302411,
      3158454273,
      3259730800,
      3505952657,
      3345764771,
      106217008,
      3516065817,
      3606008344,
      3600352804,
      1432725776,
      4094571909,
      1467031594,
      275423344,
      851169720,
      430227734,
      3100823752,
      506948616,
      1363258195,
      659060556,
      3750685593,
      883997877,
      3785050280,
      958139571,
      3318307427,
      1322822218,
      3812723403,
      1537002063,
      2003034995,
      1747873779,
      3602036899,
      1955562222,
      1575990012,
      2024104815,
      1125592928,
      2227730452,
      2716904306,
      2361852424,
      442776044,
      2428436474,
      593698344,
      2756734187,
      3733110249,
      3204031479,
      2999351573,
      3329325298,
      3815920427,
      3391569614,
      3928383900,
      3515267271,
      566280711,
      3940187606,
      3454069534,
      4118630271,
      4000239992,
      116418474,
      1914138554,
      174292421,
      2731055270,
      289380356,
      3203993006,
      460393269,
      320620315,
      685471733,
      587496836,
      852142971,
      1086792851,
      1017036298,
      365543100,
      1126000580,
      2618297676,
      1288033470,
      3409855158,
      1501505948,
      4234509866,
      1607167915,
      987167468,
      1816402316,
      1246189591
    ];
    var W = new Array(160);
    function Sha512() {
      this.init();
      this._w = W;
      Hash.call(this, 128, 112);
    }
    inherits(Sha512, Hash);
    Sha512.prototype.init = function() {
      this._ah = 1779033703;
      this._bh = 3144134277;
      this._ch = 1013904242;
      this._dh = 2773480762;
      this._eh = 1359893119;
      this._fh = 2600822924;
      this._gh = 528734635;
      this._hh = 1541459225;
      this._al = 4089235720;
      this._bl = 2227873595;
      this._cl = 4271175723;
      this._dl = 1595750129;
      this._el = 2917565137;
      this._fl = 725511199;
      this._gl = 4215389547;
      this._hl = 327033209;
      return this;
    };
    function Ch(x, y, z) {
      return z ^ x & (y ^ z);
    }
    function maj(x, y, z) {
      return x & y | z & (x | y);
    }
    function sigma0(x, xl) {
      return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
    }
    function sigma1(x, xl) {
      return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
    }
    function Gamma0(x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
    }
    function Gamma0l(x, xl) {
      return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
    }
    function Gamma1(x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
    }
    function Gamma1l(x, xl) {
      return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
    }
    function getCarry(a, b) {
      return a >>> 0 < b >>> 0 ? 1 : 0;
    }
    Sha512.prototype._update = function(M) {
      var W2 = this._w;
      var ah = this._ah | 0;
      var bh = this._bh | 0;
      var ch = this._ch | 0;
      var dh = this._dh | 0;
      var eh = this._eh | 0;
      var fh = this._fh | 0;
      var gh = this._gh | 0;
      var hh = this._hh | 0;
      var al = this._al | 0;
      var bl = this._bl | 0;
      var cl = this._cl | 0;
      var dl = this._dl | 0;
      var el = this._el | 0;
      var fl = this._fl | 0;
      var gl = this._gl | 0;
      var hl = this._hl | 0;
      for (var i = 0; i < 32; i += 2) {
        W2[i] = M.readInt32BE(i * 4);
        W2[i + 1] = M.readInt32BE(i * 4 + 4);
      }
      for (; i < 160; i += 2) {
        var xh = W2[i - 15 * 2];
        var xl = W2[i - 15 * 2 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);
        xh = W2[i - 2 * 2];
        xl = W2[i - 2 * 2 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh);
        var Wi7h = W2[i - 7 * 2];
        var Wi7l = W2[i - 7 * 2 + 1];
        var Wi16h = W2[i - 16 * 2];
        var Wi16l = W2[i - 16 * 2 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
        W2[i] = Wih;
        W2[i + 1] = Wil;
      }
      for (var j = 0; j < 160; j += 2) {
        Wih = W2[j];
        Wil = W2[j + 1];
        var majh = maj(ah, bh, ch);
        var majl = maj(al, bl, cl);
        var sigma0h = sigma0(ah, al);
        var sigma0l = sigma0(al, ah);
        var sigma1h = sigma1(eh, el);
        var sigma1l = sigma1(el, eh);
        var Kih = K[j];
        var Kil = K[j + 1];
        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + getCarry(al, t1l) | 0;
      }
      this._al = this._al + al | 0;
      this._bl = this._bl + bl | 0;
      this._cl = this._cl + cl | 0;
      this._dl = this._dl + dl | 0;
      this._el = this._el + el | 0;
      this._fl = this._fl + fl | 0;
      this._gl = this._gl + gl | 0;
      this._hl = this._hl + hl | 0;
      this._ah = this._ah + ah + getCarry(this._al, al) | 0;
      this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
      this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
      this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
      this._eh = this._eh + eh + getCarry(this._el, el) | 0;
      this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
      this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
      this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
    };
    Sha512.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(64);
      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }
      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
      writeInt64BE(this._gh, this._gl, 48);
      writeInt64BE(this._hh, this._hl, 56);
      return H;
    };
    module.exports = Sha512;
  }
});

// node_modules/sha.js/sha384.js
var require_sha384 = __commonJS({
  "node_modules/sha.js/sha384.js"(exports, module) {
    var inherits = require_inherits_browser();
    var SHA512 = require_sha512();
    var Hash = require_hash2();
    var Buffer2 = require_safe_buffer().Buffer;
    var W = new Array(160);
    function Sha384() {
      this.init();
      this._w = W;
      Hash.call(this, 128, 112);
    }
    inherits(Sha384, SHA512);
    Sha384.prototype.init = function() {
      this._ah = 3418070365;
      this._bh = 1654270250;
      this._ch = 2438529370;
      this._dh = 355462360;
      this._eh = 1731405415;
      this._fh = 2394180231;
      this._gh = 3675008525;
      this._hh = 1203062813;
      this._al = 3238371032;
      this._bl = 914150663;
      this._cl = 812702999;
      this._dl = 4144912697;
      this._el = 4290775857;
      this._fl = 1750603025;
      this._gl = 1694076839;
      this._hl = 3204075428;
      return this;
    };
    Sha384.prototype._hash = function() {
      var H = Buffer2.allocUnsafe(48);
      function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
      }
      writeInt64BE(this._ah, this._al, 0);
      writeInt64BE(this._bh, this._bl, 8);
      writeInt64BE(this._ch, this._cl, 16);
      writeInt64BE(this._dh, this._dl, 24);
      writeInt64BE(this._eh, this._el, 32);
      writeInt64BE(this._fh, this._fl, 40);
      return H;
    };
    module.exports = Sha384;
  }
});

// node_modules/sha.js/index.js
var require_sha3 = __commonJS({
  "node_modules/sha.js/index.js"(exports, module) {
    var exports = module.exports = function SHA(algorithm) {
      algorithm = algorithm.toLowerCase();
      var Algorithm = exports[algorithm];
      if (!Algorithm)
        throw new Error(algorithm + " is not supported (we accept pull requests)");
      return new Algorithm();
    };
    exports.sha = require_sha2();
    exports.sha1 = require_sha1();
    exports.sha224 = require_sha224();
    exports.sha256 = require_sha256();
    exports.sha384 = require_sha384();
    exports.sha512 = require_sha512();
  }
});

// browser-external:stream
var require_stream = __commonJS({
  "browser-external:stream"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key2) {
        if (key2 !== "__esModule" && key2 !== "__proto__" && key2 !== "constructor" && key2 !== "splice") {
          console.warn(`Module "stream" has been externalized for browser compatibility. Cannot access "stream.${key2}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/cipher-base/index.js
var require_cipher_base = __commonJS({
  "node_modules/cipher-base/index.js"(exports, module) {
    var Buffer2 = require_safe_buffer().Buffer;
    var Transform = require_stream().Transform;
    var StringDecoder = require_string_decoder().StringDecoder;
    var inherits = require_inherits_browser();
    function CipherBase(hashMode) {
      Transform.call(this);
      this.hashMode = typeof hashMode === "string";
      if (this.hashMode) {
        this[hashMode] = this._finalOrDigest;
      } else {
        this.final = this._finalOrDigest;
      }
      if (this._final) {
        this.__final = this._final;
        this._final = null;
      }
      this._decoder = null;
      this._encoding = null;
    }
    inherits(CipherBase, Transform);
    CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
      if (typeof data === "string") {
        data = Buffer2.from(data, inputEnc);
      }
      var outData = this._update(data);
      if (this.hashMode)
        return this;
      if (outputEnc) {
        outData = this._toString(outData, outputEnc);
      }
      return outData;
    };
    CipherBase.prototype.setAutoPadding = function() {
    };
    CipherBase.prototype.getAuthTag = function() {
      throw new Error("trying to get auth tag in unsupported state");
    };
    CipherBase.prototype.setAuthTag = function() {
      throw new Error("trying to set auth tag in unsupported state");
    };
    CipherBase.prototype.setAAD = function() {
      throw new Error("trying to set aad in unsupported state");
    };
    CipherBase.prototype._transform = function(data, _, next) {
      var err;
      try {
        if (this.hashMode) {
          this._update(data);
        } else {
          this.push(this._update(data));
        }
      } catch (e) {
        err = e;
      } finally {
        next(err);
      }
    };
    CipherBase.prototype._flush = function(done) {
      var err;
      try {
        this.push(this.__final());
      } catch (e) {
        err = e;
      }
      done(err);
    };
    CipherBase.prototype._finalOrDigest = function(outputEnc) {
      var outData = this.__final() || Buffer2.alloc(0);
      if (outputEnc) {
        outData = this._toString(outData, outputEnc, true);
      }
      return outData;
    };
    CipherBase.prototype._toString = function(value, enc, fin) {
      if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
      }
      if (this._encoding !== enc)
        throw new Error("can't switch encodings");
      var out = this._decoder.write(value);
      if (fin) {
        out += this._decoder.end();
      }
      return out;
    };
    module.exports = CipherBase;
  }
});

// node_modules/create-hash/browser.js
var require_browser3 = __commonJS({
  "node_modules/create-hash/browser.js"(exports, module) {
    "use strict";
    var inherits = require_inherits_browser();
    var MD5 = require_md5();
    var RIPEMD160 = require_ripemd160();
    var sha = require_sha3();
    var Base = require_cipher_base();
    function Hash(hash2) {
      Base.call(this, "digest");
      this._hash = hash2;
    }
    inherits(Hash, Base);
    Hash.prototype._update = function(data) {
      this._hash.update(data);
    };
    Hash.prototype._final = function() {
      return this._hash.digest();
    };
    module.exports = function createHash(alg) {
      alg = alg.toLowerCase();
      if (alg === "md5")
        return new MD5();
      if (alg === "rmd160" || alg === "ripemd160")
        return new RIPEMD160();
      return new Hash(sha(alg));
    };
  }
});

// node_modules/ethereumjs-util/dist.browser/hash.js
var require_hash3 = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/hash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;
    var keccak_1 = require_keccak3();
    var createHash = require_browser3();
    var externals_1 = require_externals();
    var bytes_1 = require_bytes();
    var helpers_1 = require_helpers();
    var keccak = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsBuffer)(a);
      switch (bits) {
        case 224: {
          return (0, keccak_1.keccak224)(a);
        }
        case 256: {
          return (0, keccak_1.keccak256)(a);
        }
        case 384: {
          return (0, keccak_1.keccak384)(a);
        }
        case 512: {
          return (0, keccak_1.keccak512)(a);
        }
        default: {
          throw new Error("Invald algorithm: keccak".concat(bits));
        }
      }
    };
    exports.keccak = keccak;
    var keccak2562 = function(a) {
      return (0, exports.keccak)(a);
    };
    exports.keccak256 = keccak2562;
    var keccakFromString = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsString)(a);
      var buf = Buffer.from(a, "utf8");
      return (0, exports.keccak)(buf, bits);
    };
    exports.keccakFromString = keccakFromString;
    var keccakFromHexString = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsHexString)(a);
      return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
    };
    exports.keccakFromHexString = keccakFromHexString;
    var keccakFromArray = function(a, bits) {
      if (bits === void 0) {
        bits = 256;
      }
      (0, helpers_1.assertIsArray)(a);
      return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
    };
    exports.keccakFromArray = keccakFromArray;
    var _sha256 = function(a) {
      a = (0, bytes_1.toBuffer)(a);
      return createHash("sha256").update(a).digest();
    };
    var sha256 = function(a) {
      (0, helpers_1.assertIsBuffer)(a);
      return _sha256(a);
    };
    exports.sha256 = sha256;
    var sha256FromString = function(a) {
      (0, helpers_1.assertIsString)(a);
      return _sha256(a);
    };
    exports.sha256FromString = sha256FromString;
    var sha256FromArray = function(a) {
      (0, helpers_1.assertIsArray)(a);
      return _sha256(a);
    };
    exports.sha256FromArray = sha256FromArray;
    var _ripemd160 = function(a, padded) {
      a = (0, bytes_1.toBuffer)(a);
      var hash2 = createHash("rmd160").update(a).digest();
      if (padded === true) {
        return (0, bytes_1.setLengthLeft)(hash2, 32);
      } else {
        return hash2;
      }
    };
    var ripemd160 = function(a, padded) {
      (0, helpers_1.assertIsBuffer)(a);
      return _ripemd160(a, padded);
    };
    exports.ripemd160 = ripemd160;
    var ripemd160FromString = function(a, padded) {
      (0, helpers_1.assertIsString)(a);
      return _ripemd160(a, padded);
    };
    exports.ripemd160FromString = ripemd160FromString;
    var ripemd160FromArray = function(a, padded) {
      (0, helpers_1.assertIsArray)(a);
      return _ripemd160(a, padded);
    };
    exports.ripemd160FromArray = ripemd160FromArray;
    var rlphash = function(a) {
      return (0, exports.keccak)(externals_1.rlp.encode(a));
    };
    exports.rlphash = rlphash;
  }
});

// node_modules/ethereumjs-util/dist.browser/types.js
var require_types = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;
    var externals_1 = require_externals();
    var internal_1 = require_internal();
    var bytes_1 = require_bytes();
    function bnToHex(value) {
      return "0x".concat(value.toString(16));
    }
    exports.bnToHex = bnToHex;
    function bnToUnpaddedBuffer(value) {
      return (0, bytes_1.unpadBuffer)(value.toArrayLike(Buffer));
    }
    exports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;
    function bnToRlp(value) {
      return bnToUnpaddedBuffer(value);
    }
    exports.bnToRlp = bnToRlp;
    var TypeOutput;
    (function(TypeOutput2) {
      TypeOutput2[TypeOutput2["Number"] = 0] = "Number";
      TypeOutput2[TypeOutput2["BN"] = 1] = "BN";
      TypeOutput2[TypeOutput2["Buffer"] = 2] = "Buffer";
      TypeOutput2[TypeOutput2["PrefixedHexString"] = 3] = "PrefixedHexString";
    })(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));
    function toType(input, outputType) {
      if (input === null) {
        return null;
      }
      if (input === void 0) {
        return void 0;
      }
      if (typeof input === "string" && !(0, internal_1.isHexString)(input)) {
        throw new Error("A string must be provided with a 0x-prefix, given: ".concat(input));
      } else if (typeof input === "number" && !Number.isSafeInteger(input)) {
        throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
      }
      var output = (0, bytes_1.toBuffer)(input);
      if (outputType === TypeOutput.Buffer) {
        return output;
      } else if (outputType === TypeOutput.BN) {
        return new externals_1.BN(output);
      } else if (outputType === TypeOutput.Number) {
        var bn = new externals_1.BN(output);
        var max = new externals_1.BN(Number.MAX_SAFE_INTEGER.toString());
        if (bn.gt(max)) {
          throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");
        }
        return bn.toNumber();
      } else {
        return "0x".concat(output.toString("hex"));
      }
    }
    exports.toType = toType;
  }
});

// node_modules/ethereumjs-util/dist.browser/account.js
var require_account = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/account.js"(exports) {
    "use strict";
    var __read2 = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r2, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r2 = i.next()).done)
          ar.push(r2.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r2 && !r2.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;
    var assert_1 = __importDefault(require_assert());
    var externals_1 = require_externals();
    var secp256k1_1 = require_secp256k12();
    var internal_1 = require_internal();
    var constants_1 = require_constants();
    var bytes_1 = require_bytes();
    var hash_1 = require_hash3();
    var helpers_1 = require_helpers();
    var types_1 = require_types();
    var Account = (
      /** @class */
      function() {
        function Account2(nonce, balance, stateRoot, codeHash) {
          if (nonce === void 0) {
            nonce = new externals_1.BN(0);
          }
          if (balance === void 0) {
            balance = new externals_1.BN(0);
          }
          if (stateRoot === void 0) {
            stateRoot = constants_1.KECCAK256_RLP;
          }
          if (codeHash === void 0) {
            codeHash = constants_1.KECCAK256_NULL;
          }
          this.nonce = nonce;
          this.balance = balance;
          this.stateRoot = stateRoot;
          this.codeHash = codeHash;
          this._validate();
        }
        Account2.fromAccountData = function(accountData) {
          var nonce = accountData.nonce, balance = accountData.balance, stateRoot = accountData.stateRoot, codeHash = accountData.codeHash;
          return new Account2(nonce ? new externals_1.BN((0, bytes_1.toBuffer)(nonce)) : void 0, balance ? new externals_1.BN((0, bytes_1.toBuffer)(balance)) : void 0, stateRoot ? (0, bytes_1.toBuffer)(stateRoot) : void 0, codeHash ? (0, bytes_1.toBuffer)(codeHash) : void 0);
        };
        Account2.fromRlpSerializedAccount = function(serialized) {
          var values = externals_1.rlp.decode(serialized);
          if (!Array.isArray(values)) {
            throw new Error("Invalid serialized account input. Must be array");
          }
          return this.fromValuesArray(values);
        };
        Account2.fromValuesArray = function(values) {
          var _a2 = __read2(values, 4), nonce = _a2[0], balance = _a2[1], stateRoot = _a2[2], codeHash = _a2[3];
          return new Account2(new externals_1.BN(nonce), new externals_1.BN(balance), stateRoot, codeHash);
        };
        Account2.prototype._validate = function() {
          if (this.nonce.lt(new externals_1.BN(0))) {
            throw new Error("nonce must be greater than zero");
          }
          if (this.balance.lt(new externals_1.BN(0))) {
            throw new Error("balance must be greater than zero");
          }
          if (this.stateRoot.length !== 32) {
            throw new Error("stateRoot must have a length of 32");
          }
          if (this.codeHash.length !== 32) {
            throw new Error("codeHash must have a length of 32");
          }
        };
        Account2.prototype.raw = function() {
          return [
            (0, types_1.bnToUnpaddedBuffer)(this.nonce),
            (0, types_1.bnToUnpaddedBuffer)(this.balance),
            this.stateRoot,
            this.codeHash
          ];
        };
        Account2.prototype.serialize = function() {
          return externals_1.rlp.encode(this.raw());
        };
        Account2.prototype.isContract = function() {
          return !this.codeHash.equals(constants_1.KECCAK256_NULL);
        };
        Account2.prototype.isEmpty = function() {
          return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);
        };
        return Account2;
      }()
    );
    exports.Account = Account;
    var isValidAddress = function(hexAddress) {
      try {
        (0, helpers_1.assertIsString)(hexAddress);
      } catch (e) {
        return false;
      }
      return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);
    };
    exports.isValidAddress = isValidAddress;
    var toChecksumAddress = function(hexAddress, eip1191ChainId) {
      (0, helpers_1.assertIsHexString)(hexAddress);
      var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();
      var prefix = "";
      if (eip1191ChainId) {
        var chainId = (0, types_1.toType)(eip1191ChainId, types_1.TypeOutput.BN);
        prefix = chainId.toString() + "0x";
      }
      var hash2 = (0, hash_1.keccakFromString)(prefix + address).toString("hex");
      var ret = "0x";
      for (var i = 0; i < address.length; i++) {
        if (parseInt(hash2[i], 16) >= 8) {
          ret += address[i].toUpperCase();
        } else {
          ret += address[i];
        }
      }
      return ret;
    };
    exports.toChecksumAddress = toChecksumAddress;
    var isValidChecksumAddress = function(hexAddress, eip1191ChainId) {
      return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;
    };
    exports.isValidChecksumAddress = isValidChecksumAddress;
    var generateAddress = function(from, nonce) {
      (0, helpers_1.assertIsBuffer)(from);
      (0, helpers_1.assertIsBuffer)(nonce);
      var nonceBN = new externals_1.BN(nonce);
      if (nonceBN.isZero()) {
        return (0, hash_1.rlphash)([from, null]).slice(-20);
      }
      return (0, hash_1.rlphash)([from, Buffer.from(nonceBN.toArray())]).slice(-20);
    };
    exports.generateAddress = generateAddress;
    var generateAddress2 = function(from, salt, initCode) {
      (0, helpers_1.assertIsBuffer)(from);
      (0, helpers_1.assertIsBuffer)(salt);
      (0, helpers_1.assertIsBuffer)(initCode);
      (0, assert_1.default)(from.length === 20);
      (0, assert_1.default)(salt.length === 32);
      var address = (0, hash_1.keccak256)(Buffer.concat([Buffer.from("ff", "hex"), from, salt, (0, hash_1.keccak256)(initCode)]));
      return address.slice(-20);
    };
    exports.generateAddress2 = generateAddress2;
    var isValidPrivate = function(privateKey) {
      return (0, secp256k1_1.privateKeyVerify)(privateKey);
    };
    exports.isValidPrivate = isValidPrivate;
    var isValidPublic = function(publicKey, sanitize) {
      if (sanitize === void 0) {
        sanitize = false;
      }
      (0, helpers_1.assertIsBuffer)(publicKey);
      if (publicKey.length === 64) {
        return (0, secp256k1_1.publicKeyVerify)(Buffer.concat([Buffer.from([4]), publicKey]));
      }
      if (!sanitize) {
        return false;
      }
      return (0, secp256k1_1.publicKeyVerify)(publicKey);
    };
    exports.isValidPublic = isValidPublic;
    var pubToAddress = function(pubKey, sanitize) {
      if (sanitize === void 0) {
        sanitize = false;
      }
      (0, helpers_1.assertIsBuffer)(pubKey);
      if (sanitize && pubKey.length !== 64) {
        pubKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));
      }
      (0, assert_1.default)(pubKey.length === 64);
      return (0, hash_1.keccak)(pubKey).slice(-20);
    };
    exports.pubToAddress = pubToAddress;
    exports.publicToAddress = exports.pubToAddress;
    var privateToPublic = function(privateKey) {
      (0, helpers_1.assertIsBuffer)(privateKey);
      return Buffer.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);
    };
    exports.privateToPublic = privateToPublic;
    var privateToAddress = function(privateKey) {
      return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));
    };
    exports.privateToAddress = privateToAddress;
    var importPublic = function(publicKey) {
      (0, helpers_1.assertIsBuffer)(publicKey);
      if (publicKey.length !== 64) {
        publicKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));
      }
      return publicKey;
    };
    exports.importPublic = importPublic;
    var zeroAddress = function() {
      var addressLength = 20;
      var addr = (0, bytes_1.zeros)(addressLength);
      return (0, bytes_1.bufferToHex)(addr);
    };
    exports.zeroAddress = zeroAddress;
    var isZeroAddress = function(hexAddress) {
      try {
        (0, helpers_1.assertIsString)(hexAddress);
      } catch (e) {
        return false;
      }
      var zeroAddr = (0, exports.zeroAddress)();
      return zeroAddr === hexAddress;
    };
    exports.isZeroAddress = isZeroAddress;
  }
});

// node_modules/ethereumjs-util/dist.browser/address.js
var require_address = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/address.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Address = void 0;
    var assert_1 = __importDefault(require_assert());
    var externals_1 = require_externals();
    var bytes_1 = require_bytes();
    var account_1 = require_account();
    var Address = (
      /** @class */
      function() {
        function Address2(buf) {
          (0, assert_1.default)(buf.length === 20, "Invalid address length");
          this.buf = buf;
        }
        Address2.zero = function() {
          return new Address2((0, bytes_1.zeros)(20));
        };
        Address2.fromString = function(str) {
          (0, assert_1.default)((0, account_1.isValidAddress)(str), "Invalid address");
          return new Address2((0, bytes_1.toBuffer)(str));
        };
        Address2.fromPublicKey = function(pubKey) {
          (0, assert_1.default)(Buffer.isBuffer(pubKey), "Public key should be Buffer");
          var buf = (0, account_1.pubToAddress)(pubKey);
          return new Address2(buf);
        };
        Address2.fromPrivateKey = function(privateKey) {
          (0, assert_1.default)(Buffer.isBuffer(privateKey), "Private key should be Buffer");
          var buf = (0, account_1.privateToAddress)(privateKey);
          return new Address2(buf);
        };
        Address2.generate = function(from, nonce) {
          (0, assert_1.default)(externals_1.BN.isBN(nonce));
          return new Address2((0, account_1.generateAddress)(from.buf, nonce.toArrayLike(Buffer)));
        };
        Address2.generate2 = function(from, salt, initCode) {
          (0, assert_1.default)(Buffer.isBuffer(salt));
          (0, assert_1.default)(Buffer.isBuffer(initCode));
          return new Address2((0, account_1.generateAddress2)(from.buf, salt, initCode));
        };
        Address2.prototype.equals = function(address) {
          return this.buf.equals(address.buf);
        };
        Address2.prototype.isZero = function() {
          return this.equals(Address2.zero());
        };
        Address2.prototype.isPrecompileOrSystemAddress = function() {
          var addressBN = new externals_1.BN(this.buf);
          var rangeMin = new externals_1.BN(0);
          var rangeMax = new externals_1.BN("ffff", "hex");
          return addressBN.gte(rangeMin) && addressBN.lte(rangeMax);
        };
        Address2.prototype.toString = function() {
          return "0x" + this.buf.toString("hex");
        };
        Address2.prototype.toBuffer = function() {
          return Buffer.from(this.buf);
        };
        return Address2;
      }()
    );
    exports.Address = Address;
  }
});

// node_modules/ethereumjs-util/dist.browser/signature.js
var require_signature3 = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/signature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;
    var secp256k1_1 = require_secp256k12();
    var externals_1 = require_externals();
    var bytes_1 = require_bytes();
    var hash_1 = require_hash3();
    var helpers_1 = require_helpers();
    var types_1 = require_types();
    function ecsign(msgHash, privateKey, chainId) {
      var _a2 = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey), signature2 = _a2.signature, recovery = _a2.recid;
      var r2 = Buffer.from(signature2.slice(0, 32));
      var s = Buffer.from(signature2.slice(32, 64));
      if (!chainId || typeof chainId === "number") {
        if (chainId && !Number.isSafeInteger(chainId)) {
          throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
        }
        var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;
        return { r: r2, s, v: v_1 };
      }
      var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
      var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);
      return { r: r2, s, v };
    }
    exports.ecsign = ecsign;
    function calculateSigRecovery(v, chainId) {
      var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);
      if (vBN.eqn(0) || vBN.eqn(1))
        return (0, types_1.toType)(v, types_1.TypeOutput.BN);
      if (!chainId) {
        return vBN.subn(27);
      }
      var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
      return vBN.sub(chainIdBN.muln(2).addn(35));
    }
    function isValidSigRecovery(recovery) {
      var rec = new externals_1.BN(recovery);
      return rec.eqn(0) || rec.eqn(1);
    }
    var ecrecover = function(msgHash, v, r2, s, chainId) {
      var signature2 = Buffer.concat([(0, bytes_1.setLengthLeft)(r2, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);
      var recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature2, recovery.toNumber(), msgHash);
      return Buffer.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));
    };
    exports.ecrecover = ecrecover;
    var toRpcSig = function(v, r2, s, chainId) {
      var recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r2, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));
    };
    exports.toRpcSig = toRpcSig;
    var toCompactSig = function(v, r2, s, chainId) {
      var recovery = calculateSigRecovery(v, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);
      var ss = s;
      if (vn > 28 && vn % 2 === 1 || vn === 1 || vn === 28) {
        ss = Buffer.from(s);
        ss[0] |= 128;
      }
      return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r2, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));
    };
    exports.toCompactSig = toCompactSig;
    var fromRpcSig = function(sig) {
      var buf = (0, bytes_1.toBuffer)(sig);
      var r2;
      var s;
      var v;
      if (buf.length >= 65) {
        r2 = buf.slice(0, 32);
        s = buf.slice(32, 64);
        v = (0, bytes_1.bufferToInt)(buf.slice(64));
      } else if (buf.length === 64) {
        r2 = buf.slice(0, 32);
        s = buf.slice(32, 64);
        v = (0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7;
        s[0] &= 127;
      } else {
        throw new Error("Invalid signature length");
      }
      if (v < 27) {
        v += 27;
      }
      return {
        v,
        r: r2,
        s
      };
    };
    exports.fromRpcSig = fromRpcSig;
    var isValidSignature = function(v, r2, s, homesteadOrLater, chainId) {
      if (homesteadOrLater === void 0) {
        homesteadOrLater = true;
      }
      var SECP256K1_N_DIV_2 = new externals_1.BN("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0", 16);
      var SECP256K1_N = new externals_1.BN("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", 16);
      if (r2.length !== 32 || s.length !== 32) {
        return false;
      }
      if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
        return false;
      }
      var rBN = new externals_1.BN(r2);
      var sBN = new externals_1.BN(s);
      if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
        return false;
      }
      if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
        return false;
      }
      return true;
    };
    exports.isValidSignature = isValidSignature;
    var hashPersonalMessage = function(message) {
      (0, helpers_1.assertIsBuffer)(message);
      var prefix = Buffer.from("Ethereum Signed Message:\n".concat(message.length), "utf-8");
      return (0, hash_1.keccak)(Buffer.concat([prefix, message]));
    };
    exports.hashPersonalMessage = hashPersonalMessage;
  }
});

// node_modules/ethereumjs-util/dist.browser/object.js
var require_object = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/object.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defineProperties = void 0;
    var assert_1 = __importDefault(require_assert());
    var internal_1 = require_internal();
    var externals_1 = require_externals();
    var bytes_1 = require_bytes();
    var defineProperties = function(self2, fields, data) {
      self2.raw = [];
      self2._fields = [];
      self2.toJSON = function(label) {
        if (label === void 0) {
          label = false;
        }
        if (label) {
          var obj_1 = {};
          self2._fields.forEach(function(field) {
            obj_1[field] = "0x".concat(self2[field].toString("hex"));
          });
          return obj_1;
        }
        return (0, bytes_1.baToJSON)(self2.raw);
      };
      self2.serialize = function serialize2() {
        return externals_1.rlp.encode(self2.raw);
      };
      fields.forEach(function(field, i) {
        self2._fields.push(field.name);
        function getter() {
          return self2.raw[i];
        }
        function setter(v) {
          v = (0, bytes_1.toBuffer)(v);
          if (v.toString("hex") === "00" && !field.allowZero) {
            v = Buffer.allocUnsafe(0);
          }
          if (field.allowLess && field.length) {
            v = (0, bytes_1.unpadBuffer)(v);
            (0, assert_1.default)(field.length >= v.length, "The field ".concat(field.name, " must not have more ").concat(field.length, " bytes"));
          } else if (!(field.allowZero && v.length === 0) && field.length) {
            (0, assert_1.default)(field.length === v.length, "The field ".concat(field.name, " must have byte length of ").concat(field.length));
          }
          self2.raw[i] = v;
        }
        Object.defineProperty(self2, field.name, {
          enumerable: true,
          configurable: true,
          get: getter,
          set: setter
        });
        if (field.default) {
          self2[field.name] = field.default;
        }
        if (field.alias) {
          Object.defineProperty(self2, field.alias, {
            enumerable: false,
            configurable: true,
            set: setter,
            get: getter
          });
        }
      });
      if (data) {
        if (typeof data === "string") {
          data = Buffer.from((0, internal_1.stripHexPrefix)(data), "hex");
        }
        if (Buffer.isBuffer(data)) {
          data = externals_1.rlp.decode(data);
        }
        if (Array.isArray(data)) {
          if (data.length > self2._fields.length) {
            throw new Error("wrong number of fields in data");
          }
          data.forEach(function(d, i) {
            self2[self2._fields[i]] = (0, bytes_1.toBuffer)(d);
          });
        } else if (typeof data === "object") {
          var keys_1 = Object.keys(data);
          fields.forEach(function(field) {
            if (keys_1.indexOf(field.name) !== -1)
              self2[field.name] = data[field.name];
            if (keys_1.indexOf(field.alias) !== -1)
              self2[field.alias] = data[field.alias];
          });
        } else {
          throw new Error("invalid data");
        }
      }
    };
    exports.defineProperties = defineProperties;
  }
});

// node_modules/ethereumjs-util/dist.browser/index.js
var require_dist2 = __commonJS({
  "node_modules/ethereumjs-util/dist.browser/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;
    __exportStar(require_constants(), exports);
    __exportStar(require_account(), exports);
    __exportStar(require_address(), exports);
    __exportStar(require_hash3(), exports);
    __exportStar(require_signature3(), exports);
    __exportStar(require_bytes(), exports);
    __exportStar(require_object(), exports);
    __exportStar(require_externals(), exports);
    __exportStar(require_types(), exports);
    var internal_1 = require_internal();
    Object.defineProperty(exports, "isHexPrefixed", { enumerable: true, get: function() {
      return internal_1.isHexPrefixed;
    } });
    Object.defineProperty(exports, "stripHexPrefix", { enumerable: true, get: function() {
      return internal_1.stripHexPrefix;
    } });
    Object.defineProperty(exports, "padToEven", { enumerable: true, get: function() {
      return internal_1.padToEven;
    } });
    Object.defineProperty(exports, "getBinarySize", { enumerable: true, get: function() {
      return internal_1.getBinarySize;
    } });
    Object.defineProperty(exports, "arrayContainsArray", { enumerable: true, get: function() {
      return internal_1.arrayContainsArray;
    } });
    Object.defineProperty(exports, "toAscii", { enumerable: true, get: function() {
      return internal_1.toAscii;
    } });
    Object.defineProperty(exports, "fromUtf8", { enumerable: true, get: function() {
      return internal_1.fromUtf8;
    } });
    Object.defineProperty(exports, "fromAscii", { enumerable: true, get: function() {
      return internal_1.fromAscii;
    } });
    Object.defineProperty(exports, "getKeys", { enumerable: true, get: function() {
      return internal_1.getKeys;
    } });
    Object.defineProperty(exports, "isHexString", { enumerable: true, get: function() {
      return internal_1.isHexString;
    } });
  }
});

// node_modules/js-sha3/src/sha3.js
var require_sha32 = __commonJS({
  "node_modules/js-sha3/src/sha3.js"(exports, module) {
    (function() {
      "use strict";
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = globalThis;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === "object" && module.exports;
      var AMD = typeof define === "function" && define.amd;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
      ];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
      var CSHAKE_BYTEPAD = {
        "128": 168,
        "256": 136
      };
      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var createOutputMethod = function(bits2, padding2, outputType) {
        return function(message) {
          return new Keccak(bits2, padding2, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits) {
          return new Keccak(bits2, padding2, outputBits).update(message)[outputType]();
        };
      };
      var createCshakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits, n, s) {
          return methods["cshake" + bits2].update(message, outputBits, n, s)[outputType]();
        };
      };
      var createKmacOutputMethod = function(bits2, padding2, outputType) {
        return function(key2, message, outputBits, s) {
          return methods["kmac" + bits2].update(key2, message, outputBits, s)[outputType]();
        };
      };
      var createOutputMethods = function(method, createMethod2, bits2, padding2) {
        for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
          var type = OUTPUT_TYPES[i2];
          method[type] = createMethod2(bits2, padding2, type);
        }
        return method;
      };
      var createMethod = function(bits2, padding2) {
        var method = createOutputMethod(bits2, padding2, "hex");
        method.create = function() {
          return new Keccak(bits2, padding2, bits2);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits2, padding2);
      };
      var createShakeMethod = function(bits2, padding2) {
        var method = createShakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits) {
          return new Keccak(bits2, padding2, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits2, padding2);
      };
      var createCshakeMethod = function(bits2, padding2) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createCshakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits, n, s) {
          if (!n && !s) {
            return methods["shake" + bits2].create(outputBits);
          } else {
            return new Keccak(bits2, padding2, outputBits).bytepad([n, s], w);
          }
        };
        method.update = function(message, outputBits, n, s) {
          return method.create(outputBits, n, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits2, padding2);
      };
      var createKmacMethod = function(bits2, padding2) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createKmacOutputMethod(bits2, padding2, "hex");
        method.create = function(key2, outputBits, s) {
          return new Kmac(bits2, padding2, outputBits).bytepad(["KMAC", s], w).bytepad([key2], w);
        };
        method.update = function(key2, message, outputBits, s) {
          return method.create(key2, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits2, padding2);
      };
      var algorithms = [
        { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
        { name: "sha3", padding: PADDING, bits: BITS, createMethod },
        { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];
      var methods = {}, methodNames = [];
      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + "_" + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== "sha3") {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }
      function Keccak(bits2, padding2, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding2;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i2 = 0; i2 < 50; ++i2) {
          this.s[i2] = 0;
        }
      }
      Keccak.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== "string") {
          if (type === "object") {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s = this.s, i2, code;
        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i2 = 1; i2 < blockCount + 1; ++i2) {
              blocks[i2] = 0;
            }
          }
          if (notString) {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              blocks[i2 >> 2] |= message[index] << SHIFT[i2++ & 3];
            }
          } else {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) {
                blocks[i2 >> 2] |= code << SHIFT[i2++ & 3];
              } else if (code < 2048) {
                blocks[i2 >> 2] |= (192 | code >> 6) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks[i2 >> 2] |= (224 | code >> 12) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks[i2 >> 2] |= (240 | code >> 18) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              }
            }
          }
          this.lastByteIndex = i2;
          if (i2 >= byteCount) {
            this.start = i2 - byteCount;
            this.block = blocks[blockCount];
            for (i2 = 0; i2 < blockCount; ++i2) {
              s[i2] ^= blocks[i2];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i2;
          }
        }
        return this;
      };
      Keccak.prototype.encode = function(x, right) {
        var o = x & 255, n = 1;
        var bytes = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n;
        }
        if (right) {
          bytes.push(n);
        } else {
          bytes.unshift(n);
        }
        this.update(bytes);
        return bytes.length;
      };
      Keccak.prototype.encodeString = function(str) {
        var notString, type = typeof str;
        if (type !== "string") {
          if (type === "object") {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i2 = 0; i2 < str.length; ++i2) {
            var code = str.charCodeAt(i2);
            if (code < 128) {
              bytes += 1;
            } else if (code < 2048) {
              bytes += 2;
            } else if (code < 55296 || code >= 57344) {
              bytes += 3;
            } else {
              code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++i2) & 1023);
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };
      Keccak.prototype.bytepad = function(strs, w) {
        var bytes = this.encode(w);
        for (var i2 = 0; i2 < strs.length; ++i2) {
          bytes += this.encodeString(strs[i2]);
        }
        var paddingBytes = w - bytes % w;
        var zeros2 = [];
        zeros2.length = paddingBytes;
        this.update(zeros2);
        return this;
      };
      Keccak.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i2 = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i2 >> 2] |= this.padding[i2 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i2 = 1; i2 < blockCount + 1; ++i2) {
            blocks[i2] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i2 = 0; i2 < blockCount; ++i2) {
          s[i2] ^= blocks[i2];
        }
        f(s);
      };
      Keccak.prototype.toString = Keccak.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var hex = "", block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            block = s[i2];
            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j2 % blockCount === 0) {
            f(s);
            i2 = 0;
          }
        }
        if (extraBytes) {
          block = s[i2];
          hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          if (extraBytes > 1) {
            hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex;
      };
      Keccak.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            array[j2] = s[i2];
          }
          if (j2 % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i2] = s[i2];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
      Keccak.prototype.digest = Keccak.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var array = [], offset, block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            offset = j2 << 2;
            block = s[i2];
            array[offset] = block & 255;
            array[offset + 1] = block >> 8 & 255;
            array[offset + 2] = block >> 16 & 255;
            array[offset + 3] = block >> 24 & 255;
          }
          if (j2 % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j2 << 2;
          block = s[i2];
          array[offset] = block & 255;
          if (extraBytes > 1) {
            array[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array[offset + 2] = block >> 16 & 255;
          }
        }
        return array;
      };
      function Kmac(bits2, padding2, outputBits) {
        Keccak.call(this, bits2, padding2, outputBits);
      }
      Kmac.prototype = new Keccak();
      Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };
      var f = function(s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
          h = c8 ^ (c2 << 1 | c3 >>> 31);
          l = c9 ^ (c3 << 1 | c2 >>> 31);
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ (c4 << 1 | c5 >>> 31);
          l = c1 ^ (c5 << 1 | c4 >>> 31);
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ (c6 << 1 | c7 >>> 31);
          l = c3 ^ (c7 << 1 | c6 >>> 31);
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ (c8 << 1 | c9 >>> 31);
          l = c5 ^ (c9 << 1 | c8 >>> 31);
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ (c0 << 1 | c1 >>> 31);
          l = c7 ^ (c1 << 1 | c0 >>> 31);
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;
          b0 = s[0];
          b1 = s[1];
          b32 = s[11] << 4 | s[10] >>> 28;
          b33 = s[10] << 4 | s[11] >>> 28;
          b14 = s[20] << 3 | s[21] >>> 29;
          b15 = s[21] << 3 | s[20] >>> 29;
          b46 = s[31] << 9 | s[30] >>> 23;
          b47 = s[30] << 9 | s[31] >>> 23;
          b28 = s[40] << 18 | s[41] >>> 14;
          b29 = s[41] << 18 | s[40] >>> 14;
          b20 = s[2] << 1 | s[3] >>> 31;
          b21 = s[3] << 1 | s[2] >>> 31;
          b2 = s[13] << 12 | s[12] >>> 20;
          b3 = s[12] << 12 | s[13] >>> 20;
          b34 = s[22] << 10 | s[23] >>> 22;
          b35 = s[23] << 10 | s[22] >>> 22;
          b16 = s[33] << 13 | s[32] >>> 19;
          b17 = s[32] << 13 | s[33] >>> 19;
          b48 = s[42] << 2 | s[43] >>> 30;
          b49 = s[43] << 2 | s[42] >>> 30;
          b40 = s[5] << 30 | s[4] >>> 2;
          b41 = s[4] << 30 | s[5] >>> 2;
          b22 = s[14] << 6 | s[15] >>> 26;
          b23 = s[15] << 6 | s[14] >>> 26;
          b4 = s[25] << 11 | s[24] >>> 21;
          b5 = s[24] << 11 | s[25] >>> 21;
          b36 = s[34] << 15 | s[35] >>> 17;
          b37 = s[35] << 15 | s[34] >>> 17;
          b18 = s[45] << 29 | s[44] >>> 3;
          b19 = s[44] << 29 | s[45] >>> 3;
          b10 = s[6] << 28 | s[7] >>> 4;
          b11 = s[7] << 28 | s[6] >>> 4;
          b42 = s[17] << 23 | s[16] >>> 9;
          b43 = s[16] << 23 | s[17] >>> 9;
          b24 = s[26] << 25 | s[27] >>> 7;
          b25 = s[27] << 25 | s[26] >>> 7;
          b6 = s[36] << 21 | s[37] >>> 11;
          b7 = s[37] << 21 | s[36] >>> 11;
          b38 = s[47] << 24 | s[46] >>> 8;
          b39 = s[46] << 24 | s[47] >>> 8;
          b30 = s[8] << 27 | s[9] >>> 5;
          b31 = s[9] << 27 | s[8] >>> 5;
          b12 = s[18] << 20 | s[19] >>> 12;
          b13 = s[19] << 20 | s[18] >>> 12;
          b44 = s[29] << 7 | s[28] >>> 25;
          b45 = s[28] << 7 | s[29] >>> 25;
          b26 = s[38] << 8 | s[39] >>> 24;
          b27 = s[39] << 8 | s[38] >>> 24;
          b8 = s[48] << 14 | s[49] >>> 18;
          b9 = s[49] << 14 | s[48] >>> 18;
          s[0] = b0 ^ ~b2 & b4;
          s[1] = b1 ^ ~b3 & b5;
          s[10] = b10 ^ ~b12 & b14;
          s[11] = b11 ^ ~b13 & b15;
          s[20] = b20 ^ ~b22 & b24;
          s[21] = b21 ^ ~b23 & b25;
          s[30] = b30 ^ ~b32 & b34;
          s[31] = b31 ^ ~b33 & b35;
          s[40] = b40 ^ ~b42 & b44;
          s[41] = b41 ^ ~b43 & b45;
          s[2] = b2 ^ ~b4 & b6;
          s[3] = b3 ^ ~b5 & b7;
          s[12] = b12 ^ ~b14 & b16;
          s[13] = b13 ^ ~b15 & b17;
          s[22] = b22 ^ ~b24 & b26;
          s[23] = b23 ^ ~b25 & b27;
          s[32] = b32 ^ ~b34 & b36;
          s[33] = b33 ^ ~b35 & b37;
          s[42] = b42 ^ ~b44 & b46;
          s[43] = b43 ^ ~b45 & b47;
          s[4] = b4 ^ ~b6 & b8;
          s[5] = b5 ^ ~b7 & b9;
          s[14] = b14 ^ ~b16 & b18;
          s[15] = b15 ^ ~b17 & b19;
          s[24] = b24 ^ ~b26 & b28;
          s[25] = b25 ^ ~b27 & b29;
          s[34] = b34 ^ ~b36 & b38;
          s[35] = b35 ^ ~b37 & b39;
          s[44] = b44 ^ ~b46 & b48;
          s[45] = b45 ^ ~b47 & b49;
          s[6] = b6 ^ ~b8 & b0;
          s[7] = b7 ^ ~b9 & b1;
          s[16] = b16 ^ ~b18 & b10;
          s[17] = b17 ^ ~b19 & b11;
          s[26] = b26 ^ ~b28 & b20;
          s[27] = b27 ^ ~b29 & b21;
          s[36] = b36 ^ ~b38 & b30;
          s[37] = b37 ^ ~b39 & b31;
          s[46] = b46 ^ ~b48 & b40;
          s[47] = b47 ^ ~b49 & b41;
          s[8] = b8 ^ ~b0 & b2;
          s[9] = b9 ^ ~b1 & b3;
          s[18] = b18 ^ ~b10 & b12;
          s[19] = b19 ^ ~b11 & b13;
          s[28] = b28 ^ ~b20 & b22;
          s[29] = b29 ^ ~b21 & b23;
          s[38] = b38 ^ ~b30 & b32;
          s[39] = b39 ^ ~b31 & b33;
          s[48] = b48 ^ ~b40 & b42;
          s[49] = b49 ^ ~b41 & b43;
          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };
      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
        if (AMD) {
          define(function() {
            return methods;
          });
        }
      }
    })();
  }
});

// node_modules/ethereum-bloom-filters/dist/utils.js
var require_utils4 = __commonJS({
  "node_modules/ethereum-bloom-filters/dist/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var sha32 = require_sha32();
    function keccak2562(data) {
      return "0x" + sha32.keccak_256(toByteArray(data));
    }
    exports.keccak256 = keccak2562;
    exports.padLeft = (value, chars) => {
      const hasPrefix = /^0x/i.test(value) || typeof value === "number";
      value = value.toString().replace(/^0x/i, "");
      const padding2 = chars - value.length + 1 >= 0 ? chars - value.length + 1 : 0;
      return (hasPrefix ? "0x" : "") + new Array(padding2).join("0") + value;
    };
    function bytesToHex(bytes) {
      const hex = [];
      for (let i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 15).toString(16));
      }
      return `0x${hex.join("").replace(/^0+/, "")}`;
    }
    exports.bytesToHex = bytesToHex;
    function toByteArray(value) {
      if (value == null) {
        throw new Error("cannot convert null value to array");
      }
      if (typeof value === "string") {
        const match = value.match(/^(0x)?[0-9a-fA-F]*$/);
        if (!match) {
          throw new Error("invalid hexidecimal string");
        }
        if (match[1] !== "0x") {
          throw new Error("hex string must have 0x prefix");
        }
        value = value.substring(2);
        if (value.length % 2) {
          value = "0" + value;
        }
        const result = [];
        for (let i = 0; i < value.length; i += 2) {
          result.push(parseInt(value.substr(i, 2), 16));
        }
        return addSlice2(new Uint8Array(result));
      }
      if (isByteArray(value)) {
        return addSlice2(new Uint8Array(value));
      }
      throw new Error("invalid arrayify value");
    }
    exports.toByteArray = toByteArray;
    function isByteArray(value) {
      if (!value || // tslint:disable-next-line: radix
      parseInt(String(value.length)) != value.length || typeof value === "string") {
        return false;
      }
      for (let i = 0; i < value.length; i++) {
        const v = value[i];
        if (v < 0 || v >= 256 || parseInt(String(v)) != v) {
          return false;
        }
      }
      return true;
    }
    function addSlice2(array) {
      if (array.slice !== void 0) {
        return array;
      }
      array.slice = () => {
        const args = Array.prototype.slice.call(arguments);
        return addSlice2(new Uint8Array(Array.prototype.slice.apply(array, args)));
      };
      return array;
    }
  }
});

// node_modules/ethereum-bloom-filters/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/ethereum-bloom-filters/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_12 = require_utils4();
    function isBloom(bloom) {
      if (typeof bloom !== "string") {
        return false;
      }
      if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
        return false;
      }
      if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
        return true;
      }
      return false;
    }
    exports.isBloom = isBloom;
    function isInBloom(bloom, value) {
      if (typeof value === "object" && value.constructor === Uint8Array) {
        value = utils_12.bytesToHex(value);
      }
      const hash2 = utils_12.keccak256(value).replace("0x", "");
      for (let i = 0; i < 12; i += 4) {
        const bitpos = (parseInt(hash2.substr(i, 2), 16) << 8) + parseInt(hash2.substr(i + 2, 2), 16) & 2047;
        const code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));
        const offset = 1 << bitpos % 4;
        if ((code & offset) !== offset) {
          return false;
        }
      }
      return true;
    }
    exports.isInBloom = isInBloom;
    function codePointToInt(codePoint) {
      if (codePoint >= 48 && codePoint <= 57) {
        return codePoint - 48;
      }
      if (codePoint >= 65 && codePoint <= 70) {
        return codePoint - 55;
      }
      if (codePoint >= 97 && codePoint <= 102) {
        return codePoint - 87;
      }
      throw new Error("invalid bloom");
    }
    function isUserEthereumAddressInBloom(bloom, ethereumAddress) {
      if (!isBloom(bloom)) {
        throw new Error("Invalid bloom given");
      }
      if (!isAddress(ethereumAddress)) {
        throw new Error(`Invalid ethereum address given: "${ethereumAddress}"`);
      }
      const address = utils_12.padLeft(ethereumAddress, 64);
      return isInBloom(bloom, address);
    }
    exports.isUserEthereumAddressInBloom = isUserEthereumAddressInBloom;
    function isContractAddressInBloom(bloom, contractAddress) {
      if (!isBloom(bloom)) {
        throw new Error("Invalid bloom given");
      }
      if (!isAddress(contractAddress)) {
        throw new Error(`Invalid contract address given: "${contractAddress}"`);
      }
      return isInBloom(bloom, contractAddress);
    }
    exports.isContractAddressInBloom = isContractAddressInBloom;
    function isTopicInBloom(bloom, topic) {
      if (!isBloom(bloom)) {
        throw new Error("Invalid bloom given");
      }
      if (!isTopic(topic)) {
        throw new Error("Invalid topic");
      }
      return isInBloom(bloom, topic);
    }
    exports.isTopicInBloom = isTopicInBloom;
    function isTopic(topic) {
      if (typeof topic !== "string") {
        return false;
      }
      if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
        return false;
      } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
        return true;
      }
      return false;
    }
    exports.isTopic = isTopic;
    function isAddress(address) {
      if (typeof address !== "string") {
        return false;
      }
      if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
        return true;
      }
      if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
        return true;
      }
      return false;
    }
    exports.isAddress = isAddress;
  }
});

// node_modules/web3-utils/lib/utils.js
var require_utils5 = __commonJS({
  "node_modules/web3-utils/lib/utils.js"(exports, module) {
    var BN3 = require_bn3();
    var numberToBN = require_src3();
    var utf8 = require_utf8();
    var ethereumjsUtil = require_dist2();
    var ethereumBloomFilters = require_dist3();
    var isBN = function(object) {
      return BN3.isBN(object);
    };
    var isBigNumber = function(object) {
      return object && object.constructor && object.constructor.name === "BigNumber";
    };
    var toBN2 = function(number) {
      try {
        return numberToBN.apply(null, arguments);
      } catch (e) {
        throw new Error(e + ' Given value: "' + number + '"');
      }
    };
    var toTwosComplement = function(number) {
      return "0x" + toBN2(number).toTwos(256).toString(16, 64);
    };
    var isAddress = function(address) {
      if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
        return false;
      } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {
        return true;
      } else {
        return checkAddressChecksum(address);
      }
    };
    var checkAddressChecksum = function(address) {
      address = address.replace(/^0x/i, "");
      var addressHash = sha32(address.toLowerCase()).replace(/^0x/i, "");
      for (var i = 0; i < 40; i++) {
        if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {
          return false;
        }
      }
      return true;
    };
    var leftPad = function(string, chars, sign3) {
      var hasPrefix = /^0x/i.test(string) || typeof string === "number";
      string = string.toString(16).replace(/^0x/i, "");
      var padding2 = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;
      return (hasPrefix ? "0x" : "") + new Array(padding2).join(sign3 ? sign3 : "0") + string;
    };
    var rightPad = function(string, chars, sign3) {
      var hasPrefix = /^0x/i.test(string) || typeof string === "number";
      string = string.toString(16).replace(/^0x/i, "");
      var padding2 = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;
      return (hasPrefix ? "0x" : "") + string + new Array(padding2).join(sign3 ? sign3 : "0");
    };
    var utf8ToHex = function(str) {
      str = utf8.encode(str);
      var hex = "";
      str = str.replace(/^(?:\u0000)*/, "");
      str = str.split("").reverse().join("");
      str = str.replace(/^(?:\u0000)*/, "");
      str = str.split("").reverse().join("");
      for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? "0" + n : n;
      }
      return "0x" + hex;
    };
    var hexToUtf8 = function(hex) {
      if (!isHexStrict(hex))
        throw new Error('The parameter "' + hex + '" must be a valid HEX string.');
      var str = "";
      var code = 0;
      hex = hex.replace(/^0x/i, "");
      hex = hex.replace(/^(?:00)*/, "");
      hex = hex.split("").reverse().join("");
      hex = hex.replace(/^(?:00)*/, "");
      hex = hex.split("").reverse().join("");
      var l = hex.length;
      for (var i = 0; i < l; i += 2) {
        code = parseInt(hex.slice(i, i + 2), 16);
        str += String.fromCharCode(code);
      }
      return utf8.decode(str);
    };
    var hexToNumber = function(value, bigIntOnOverflow = false) {
      if (!value) {
        return value;
      }
      if (typeof value === "string" && !isHexStrict(value)) {
        throw new Error('Given value "' + value + '" is not a valid hex string.');
      }
      const n = toBN2(value);
      if (bigIntOnOverflow && (n > Number.MAX_SAFE_INTEGER || n < Number.MIN_SAFE_INTEGER)) {
        return BigInt(n);
      }
      return n.toNumber();
    };
    var hexToNumberString = function(value) {
      if (!value)
        return value;
      if (typeof value === "string" && !isHexStrict(value)) {
        throw new Error('Given value "' + value + '" is not a valid hex string.');
      }
      return toBN2(value).toString(10);
    };
    var numberToHex = function(value) {
      if (value === null || value === void 0) {
        return value;
      }
      if (!isFinite(value) && !isHexStrict(value)) {
        throw new Error('Given input "' + value + '" is not a number.');
      }
      var number = toBN2(value);
      var result = number.toString(16);
      return number.lt(new BN3(0)) ? "-0x" + result.slice(1) : "0x" + result;
    };
    var bytesToHex = function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 15).toString(16));
      }
      return "0x" + hex.join("");
    };
    var hexToBytes = function(hex) {
      hex = hex.toString(16);
      if (!isHexStrict(hex)) {
        throw new Error('Given value "' + hex + '" is not a valid hex string.');
      }
      hex = hex.replace(/^0x/i, "");
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.slice(c, c + 2), 16));
      return bytes;
    };
    var toHex4 = function(value, returnType) {
      if (isAddress(value)) {
        return returnType ? "address" : "0x" + value.toLowerCase().replace(/^0x/i, "");
      }
      if (typeof value === "boolean") {
        return returnType ? "bool" : value ? "0x01" : "0x00";
      }
      if (Buffer.isBuffer(value)) {
        return "0x" + value.toString("hex");
      }
      if (typeof value === "object" && !!value && !isBigNumber(value) && !isBN(value)) {
        return returnType ? "string" : utf8ToHex(JSON.stringify(value));
      }
      if (typeof value === "string") {
        if (value.indexOf("-0x") === 0 || value.indexOf("-0X") === 0) {
          return returnType ? "int256" : numberToHex(value);
        } else if (value.indexOf("0x") === 0 || value.indexOf("0X") === 0) {
          return returnType ? "bytes" : value;
        } else if (!isFinite(value)) {
          return returnType ? "string" : utf8ToHex(value);
        }
      }
      return returnType ? value < 0 ? "int256" : "uint256" : numberToHex(value);
    };
    var isHexStrict = function(hex) {
      return (typeof hex === "string" || typeof hex === "number") && /^(-)?0x[0-9a-f]*$/i.test(hex);
    };
    var isHex = function(hex) {
      return (typeof hex === "string" || typeof hex === "number") && /^(-0x|0x)?[0-9a-f]*$/i.test(hex);
    };
    var stripHexPrefix = function(str) {
      if (str !== 0 && isHex(str))
        return str.replace(/^(-)?0x/i, "$1");
      return str;
    };
    var isBloom = function(bloom) {
      return ethereumBloomFilters.isBloom(bloom);
    };
    var isUserEthereumAddressInBloom = function(bloom, ethereumAddress) {
      return ethereumBloomFilters.isUserEthereumAddressInBloom(bloom, ethereumAddress);
    };
    var isContractAddressInBloom = function(bloom, contractAddress) {
      return ethereumBloomFilters.isContractAddressInBloom(bloom, contractAddress);
    };
    var isTopic = function(topic) {
      return ethereumBloomFilters.isTopic(topic);
    };
    var isTopicInBloom = function(bloom, topic) {
      return ethereumBloomFilters.isTopicInBloom(bloom, topic);
    };
    var isInBloom = function(bloom, topic) {
      return ethereumBloomFilters.isInBloom(bloom, topic);
    };
    var SHA3_NULL_S = "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
    var sha32 = function(value) {
      if (isBN(value)) {
        value = value.toString();
      }
      if (isHexStrict(value) && /^0x/i.test(value.toString())) {
        value = ethereumjsUtil.toBuffer(value);
      } else if (typeof value === "string") {
        value = Buffer.from(value, "utf-8");
      }
      var returnValue = ethereumjsUtil.bufferToHex(ethereumjsUtil.keccak256(value));
      if (returnValue === SHA3_NULL_S) {
        return null;
      } else {
        return returnValue;
      }
    };
    sha32._Hash = ethereumjsUtil.keccak256;
    var sha3Raw = function(value) {
      value = sha32(value);
      if (value === null) {
        return SHA3_NULL_S;
      }
      return value;
    };
    var toNumber = function(value, bigIntOnOverflow = false) {
      return typeof value === "number" ? value : hexToNumber(toHex4(value), bigIntOnOverflow);
    };
    var BNwrapped = function(value) {
      if (typeof value == "string" && value.includes("0x")) {
        const [negative, hexValue] = value.toLocaleLowerCase().startsWith("-") ? ["-", value.slice(3)] : ["", value.slice(2)];
        return new BN3(negative + hexValue, 16);
      } else {
        return new BN3(value);
      }
    };
    Object.setPrototypeOf(BNwrapped, BN3);
    Object.setPrototypeOf(BNwrapped.prototype, BN3.prototype);
    module.exports = {
      BN: BNwrapped,
      isBN,
      isBigNumber,
      toBN: toBN2,
      isAddress,
      isBloom,
      isUserEthereumAddressInBloom,
      isContractAddressInBloom,
      isTopic,
      isTopicInBloom,
      isInBloom,
      checkAddressChecksum,
      utf8ToHex,
      hexToUtf8,
      hexToNumber,
      hexToNumberString,
      numberToHex,
      toHex: toHex4,
      hexToBytes,
      bytesToHex,
      isHex,
      isHexStrict,
      stripHexPrefix,
      leftPad,
      rightPad,
      toTwosComplement,
      sha3: sha32,
      sha3Raw,
      toNumber
    };
  }
});

// node_modules/web3-utils/lib/soliditySha3.js
var require_soliditySha3 = __commonJS({
  "node_modules/web3-utils/lib/soliditySha3.js"(exports, module) {
    var BN3 = require_bn3();
    var utils = require_utils5();
    var _elementaryName = function(name2) {
      if (name2.startsWith("int[")) {
        return "int256" + name2.slice(3);
      } else if (name2 === "int") {
        return "int256";
      } else if (name2.startsWith("uint[")) {
        return "uint256" + name2.slice(4);
      } else if (name2 === "uint") {
        return "uint256";
      } else if (name2.startsWith("fixed[")) {
        return "fixed128x128" + name2.slice(5);
      } else if (name2 === "fixed") {
        return "fixed128x128";
      } else if (name2.startsWith("ufixed[")) {
        return "ufixed128x128" + name2.slice(6);
      } else if (name2 === "ufixed") {
        return "ufixed128x128";
      }
      return name2;
    };
    var _parseTypeN = function(type) {
      var typesize = /^\D+(\d+).*$/.exec(type);
      return typesize ? parseInt(typesize[1], 10) : null;
    };
    var _parseTypeNArray = function(type) {
      var arraySize = /^\D+\d*\[(\d+)\]$/.exec(type);
      return arraySize ? parseInt(arraySize[1], 10) : null;
    };
    var _parseNumber = function(arg) {
      var type = typeof arg;
      if (type === "string") {
        if (utils.isHexStrict(arg)) {
          return new BN3(arg.replace(/0x/i, ""), 16);
        } else {
          return new BN3(arg, 10);
        }
      } else if (type === "number") {
        return new BN3(arg);
      } else if (utils.isBigNumber(arg)) {
        return new BN3(arg.toString(10));
      } else if (utils.isBN(arg)) {
        return arg;
      } else {
        throw new Error(arg + " is not a number");
      }
    };
    var _solidityPack = function(type, value, arraySize) {
      var size, num;
      type = _elementaryName(type);
      if (type === "bytes") {
        if (value.replace(/^0x/i, "").length % 2 !== 0) {
          throw new Error("Invalid bytes characters " + value.length);
        }
        return value;
      } else if (type === "string") {
        return utils.utf8ToHex(value);
      } else if (type === "bool") {
        return value ? "01" : "00";
      } else if (type.startsWith("address")) {
        if (arraySize) {
          size = 64;
        } else {
          size = 40;
        }
        if (!utils.isAddress(value)) {
          throw new Error(value + " is not a valid address, or the checksum is invalid.");
        }
        return utils.leftPad(value.toLowerCase(), size);
      }
      size = _parseTypeN(type);
      if (type.startsWith("bytes")) {
        if (!size) {
          throw new Error("bytes[] not yet supported in solidity");
        }
        if (arraySize) {
          size = 32;
        }
        if (size < 1 || size > 32 || size < value.replace(/^0x/i, "").length / 2) {
          throw new Error("Invalid bytes" + size + " for " + value);
        }
        return utils.rightPad(value, size * 2);
      } else if (type.startsWith("uint")) {
        if (size % 8 || size < 8 || size > 256) {
          throw new Error("Invalid uint" + size + " size");
        }
        num = _parseNumber(value);
        if (num.bitLength() > size) {
          throw new Error("Supplied uint exceeds width: " + size + " vs " + num.bitLength());
        }
        if (num.lt(new BN3(0))) {
          throw new Error("Supplied uint " + num.toString() + " is negative");
        }
        return size ? utils.leftPad(num.toString("hex"), size / 8 * 2) : num;
      } else if (type.startsWith("int")) {
        if (size % 8 || size < 8 || size > 256) {
          throw new Error("Invalid int" + size + " size");
        }
        num = _parseNumber(value);
        if (num.bitLength() > size) {
          throw new Error("Supplied int exceeds width: " + size + " vs " + num.bitLength());
        }
        if (num.lt(new BN3(0))) {
          return num.toTwos(size).toString("hex");
        } else {
          return size ? utils.leftPad(num.toString("hex"), size / 8 * 2) : num;
        }
      } else {
        throw new Error("Unsupported or invalid type: " + type);
      }
    };
    var _processSolidityEncodePackedArgs = function(arg) {
      if (Array.isArray(arg)) {
        throw new Error("Autodetection of array types is not supported.");
      }
      var type, value = "";
      var hexArg, arraySize;
      if (!!arg && typeof arg === "object" && (arg.hasOwnProperty("v") || arg.hasOwnProperty("t") || arg.hasOwnProperty("value") || arg.hasOwnProperty("type"))) {
        type = arg.hasOwnProperty("t") ? arg.t : arg.type;
        value = arg.hasOwnProperty("v") ? arg.v : arg.value;
      } else {
        type = utils.toHex(arg, true);
        value = utils.toHex(arg);
        if (!type.startsWith("int") && !type.startsWith("uint")) {
          type = "bytes";
        }
      }
      if ((type.startsWith("int") || type.startsWith("uint")) && typeof value === "string" && !/^(-)?0x/i.test(value)) {
        value = new BN3(value);
      }
      if (Array.isArray(value)) {
        arraySize = _parseTypeNArray(type);
        if (arraySize && value.length !== arraySize) {
          throw new Error(type + " is not matching the given array " + JSON.stringify(value));
        } else {
          arraySize = value.length;
        }
      }
      if (Array.isArray(value)) {
        hexArg = value.map(function(val) {
          return _solidityPack(type, val, arraySize).toString("hex").replace("0x", "");
        });
        return hexArg.join("");
      } else {
        hexArg = _solidityPack(type, value, arraySize);
        return hexArg.toString("hex").replace("0x", "");
      }
    };
    var soliditySha3 = function() {
      var args = Array.prototype.slice.call(arguments);
      var hexArgs = args.map(_processSolidityEncodePackedArgs);
      return utils.sha3("0x" + hexArgs.join(""));
    };
    var soliditySha3Raw = function() {
      return utils.sha3Raw("0x" + Array.prototype.slice.call(arguments).map(_processSolidityEncodePackedArgs).join(""));
    };
    var encodePacked = function() {
      var args = Array.prototype.slice.call(arguments);
      var hexArgs = args.map(_processSolidityEncodePackedArgs);
      return "0x" + hexArgs.join("").toLowerCase();
    };
    module.exports = {
      soliditySha3,
      soliditySha3Raw,
      encodePacked
    };
  }
});

// node_modules/web3-utils/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/web3-utils/lib/index.js"(exports, module) {
    var ethjsUnit = require_lib();
    var utils = require_utils5();
    var soliditySha3 = require_soliditySha3();
    var randombytes = require_browser();
    var BN3 = require_bn3();
    var _fireError = function(error, emitter, reject, callback, optionalData) {
      if (!!error && typeof error === "object" && !(error instanceof Error) && error.data) {
        if (!!error.data && typeof error.data === "object" || Array.isArray(error.data)) {
          error.data = JSON.stringify(error.data, null, 2);
        }
        error = error.message + "\n" + error.data;
      }
      if (typeof error === "string") {
        error = new Error(error);
      }
      if (typeof callback === "function") {
        callback(error, optionalData);
      }
      if (typeof reject === "function") {
        if (emitter && (typeof emitter.listeners === "function" && emitter.listeners("error").length) || typeof callback === "function") {
          emitter.catch(function() {
          });
        }
        setTimeout(function() {
          reject(error);
        }, 1);
      }
      if (emitter && typeof emitter.emit === "function") {
        setTimeout(function() {
          emitter.emit("error", error, optionalData);
          emitter.removeAllListeners();
        }, 1);
      }
      return emitter;
    };
    var _jsonInterfaceMethodToString = function(json) {
      if (!!json && typeof json === "object" && json.name && json.name.indexOf("(") !== -1) {
        return json.name;
      }
      return json.name + "(" + _flattenTypes(false, json.inputs).join(",") + ")";
    };
    var _flattenTypes = function(includeTuple, puts) {
      var types = [];
      puts.forEach(function(param) {
        if (typeof param.components === "object") {
          if (param.type.substring(0, 5) !== "tuple") {
            throw new Error("components found but type is not tuple; report on GitHub");
          }
          var suffix = "";
          var arrayBracket = param.type.indexOf("[");
          if (arrayBracket >= 0) {
            suffix = param.type.substring(arrayBracket);
          }
          var result = _flattenTypes(includeTuple, param.components);
          if (Array.isArray(result) && includeTuple) {
            types.push("tuple(" + result.join(",") + ")" + suffix);
          } else if (!includeTuple) {
            types.push("(" + result.join(",") + ")" + suffix);
          } else {
            types.push("(" + result + ")");
          }
        } else {
          types.push(param.type);
        }
      });
      return types;
    };
    var randomHex = function(size) {
      return "0x" + randombytes(size).toString("hex");
    };
    var hexToAscii = function(hex) {
      if (!utils.isHexStrict(hex))
        throw new Error("The parameter must be a valid HEX string.");
      var str = "";
      var i = 0, l = hex.length;
      if (hex.substring(0, 2) === "0x") {
        i = 2;
      }
      for (; i < l; i += 2) {
        var code = parseInt(hex.slice(i, i + 2), 16);
        str += String.fromCharCode(code);
      }
      return str;
    };
    var asciiToHex = function(str) {
      if (!str)
        return "0x00";
      var hex = "";
      for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? "0" + n : n;
      }
      return "0x" + hex;
    };
    var getUnitValue = function(unit) {
      unit = unit ? unit.toLowerCase() : "ether";
      if (!ethjsUnit.unitMap[unit]) {
        throw new Error('This unit "' + unit + `" doesn't exist, please use the one of the following units` + JSON.stringify(ethjsUnit.unitMap, null, 2));
      }
      return unit;
    };
    var fromWei = function(number, unit) {
      unit = getUnitValue(unit);
      if (!utils.isBN(number) && !(typeof number === "string")) {
        throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
      }
      return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);
    };
    var toWei = function(number, unit) {
      unit = getUnitValue(unit);
      if (!utils.isBN(number) && !(typeof number === "string")) {
        throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");
      }
      return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);
    };
    var toChecksumAddress = function(address) {
      if (typeof address === "undefined")
        return "";
      if (!/^(0x)?[0-9a-f]{40}$/i.test(address))
        throw new Error('Given address "' + address + '" is not a valid Ethereum address.');
      address = address.toLowerCase().replace(/^0x/i, "");
      var addressHash = utils.sha3(address).replace(/^0x/i, "");
      var checksumAddress = "0x";
      for (var i = 0; i < address.length; i++) {
        if (parseInt(addressHash[i], 16) > 7) {
          checksumAddress += address[i].toUpperCase();
        } else {
          checksumAddress += address[i];
        }
      }
      return checksumAddress;
    };
    var compareBlockNumbers = function(a, b) {
      if (a === b) {
        return 0;
      } else if (("genesis" === a || "earliest" === a || 0 === a) && ("genesis" === b || "earliest" === b || 0 === b)) {
        return 0;
      } else if ("genesis" === a || "earliest" === a || a === 0) {
        return -1;
      } else if ("genesis" === b || "earliest" === b || b === 0) {
        return 1;
      } else if (a === "latest" || a === "finalized") {
        if (b === "pending") {
          return -1;
        } else {
          return 1;
        }
      } else if (b === "latest" || b === "finalized") {
        if (a === "pending") {
          return 1;
        } else {
          return -1;
        }
      } else if (a === "pending") {
        return 1;
      } else if (b === "pending") {
        return -1;
      } else if (a === "safe" || b === "safe") {
        return void 0;
      } else {
        let bnA = new BN3(a);
        let bnB = new BN3(b);
        if (bnA.lt(bnB)) {
          return -1;
        } else if (bnA.eq(bnB)) {
          return 0;
        } else {
          return 1;
        }
      }
    };
    module.exports = {
      _fireError,
      _jsonInterfaceMethodToString,
      _flattenTypes,
      // extractDisplayName: extractDisplayName,
      // extractTypeName: extractTypeName,
      randomHex,
      BN: utils.BN,
      isBN: utils.isBN,
      isBigNumber: utils.isBigNumber,
      isHex: utils.isHex,
      isHexStrict: utils.isHexStrict,
      sha3: utils.sha3,
      sha3Raw: utils.sha3Raw,
      keccak256: utils.sha3,
      soliditySha3: soliditySha3.soliditySha3,
      soliditySha3Raw: soliditySha3.soliditySha3Raw,
      encodePacked: soliditySha3.encodePacked,
      isAddress: utils.isAddress,
      checkAddressChecksum: utils.checkAddressChecksum,
      toChecksumAddress,
      toHex: utils.toHex,
      toBN: utils.toBN,
      bytesToHex: utils.bytesToHex,
      hexToBytes: utils.hexToBytes,
      hexToNumberString: utils.hexToNumberString,
      hexToNumber: utils.hexToNumber,
      toDecimal: utils.hexToNumber,
      numberToHex: utils.numberToHex,
      fromDecimal: utils.numberToHex,
      hexToUtf8: utils.hexToUtf8,
      hexToString: utils.hexToUtf8,
      toUtf8: utils.hexToUtf8,
      stripHexPrefix: utils.stripHexPrefix,
      utf8ToHex: utils.utf8ToHex,
      stringToHex: utils.utf8ToHex,
      fromUtf8: utils.utf8ToHex,
      hexToAscii,
      toAscii: hexToAscii,
      asciiToHex,
      fromAscii: asciiToHex,
      unitMap: ethjsUnit.unitMap,
      toWei,
      fromWei,
      padLeft: utils.leftPad,
      leftPad: utils.leftPad,
      padRight: utils.rightPad,
      rightPad: utils.rightPad,
      toTwosComplement: utils.toTwosComplement,
      isBloom: utils.isBloom,
      isUserEthereumAddressInBloom: utils.isUserEthereumAddressInBloom,
      isContractAddressInBloom: utils.isContractAddressInBloom,
      isTopic: utils.isTopic,
      isTopicInBloom: utils.isTopicInBloom,
      isInBloom: utils.isInBloom,
      compareBlockNumbers,
      toNumber: utils.toNumber
    };
  }
});

// node_modules/web3-eth-iban/node_modules/bn.js/lib/bn.js
var require_bn7 = __commonJS({
  "node_modules/web3-eth-iban/node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base2, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer2().Buffer;
        }
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base2 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base2, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert2(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul3) {
        var r2 = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul3;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert2(c >= 0 && b < mul3, "Invalid character");
          r2 += b;
        }
        return r2;
      }
      BN3.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base2);
          for (i = 0; i < mod; i++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN3.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN3.prototype.clone = function clone() {
        var r2 = new BN3(null);
        this.copy(r2);
        return r2;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN3.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect4;
        } catch (e) {
          BN3.prototype.inspect = inspect4;
        }
      } else {
        BN3.prototype.inspect = inspect4;
      }
      function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base2, padding2) {
        base2 = base2 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modrn(groupBase).toString(base2);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN3.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN3.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN3.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26)
            break;
        }
        return r2;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN3.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN3(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul3;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN3(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN3.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN3.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN3(1);
        var B = new BN3(0);
        var C = new BN3(0);
        var D = new BN3(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN3.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN3(1);
        var x2 = new BN3(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p) {
        this.name = name2;
        this.p = new BN3(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN3._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg3(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add3(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul3(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN3(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert2(i < m);
          var b = this.pow(c, new BN3(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a, b) {
        if (a.isZero() || b.isZero())
          return new BN3(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/web3-eth-iban/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/web3-eth-iban/lib/index.js"(exports, module) {
    "use strict";
    var utils = require_lib3();
    var BigNumber2 = require_bn7();
    var leftPad = function(string, bytes) {
      let result = string;
      while (result.length < bytes * 2) {
        result = "0" + result;
      }
      return result;
    };
    var iso13616Prepare = function(iban) {
      const A = "A".charCodeAt(0);
      const Z = "Z".charCodeAt(0);
      iban = iban.toUpperCase();
      iban = iban.slice(4) + iban.slice(0, 4);
      return iban.split("").map(function(n) {
        const code = n.charCodeAt(0);
        if (code >= A && code <= Z) {
          return code - A + 10;
        } else {
          return n;
        }
      }).join("");
    };
    var mod9710 = function(iban) {
      let remainder = iban;
      let block;
      while (remainder.length > 2) {
        block = remainder.slice(0, 9);
        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);
      }
      return parseInt(remainder, 10) % 97;
    };
    var Iban = class _Iban {
      constructor(iban) {
        this._iban = iban;
      }
      /**
       * This method should be used to create an ethereum address from a direct iban address
       *
       * @method toAddress
       * @param {String} iban address
       * @return {String} the ethereum address
       */
      static toAddress(ib) {
        ib = new _Iban(ib);
        if (!ib.isDirect()) {
          throw new Error("IBAN is indirect and can't be converted");
        }
        return ib.toAddress();
      }
      /**
       * This method should be used to create iban address from an ethereum address
       *
       * @method toIban
       * @param {String} address
       * @return {String} the IBAN address
       */
      static toIban(address) {
        return _Iban.fromAddress(address).toString();
      }
      /**
       * This method should be used to create iban object from an ethereum address
       *
       * @method fromAddress
       * @param {String} address
       * @return {Iban} the IBAN object
       */
      static fromAddress(address) {
        if (!utils.isAddress(address)) {
          throw new Error("Provided address is not a valid address: " + address);
        }
        address = address.replace("0x", "").replace("0X", "");
        const asBn = new BigNumber2(address, 16);
        const base36 = asBn.toString(36);
        const padded = leftPad(base36, 15);
        return _Iban.fromBban(padded.toUpperCase());
      }
      /**
       * Convert the passed BBAN to an IBAN for this country specification.
       * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
       * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
       *
       * @method fromBban
       * @param {String} bban the BBAN to convert to IBAN
       * @returns {Iban} the IBAN object
       */
      static fromBban(bban) {
        const countryCode = "XE";
        const remainder = mod9710(iso13616Prepare(countryCode + "00" + bban));
        const checkDigit = ("0" + (98 - remainder)).slice(-2);
        return new _Iban(countryCode + checkDigit + bban);
      }
      /**
       * Should be used to create IBAN object for given institution and identifier
       *
       * @method createIndirect
       * @param {Object} options, required options are "institution" and "identifier"
       * @return {Iban} the IBAN object
       */
      static createIndirect(options) {
        return _Iban.fromBban("ETH" + options.institution + options.identifier);
      }
      /**
       * This method should be used to check if given string is valid iban object
       *
       * @method isValid
       * @param {String} iban string
       * @return {Boolean} true if it is valid IBAN
       */
      static isValid(iban) {
        const i = new _Iban(iban);
        return i.isValid();
      }
      /**
       * Should be called to check if iban is correct
       *
       * @method isValid
       * @returns {Boolean} true if it is, otherwise false
       */
      isValid() {
        return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && mod9710(iso13616Prepare(this._iban)) === 1;
      }
      /**
       * Should be called to check if iban number is direct
       *
       * @method isDirect
       * @returns {Boolean} true if it is, otherwise false
       */
      isDirect() {
        return this._iban.length === 34 || this._iban.length === 35;
      }
      /**
       * Should be called to check if iban number if indirect
       *
       * @method isIndirect
       * @returns {Boolean} true if it is, otherwise false
       */
      isIndirect() {
        return this._iban.length === 20;
      }
      /**
       * Should be called to get iban checksum
       * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)
       *
       * @method checksum
       * @returns {String} checksum
       */
      checksum() {
        return this._iban.slice(2, 4);
      }
      /**
       * Should be called to get institution identifier
       * eg. XREG
       *
       * @method institution
       * @returns {String} institution identifier
       */
      institution() {
        return this.isIndirect() ? this._iban.slice(7, 11) : "";
      }
      /**
       * Should be called to get client identifier within institution
       * eg. GAVOFYORK
       *
       * @method client
       * @returns {String} client identifier
       */
      client() {
        return this.isIndirect() ? this._iban.slice(11) : "";
      }
      /**
       * Should be called to get client direct address
       *
       * @method toAddress
       * @returns {String} ethereum address
       */
      toAddress() {
        if (this.isDirect()) {
          const base36 = this._iban.slice(4);
          const asBn = new BigNumber2(base36, 36);
          return utils.toChecksumAddress(asBn.toString(16, 20));
        }
        return "";
      }
      toString() {
        return this._iban;
      }
    };
    module.exports = Iban;
  }
});

// node_modules/web3-core-helpers/lib/formatters.js
var require_formatters = __commonJS({
  "node_modules/web3-core-helpers/lib/formatters.js"(exports, module) {
    "use strict";
    var utils = require_lib3();
    var Iban = require_lib4();
    var inputStorageKeysFormatter = function(keys) {
      return keys.map(utils.numberToHex);
    };
    var outputProofFormatter = function(proof) {
      proof.address = utils.toChecksumAddress(proof.address);
      proof.nonce = utils.hexToNumberString(proof.nonce);
      proof.balance = utils.hexToNumberString(proof.balance);
      return proof;
    };
    var outputBigNumberFormatter = function(number) {
      return utils.toBN(number).toString(10);
    };
    var isPredefinedBlockNumber = function(blockNumber) {
      return ["latest", "pending", "earliest", "finalized", "safe"].includes(blockNumber);
    };
    var inputDefaultBlockNumberFormatter = function(blockNumber) {
      if (this && (blockNumber === void 0 || blockNumber === null)) {
        return inputBlockNumberFormatter(this.defaultBlock);
      }
      return inputBlockNumberFormatter(blockNumber);
    };
    var inputBlockNumberFormatter = function(blockNumber) {
      if (blockNumber === void 0) {
        return void 0;
      }
      if (isPredefinedBlockNumber(blockNumber)) {
        return blockNumber;
      }
      if (blockNumber === "genesis") {
        return "0x0";
      }
      return utils.isHexStrict(blockNumber) ? typeof blockNumber === "string" ? blockNumber.toLowerCase() : blockNumber : utils.numberToHex(blockNumber);
    };
    var _txInputFormatter = function(options) {
      if (options.to) {
        options.to = inputAddressFormatter(options.to);
      }
      if (options.data && options.input) {
        throw new Error(`You can't have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.`);
      }
      if (!options.data && options.input) {
        options.data = options.input;
        delete options.input;
      }
      if (options.data && !options.data.startsWith("0x")) {
        options.data = "0x" + options.data;
      }
      if (options.data && !utils.isHex(options.data)) {
        throw new Error("The data field must be HEX encoded data.");
      }
      if (options.gas || options.gasLimit) {
        options.gas = options.gas || options.gasLimit;
      }
      if (options.maxPriorityFeePerGas || options.maxFeePerGas) {
        delete options.gasPrice;
      }
      ["gasPrice", "gas", "value", "maxPriorityFeePerGas", "maxFeePerGas", "nonce", "type"].filter(function(key2) {
        return options[key2] !== void 0;
      }).forEach(function(key2) {
        options[key2] = utils.numberToHex(options[key2]);
      });
      return options;
    };
    var inputCallFormatter = function(options) {
      options = _txInputFormatter(options);
      var from = options.from || (this ? this.defaultAccount : null);
      if (from) {
        options.from = inputAddressFormatter(from);
      }
      return options;
    };
    var inputTransactionFormatter = function(options) {
      options = _txInputFormatter(options);
      if (!(typeof options.from === "number") && !(!!options.from && typeof options.from === "object")) {
        options.from = options.from || (this ? this.defaultAccount : null);
        if (!options.from && !(typeof options.from === "number")) {
          throw new Error('The send transactions "from" field must be defined!');
        }
        options.from = inputAddressFormatter(options.from);
      }
      return options;
    };
    var inputSignFormatter = function(data) {
      return utils.isHexStrict(data) ? data : utils.utf8ToHex(data);
    };
    var outputTransactionFormatter = function(tx, hexFormat) {
      if (!hexFormat) {
        if (tx.blockNumber !== null)
          tx.blockNumber = utils.hexToNumber(tx.blockNumber);
        if (tx.transactionIndex !== null)
          tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);
        tx.nonce = utils.hexToNumber(tx.nonce);
        tx.gas = utils.hexToNumber(tx.gas);
        if (tx.type)
          tx.type = utils.hexToNumber(tx.type);
      }
      if (tx.gasPrice)
        tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);
      if (tx.maxFeePerGas)
        tx.maxFeePerGas = outputBigNumberFormatter(tx.maxFeePerGas);
      if (tx.maxPriorityFeePerGas)
        tx.maxPriorityFeePerGas = outputBigNumberFormatter(tx.maxPriorityFeePerGas);
      tx.value = outputBigNumberFormatter(tx.value);
      if (tx.to && utils.isAddress(tx.to)) {
        tx.to = utils.toChecksumAddress(tx.to);
      } else {
        tx.to = null;
      }
      if (tx.from) {
        tx.from = utils.toChecksumAddress(tx.from);
      }
      return tx;
    };
    var outputTransactionReceiptFormatter = function(receipt) {
      if (typeof receipt !== "object") {
        throw new Error("Received receipt is invalid: " + receipt);
      }
      if (!this.hexFormat) {
        if (receipt.blockNumber !== null)
          receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);
        if (receipt.transactionIndex !== null)
          receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);
        receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);
        receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);
        if (receipt.effectiveGasPrice) {
          receipt.effectiveGasPrice = utils.hexToNumber(receipt.effectiveGasPrice);
        }
      }
      if (Array.isArray(receipt.logs)) {
        receipt.logs = receipt.logs.map(outputLogFormatter);
      }
      if (receipt.contractAddress) {
        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);
      }
      if (typeof receipt.status !== "undefined" && receipt.status !== null) {
        receipt.status = Boolean(parseInt(receipt.status));
      }
      return receipt;
    };
    var outputBlockFormatter = function(block, hexFormat) {
      if (!hexFormat) {
        block.gasLimit = utils.hexToNumber(block.gasLimit);
        block.gasUsed = utils.hexToNumber(block.gasUsed);
        block.size = utils.hexToNumber(block.size);
        block.timestamp = utils.hexToNumber(block.timestamp);
        if (block.number !== null)
          block.number = utils.hexToNumber(block.number);
      }
      if (block.difficulty)
        block.difficulty = outputBigNumberFormatter(block.difficulty);
      if (block.totalDifficulty)
        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);
      if (Array.isArray(block.transactions)) {
        block.transactions.forEach(function(item) {
          if (!(typeof item === "string"))
            return outputTransactionFormatter(item, hexFormat);
        });
      }
      if (block.miner)
        block.miner = utils.toChecksumAddress(block.miner);
      if (block.baseFeePerGas)
        block.baseFeePerGas = utils.hexToNumber(block.baseFeePerGas);
      return block;
    };
    var inputLogFormatter = function(options) {
      var toTopic = function(value) {
        if (value === null || typeof value === "undefined")
          return null;
        value = String(value);
        if (value.indexOf("0x") === 0)
          return value;
        else
          return utils.fromUtf8(value);
      };
      if (options === void 0)
        options = {};
      if (options.fromBlock === void 0)
        options = { ...options, fromBlock: "latest" };
      if (options.fromBlock || options.fromBlock === 0)
        options.fromBlock = inputBlockNumberFormatter(options.fromBlock);
      if (options.toBlock || options.toBlock === 0)
        options.toBlock = inputBlockNumberFormatter(options.toBlock);
      options.topics = options.topics || [];
      options.topics = options.topics.map(function(topic) {
        return Array.isArray(topic) ? topic.map(toTopic) : toTopic(topic);
      });
      toTopic = null;
      if (options.address) {
        options.address = Array.isArray(options.address) ? options.address.map(function(addr) {
          return inputAddressFormatter(addr);
        }) : inputAddressFormatter(options.address);
      }
      return options;
    };
    var outputLogFormatter = function(log) {
      if (typeof log.blockHash === "string" && typeof log.transactionHash === "string" && typeof log.logIndex === "string") {
        var shaId = utils.sha3(log.blockHash.replace("0x", "") + log.transactionHash.replace("0x", "") + log.logIndex.replace("0x", ""));
        log.id = "log_" + shaId.replace("0x", "").slice(0, 8);
      } else if (!log.id) {
        log.id = null;
      }
      if (log.blockNumber !== null)
        log.blockNumber = utils.hexToNumber(log.blockNumber);
      if (log.transactionIndex !== null)
        log.transactionIndex = utils.hexToNumber(log.transactionIndex);
      if (log.logIndex !== null)
        log.logIndex = utils.hexToNumber(log.logIndex);
      if (log.address) {
        log.address = utils.toChecksumAddress(log.address);
      }
      return log;
    };
    var inputPostFormatter = function(post) {
      if (post.ttl)
        post.ttl = utils.numberToHex(post.ttl);
      if (post.workToProve)
        post.workToProve = utils.numberToHex(post.workToProve);
      if (post.priority)
        post.priority = utils.numberToHex(post.priority);
      if (!Array.isArray(post.topics)) {
        post.topics = post.topics ? [post.topics] : [];
      }
      post.topics = post.topics.map(function(topic) {
        return topic.indexOf("0x") === 0 ? topic : utils.fromUtf8(topic);
      });
      return post;
    };
    var outputPostFormatter = function(post) {
      post.expiry = utils.hexToNumber(post.expiry);
      post.sent = utils.hexToNumber(post.sent);
      post.ttl = utils.hexToNumber(post.ttl);
      post.workProved = utils.hexToNumber(post.workProved);
      if (!post.topics) {
        post.topics = [];
      }
      post.topics = post.topics.map(function(topic) {
        return utils.toUtf8(topic);
      });
      return post;
    };
    var inputAddressFormatter = function(address) {
      var iban = new Iban(address);
      if (iban.isValid() && iban.isDirect()) {
        return iban.toAddress().toLowerCase();
      } else if (utils.isAddress(address)) {
        return "0x" + address.toLowerCase().replace("0x", "");
      }
      throw new Error(`Provided address ${address} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`);
    };
    var outputSyncingFormatter = function(result) {
      result.startingBlock = utils.hexToNumber(result.startingBlock);
      result.currentBlock = utils.hexToNumber(result.currentBlock);
      result.highestBlock = utils.hexToNumber(result.highestBlock);
      if (result.knownStates) {
        result.knownStates = utils.hexToNumber(result.knownStates);
        result.pulledStates = utils.hexToNumber(result.pulledStates);
      }
      return result;
    };
    module.exports = {
      inputDefaultBlockNumberFormatter,
      inputBlockNumberFormatter,
      inputCallFormatter,
      inputTransactionFormatter,
      inputAddressFormatter,
      inputPostFormatter,
      inputLogFormatter,
      inputSignFormatter,
      inputStorageKeysFormatter,
      outputProofFormatter,
      outputBigNumberFormatter,
      outputTransactionFormatter,
      outputTransactionReceiptFormatter,
      outputBlockFormatter,
      outputLogFormatter,
      outputPostFormatter,
      outputSyncingFormatter
    };
  }
});

// node_modules/web3-core-helpers/lib/index.js
var require_lib5 = __commonJS({
  "node_modules/web3-core-helpers/lib/index.js"(exports, module) {
    "use strict";
    var errors = require_errors();
    var formatters = require_formatters();
    module.exports = {
      errors,
      formatters
    };
  }
});

// node_modules/web3-core-subscriptions/node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({
  "node_modules/web3-core-subscriptions/node_modules/eventemitter3/index.js"(exports, module) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var prefix = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__)
        prefix = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
      if (!emitter._events[evt])
        emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn)
        emitter._events[evt].push(listener);
      else
        emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0)
        emitter._events = new Events();
      else
        delete emitter._events[evt];
    }
    function EventEmitter2() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      var names = [], events, name2;
      if (this._eventsCount === 0)
        return names;
      for (name2 in events = this._events) {
        if (has.call(events, name2))
          names.push(prefix ? name2.slice(1) : name2);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter2.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event, handlers = this._events[evt];
      if (!handlers)
        return [];
      if (handlers.fn)
        return [handlers.fn];
      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter2.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event, listeners = this._events[evt];
      if (!listeners)
        return 0;
      if (listeners.fn)
        return 1;
      return listeners.length;
    };
    EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once)
          this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once)
            this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args)
                for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter2.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter2.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
        if (events.length)
          this._events[evt] = events.length === 1 ? events[0] : events;
        else
          clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt])
          clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prefixed = prefix;
    EventEmitter2.EventEmitter = EventEmitter2;
    if ("undefined" !== typeof module) {
      module.exports = EventEmitter2;
    }
  }
});

// node_modules/web3-core-subscriptions/lib/subscription.js
var require_subscription = __commonJS({
  "node_modules/web3-core-subscriptions/lib/subscription.js"(exports, module) {
    "use strict";
    var errors = require_lib5().errors;
    var EventEmitter2 = require_eventemitter3();
    var formatters = require_lib5().formatters;
    function identity2(value) {
      return value;
    }
    function Subscription(options) {
      EventEmitter2.call(this);
      this.id = null;
      this.callback = identity2;
      this.arguments = null;
      this.lastBlock = null;
      this.options = {
        subscription: options.subscription,
        type: options.type,
        requestManager: options.requestManager
      };
    }
    Subscription.prototype = Object.create(EventEmitter2.prototype);
    Subscription.prototype.constructor = Subscription;
    Subscription.prototype._extractCallback = function(args) {
      if (typeof args[args.length - 1] === "function") {
        return args.pop();
      }
    };
    Subscription.prototype._validateArgs = function(args) {
      var subscription2 = this.options.subscription;
      if (!subscription2)
        subscription2 = {};
      if (!subscription2.params)
        subscription2.params = 0;
      if (args.length !== subscription2.params) {
        throw errors.InvalidNumberOfParams(args.length, subscription2.params, subscription2.subscriptionName);
      }
    };
    Subscription.prototype._formatInput = function(args) {
      var subscription2 = this.options.subscription;
      if (!subscription2) {
        return args;
      }
      if (!subscription2.inputFormatter) {
        return args;
      }
      var formattedArgs = subscription2.inputFormatter.map(function(formatter, index) {
        return formatter ? formatter(args[index]) : args[index];
      });
      return formattedArgs;
    };
    Subscription.prototype._formatOutput = function(result) {
      var subscription2 = this.options.subscription;
      return subscription2 && subscription2.outputFormatter && result ? subscription2.outputFormatter(result) : result;
    };
    Subscription.prototype._toPayload = function(args) {
      var params = [];
      this.callback = this._extractCallback(args) || identity2;
      if (!this.subscriptionMethod) {
        this.subscriptionMethod = args.shift();
        if (this.options.subscription.subscriptionName) {
          this.subscriptionMethod = this.options.subscription.subscriptionName;
        }
      }
      if (!this.arguments) {
        this.arguments = this._formatInput(args);
        this._validateArgs(this.arguments);
        args = [];
      }
      params.push(this.subscriptionMethod);
      params = params.concat(this.arguments);
      if (args.length) {
        throw new Error("Only a callback is allowed as parameter on an already instantiated subscription.");
      }
      return {
        method: this.options.type + "_subscribe",
        params
      };
    };
    Subscription.prototype.unsubscribe = function(callback) {
      this.options.requestManager.removeSubscription(this.id, callback);
      this.id = null;
      this.lastBlock = null;
      this.removeAllListeners();
    };
    Subscription.prototype.subscribe = function() {
      var _this = this;
      var args = Array.prototype.slice.call(arguments);
      var payload = this._toPayload(args);
      if (!payload) {
        return this;
      }
      if (!this.options.requestManager.provider) {
        setTimeout(function() {
          var err1 = new Error("No provider set.");
          _this.callback(err1, null, _this);
          _this.emit("error", err1);
        }, 0);
        return this;
      }
      if (!this.options.requestManager.provider.on) {
        setTimeout(function() {
          var err2 = new Error("The current provider doesn't support subscriptions: " + _this.options.requestManager.provider.constructor.name);
          _this.callback(err2, null, _this);
          _this.emit("error", err2);
        }, 0);
        return this;
      }
      if (this.lastBlock && !!this.options.params && typeof this.options.params === "object") {
        payload.params[1] = this.options.params;
        payload.params[1].fromBlock = formatters.inputBlockNumberFormatter(this.lastBlock + 1);
      }
      if (this.id) {
        this.unsubscribe();
      }
      this.options.params = payload.params[1];
      if (payload.params[0] === "logs" && !!payload.params[1] && typeof payload.params[1] === "object" && payload.params[1].hasOwnProperty("fromBlock") && isFinite(payload.params[1].fromBlock)) {
        var blockParams = Object.assign({}, payload.params[1]);
        this.options.requestManager.send({
          method: "eth_getLogs",
          params: [blockParams]
        }, function(err, logs) {
          if (!err) {
            logs.forEach(function(log) {
              var output = _this._formatOutput(log);
              _this.callback(null, output, _this);
              _this.emit("data", output);
            });
          } else {
            setTimeout(function() {
              _this.callback(err, null, _this);
              _this.emit("error", err);
            }, 0);
          }
        });
      }
      if (typeof payload.params[1] === "object")
        delete payload.params[1].fromBlock;
      this.options.requestManager.send(payload, function(err, result) {
        if (!err && result) {
          _this.id = result;
          _this.method = payload.params[0];
          _this.options.requestManager.addSubscription(_this, function(error, result2) {
            if (!error) {
              if (!Array.isArray(result2)) {
                result2 = [result2];
              }
              result2.forEach(function(resultItem) {
                var output = _this._formatOutput(resultItem);
                _this.lastBlock = !!output && typeof output === "object" ? output.blockNumber : null;
                if (typeof _this.options.subscription.subscriptionHandler === "function") {
                  return _this.options.subscription.subscriptionHandler.call(_this, output);
                } else {
                  _this.emit("data", output);
                }
                _this.callback(null, output, _this);
              });
            } else {
              _this.callback(error, false, _this);
              _this.emit("error", error);
            }
          });
          _this.emit("connected", result);
        } else {
          setTimeout(function() {
            _this.callback(err, false, _this);
            _this.emit("error", err);
          }, 0);
        }
      });
      return this;
    };
    Subscription.prototype.resubscribe = function() {
      this.options.requestManager.removeSubscription(this.id);
      this.id = null;
      this.subscribe(this.callback);
    };
    module.exports = Subscription;
  }
});

// node_modules/web3-core-subscriptions/lib/index.js
var require_lib6 = __commonJS({
  "node_modules/web3-core-subscriptions/lib/index.js"(exports, module) {
    "use strict";
    var Subscription = require_subscription();
    var Subscriptions = function Subscriptions2(options) {
      this.name = options.name;
      this.type = options.type;
      this.subscriptions = options.subscriptions || {};
      this.requestManager = null;
    };
    Subscriptions.prototype.setRequestManager = function(rm) {
      this.requestManager = rm;
    };
    Subscriptions.prototype.attachToObject = function(obj) {
      var func = this.buildCall();
      var name2 = this.name.split(".");
      if (name2.length > 1) {
        obj[name2[0]] = obj[name2[0]] || {};
        obj[name2[0]][name2[1]] = func;
      } else {
        obj[name2[0]] = func;
      }
    };
    Subscriptions.prototype.buildCall = function() {
      var _this = this;
      return function() {
        if (!_this.subscriptions[arguments[0]]) {
          console.warn("Subscription " + JSON.stringify(arguments[0]) + " doesn't exist. Subscribing anyway.");
        }
        var subscription2 = new Subscription({
          subscription: _this.subscriptions[arguments[0]] || {},
          requestManager: _this.requestManager,
          type: _this.type
        });
        return subscription2.subscribe.apply(subscription2, arguments);
      };
    };
    module.exports = {
      subscriptions: Subscriptions,
      subscription: Subscription
    };
  }
});

// node_modules/@ethersproject/bignumber/node_modules/bn.js/lib/bn.js
var require_bn8 = __commonJS({
  "node_modules/@ethersproject/bignumber/node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base2, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer2().Buffer;
        }
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base2 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base2, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert2(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul3) {
        var r2 = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul3;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert2(c >= 0 && b < mul3, "Invalid character");
          r2 += b;
        }
        return r2;
      }
      BN3.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base2);
          for (i = 0; i < mod; i++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN3.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN3.prototype.clone = function clone() {
        var r2 = new BN3(null);
        this.copy(r2);
        return r2;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN3.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect4;
        } catch (e) {
          BN3.prototype.inspect = inspect4;
        }
      } else {
        BN3.prototype.inspect = inspect4;
      }
      function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base2, padding2) {
        base2 = base2 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modrn(groupBase).toString(base2);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN3.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN3.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN3.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26)
            break;
        }
        return r2;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN3.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN3(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul3;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN3(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN3.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN3.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN3(1);
        var B = new BN3(0);
        var C = new BN3(0);
        var D = new BN3(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN3.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN3(1);
        var x2 = new BN3(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p) {
        this.name = name2;
        this.p = new BN3(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN3._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg3(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add3(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul3(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN3(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert2(i < m);
          var b = this.pow(c, new BN3(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a, b) {
        if (a.isZero() || b.isZero())
          return new BN3(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/@ethersproject/logger/lib.esm/_version.js
var version;
var init_version = __esm({
  "node_modules/@ethersproject/logger/lib.esm/_version.js"() {
    version = "logger/5.7.0";
  }
});

// node_modules/@ethersproject/logger/lib.esm/index.js
function _checkNormalize() {
  try {
    const missing = [];
    ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad normalize");
        }
        ;
      } catch (error) {
        missing.push(form);
      }
    });
    if (missing.length) {
      throw new Error("missing " + missing.join(", "));
    }
    if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
      throw new Error("broken implementation");
    }
  } catch (error) {
    return error.message;
  }
  return null;
}
var _permanentCensorErrors, _censorErrors, LogLevels, _logLevel, _globalLogger, _normalizeError, LogLevel, ErrorCode, HEX, Logger;
var init_lib = __esm({
  "node_modules/@ethersproject/logger/lib.esm/index.js"() {
    "use strict";
    init_version();
    _permanentCensorErrors = false;
    _censorErrors = false;
    LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
    _logLevel = LogLevels["default"];
    _globalLogger = null;
    _normalizeError = _checkNormalize();
    (function(LogLevel2) {
      LogLevel2["DEBUG"] = "DEBUG";
      LogLevel2["INFO"] = "INFO";
      LogLevel2["WARNING"] = "WARNING";
      LogLevel2["ERROR"] = "ERROR";
      LogLevel2["OFF"] = "OFF";
    })(LogLevel || (LogLevel = {}));
    (function(ErrorCode2) {
      ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
      ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
      ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
      ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
      ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
      ErrorCode2["TIMEOUT"] = "TIMEOUT";
      ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
      ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
      ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
      ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
      ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
      ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
      ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
      ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
      ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
      ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
      ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
      ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      ErrorCode2["ACTION_REJECTED"] = "ACTION_REJECTED";
    })(ErrorCode || (ErrorCode = {}));
    HEX = "0123456789abcdef";
    Logger = class _Logger {
      constructor(version12) {
        Object.defineProperty(this, "version", {
          enumerable: true,
          value: version12,
          writable: false
        });
      }
      _log(logLevel, args) {
        const level = logLevel.toLowerCase();
        if (LogLevels[level] == null) {
          this.throwArgumentError("invalid log level name", "logLevel", logLevel);
        }
        if (_logLevel > LogLevels[level]) {
          return;
        }
        console.log.apply(console, args);
      }
      debug(...args) {
        this._log(_Logger.levels.DEBUG, args);
      }
      info(...args) {
        this._log(_Logger.levels.INFO, args);
      }
      warn(...args) {
        this._log(_Logger.levels.WARNING, args);
      }
      makeError(message, code, params) {
        if (_censorErrors) {
          return this.makeError("censored error", code, {});
        }
        if (!code) {
          code = _Logger.errors.UNKNOWN_ERROR;
        }
        if (!params) {
          params = {};
        }
        const messageDetails = [];
        Object.keys(params).forEach((key2) => {
          const value = params[key2];
          try {
            if (value instanceof Uint8Array) {
              let hex = "";
              for (let i = 0; i < value.length; i++) {
                hex += HEX[value[i] >> 4];
                hex += HEX[value[i] & 15];
              }
              messageDetails.push(key2 + "=Uint8Array(0x" + hex + ")");
            } else {
              messageDetails.push(key2 + "=" + JSON.stringify(value));
            }
          } catch (error2) {
            messageDetails.push(key2 + "=" + JSON.stringify(params[key2].toString()));
          }
        });
        messageDetails.push(`code=${code}`);
        messageDetails.push(`version=${this.version}`);
        const reason = message;
        let url = "";
        switch (code) {
          case ErrorCode.NUMERIC_FAULT: {
            url = "NUMERIC_FAULT";
            const fault = message;
            switch (fault) {
              case "overflow":
              case "underflow":
              case "division-by-zero":
                url += "-" + fault;
                break;
              case "negative-power":
              case "negative-width":
                url += "-unsupported";
                break;
              case "unbound-bitwise-result":
                url += "-unbound-result";
                break;
            }
            break;
          }
          case ErrorCode.CALL_EXCEPTION:
          case ErrorCode.INSUFFICIENT_FUNDS:
          case ErrorCode.MISSING_NEW:
          case ErrorCode.NONCE_EXPIRED:
          case ErrorCode.REPLACEMENT_UNDERPRICED:
          case ErrorCode.TRANSACTION_REPLACED:
          case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
            url = code;
            break;
        }
        if (url) {
          message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
        }
        if (messageDetails.length) {
          message += " (" + messageDetails.join(", ") + ")";
        }
        const error = new Error(message);
        error.reason = reason;
        error.code = code;
        Object.keys(params).forEach(function(key2) {
          error[key2] = params[key2];
        });
        return error;
      }
      throwError(message, code, params) {
        throw this.makeError(message, code, params);
      }
      throwArgumentError(message, name2, value) {
        return this.throwError(message, _Logger.errors.INVALID_ARGUMENT, {
          argument: name2,
          value
        });
      }
      assert(condition, message, code, params) {
        if (!!condition) {
          return;
        }
        this.throwError(message, code, params);
      }
      assertArgument(condition, message, name2, value) {
        if (!!condition) {
          return;
        }
        this.throwArgumentError(message, name2, value);
      }
      checkNormalize(message) {
        if (message == null) {
          message = "platform missing String.prototype.normalize";
        }
        if (_normalizeError) {
          this.throwError("platform missing String.prototype.normalize", _Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "String.prototype.normalize",
            form: _normalizeError
          });
        }
      }
      checkSafeUint53(value, message) {
        if (typeof value !== "number") {
          return;
        }
        if (message == null) {
          message = "value not safe";
        }
        if (value < 0 || value >= 9007199254740991) {
          this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
            operation: "checkSafeInteger",
            fault: "out-of-safe-range",
            value
          });
        }
        if (value % 1) {
          this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
            operation: "checkSafeInteger",
            fault: "non-integer",
            value
          });
        }
      }
      checkArgumentCount(count, expectedCount, message) {
        if (message) {
          message = ": " + message;
        } else {
          message = "";
        }
        if (count < expectedCount) {
          this.throwError("missing argument" + message, _Logger.errors.MISSING_ARGUMENT, {
            count,
            expectedCount
          });
        }
        if (count > expectedCount) {
          this.throwError("too many arguments" + message, _Logger.errors.UNEXPECTED_ARGUMENT, {
            count,
            expectedCount
          });
        }
      }
      checkNew(target, kind) {
        if (target === Object || target == null) {
          this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
        }
      }
      checkAbstract(target, kind) {
        if (target === kind) {
          this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", _Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
        } else if (target === Object || target == null) {
          this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
        }
      }
      static globalLogger() {
        if (!_globalLogger) {
          _globalLogger = new _Logger(version);
        }
        return _globalLogger;
      }
      static setCensorship(censorship, permanent) {
        if (!censorship && permanent) {
          this.globalLogger().throwError("cannot permanently disable censorship", _Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "setCensorship"
          });
        }
        if (_permanentCensorErrors) {
          if (!censorship) {
            return;
          }
          this.globalLogger().throwError("error censorship permanent", _Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "setCensorship"
          });
        }
        _censorErrors = !!censorship;
        _permanentCensorErrors = !!permanent;
      }
      static setLogLevel(logLevel) {
        const level = LogLevels[logLevel.toLowerCase()];
        if (level == null) {
          _Logger.globalLogger().warn("invalid log level - " + logLevel);
          return;
        }
        _logLevel = level;
      }
      static from(version12) {
        return new _Logger(version12);
      }
    };
    Logger.errors = ErrorCode;
    Logger.levels = LogLevel;
  }
});

// node_modules/@ethersproject/bytes/lib.esm/_version.js
var version2;
var init_version2 = __esm({
  "node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
    version2 = "bytes/5.7.0";
  }
});

// node_modules/@ethersproject/bytes/lib.esm/index.js
function isHexable(value) {
  return !!value.toHexString;
}
function addSlice(array) {
  if (array.slice) {
    return array;
  }
  array.slice = function() {
    const args = Array.prototype.slice.call(arguments);
    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
  };
  return array;
}
function isBytesLike(value) {
  return isHexString(value) && !(value.length % 2) || isBytes(value);
}
function isInteger(value) {
  return typeof value === "number" && value == value && value % 1 === 0;
}
function isBytes(value) {
  if (value == null) {
    return false;
  }
  if (value.constructor === Uint8Array) {
    return true;
  }
  if (typeof value === "string") {
    return false;
  }
  if (!isInteger(value.length) || value.length < 0) {
    return false;
  }
  for (let i = 0; i < value.length; i++) {
    const v = value[i];
    if (!isInteger(v) || v < 0 || v >= 256) {
      return false;
    }
  }
  return true;
}
function arrayify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid arrayify value");
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value = parseInt(String(value / 256));
    }
    if (result.length === 0) {
      result.push(0);
    }
    return addSlice(new Uint8Array(result));
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    value = value.toHexString();
  }
  if (isHexString(value)) {
    let hex = value.substring(2);
    if (hex.length % 2) {
      if (options.hexPad === "left") {
        hex = "0" + hex;
      } else if (options.hexPad === "right") {
        hex += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    const result = [];
    for (let i = 0; i < hex.length; i += 2) {
      result.push(parseInt(hex.substring(i, i + 2), 16));
    }
    return addSlice(new Uint8Array(result));
  }
  if (isBytes(value)) {
    return addSlice(new Uint8Array(value));
  }
  return logger.throwArgumentError("invalid arrayify value", "value", value);
}
function concat(items) {
  const objects = items.map((item) => arrayify(item));
  const length = objects.reduce((accum, item) => accum + item.length, 0);
  const result = new Uint8Array(length);
  objects.reduce((offset, object) => {
    result.set(object, offset);
    return offset + object.length;
  }, 0);
  return addSlice(result);
}
function stripZeros(value) {
  let result = arrayify(value);
  if (result.length === 0) {
    return result;
  }
  let start = 0;
  while (start < result.length && result[start] === 0) {
    start++;
  }
  if (start) {
    result = result.slice(start);
  }
  return result;
}
function zeroPad(value, length) {
  value = arrayify(value);
  if (value.length > length) {
    logger.throwArgumentError("value out of range", "value", arguments[0]);
  }
  const result = new Uint8Array(length);
  result.set(value, length - value.length);
  return addSlice(result);
}
function isHexString(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && value.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}
function hexlify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid hexlify value");
    let hex = "";
    while (value) {
      hex = HexCharacters[value & 15] + hex;
      value = Math.floor(value / 16);
    }
    if (hex.length) {
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      return "0x" + hex;
    }
    return "0x00";
  }
  if (typeof value === "bigint") {
    value = value.toString(16);
    if (value.length % 2) {
      return "0x0" + value;
    }
    return "0x" + value;
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    return value.toHexString();
  }
  if (isHexString(value)) {
    if (value.length % 2) {
      if (options.hexPad === "left") {
        value = "0x0" + value.substring(2);
      } else if (options.hexPad === "right") {
        value += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    return value.toLowerCase();
  }
  if (isBytes(value)) {
    let result = "0x";
    for (let i = 0; i < value.length; i++) {
      let v = value[i];
      result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
    }
    return result;
  }
  return logger.throwArgumentError("invalid hexlify value", "value", value);
}
function hexDataLength(data) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    return null;
  }
  return (data.length - 2) / 2;
}
function hexDataSlice(data, offset, endOffset) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    logger.throwArgumentError("invalid hexData", "value", data);
  }
  offset = 2 + 2 * offset;
  if (endOffset != null) {
    return "0x" + data.substring(offset, 2 + 2 * endOffset);
  }
  return "0x" + data.substring(offset);
}
function hexConcat(items) {
  let result = "0x";
  items.forEach((item) => {
    result += hexlify(item).substring(2);
  });
  return result;
}
function hexZeroPad(value, length) {
  if (typeof value !== "string") {
    value = hexlify(value);
  } else if (!isHexString(value)) {
    logger.throwArgumentError("invalid hex string", "value", value);
  }
  if (value.length > 2 * length + 2) {
    logger.throwArgumentError("value out of range", "value", arguments[1]);
  }
  while (value.length < 2 * length + 2) {
    value = "0x0" + value.substring(2);
  }
  return value;
}
function splitSignature(signature2) {
  const result = {
    r: "0x",
    s: "0x",
    _vs: "0x",
    recoveryParam: 0,
    v: 0,
    yParityAndS: "0x",
    compact: "0x"
  };
  if (isBytesLike(signature2)) {
    let bytes = arrayify(signature2);
    if (bytes.length === 64) {
      result.v = 27 + (bytes[32] >> 7);
      bytes[32] &= 127;
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
    } else if (bytes.length === 65) {
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
      result.v = bytes[64];
    } else {
      logger.throwArgumentError("invalid signature string", "signature", signature2);
    }
    if (result.v < 27) {
      if (result.v === 0 || result.v === 1) {
        result.v += 27;
      } else {
        logger.throwArgumentError("signature invalid v byte", "signature", signature2);
      }
    }
    result.recoveryParam = 1 - result.v % 2;
    if (result.recoveryParam) {
      bytes[32] |= 128;
    }
    result._vs = hexlify(bytes.slice(32, 64));
  } else {
    result.r = signature2.r;
    result.s = signature2.s;
    result.v = signature2.v;
    result.recoveryParam = signature2.recoveryParam;
    result._vs = signature2._vs;
    if (result._vs != null) {
      const vs2 = zeroPad(arrayify(result._vs), 32);
      result._vs = hexlify(vs2);
      const recoveryParam = vs2[0] >= 128 ? 1 : 0;
      if (result.recoveryParam == null) {
        result.recoveryParam = recoveryParam;
      } else if (result.recoveryParam !== recoveryParam) {
        logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature2);
      }
      vs2[0] &= 127;
      const s = hexlify(vs2);
      if (result.s == null) {
        result.s = s;
      } else if (result.s !== s) {
        logger.throwArgumentError("signature v mismatch _vs", "signature", signature2);
      }
    }
    if (result.recoveryParam == null) {
      if (result.v == null) {
        logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature2);
      } else if (result.v === 0 || result.v === 1) {
        result.recoveryParam = result.v;
      } else {
        result.recoveryParam = 1 - result.v % 2;
      }
    } else {
      if (result.v == null) {
        result.v = 27 + result.recoveryParam;
      } else {
        const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
        if (result.recoveryParam !== recId) {
          logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature2);
        }
      }
    }
    if (result.r == null || !isHexString(result.r)) {
      logger.throwArgumentError("signature missing or invalid r", "signature", signature2);
    } else {
      result.r = hexZeroPad(result.r, 32);
    }
    if (result.s == null || !isHexString(result.s)) {
      logger.throwArgumentError("signature missing or invalid s", "signature", signature2);
    } else {
      result.s = hexZeroPad(result.s, 32);
    }
    const vs = arrayify(result.s);
    if (vs[0] >= 128) {
      logger.throwArgumentError("signature s out of range", "signature", signature2);
    }
    if (result.recoveryParam) {
      vs[0] |= 128;
    }
    const _vs = hexlify(vs);
    if (result._vs) {
      if (!isHexString(result._vs)) {
        logger.throwArgumentError("signature invalid _vs", "signature", signature2);
      }
      result._vs = hexZeroPad(result._vs, 32);
    }
    if (result._vs == null) {
      result._vs = _vs;
    } else if (result._vs !== _vs) {
      logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature2);
    }
  }
  result.yParityAndS = result._vs;
  result.compact = result.r + result.yParityAndS.substring(2);
  return result;
}
var logger, HexCharacters;
var init_lib2 = __esm({
  "node_modules/@ethersproject/bytes/lib.esm/index.js"() {
    "use strict";
    init_lib();
    init_version2();
    logger = new Logger(version2);
    HexCharacters = "0123456789abcdef";
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/_version.js
var version3;
var init_version3 = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/_version.js"() {
    version3 = "bignumber/5.7.0";
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
function isBigNumberish(value) {
  return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === "bigint" || isBytes(value));
}
function toHex(value) {
  if (typeof value !== "string") {
    return toHex(value.toString(16));
  }
  if (value[0] === "-") {
    value = value.substring(1);
    if (value[0] === "-") {
      logger2.throwArgumentError("invalid hex", "value", value);
    }
    value = toHex(value);
    if (value === "0x00") {
      return value;
    }
    return "-" + value;
  }
  if (value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (value === "0x") {
    return "0x00";
  }
  if (value.length % 2) {
    value = "0x0" + value.substring(2);
  }
  while (value.length > 4 && value.substring(0, 4) === "0x00") {
    value = "0x" + value.substring(4);
  }
  return value;
}
function toBigNumber(value) {
  return BigNumber.from(toHex(value));
}
function toBN(value) {
  const hex = BigNumber.from(value).toHexString();
  if (hex[0] === "-") {
    return new BN("-" + hex.substring(3), 16);
  }
  return new BN(hex.substring(2), 16);
}
function throwFault(fault, operation, value) {
  const params = { fault, operation };
  if (value != null) {
    params.value = value;
  }
  return logger2.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
}
function _base36To16(value) {
  return new BN(value, 36).toString(16);
}
var import_bn, BN, logger2, _constructorGuard, MAX_SAFE, _warnedToStringRadix, BigNumber;
var init_bignumber = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/bignumber.js"() {
    "use strict";
    import_bn = __toESM(require_bn8());
    init_lib2();
    init_lib();
    init_version3();
    BN = import_bn.default.BN;
    logger2 = new Logger(version3);
    _constructorGuard = {};
    MAX_SAFE = 9007199254740991;
    _warnedToStringRadix = false;
    BigNumber = class _BigNumber {
      constructor(constructorGuard, hex) {
        if (constructorGuard !== _constructorGuard) {
          logger2.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new (BigNumber)"
          });
        }
        this._hex = hex;
        this._isBigNumber = true;
        Object.freeze(this);
      }
      fromTwos(value) {
        return toBigNumber(toBN(this).fromTwos(value));
      }
      toTwos(value) {
        return toBigNumber(toBN(this).toTwos(value));
      }
      abs() {
        if (this._hex[0] === "-") {
          return _BigNumber.from(this._hex.substring(1));
        }
        return this;
      }
      add(other) {
        return toBigNumber(toBN(this).add(toBN(other)));
      }
      sub(other) {
        return toBigNumber(toBN(this).sub(toBN(other)));
      }
      div(other) {
        const o = _BigNumber.from(other);
        if (o.isZero()) {
          throwFault("division-by-zero", "div");
        }
        return toBigNumber(toBN(this).div(toBN(other)));
      }
      mul(other) {
        return toBigNumber(toBN(this).mul(toBN(other)));
      }
      mod(other) {
        const value = toBN(other);
        if (value.isNeg()) {
          throwFault("division-by-zero", "mod");
        }
        return toBigNumber(toBN(this).umod(value));
      }
      pow(other) {
        const value = toBN(other);
        if (value.isNeg()) {
          throwFault("negative-power", "pow");
        }
        return toBigNumber(toBN(this).pow(value));
      }
      and(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "and");
        }
        return toBigNumber(toBN(this).and(value));
      }
      or(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "or");
        }
        return toBigNumber(toBN(this).or(value));
      }
      xor(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "xor");
        }
        return toBigNumber(toBN(this).xor(value));
      }
      mask(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "mask");
        }
        return toBigNumber(toBN(this).maskn(value));
      }
      shl(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "shl");
        }
        return toBigNumber(toBN(this).shln(value));
      }
      shr(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "shr");
        }
        return toBigNumber(toBN(this).shrn(value));
      }
      eq(other) {
        return toBN(this).eq(toBN(other));
      }
      lt(other) {
        return toBN(this).lt(toBN(other));
      }
      lte(other) {
        return toBN(this).lte(toBN(other));
      }
      gt(other) {
        return toBN(this).gt(toBN(other));
      }
      gte(other) {
        return toBN(this).gte(toBN(other));
      }
      isNegative() {
        return this._hex[0] === "-";
      }
      isZero() {
        return toBN(this).isZero();
      }
      toNumber() {
        try {
          return toBN(this).toNumber();
        } catch (error) {
          throwFault("overflow", "toNumber", this.toString());
        }
        return null;
      }
      toBigInt() {
        try {
          return BigInt(this.toString());
        } catch (e) {
        }
        return logger2.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
          value: this.toString()
        });
      }
      toString() {
        if (arguments.length > 0) {
          if (arguments[0] === 10) {
            if (!_warnedToStringRadix) {
              _warnedToStringRadix = true;
              logger2.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
            }
          } else if (arguments[0] === 16) {
            logger2.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
          } else {
            logger2.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
          }
        }
        return toBN(this).toString(10);
      }
      toHexString() {
        return this._hex;
      }
      toJSON(key2) {
        return { type: "BigNumber", hex: this.toHexString() };
      }
      static from(value) {
        if (value instanceof _BigNumber) {
          return value;
        }
        if (typeof value === "string") {
          if (value.match(/^-?0x[0-9a-f]+$/i)) {
            return new _BigNumber(_constructorGuard, toHex(value));
          }
          if (value.match(/^-?[0-9]+$/)) {
            return new _BigNumber(_constructorGuard, toHex(new BN(value)));
          }
          return logger2.throwArgumentError("invalid BigNumber string", "value", value);
        }
        if (typeof value === "number") {
          if (value % 1) {
            throwFault("underflow", "BigNumber.from", value);
          }
          if (value >= MAX_SAFE || value <= -MAX_SAFE) {
            throwFault("overflow", "BigNumber.from", value);
          }
          return _BigNumber.from(String(value));
        }
        const anyValue = value;
        if (typeof anyValue === "bigint") {
          return _BigNumber.from(anyValue.toString());
        }
        if (isBytes(anyValue)) {
          return _BigNumber.from(hexlify(anyValue));
        }
        if (anyValue) {
          if (anyValue.toHexString) {
            const hex = anyValue.toHexString();
            if (typeof hex === "string") {
              return _BigNumber.from(hex);
            }
          } else {
            let hex = anyValue._hex;
            if (hex == null && anyValue.type === "BigNumber") {
              hex = anyValue.hex;
            }
            if (typeof hex === "string") {
              if (isHexString(hex) || hex[0] === "-" && isHexString(hex.substring(1))) {
                return _BigNumber.from(hex);
              }
            }
          }
        }
        return logger2.throwArgumentError("invalid BigNumber value", "value", value);
      }
      static isBigNumber(value) {
        return !!(value && value._isBigNumber);
      }
    };
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js
function throwFault2(message, fault, operation, value) {
  const params = { fault, operation };
  if (value !== void 0) {
    params.value = value;
  }
  return logger3.throwError(message, Logger.errors.NUMERIC_FAULT, params);
}
function getMultiplier(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = BigNumber.from(decimals).toNumber();
    } catch (e) {
    }
  }
  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros.substring(0, decimals);
  }
  return logger3.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  value = BigNumber.from(value);
  const negative = value.lt(Zero);
  if (negative) {
    value = value.mul(NegativeOne);
  }
  let fraction = value.mod(multiplier).toString();
  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  }
  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  const whole = value.div(multiplier).toString();
  if (multiplier.length === 1) {
    value = whole;
  } else {
    value = whole + "." + fraction;
  }
  if (negative) {
    value = "-" + value;
  }
  return value;
}
function parseFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
    logger3.throwArgumentError("invalid decimal value", "value", value);
  }
  const negative = value.substring(0, 1) === "-";
  if (negative) {
    value = value.substring(1);
  }
  if (value === ".") {
    logger3.throwArgumentError("missing value", "value", value);
  }
  const comps = value.split(".");
  if (comps.length > 2) {
    logger3.throwArgumentError("too many decimal points", "value", value);
  }
  let whole = comps[0], fraction = comps[1];
  if (!whole) {
    whole = "0";
  }
  if (!fraction) {
    fraction = "0";
  }
  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  }
  if (fraction.length > multiplier.length - 1) {
    throwFault2("fractional component exceeds decimals", "underflow", "parseFixed");
  }
  if (fraction === "") {
    fraction = "0";
  }
  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }
  const wholeValue = BigNumber.from(whole);
  const fractionValue = BigNumber.from(fraction);
  let wei = wholeValue.mul(multiplier).add(fractionValue);
  if (negative) {
    wei = wei.mul(NegativeOne);
  }
  return wei;
}
var logger3, _constructorGuard2, Zero, NegativeOne, zeros, FixedFormat, FixedNumber, ONE, BUMP;
var init_fixednumber = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js"() {
    "use strict";
    init_lib2();
    init_lib();
    init_version3();
    init_bignumber();
    logger3 = new Logger(version3);
    _constructorGuard2 = {};
    Zero = BigNumber.from(0);
    NegativeOne = BigNumber.from(-1);
    zeros = "0";
    while (zeros.length < 256) {
      zeros += zeros;
    }
    FixedFormat = class _FixedFormat {
      constructor(constructorGuard, signed2, width, decimals) {
        if (constructorGuard !== _constructorGuard2) {
          logger3.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new FixedFormat"
          });
        }
        this.signed = signed2;
        this.width = width;
        this.decimals = decimals;
        this.name = (signed2 ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
        this._multiplier = getMultiplier(decimals);
        Object.freeze(this);
      }
      static from(value) {
        if (value instanceof _FixedFormat) {
          return value;
        }
        if (typeof value === "number") {
          value = `fixed128x${value}`;
        }
        let signed2 = true;
        let width = 128;
        let decimals = 18;
        if (typeof value === "string") {
          if (value === "fixed") {
          } else if (value === "ufixed") {
            signed2 = false;
          } else {
            const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
            if (!match) {
              logger3.throwArgumentError("invalid fixed format", "format", value);
            }
            signed2 = match[1] !== "u";
            width = parseInt(match[2]);
            decimals = parseInt(match[3]);
          }
        } else if (value) {
          const check = (key2, type, defaultValue) => {
            if (value[key2] == null) {
              return defaultValue;
            }
            if (typeof value[key2] !== type) {
              logger3.throwArgumentError("invalid fixed format (" + key2 + " not " + type + ")", "format." + key2, value[key2]);
            }
            return value[key2];
          };
          signed2 = check("signed", "boolean", signed2);
          width = check("width", "number", width);
          decimals = check("decimals", "number", decimals);
        }
        if (width % 8) {
          logger3.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
        }
        if (decimals > 80) {
          logger3.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
        }
        return new _FixedFormat(_constructorGuard2, signed2, width, decimals);
      }
    };
    FixedNumber = class _FixedNumber {
      constructor(constructorGuard, hex, value, format) {
        if (constructorGuard !== _constructorGuard2) {
          logger3.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new FixedFormat"
          });
        }
        this.format = format;
        this._hex = hex;
        this._value = value;
        this._isFixedNumber = true;
        Object.freeze(this);
      }
      _checkFormat(other) {
        if (this.format.name !== other.format.name) {
          logger3.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
        }
      }
      addUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
      }
      subUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
      }
      mulUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
      }
      divUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
      }
      floor() {
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        let result = _FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (this.isNegative() && hasFraction) {
          result = result.subUnsafe(ONE.toFormat(result.format));
        }
        return result;
      }
      ceiling() {
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        let result = _FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (!this.isNegative() && hasFraction) {
          result = result.addUnsafe(ONE.toFormat(result.format));
        }
        return result;
      }
      // @TODO: Support other rounding algorithms
      round(decimals) {
        if (decimals == null) {
          decimals = 0;
        }
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        if (decimals < 0 || decimals > 80 || decimals % 1) {
          logger3.throwArgumentError("invalid decimal count", "decimals", decimals);
        }
        if (comps[1].length <= decimals) {
          return this;
        }
        const factor = _FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
        const bump = BUMP.toFormat(this.format);
        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
      }
      isZero() {
        return this._value === "0.0" || this._value === "0";
      }
      isNegative() {
        return this._value[0] === "-";
      }
      toString() {
        return this._value;
      }
      toHexString(width) {
        if (width == null) {
          return this._hex;
        }
        if (width % 8) {
          logger3.throwArgumentError("invalid byte width", "width", width);
        }
        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
        return hexZeroPad(hex, width / 8);
      }
      toUnsafeFloat() {
        return parseFloat(this.toString());
      }
      toFormat(format) {
        return _FixedNumber.fromString(this._value, format);
      }
      static fromValue(value, decimals, format) {
        if (format == null && decimals != null && !isBigNumberish(decimals)) {
          format = decimals;
          decimals = null;
        }
        if (decimals == null) {
          decimals = 0;
        }
        if (format == null) {
          format = "fixed";
        }
        return _FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
      }
      static fromString(value, format) {
        if (format == null) {
          format = "fixed";
        }
        const fixedFormat = FixedFormat.from(format);
        const numeric = parseFixed(value, fixedFormat.decimals);
        if (!fixedFormat.signed && numeric.lt(Zero)) {
          throwFault2("unsigned value cannot be negative", "overflow", "value", value);
        }
        let hex = null;
        if (fixedFormat.signed) {
          hex = numeric.toTwos(fixedFormat.width).toHexString();
        } else {
          hex = numeric.toHexString();
          hex = hexZeroPad(hex, fixedFormat.width / 8);
        }
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
      }
      static fromBytes(value, format) {
        if (format == null) {
          format = "fixed";
        }
        const fixedFormat = FixedFormat.from(format);
        if (arrayify(value).length > fixedFormat.width / 8) {
          throw new Error("overflow");
        }
        let numeric = BigNumber.from(value);
        if (fixedFormat.signed) {
          numeric = numeric.fromTwos(fixedFormat.width);
        }
        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
      }
      static from(value, format) {
        if (typeof value === "string") {
          return _FixedNumber.fromString(value, format);
        }
        if (isBytes(value)) {
          return _FixedNumber.fromBytes(value, format);
        }
        try {
          return _FixedNumber.fromValue(value, 0, format);
        } catch (error) {
          if (error.code !== Logger.errors.INVALID_ARGUMENT) {
            throw error;
          }
        }
        return logger3.throwArgumentError("invalid FixedNumber value", "value", value);
      }
      static isFixedNumber(value) {
        return !!(value && value._isFixedNumber);
      }
    };
    ONE = FixedNumber.from(1);
    BUMP = FixedNumber.from("0.5");
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/index.js
var init_lib3 = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/index.js"() {
    init_bignumber();
    init_fixednumber();
    init_bignumber();
  }
});

// node_modules/@ethersproject/properties/lib.esm/_version.js
var version4;
var init_version4 = __esm({
  "node_modules/@ethersproject/properties/lib.esm/_version.js"() {
    version4 = "properties/5.7.0";
  }
});

// node_modules/@ethersproject/properties/lib.esm/index.js
function defineReadOnly(object, name2, value) {
  Object.defineProperty(object, name2, {
    enumerable: true,
    value,
    writable: false
  });
}
function getStatic(ctor, key2) {
  for (let i = 0; i < 32; i++) {
    if (ctor[key2]) {
      return ctor[key2];
    }
    if (!ctor.prototype || typeof ctor.prototype !== "object") {
      break;
    }
    ctor = Object.getPrototypeOf(ctor.prototype).constructor;
  }
  return null;
}
function checkProperties(object, properties) {
  if (!object || typeof object !== "object") {
    logger4.throwArgumentError("invalid object", "object", object);
  }
  Object.keys(object).forEach((key2) => {
    if (!properties[key2]) {
      logger4.throwArgumentError("invalid object key - " + key2, "transaction:" + key2, object);
    }
  });
}
function _isFrozen(object) {
  if (object === void 0 || object === null || opaque[typeof object]) {
    return true;
  }
  if (Array.isArray(object) || typeof object === "object") {
    if (!Object.isFrozen(object)) {
      return false;
    }
    const keys = Object.keys(object);
    for (let i = 0; i < keys.length; i++) {
      let value = null;
      try {
        value = object[keys[i]];
      } catch (error) {
        continue;
      }
      if (!_isFrozen(value)) {
        return false;
      }
    }
    return true;
  }
  return logger4.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function _deepCopy(object) {
  if (_isFrozen(object)) {
    return object;
  }
  if (Array.isArray(object)) {
    return Object.freeze(object.map((item) => deepCopy(item)));
  }
  if (typeof object === "object") {
    const result = {};
    for (const key2 in object) {
      const value = object[key2];
      if (value === void 0) {
        continue;
      }
      defineReadOnly(result, key2, deepCopy(value));
    }
    return result;
  }
  return logger4.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function deepCopy(object) {
  return _deepCopy(object);
}
var logger4, opaque, Description;
var init_lib4 = __esm({
  "node_modules/@ethersproject/properties/lib.esm/index.js"() {
    "use strict";
    init_lib();
    init_version4();
    logger4 = new Logger(version4);
    opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
    Description = class {
      constructor(info) {
        for (const key2 in info) {
          this[key2] = deepCopy(info[key2]);
        }
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/_version.js
var version5;
var init_version5 = __esm({
  "node_modules/@ethersproject/abi/lib.esm/_version.js"() {
    version5 = "abi/5.7.0";
  }
});

// node_modules/@ethersproject/abi/lib.esm/fragments.js
function checkModifier(type, name2) {
  if (type === "bytes" || type === "string") {
    if (ModifiersBytes[name2]) {
      return true;
    }
  } else if (type === "address") {
    if (name2 === "payable") {
      return true;
    }
  } else if (type.indexOf("[") >= 0 || type === "tuple") {
    if (ModifiersNest[name2]) {
      return true;
    }
  }
  if (ModifiersBytes[name2] || name2 === "payable") {
    logger5.throwArgumentError("invalid modifier", "name", name2);
  }
  return false;
}
function parseParamType(param, allowIndexed) {
  let originalParam = param;
  function throwError(i) {
    logger5.throwArgumentError(`unexpected character at position ${i}`, "param", param);
  }
  param = param.replace(/\s/g, " ");
  function newNode(parent2) {
    let node2 = { type: "", name: "", parent: parent2, state: { allowType: true } };
    if (allowIndexed) {
      node2.indexed = false;
    }
    return node2;
  }
  let parent = { type: "", name: "", state: { allowType: true } };
  let node = parent;
  for (let i = 0; i < param.length; i++) {
    let c = param[i];
    switch (c) {
      case "(":
        if (node.state.allowType && node.type === "") {
          node.type = "tuple";
        } else if (!node.state.allowParams) {
          throwError(i);
        }
        node.state.allowType = false;
        node.type = verifyType(node.type);
        node.components = [newNode(node)];
        node = node.components[0];
        break;
      case ")":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let child = node;
        node = node.parent;
        if (!node) {
          throwError(i);
        }
        delete child.parent;
        node.state.allowParams = false;
        node.state.allowName = true;
        node.state.allowArray = true;
        break;
      case ",":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let sibling = newNode(node.parent);
        node.parent.components.push(sibling);
        delete node.parent;
        node = sibling;
        break;
      case " ":
        if (node.state.allowType) {
          if (node.type !== "") {
            node.type = verifyType(node.type);
            delete node.state.allowType;
            node.state.allowName = true;
            node.state.allowParams = true;
          }
        }
        if (node.state.allowName) {
          if (node.name !== "") {
            if (node.name === "indexed") {
              if (!allowIndexed) {
                throwError(i);
              }
              if (node.indexed) {
                throwError(i);
              }
              node.indexed = true;
              node.name = "";
            } else if (checkModifier(node.type, node.name)) {
              node.name = "";
            } else {
              node.state.allowName = false;
            }
          }
        }
        break;
      case "[":
        if (!node.state.allowArray) {
          throwError(i);
        }
        node.type += c;
        node.state.allowArray = false;
        node.state.allowName = false;
        node.state.readArray = true;
        break;
      case "]":
        if (!node.state.readArray) {
          throwError(i);
        }
        node.type += c;
        node.state.readArray = false;
        node.state.allowArray = true;
        node.state.allowName = true;
        break;
      default:
        if (node.state.allowType) {
          node.type += c;
          node.state.allowParams = true;
          node.state.allowArray = true;
        } else if (node.state.allowName) {
          node.name += c;
          delete node.state.allowArray;
        } else if (node.state.readArray) {
          node.type += c;
        } else {
          throwError(i);
        }
    }
  }
  if (node.parent) {
    logger5.throwArgumentError("unexpected eof", "param", param);
  }
  delete parent.state;
  if (node.name === "indexed") {
    if (!allowIndexed) {
      throwError(originalParam.length - 7);
    }
    if (node.indexed) {
      throwError(originalParam.length - 7);
    }
    node.indexed = true;
    node.name = "";
  } else if (checkModifier(node.type, node.name)) {
    node.name = "";
  }
  parent.type = verifyType(parent.type);
  return parent;
}
function populate(object, params) {
  for (let key2 in params) {
    defineReadOnly(object, key2, params[key2]);
  }
}
function parseParams(value, allowIndex) {
  return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
}
function parseGas(value, params) {
  params.gas = null;
  let comps = value.split("@");
  if (comps.length !== 1) {
    if (comps.length > 2) {
      logger5.throwArgumentError("invalid human-readable ABI signature", "value", value);
    }
    if (!comps[1].match(/^[0-9]+$/)) {
      logger5.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
    }
    params.gas = BigNumber.from(comps[1]);
    return comps[0];
  }
  return value;
}
function parseModifiers(value, params) {
  params.constant = false;
  params.payable = false;
  params.stateMutability = "nonpayable";
  value.split(" ").forEach((modifier) => {
    switch (modifier.trim()) {
      case "constant":
        params.constant = true;
        break;
      case "payable":
        params.payable = true;
        params.stateMutability = "payable";
        break;
      case "nonpayable":
        params.payable = false;
        params.stateMutability = "nonpayable";
        break;
      case "pure":
        params.constant = true;
        params.stateMutability = "pure";
        break;
      case "view":
        params.constant = true;
        params.stateMutability = "view";
        break;
      case "external":
      case "public":
      case "":
        break;
      default:
        console.log("unknown modifier: " + modifier);
    }
  });
}
function verifyState(value) {
  let result = {
    constant: false,
    payable: true,
    stateMutability: "payable"
  };
  if (value.stateMutability != null) {
    result.stateMutability = value.stateMutability;
    result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
    if (value.constant != null) {
      if (!!value.constant !== result.constant) {
        logger5.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
      }
    }
    result.payable = result.stateMutability === "payable";
    if (value.payable != null) {
      if (!!value.payable !== result.payable) {
        logger5.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
      }
    }
  } else if (value.payable != null) {
    result.payable = !!value.payable;
    if (value.constant == null && !result.payable && value.type !== "constructor") {
      logger5.throwArgumentError("unable to determine stateMutability", "value", value);
    }
    result.constant = !!value.constant;
    if (result.constant) {
      result.stateMutability = "view";
    } else {
      result.stateMutability = result.payable ? "payable" : "nonpayable";
    }
    if (result.payable && result.constant) {
      logger5.throwArgumentError("cannot have constant payable function", "value", value);
    }
  } else if (value.constant != null) {
    result.constant = !!value.constant;
    result.payable = !result.constant;
    result.stateMutability = result.constant ? "view" : "payable";
  } else if (value.type !== "constructor") {
    logger5.throwArgumentError("unable to determine stateMutability", "value", value);
  }
  return result;
}
function checkForbidden(fragment) {
  const sig = fragment.format();
  if (sig === "Error(string)" || sig === "Panic(uint256)") {
    logger5.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
  }
  return fragment;
}
function verifyType(type) {
  if (type.match(/^uint($|[^1-9])/)) {
    type = "uint256" + type.substring(4);
  } else if (type.match(/^int($|[^1-9])/)) {
    type = "int256" + type.substring(3);
  }
  return type;
}
function verifyIdentifier(value) {
  if (!value || !value.match(regexIdentifier)) {
    logger5.throwArgumentError(`invalid identifier "${value}"`, "value", value);
  }
  return value;
}
function splitNesting(value) {
  value = value.trim();
  let result = [];
  let accum = "";
  let depth = 0;
  for (let offset = 0; offset < value.length; offset++) {
    let c = value[offset];
    if (c === "," && depth === 0) {
      result.push(accum);
      accum = "";
    } else {
      accum += c;
      if (c === "(") {
        depth++;
      } else if (c === ")") {
        depth--;
        if (depth === -1) {
          logger5.throwArgumentError("unbalanced parenthesis", "value", value);
        }
      }
    }
  }
  if (accum) {
    result.push(accum);
  }
  return result;
}
var logger5, _constructorGuard3, ModifiersBytes, ModifiersNest, FormatTypes, paramTypeArray, ParamType, Fragment, EventFragment, ConstructorFragment, FunctionFragment, ErrorFragment, regexIdentifier, regexParen;
var init_fragments = __esm({
  "node_modules/@ethersproject/abi/lib.esm/fragments.js"() {
    "use strict";
    init_lib3();
    init_lib4();
    init_lib();
    init_version5();
    logger5 = new Logger(version5);
    _constructorGuard3 = {};
    ModifiersBytes = { calldata: true, memory: true, storage: true };
    ModifiersNest = { calldata: true, memory: true };
    FormatTypes = Object.freeze({
      // Bare formatting, as is needed for computing a sighash of an event or function
      sighash: "sighash",
      // Human-Readable with Minimal spacing and without names (compact human-readable)
      minimal: "minimal",
      // Human-Readable with nice spacing, including all names
      full: "full",
      // JSON-format a la Solidity
      json: "json"
    });
    paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
    ParamType = class _ParamType {
      constructor(constructorGuard, params) {
        if (constructorGuard !== _constructorGuard3) {
          logger5.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new ParamType()"
          });
        }
        populate(this, params);
        let match = this.type.match(paramTypeArray);
        if (match) {
          populate(this, {
            arrayLength: parseInt(match[2] || "-1"),
            arrayChildren: _ParamType.fromObject({
              type: match[1],
              components: this.components
            }),
            baseType: "array"
          });
        } else {
          populate(this, {
            arrayLength: null,
            arrayChildren: null,
            baseType: this.components != null ? "tuple" : this.type
          });
        }
        this._isParamType = true;
        Object.freeze(this);
      }
      // Format the parameter fragment
      //   - sighash: "(uint256,address)"
      //   - minimal: "tuple(uint256,address) indexed"
      //   - full:    "tuple(uint256 foo, address bar) indexed baz"
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          let result2 = {
            type: this.baseType === "tuple" ? "tuple" : this.type,
            name: this.name || void 0
          };
          if (typeof this.indexed === "boolean") {
            result2.indexed = this.indexed;
          }
          if (this.components) {
            result2.components = this.components.map((comp) => JSON.parse(comp.format(format)));
          }
          return JSON.stringify(result2);
        }
        let result = "";
        if (this.baseType === "array") {
          result += this.arrayChildren.format(format);
          result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
        } else {
          if (this.baseType === "tuple") {
            if (format !== FormatTypes.sighash) {
              result += this.type;
            }
            result += "(" + this.components.map((comp) => comp.format(format)).join(format === FormatTypes.full ? ", " : ",") + ")";
          } else {
            result += this.type;
          }
        }
        if (format !== FormatTypes.sighash) {
          if (this.indexed === true) {
            result += " indexed";
          }
          if (format === FormatTypes.full && this.name) {
            result += " " + this.name;
          }
        }
        return result;
      }
      static from(value, allowIndexed) {
        if (typeof value === "string") {
          return _ParamType.fromString(value, allowIndexed);
        }
        return _ParamType.fromObject(value);
      }
      static fromObject(value) {
        if (_ParamType.isParamType(value)) {
          return value;
        }
        return new _ParamType(_constructorGuard3, {
          name: value.name || null,
          type: verifyType(value.type),
          indexed: value.indexed == null ? null : !!value.indexed,
          components: value.components ? value.components.map(_ParamType.fromObject) : null
        });
      }
      static fromString(value, allowIndexed) {
        function ParamTypify(node) {
          return _ParamType.fromObject({
            name: node.name,
            type: node.type,
            indexed: node.indexed,
            components: node.components
          });
        }
        return ParamTypify(parseParamType(value, !!allowIndexed));
      }
      static isParamType(value) {
        return !!(value != null && value._isParamType);
      }
    };
    Fragment = class _Fragment {
      constructor(constructorGuard, params) {
        if (constructorGuard !== _constructorGuard3) {
          logger5.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new Fragment()"
          });
        }
        populate(this, params);
        this._isFragment = true;
        Object.freeze(this);
      }
      static from(value) {
        if (_Fragment.isFragment(value)) {
          return value;
        }
        if (typeof value === "string") {
          return _Fragment.fromString(value);
        }
        return _Fragment.fromObject(value);
      }
      static fromObject(value) {
        if (_Fragment.isFragment(value)) {
          return value;
        }
        switch (value.type) {
          case "function":
            return FunctionFragment.fromObject(value);
          case "event":
            return EventFragment.fromObject(value);
          case "constructor":
            return ConstructorFragment.fromObject(value);
          case "error":
            return ErrorFragment.fromObject(value);
          case "fallback":
          case "receive":
            return null;
        }
        return logger5.throwArgumentError("invalid fragment object", "value", value);
      }
      static fromString(value) {
        value = value.replace(/\s/g, " ");
        value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
        value = value.trim();
        if (value.split(" ")[0] === "event") {
          return EventFragment.fromString(value.substring(5).trim());
        } else if (value.split(" ")[0] === "function") {
          return FunctionFragment.fromString(value.substring(8).trim());
        } else if (value.split("(")[0].trim() === "constructor") {
          return ConstructorFragment.fromString(value.trim());
        } else if (value.split(" ")[0] === "error") {
          return ErrorFragment.fromString(value.substring(5).trim());
        }
        return logger5.throwArgumentError("unsupported fragment", "value", value);
      }
      static isFragment(value) {
        return !!(value && value._isFragment);
      }
    };
    EventFragment = class _EventFragment extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "event",
            anonymous: this.anonymous,
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "event ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
          if (this.anonymous) {
            result += "anonymous ";
          }
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return _EventFragment.fromString(value);
        }
        return _EventFragment.fromObject(value);
      }
      static fromObject(value) {
        if (_EventFragment.isEventFragment(value)) {
          return value;
        }
        if (value.type !== "event") {
          logger5.throwArgumentError("invalid event object", "value", value);
        }
        const params = {
          name: verifyIdentifier(value.name),
          anonymous: value.anonymous,
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
          type: "event"
        };
        return new _EventFragment(_constructorGuard3, params);
      }
      static fromString(value) {
        let match = value.match(regexParen);
        if (!match) {
          logger5.throwArgumentError("invalid event string", "value", value);
        }
        let anonymous = false;
        match[3].split(" ").forEach((modifier) => {
          switch (modifier.trim()) {
            case "anonymous":
              anonymous = true;
              break;
            case "":
              break;
            default:
              logger5.warn("unknown modifier: " + modifier);
          }
        });
        return _EventFragment.fromObject({
          name: match[1].trim(),
          anonymous,
          inputs: parseParams(match[2], true),
          type: "event"
        });
      }
      static isEventFragment(value) {
        return value && value._isFragment && value.type === "event";
      }
    };
    ConstructorFragment = class _ConstructorFragment extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "constructor",
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas ? this.gas.toNumber() : void 0,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        if (format === FormatTypes.sighash) {
          logger5.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "format(sighash)"
          });
        }
        let result = "constructor(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (this.stateMutability && this.stateMutability !== "nonpayable") {
          result += this.stateMutability + " ";
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return _ConstructorFragment.fromString(value);
        }
        return _ConstructorFragment.fromObject(value);
      }
      static fromObject(value) {
        if (_ConstructorFragment.isConstructorFragment(value)) {
          return value;
        }
        if (value.type !== "constructor") {
          logger5.throwArgumentError("invalid constructor object", "value", value);
        }
        let state = verifyState(value);
        if (state.constant) {
          logger5.throwArgumentError("constructor cannot be constant", "value", value);
        }
        const params = {
          name: null,
          type: value.type,
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
          payable: state.payable,
          stateMutability: state.stateMutability,
          gas: value.gas ? BigNumber.from(value.gas) : null
        };
        return new _ConstructorFragment(_constructorGuard3, params);
      }
      static fromString(value) {
        let params = { type: "constructor" };
        value = parseGas(value, params);
        let parens = value.match(regexParen);
        if (!parens || parens[1].trim() !== "constructor") {
          logger5.throwArgumentError("invalid constructor string", "value", value);
        }
        params.inputs = parseParams(parens[2].trim(), false);
        parseModifiers(parens[3].trim(), params);
        return _ConstructorFragment.fromObject(params);
      }
      static isConstructorFragment(value) {
        return value && value._isFragment && value.type === "constructor";
      }
    };
    FunctionFragment = class _FunctionFragment extends ConstructorFragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "function",
            name: this.name,
            constant: this.constant,
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas ? this.gas.toNumber() : void 0,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
            outputs: this.outputs.map((output) => JSON.parse(output.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "function ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
          if (this.stateMutability) {
            if (this.stateMutability !== "nonpayable") {
              result += this.stateMutability + " ";
            }
          } else if (this.constant) {
            result += "view ";
          }
          if (this.outputs && this.outputs.length) {
            result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
          }
          if (this.gas != null) {
            result += "@" + this.gas.toString() + " ";
          }
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return _FunctionFragment.fromString(value);
        }
        return _FunctionFragment.fromObject(value);
      }
      static fromObject(value) {
        if (_FunctionFragment.isFunctionFragment(value)) {
          return value;
        }
        if (value.type !== "function") {
          logger5.throwArgumentError("invalid function object", "value", value);
        }
        let state = verifyState(value);
        const params = {
          type: value.type,
          name: verifyIdentifier(value.name),
          constant: state.constant,
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
          outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
          payable: state.payable,
          stateMutability: state.stateMutability,
          gas: value.gas ? BigNumber.from(value.gas) : null
        };
        return new _FunctionFragment(_constructorGuard3, params);
      }
      static fromString(value) {
        let params = { type: "function" };
        value = parseGas(value, params);
        let comps = value.split(" returns ");
        if (comps.length > 2) {
          logger5.throwArgumentError("invalid function string", "value", value);
        }
        let parens = comps[0].match(regexParen);
        if (!parens) {
          logger5.throwArgumentError("invalid function signature", "value", value);
        }
        params.name = parens[1].trim();
        if (params.name) {
          verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        parseModifiers(parens[3].trim(), params);
        if (comps.length > 1) {
          let returns = comps[1].match(regexParen);
          if (returns[1].trim() != "" || returns[3].trim() != "") {
            logger5.throwArgumentError("unexpected tokens", "value", value);
          }
          params.outputs = parseParams(returns[2], false);
        } else {
          params.outputs = [];
        }
        return _FunctionFragment.fromObject(params);
      }
      static isFunctionFragment(value) {
        return value && value._isFragment && value.type === "function";
      }
    };
    ErrorFragment = class _ErrorFragment extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "error",
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "error ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return _ErrorFragment.fromString(value);
        }
        return _ErrorFragment.fromObject(value);
      }
      static fromObject(value) {
        if (_ErrorFragment.isErrorFragment(value)) {
          return value;
        }
        if (value.type !== "error") {
          logger5.throwArgumentError("invalid error object", "value", value);
        }
        const params = {
          type: value.type,
          name: verifyIdentifier(value.name),
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []
        };
        return checkForbidden(new _ErrorFragment(_constructorGuard3, params));
      }
      static fromString(value) {
        let params = { type: "error" };
        let parens = value.match(regexParen);
        if (!parens) {
          logger5.throwArgumentError("invalid error signature", "value", value);
        }
        params.name = parens[1].trim();
        if (params.name) {
          verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        return checkForbidden(_ErrorFragment.fromObject(params));
      }
      static isErrorFragment(value) {
        return value && value._isFragment && value.type === "error";
      }
    };
    regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
    regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js
function checkResultErrors(result) {
  const errors = [];
  const checkErrors = function(path, object) {
    if (!Array.isArray(object)) {
      return;
    }
    for (let key2 in object) {
      const childPath = path.slice();
      childPath.push(key2);
      try {
        checkErrors(childPath, object[key2]);
      } catch (error) {
        errors.push({ path: childPath, error });
      }
    }
  };
  checkErrors([], result);
  return errors;
}
var logger6, Coder, Writer, Reader;
var init_abstract_coder = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"() {
    "use strict";
    init_lib2();
    init_lib3();
    init_lib4();
    init_lib();
    init_version5();
    logger6 = new Logger(version5);
    Coder = class {
      constructor(name2, type, localName, dynamic) {
        this.name = name2;
        this.type = type;
        this.localName = localName;
        this.dynamic = dynamic;
      }
      _throwError(message, value) {
        logger6.throwArgumentError(message, this.localName, value);
      }
    };
    Writer = class {
      constructor(wordSize) {
        defineReadOnly(this, "wordSize", wordSize || 32);
        this._data = [];
        this._dataLength = 0;
        this._padding = new Uint8Array(wordSize);
      }
      get data() {
        return hexConcat(this._data);
      }
      get length() {
        return this._dataLength;
      }
      _writeData(data) {
        this._data.push(data);
        this._dataLength += data.length;
        return data.length;
      }
      appendWriter(writer) {
        return this._writeData(concat(writer._data));
      }
      // Arrayish items; padded on the right to wordSize
      writeBytes(value) {
        let bytes = arrayify(value);
        const paddingOffset = bytes.length % this.wordSize;
        if (paddingOffset) {
          bytes = concat([bytes, this._padding.slice(paddingOffset)]);
        }
        return this._writeData(bytes);
      }
      _getValue(value) {
        let bytes = arrayify(BigNumber.from(value));
        if (bytes.length > this.wordSize) {
          logger6.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
            length: this.wordSize,
            offset: bytes.length
          });
        }
        if (bytes.length % this.wordSize) {
          bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
        }
        return bytes;
      }
      // BigNumberish items; padded on the left to wordSize
      writeValue(value) {
        return this._writeData(this._getValue(value));
      }
      writeUpdatableValue() {
        const offset = this._data.length;
        this._data.push(this._padding);
        this._dataLength += this.wordSize;
        return (value) => {
          this._data[offset] = this._getValue(value);
        };
      }
    };
    Reader = class _Reader {
      constructor(data, wordSize, coerceFunc, allowLoose) {
        defineReadOnly(this, "_data", arrayify(data));
        defineReadOnly(this, "wordSize", wordSize || 32);
        defineReadOnly(this, "_coerceFunc", coerceFunc);
        defineReadOnly(this, "allowLoose", allowLoose);
        this._offset = 0;
      }
      get data() {
        return hexlify(this._data);
      }
      get consumed() {
        return this._offset;
      }
      // The default Coerce function
      static coerce(name2, value) {
        let match = name2.match("^u?int([0-9]+)$");
        if (match && parseInt(match[1]) <= 48) {
          value = value.toNumber();
        }
        return value;
      }
      coerce(name2, value) {
        if (this._coerceFunc) {
          return this._coerceFunc(name2, value);
        }
        return _Reader.coerce(name2, value);
      }
      _peekBytes(offset, length, loose) {
        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
        if (this._offset + alignedLength > this._data.length) {
          if (this.allowLoose && loose && this._offset + length <= this._data.length) {
            alignedLength = length;
          } else {
            logger6.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
              length: this._data.length,
              offset: this._offset + alignedLength
            });
          }
        }
        return this._data.slice(this._offset, this._offset + alignedLength);
      }
      subReader(offset) {
        return new _Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
      }
      readBytes(length, loose) {
        let bytes = this._peekBytes(0, length, !!loose);
        this._offset += bytes.length;
        return bytes.slice(0, length);
      }
      readValue() {
        return BigNumber.from(this.readBytes(this.wordSize));
      }
    };
  }
});

// node_modules/@ethersproject/keccak256/lib.esm/index.js
function keccak256(data) {
  return "0x" + import_js_sha3.default.keccak_256(arrayify(data));
}
var import_js_sha3;
var init_lib5 = __esm({
  "node_modules/@ethersproject/keccak256/lib.esm/index.js"() {
    "use strict";
    import_js_sha3 = __toESM(require_sha32());
    init_lib2();
  }
});

// node_modules/@ethersproject/rlp/lib.esm/_version.js
var version6;
var init_version6 = __esm({
  "node_modules/@ethersproject/rlp/lib.esm/_version.js"() {
    version6 = "rlp/5.7.0";
  }
});

// node_modules/@ethersproject/rlp/lib.esm/index.js
function arrayifyInteger(value) {
  const result = [];
  while (value) {
    result.unshift(value & 255);
    value >>= 8;
  }
  return result;
}
function unarrayifyInteger(data, offset, length) {
  let result = 0;
  for (let i = 0; i < length; i++) {
    result = result * 256 + data[offset + i];
  }
  return result;
}
function _encode(object) {
  if (Array.isArray(object)) {
    let payload = [];
    object.forEach(function(child) {
      payload = payload.concat(_encode(child));
    });
    if (payload.length <= 55) {
      payload.unshift(192 + payload.length);
      return payload;
    }
    const length2 = arrayifyInteger(payload.length);
    length2.unshift(247 + length2.length);
    return length2.concat(payload);
  }
  if (!isBytesLike(object)) {
    logger7.throwArgumentError("RLP object must be BytesLike", "object", object);
  }
  const data = Array.prototype.slice.call(arrayify(object));
  if (data.length === 1 && data[0] <= 127) {
    return data;
  } else if (data.length <= 55) {
    data.unshift(128 + data.length);
    return data;
  }
  const length = arrayifyInteger(data.length);
  length.unshift(183 + length.length);
  return length.concat(data);
}
function encode(object) {
  return hexlify(_encode(object));
}
function _decodeChildren(data, offset, childOffset, length) {
  const result = [];
  while (childOffset < offset + 1 + length) {
    const decoded = _decode(data, childOffset);
    result.push(decoded.result);
    childOffset += decoded.consumed;
    if (childOffset > offset + 1 + length) {
      logger7.throwError("child data too short", Logger.errors.BUFFER_OVERRUN, {});
    }
  }
  return { consumed: 1 + length, result };
}
function _decode(data, offset) {
  if (data.length === 0) {
    logger7.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
  }
  if (data[offset] >= 248) {
    const lengthLength = data[offset] - 247;
    if (offset + 1 + lengthLength > data.length) {
      logger7.throwError("data short segment too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const length = unarrayifyInteger(data, offset + 1, lengthLength);
    if (offset + 1 + lengthLength + length > data.length) {
      logger7.throwError("data long segment too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
  } else if (data[offset] >= 192) {
    const length = data[offset] - 192;
    if (offset + 1 + length > data.length) {
      logger7.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    return _decodeChildren(data, offset, offset + 1, length);
  } else if (data[offset] >= 184) {
    const lengthLength = data[offset] - 183;
    if (offset + 1 + lengthLength > data.length) {
      logger7.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const length = unarrayifyInteger(data, offset + 1, lengthLength);
    if (offset + 1 + lengthLength + length > data.length) {
      logger7.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
    return { consumed: 1 + lengthLength + length, result };
  } else if (data[offset] >= 128) {
    const length = data[offset] - 128;
    if (offset + 1 + length > data.length) {
      logger7.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
    }
    const result = hexlify(data.slice(offset + 1, offset + 1 + length));
    return { consumed: 1 + length, result };
  }
  return { consumed: 1, result: hexlify(data[offset]) };
}
function decode(data) {
  const bytes = arrayify(data);
  const decoded = _decode(bytes, 0);
  if (decoded.consumed !== bytes.length) {
    logger7.throwArgumentError("invalid rlp data", "data", data);
  }
  return decoded.result;
}
var logger7;
var init_lib6 = __esm({
  "node_modules/@ethersproject/rlp/lib.esm/index.js"() {
    "use strict";
    init_lib2();
    init_lib();
    init_version6();
    logger7 = new Logger(version6);
  }
});

// node_modules/@ethersproject/address/lib.esm/_version.js
var version7;
var init_version7 = __esm({
  "node_modules/@ethersproject/address/lib.esm/_version.js"() {
    version7 = "address/5.7.0";
  }
});

// node_modules/@ethersproject/address/lib.esm/index.js
function getChecksumAddress(address) {
  if (!isHexString(address, 20)) {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i = 0; i < 40; i++) {
    expanded[i] = chars[i].charCodeAt(0);
  }
  const hashed = arrayify(keccak256(expanded));
  for (let i = 0; i < 40; i += 2) {
    if (hashed[i >> 1] >> 4 >= 8) {
      chars[i] = chars[i].toUpperCase();
    }
    if ((hashed[i >> 1] & 15) >= 8) {
      chars[i + 1] = chars[i + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
function log10(x) {
  if (Math.log10) {
    return Math.log10(x);
  }
  return Math.log(x) / Math.LN10;
}
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c) => {
    return ibanLookup[c];
  }).join("");
  while (expanded.length >= safeDigits) {
    let block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  let checksum = String(98 - parseInt(expanded, 10) % 97);
  while (checksum.length < 2) {
    checksum = "0" + checksum;
  }
  return checksum;
}
function getAddress(address) {
  let result = null;
  if (typeof address !== "string") {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (address.substring(0, 2) !== "0x") {
      address = "0x" + address;
    }
    result = getChecksumAddress(address);
    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
      logger8.throwArgumentError("bad address checksum", "address", address);
    }
  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    if (address.substring(2, 4) !== ibanChecksum(address)) {
      logger8.throwArgumentError("bad icap checksum", "address", address);
    }
    result = _base36To16(address.substring(4));
    while (result.length < 40) {
      result = "0" + result;
    }
    result = getChecksumAddress("0x" + result);
  } else {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  return result;
}
var logger8, MAX_SAFE_INTEGER, ibanLookup, safeDigits;
var init_lib7 = __esm({
  "node_modules/@ethersproject/address/lib.esm/index.js"() {
    "use strict";
    init_lib2();
    init_lib3();
    init_lib5();
    init_lib6();
    init_lib();
    init_version7();
    logger8 = new Logger(version7);
    MAX_SAFE_INTEGER = 9007199254740991;
    ibanLookup = {};
    for (let i = 0; i < 10; i++) {
      ibanLookup[String(i)] = String(i);
    }
    for (let i = 0; i < 26; i++) {
      ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
    }
    safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/address.js
var AddressCoder;
var init_address = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/address.js"() {
    "use strict";
    init_lib7();
    init_lib2();
    init_abstract_coder();
    AddressCoder = class extends Coder {
      constructor(localName) {
        super("address", "address", localName, false);
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000";
      }
      encode(writer, value) {
        try {
          value = getAddress(value);
        } catch (error) {
          this._throwError(error.message, value);
        }
        return writer.writeValue(value);
      }
      decode(reader) {
        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js
var AnonymousCoder;
var init_anonymous = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js"() {
    "use strict";
    init_abstract_coder();
    AnonymousCoder = class extends Coder {
      constructor(coder) {
        super(coder.name, coder.type, void 0, coder.dynamic);
        this.coder = coder;
      }
      defaultValue() {
        return this.coder.defaultValue();
      }
      encode(writer, value) {
        return this.coder.encode(writer, value);
      }
      decode(reader) {
        return this.coder.decode(reader);
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/array.js
function pack(writer, coders, values) {
  let arrayValues = null;
  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    let unique = {};
    arrayValues = coders.map((coder) => {
      const name2 = coder.localName;
      if (!name2) {
        logger9.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      if (unique[name2]) {
        logger9.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      unique[name2] = true;
      return values[name2];
    });
  } else {
    logger9.throwArgumentError("invalid tuple value", "tuple", values);
  }
  if (coders.length !== arrayValues.length) {
    logger9.throwArgumentError("types/value length mismatch", "tuple", values);
  }
  let staticWriter = new Writer(writer.wordSize);
  let dynamicWriter = new Writer(writer.wordSize);
  let updateFuncs = [];
  coders.forEach((coder, index) => {
    let value = arrayValues[index];
    if (coder.dynamic) {
      let dynamicOffset = dynamicWriter.length;
      coder.encode(dynamicWriter, value);
      let updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push((baseOffset) => {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value);
    }
  });
  updateFuncs.forEach((func) => {
    func(staticWriter.length);
  });
  let length = writer.appendWriter(staticWriter);
  length += writer.appendWriter(dynamicWriter);
  return length;
}
function unpack(reader, coders) {
  let values = [];
  let baseReader = reader.subReader(0);
  coders.forEach((coder) => {
    let value = null;
    if (coder.dynamic) {
      let offset = reader.readValue();
      let offsetReader = baseReader.subReader(offset.toNumber());
      try {
        value = coder.decode(offsetReader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    } else {
      try {
        value = coder.decode(reader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    }
    if (value != void 0) {
      values.push(value);
    }
  });
  const uniqueNames = coders.reduce((accum, coder) => {
    const name2 = coder.localName;
    if (name2) {
      if (!accum[name2]) {
        accum[name2] = 0;
      }
      accum[name2]++;
    }
    return accum;
  }, {});
  coders.forEach((coder, index) => {
    let name2 = coder.localName;
    if (!name2 || uniqueNames[name2] !== 1) {
      return;
    }
    if (name2 === "length") {
      name2 = "_length";
    }
    if (values[name2] != null) {
      return;
    }
    const value = values[index];
    if (value instanceof Error) {
      Object.defineProperty(values, name2, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    } else {
      values[name2] = value;
    }
  });
  for (let i = 0; i < values.length; i++) {
    const value = values[i];
    if (value instanceof Error) {
      Object.defineProperty(values, i, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    }
  }
  return Object.freeze(values);
}
var logger9, ArrayCoder;
var init_array = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/array.js"() {
    "use strict";
    init_lib();
    init_version5();
    init_abstract_coder();
    init_anonymous();
    logger9 = new Logger(version5);
    ArrayCoder = class extends Coder {
      constructor(coder, length, localName) {
        const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
        const dynamic = length === -1 || coder.dynamic;
        super("array", type, localName, dynamic);
        this.coder = coder;
        this.length = length;
      }
      defaultValue() {
        const defaultChild = this.coder.defaultValue();
        const result = [];
        for (let i = 0; i < this.length; i++) {
          result.push(defaultChild);
        }
        return result;
      }
      encode(writer, value) {
        if (!Array.isArray(value)) {
          this._throwError("expected array value", value);
        }
        let count = this.length;
        if (count === -1) {
          count = value.length;
          writer.writeValue(value.length);
        }
        logger9.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
        let coders = [];
        for (let i = 0; i < value.length; i++) {
          coders.push(this.coder);
        }
        return pack(writer, coders, value);
      }
      decode(reader) {
        let count = this.length;
        if (count === -1) {
          count = reader.readValue().toNumber();
          if (count * 32 > reader._data.length) {
            logger9.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
              length: reader._data.length,
              count
            });
          }
        }
        let coders = [];
        for (let i = 0; i < count; i++) {
          coders.push(new AnonymousCoder(this.coder));
        }
        return reader.coerce(this.name, unpack(reader, coders));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/boolean.js
var BooleanCoder;
var init_boolean = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/boolean.js"() {
    "use strict";
    init_abstract_coder();
    BooleanCoder = class extends Coder {
      constructor(localName) {
        super("bool", "bool", localName, false);
      }
      defaultValue() {
        return false;
      }
      encode(writer, value) {
        return writer.writeValue(value ? 1 : 0);
      }
      decode(reader) {
        return reader.coerce(this.type, !reader.readValue().isZero());
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/bytes.js
var DynamicBytesCoder, BytesCoder;
var init_bytes = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/bytes.js"() {
    "use strict";
    init_lib2();
    init_abstract_coder();
    DynamicBytesCoder = class extends Coder {
      constructor(type, localName) {
        super(type, type, localName, true);
      }
      defaultValue() {
        return "0x";
      }
      encode(writer, value) {
        value = arrayify(value);
        let length = writer.writeValue(value.length);
        length += writer.writeBytes(value);
        return length;
      }
      decode(reader) {
        return reader.readBytes(reader.readValue().toNumber(), true);
      }
    };
    BytesCoder = class extends DynamicBytesCoder {
      constructor(localName) {
        super("bytes", localName);
      }
      decode(reader) {
        return reader.coerce(this.name, hexlify(super.decode(reader)));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js
var FixedBytesCoder;
var init_fixed_bytes = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js"() {
    "use strict";
    init_lib2();
    init_abstract_coder();
    FixedBytesCoder = class extends Coder {
      constructor(size, localName) {
        let name2 = "bytes" + String(size);
        super(name2, name2, localName, false);
        this.size = size;
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
      }
      encode(writer, value) {
        let data = arrayify(value);
        if (data.length !== this.size) {
          this._throwError("incorrect data length", value);
        }
        return writer.writeBytes(data);
      }
      decode(reader) {
        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/null.js
var NullCoder;
var init_null = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/null.js"() {
    "use strict";
    init_abstract_coder();
    NullCoder = class extends Coder {
      constructor(localName) {
        super("null", "", localName, false);
      }
      defaultValue() {
        return null;
      }
      encode(writer, value) {
        if (value != null) {
          this._throwError("not null", value);
        }
        return writer.writeBytes([]);
      }
      decode(reader) {
        reader.readBytes(0);
        return reader.coerce(this.name, null);
      }
    };
  }
});

// node_modules/@ethersproject/constants/lib.esm/addresses.js
var init_addresses = __esm({
  "node_modules/@ethersproject/constants/lib.esm/addresses.js"() {
  }
});

// node_modules/@ethersproject/constants/lib.esm/bignumbers.js
var NegativeOne2, Zero2, One, Two, WeiPerEther, MaxUint256, MinInt256, MaxInt256;
var init_bignumbers = __esm({
  "node_modules/@ethersproject/constants/lib.esm/bignumbers.js"() {
    init_lib3();
    NegativeOne2 = BigNumber.from(-1);
    Zero2 = BigNumber.from(0);
    One = BigNumber.from(1);
    Two = BigNumber.from(2);
    WeiPerEther = BigNumber.from("1000000000000000000");
    MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    MinInt256 = BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
    MaxInt256 = BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  }
});

// node_modules/@ethersproject/constants/lib.esm/hashes.js
var init_hashes = __esm({
  "node_modules/@ethersproject/constants/lib.esm/hashes.js"() {
  }
});

// node_modules/@ethersproject/constants/lib.esm/strings.js
var init_strings = __esm({
  "node_modules/@ethersproject/constants/lib.esm/strings.js"() {
  }
});

// node_modules/@ethersproject/constants/lib.esm/index.js
var init_lib8 = __esm({
  "node_modules/@ethersproject/constants/lib.esm/index.js"() {
    "use strict";
    init_addresses();
    init_bignumbers();
    init_hashes();
    init_strings();
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/number.js
var NumberCoder;
var init_number = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/number.js"() {
    "use strict";
    init_lib3();
    init_lib8();
    init_abstract_coder();
    NumberCoder = class extends Coder {
      constructor(size, signed2, localName) {
        const name2 = (signed2 ? "int" : "uint") + size * 8;
        super(name2, name2, localName, false);
        this.size = size;
        this.signed = signed2;
      }
      defaultValue() {
        return 0;
      }
      encode(writer, value) {
        let v = BigNumber.from(value);
        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
        if (this.signed) {
          let bounds = maxUintValue.mask(this.size * 8 - 1);
          if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne2))) {
            this._throwError("value out-of-bounds", value);
          }
        } else if (v.lt(Zero2) || v.gt(maxUintValue.mask(this.size * 8))) {
          this._throwError("value out-of-bounds", value);
        }
        v = v.toTwos(this.size * 8).mask(this.size * 8);
        if (this.signed) {
          v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
        }
        return writer.writeValue(v);
      }
      decode(reader) {
        let value = reader.readValue().mask(this.size * 8);
        if (this.signed) {
          value = value.fromTwos(this.size * 8);
        }
        return reader.coerce(this.name, value);
      }
    };
  }
});

// node_modules/@ethersproject/strings/lib.esm/_version.js
var version8;
var init_version8 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/_version.js"() {
    version8 = "strings/5.7.0";
  }
});

// node_modules/@ethersproject/strings/lib.esm/utf8.js
function errorFunc(reason, offset, bytes, output, badCodepoint) {
  return logger10.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
}
function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
    let i = 0;
    for (let o = offset + 1; o < bytes.length; o++) {
      if (bytes[o] >> 6 !== 2) {
        break;
      }
      i++;
    }
    return i;
  }
  if (reason === Utf8ErrorReason.OVERRUN) {
    return bytes.length - offset - 1;
  }
  return 0;
}
function replaceFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.OVERLONG) {
    output.push(badCodepoint);
    return 0;
  }
  output.push(65533);
  return ignoreFunc(reason, offset, bytes, output, badCodepoint);
}
function getUtf8CodePoints(bytes, onError) {
  if (onError == null) {
    onError = Utf8ErrorFuncs.error;
  }
  bytes = arrayify(bytes);
  const result = [];
  let i = 0;
  while (i < bytes.length) {
    const c = bytes[i++];
    if (c >> 7 === 0) {
      result.push(c);
      continue;
    }
    let extraLength = null;
    let overlongMask = null;
    if ((c & 224) === 192) {
      extraLength = 1;
      overlongMask = 127;
    } else if ((c & 240) === 224) {
      extraLength = 2;
      overlongMask = 2047;
    } else if ((c & 248) === 240) {
      extraLength = 3;
      overlongMask = 65535;
    } else {
      if ((c & 192) === 128) {
        i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
      } else {
        i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
      }
      continue;
    }
    if (i - 1 + extraLength >= bytes.length) {
      i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
      continue;
    }
    let res = c & (1 << 8 - extraLength - 1) - 1;
    for (let j = 0; j < extraLength; j++) {
      let nextChar = bytes[i];
      if ((nextChar & 192) != 128) {
        i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
        res = null;
        break;
      }
      ;
      res = res << 6 | nextChar & 63;
      i++;
    }
    if (res === null) {
      continue;
    }
    if (res > 1114111) {
      i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res >= 55296 && res <= 57343) {
      i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res <= overlongMask) {
      i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    result.push(res);
  }
  return result;
}
function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
  if (form != UnicodeNormalizationForm.current) {
    logger10.checkNormalize();
    str = str.normalize(form);
  }
  let result = [];
  for (let i = 0; i < str.length; i++) {
    const c = str.charCodeAt(i);
    if (c < 128) {
      result.push(c);
    } else if (c < 2048) {
      result.push(c >> 6 | 192);
      result.push(c & 63 | 128);
    } else if ((c & 64512) == 55296) {
      i++;
      const c2 = str.charCodeAt(i);
      if (i >= str.length || (c2 & 64512) !== 56320) {
        throw new Error("invalid utf-8 string");
      }
      const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c >> 12 | 224);
      result.push(c >> 6 & 63 | 128);
      result.push(c & 63 | 128);
    }
  }
  return arrayify(result);
}
function _toUtf8String(codePoints) {
  return codePoints.map((codePoint) => {
    if (codePoint <= 65535) {
      return String.fromCharCode(codePoint);
    }
    codePoint -= 65536;
    return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
  }).join("");
}
function toUtf8String(bytes, onError) {
  return _toUtf8String(getUtf8CodePoints(bytes, onError));
}
var logger10, UnicodeNormalizationForm, Utf8ErrorReason, Utf8ErrorFuncs;
var init_utf8 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/utf8.js"() {
    "use strict";
    init_lib2();
    init_lib();
    init_version8();
    logger10 = new Logger(version8);
    (function(UnicodeNormalizationForm2) {
      UnicodeNormalizationForm2["current"] = "";
      UnicodeNormalizationForm2["NFC"] = "NFC";
      UnicodeNormalizationForm2["NFD"] = "NFD";
      UnicodeNormalizationForm2["NFKC"] = "NFKC";
      UnicodeNormalizationForm2["NFKD"] = "NFKD";
    })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
    (function(Utf8ErrorReason2) {
      Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
      Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
      Utf8ErrorReason2["OVERRUN"] = "string overrun";
      Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
      Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
      Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
      Utf8ErrorReason2["OVERLONG"] = "overlong representation";
    })(Utf8ErrorReason || (Utf8ErrorReason = {}));
    Utf8ErrorFuncs = Object.freeze({
      error: errorFunc,
      ignore: ignoreFunc,
      replace: replaceFunc
    });
  }
});

// node_modules/@ethersproject/strings/lib.esm/bytes32.js
var init_bytes32 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/bytes32.js"() {
    "use strict";
    init_lib8();
    init_lib2();
    init_utf8();
  }
});

// node_modules/@ethersproject/strings/lib.esm/idna.js
function bytes2(data) {
  if (data.length % 4 !== 0) {
    throw new Error("bad data");
  }
  let result = [];
  for (let i = 0; i < data.length; i += 4) {
    result.push(parseInt(data.substring(i, i + 4), 16));
  }
  return result;
}
function createTable(data, func) {
  if (!func) {
    func = function(value) {
      return [parseInt(value, 16)];
    };
  }
  let lo = 0;
  let result = {};
  data.split(",").forEach((pair) => {
    let comps = pair.split(":");
    lo += parseInt(comps[0], 16);
    result[lo] = func(comps[1]);
  });
  return result;
}
function createRangeTable(data) {
  let hi = 0;
  return data.split(",").map((v) => {
    let comps = v.split("-");
    if (comps.length === 1) {
      comps[1] = "0";
    } else if (comps[1] === "") {
      comps[1] = "1";
    }
    let lo = hi + parseInt(comps[0], 16);
    hi = parseInt(comps[1], 16);
    return { l: lo, h: hi };
  });
}
var Table_A_1_ranges, Table_B_1_flags, Table_B_2_lut_abs, Table_B_2_lut_rel, Table_B_2_complex, Table_C_ranges;
var init_idna = __esm({
  "node_modules/@ethersproject/strings/lib.esm/idna.js"() {
    "use strict";
    init_utf8();
    Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
    Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v) => parseInt(v, 16));
    Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
    Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
    Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
    Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
  }
});

// node_modules/@ethersproject/strings/lib.esm/index.js
var init_lib9 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/index.js"() {
    "use strict";
    init_bytes32();
    init_idna();
    init_utf8();
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/string.js
var StringCoder;
var init_string = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/string.js"() {
    "use strict";
    init_lib9();
    init_bytes();
    StringCoder = class extends DynamicBytesCoder {
      constructor(localName) {
        super("string", localName);
      }
      defaultValue() {
        return "";
      }
      encode(writer, value) {
        return super.encode(writer, toUtf8Bytes(value));
      }
      decode(reader) {
        return toUtf8String(super.decode(reader));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/tuple.js
var TupleCoder;
var init_tuple = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/tuple.js"() {
    "use strict";
    init_abstract_coder();
    init_array();
    TupleCoder = class extends Coder {
      constructor(coders, localName) {
        let dynamic = false;
        const types = [];
        coders.forEach((coder) => {
          if (coder.dynamic) {
            dynamic = true;
          }
          types.push(coder.type);
        });
        const type = "tuple(" + types.join(",") + ")";
        super("tuple", type, localName, dynamic);
        this.coders = coders;
      }
      defaultValue() {
        const values = [];
        this.coders.forEach((coder) => {
          values.push(coder.defaultValue());
        });
        const uniqueNames = this.coders.reduce((accum, coder) => {
          const name2 = coder.localName;
          if (name2) {
            if (!accum[name2]) {
              accum[name2] = 0;
            }
            accum[name2]++;
          }
          return accum;
        }, {});
        this.coders.forEach((coder, index) => {
          let name2 = coder.localName;
          if (!name2 || uniqueNames[name2] !== 1) {
            return;
          }
          if (name2 === "length") {
            name2 = "_length";
          }
          if (values[name2] != null) {
            return;
          }
          values[name2] = values[index];
        });
        return Object.freeze(values);
      }
      encode(writer, value) {
        return pack(writer, this.coders, value);
      }
      decode(reader) {
        return reader.coerce(this.name, unpack(reader, this.coders));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/abi-coder.js
var logger11, paramTypeBytes, paramTypeNumber, AbiCoder, defaultAbiCoder;
var init_abi_coder = __esm({
  "node_modules/@ethersproject/abi/lib.esm/abi-coder.js"() {
    "use strict";
    init_lib2();
    init_lib4();
    init_lib();
    init_version5();
    init_abstract_coder();
    init_address();
    init_array();
    init_boolean();
    init_bytes();
    init_fixed_bytes();
    init_null();
    init_number();
    init_string();
    init_tuple();
    init_fragments();
    logger11 = new Logger(version5);
    paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    AbiCoder = class {
      constructor(coerceFunc) {
        defineReadOnly(this, "coerceFunc", coerceFunc || null);
      }
      _getCoder(param) {
        switch (param.baseType) {
          case "address":
            return new AddressCoder(param.name);
          case "bool":
            return new BooleanCoder(param.name);
          case "string":
            return new StringCoder(param.name);
          case "bytes":
            return new BytesCoder(param.name);
          case "array":
            return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
          case "tuple":
            return new TupleCoder((param.components || []).map((component) => {
              return this._getCoder(component);
            }), param.name);
          case "":
            return new NullCoder(param.name);
        }
        let match = param.type.match(paramTypeNumber);
        if (match) {
          let size = parseInt(match[2] || "256");
          if (size === 0 || size > 256 || size % 8 !== 0) {
            logger11.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
          }
          return new NumberCoder(size / 8, match[1] === "int", param.name);
        }
        match = param.type.match(paramTypeBytes);
        if (match) {
          let size = parseInt(match[1]);
          if (size === 0 || size > 32) {
            logger11.throwArgumentError("invalid bytes length", "param", param);
          }
          return new FixedBytesCoder(size, param.name);
        }
        return logger11.throwArgumentError("invalid type", "type", param.type);
      }
      _getWordSize() {
        return 32;
      }
      _getReader(data, allowLoose) {
        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
      }
      _getWriter() {
        return new Writer(this._getWordSize());
      }
      getDefaultValue(types) {
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        return coder.defaultValue();
      }
      encode(types, values) {
        if (types.length !== values.length) {
          logger11.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
            count: { types: types.length, values: values.length },
            value: { types, values }
          });
        }
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        const writer = this._getWriter();
        coder.encode(writer, values);
        return writer.data;
      }
      decode(types, data, loose) {
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        return coder.decode(this._getReader(arrayify(data), loose));
      }
    };
    defaultAbiCoder = new AbiCoder();
  }
});

// node_modules/@ethersproject/hash/lib.esm/id.js
function id(text) {
  return keccak256(toUtf8Bytes(text));
}
var init_id = __esm({
  "node_modules/@ethersproject/hash/lib.esm/id.js"() {
    init_lib5();
    init_lib9();
  }
});

// node_modules/@ethersproject/hash/lib.esm/_version.js
var version9;
var init_version9 = __esm({
  "node_modules/@ethersproject/hash/lib.esm/_version.js"() {
    version9 = "hash/5.7.0";
  }
});

// node_modules/@ethersproject/base64/lib.esm/base64.js
function decode2(textData) {
  textData = atob(textData);
  const data = [];
  for (let i = 0; i < textData.length; i++) {
    data.push(textData.charCodeAt(i));
  }
  return arrayify(data);
}
var init_base64 = __esm({
  "node_modules/@ethersproject/base64/lib.esm/base64.js"() {
    "use strict";
    init_lib2();
  }
});

// node_modules/@ethersproject/base64/lib.esm/index.js
var init_lib10 = __esm({
  "node_modules/@ethersproject/base64/lib.esm/index.js"() {
    "use strict";
    init_base64();
  }
});

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js
function flat(array, depth) {
  if (depth == null) {
    depth = 1;
  }
  const result = [];
  const forEach = result.forEach;
  const flatDeep = function(arr, depth2) {
    forEach.call(arr, function(val) {
      if (depth2 > 0 && Array.isArray(val)) {
        flatDeep(val, depth2 - 1);
      } else {
        result.push(val);
      }
    });
  };
  flatDeep(array, depth);
  return result;
}
function fromEntries(array) {
  const result = {};
  for (let i = 0; i < array.length; i++) {
    const value = array[i];
    result[value[0]] = value[1];
  }
  return result;
}
function decode_arithmetic(bytes) {
  let pos = 0;
  function u16() {
    return bytes[pos++] << 8 | bytes[pos++];
  }
  let symbol_count = u16();
  let total = 1;
  let acc = [0, 1];
  for (let i = 1; i < symbol_count; i++) {
    acc.push(total += u16());
  }
  let skip = u16();
  let pos_payload = pos;
  pos += skip;
  let read_width = 0;
  let read_buffer = 0;
  function read_bit() {
    if (read_width == 0) {
      read_buffer = read_buffer << 8 | bytes[pos++];
      read_width = 8;
    }
    return read_buffer >> --read_width & 1;
  }
  const N = 31;
  const FULL = Math.pow(2, N);
  const HALF = FULL >>> 1;
  const QRTR = HALF >> 1;
  const MASK = FULL - 1;
  let register = 0;
  for (let i = 0; i < N; i++)
    register = register << 1 | read_bit();
  let symbols = [];
  let low = 0;
  let range = FULL;
  while (true) {
    let value = Math.floor(((register - low + 1) * total - 1) / range);
    let start = 0;
    let end = symbol_count;
    while (end - start > 1) {
      let mid = start + end >>> 1;
      if (value < acc[mid]) {
        end = mid;
      } else {
        start = mid;
      }
    }
    if (start == 0)
      break;
    symbols.push(start);
    let a = low + Math.floor(range * acc[start] / total);
    let b = low + Math.floor(range * acc[start + 1] / total) - 1;
    while (((a ^ b) & HALF) == 0) {
      register = register << 1 & MASK | read_bit();
      a = a << 1 & MASK;
      b = b << 1 & MASK | 1;
    }
    while (a & ~b & QRTR) {
      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
      a = a << 1 ^ HALF;
      b = (b ^ HALF) << 1 | HALF | 1;
    }
    low = a;
    range = 1 + b - a;
  }
  let offset = symbol_count - 4;
  return symbols.map((x) => {
    switch (x - offset) {
      case 3:
        return offset + 65792 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 2:
        return offset + 256 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 1:
        return offset + bytes[pos_payload++];
      default:
        return x - 1;
    }
  });
}
function read_payload(v) {
  let pos = 0;
  return () => v[pos++];
}
function read_compressed_payload(bytes) {
  return read_payload(decode_arithmetic(bytes));
}
function signed(i) {
  return i & 1 ? ~i >> 1 : i >> 1;
}
function read_counts(n, next) {
  let v = Array(n);
  for (let i = 0; i < n; i++)
    v[i] = 1 + next();
  return v;
}
function read_ascending(n, next) {
  let v = Array(n);
  for (let i = 0, x = -1; i < n; i++)
    v[i] = x += 1 + next();
  return v;
}
function read_deltas(n, next) {
  let v = Array(n);
  for (let i = 0, x = 0; i < n; i++)
    v[i] = x += signed(next());
  return v;
}
function read_member_array(next, lookup) {
  let v = read_ascending(next(), next);
  let n = next();
  let vX = read_ascending(n, next);
  let vN = read_counts(n, next);
  for (let i = 0; i < n; i++) {
    for (let j = 0; j < vN[i]; j++) {
      v.push(vX[i] + j);
    }
  }
  return lookup ? v.map((x) => lookup[x]) : v;
}
function read_mapped_map(next) {
  let ret = [];
  while (true) {
    let w = next();
    if (w == 0)
      break;
    ret.push(read_linear_table(w, next));
  }
  while (true) {
    let w = next() - 1;
    if (w < 0)
      break;
    ret.push(read_replacement_table(w, next));
  }
  return fromEntries(flat(ret));
}
function read_zero_terminated_array(next) {
  let v = [];
  while (true) {
    let i = next();
    if (i == 0)
      break;
    v.push(i);
  }
  return v;
}
function read_transposed(n, w, next) {
  let m = Array(n).fill(void 0).map(() => []);
  for (let i = 0; i < w; i++) {
    read_deltas(n, next).forEach((x, j) => m[j].push(x));
  }
  return m;
}
function read_linear_table(w, next) {
  let dx = 1 + next();
  let dy = next();
  let vN = read_zero_terminated_array(next);
  let m = read_transposed(vN.length, 1 + w, next);
  return flat(m.map((v, i) => {
    const x = v[0], ys = v.slice(1);
    return Array(vN[i]).fill(void 0).map((_, j) => {
      let j_dy = j * dy;
      return [x + j * dx, ys.map((y) => y + j_dy)];
    });
  }));
}
function read_replacement_table(w, next) {
  let n = 1 + next();
  let m = read_transposed(n, 1 + w, next);
  return m.map((v) => [v[0], v.slice(1)]);
}
function read_emoji_trie(next) {
  let sorted = read_member_array(next).sort((a, b) => a - b);
  return read();
  function read() {
    let branches = [];
    while (true) {
      let keys = read_member_array(next, sorted);
      if (keys.length == 0)
        break;
      branches.push({ set: new Set(keys), node: read() });
    }
    branches.sort((a, b) => b.set.size - a.set.size);
    let temp = next();
    let valid = temp % 3;
    temp = temp / 3 | 0;
    let fe0f = !!(temp & 1);
    temp >>= 1;
    let save = temp == 1;
    let check = temp == 2;
    return { branches, valid, fe0f, save, check };
  }
}
var init_decoder = __esm({
  "node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js"() {
  }
});

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js
function getData() {
  return read_compressed_payload(decode2(""));
}
var init_include = __esm({
  "node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js"() {
    init_lib10();
    init_decoder();
  }
});

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js
var r, VALID, IGNORED, MAPPED, EMOJI_ROOT;
var init_lib11 = __esm({
  "node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js"() {
    init_lib9();
    init_include();
    init_decoder();
    r = getData();
    VALID = new Set(read_member_array(r));
    IGNORED = new Set(read_member_array(r));
    MAPPED = read_mapped_map(r);
    EMOJI_ROOT = read_emoji_trie(r);
  }
});

// node_modules/@ethersproject/hash/lib.esm/namehash.js
var logger12, Zeros;
var init_namehash = __esm({
  "node_modules/@ethersproject/hash/lib.esm/namehash.js"() {
    init_lib2();
    init_lib9();
    init_lib5();
    init_lib();
    init_version9();
    init_lib11();
    logger12 = new Logger(version9);
    Zeros = new Uint8Array(32);
    Zeros.fill(0);
  }
});

// node_modules/@ethersproject/hash/lib.esm/message.js
var init_message = __esm({
  "node_modules/@ethersproject/hash/lib.esm/message.js"() {
    init_lib2();
    init_lib5();
    init_lib9();
  }
});

// node_modules/@ethersproject/hash/lib.esm/typed-data.js
function checkString(key2) {
  return function(value) {
    if (typeof value !== "string") {
      logger13.throwArgumentError(`invalid domain value for ${JSON.stringify(key2)}`, `domain.${key2}`, value);
    }
    return value;
  };
}
var logger13, padding, NegativeOne3, Zero3, One2, MaxUint2562, hexTrue, hexFalse, domainChecks;
var init_typed_data = __esm({
  "node_modules/@ethersproject/hash/lib.esm/typed-data.js"() {
    init_lib7();
    init_lib3();
    init_lib2();
    init_lib5();
    init_lib4();
    init_lib();
    init_version9();
    init_id();
    logger13 = new Logger(version9);
    padding = new Uint8Array(32);
    padding.fill(0);
    NegativeOne3 = BigNumber.from(-1);
    Zero3 = BigNumber.from(0);
    One2 = BigNumber.from(1);
    MaxUint2562 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    hexTrue = hexZeroPad(One2.toHexString(), 32);
    hexFalse = hexZeroPad(Zero3.toHexString(), 32);
    domainChecks = {
      name: checkString("name"),
      version: checkString("version"),
      chainId: function(value) {
        try {
          return BigNumber.from(value).toString();
        } catch (error) {
        }
        return logger13.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
      },
      verifyingContract: function(value) {
        try {
          return getAddress(value).toLowerCase();
        } catch (error) {
        }
        return logger13.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
      },
      salt: function(value) {
        try {
          const bytes = arrayify(value);
          if (bytes.length !== 32) {
            throw new Error("bad length");
          }
          return hexlify(bytes);
        } catch (error) {
        }
        return logger13.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
      }
    };
  }
});

// node_modules/@ethersproject/hash/lib.esm/index.js
var init_lib12 = __esm({
  "node_modules/@ethersproject/hash/lib.esm/index.js"() {
    "use strict";
    init_id();
    init_namehash();
    init_message();
    init_namehash();
    init_typed_data();
  }
});

// node_modules/@ethersproject/abi/lib.esm/interface.js
function wrapAccessError(property, error) {
  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
  wrap.error = error;
  return wrap;
}
var logger14, LogDescription, TransactionDescription, ErrorDescription, Indexed, BuiltinErrors, Interface;
var init_interface = __esm({
  "node_modules/@ethersproject/abi/lib.esm/interface.js"() {
    "use strict";
    init_lib7();
    init_lib3();
    init_lib2();
    init_lib12();
    init_lib5();
    init_lib4();
    init_abi_coder();
    init_abstract_coder();
    init_fragments();
    init_lib();
    init_version5();
    logger14 = new Logger(version5);
    LogDescription = class extends Description {
    };
    TransactionDescription = class extends Description {
    };
    ErrorDescription = class extends Description {
    };
    Indexed = class extends Description {
      static isIndexed(value) {
        return !!(value && value._isIndexed);
      }
    };
    BuiltinErrors = {
      "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
      "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
    };
    Interface = class {
      constructor(fragments) {
        let abi = [];
        if (typeof fragments === "string") {
          abi = JSON.parse(fragments);
        } else {
          abi = fragments;
        }
        defineReadOnly(this, "fragments", abi.map((fragment) => {
          return Fragment.from(fragment);
        }).filter((fragment) => fragment != null));
        defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
        defineReadOnly(this, "functions", {});
        defineReadOnly(this, "errors", {});
        defineReadOnly(this, "events", {});
        defineReadOnly(this, "structs", {});
        this.fragments.forEach((fragment) => {
          let bucket = null;
          switch (fragment.type) {
            case "constructor":
              if (this.deploy) {
                logger14.warn("duplicate definition - constructor");
                return;
              }
              defineReadOnly(this, "deploy", fragment);
              return;
            case "function":
              bucket = this.functions;
              break;
            case "event":
              bucket = this.events;
              break;
            case "error":
              bucket = this.errors;
              break;
            default:
              return;
          }
          let signature2 = fragment.format();
          if (bucket[signature2]) {
            logger14.warn("duplicate definition - " + signature2);
            return;
          }
          bucket[signature2] = fragment;
        });
        if (!this.deploy) {
          defineReadOnly(this, "deploy", ConstructorFragment.from({
            payable: false,
            type: "constructor"
          }));
        }
        defineReadOnly(this, "_isInterface", true);
      }
      format(format) {
        if (!format) {
          format = FormatTypes.full;
        }
        if (format === FormatTypes.sighash) {
          logger14.throwArgumentError("interface does not support formatting sighash", "format", format);
        }
        const abi = this.fragments.map((fragment) => fragment.format(format));
        if (format === FormatTypes.json) {
          return JSON.stringify(abi.map((j) => JSON.parse(j)));
        }
        return abi;
      }
      // Sub-classes can override these to handle other blockchains
      static getAbiCoder() {
        return defaultAbiCoder;
      }
      static getAddress(address) {
        return getAddress(address);
      }
      static getSighash(fragment) {
        return hexDataSlice(id(fragment.format()), 0, 4);
      }
      static getEventTopic(eventFragment) {
        return id(eventFragment.format());
      }
      // Find a function definition by any means necessary (unless it is ambiguous)
      getFunction(nameOrSignatureOrSighash) {
        if (isHexString(nameOrSignatureOrSighash)) {
          for (const name2 in this.functions) {
            if (nameOrSignatureOrSighash === this.getSighash(name2)) {
              return this.functions[name2];
            }
          }
          logger14.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
        }
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
          const name2 = nameOrSignatureOrSighash.trim();
          const matching = Object.keys(this.functions).filter((f) => f.split(
            "("
            /* fix:) */
          )[0] === name2);
          if (matching.length === 0) {
            logger14.throwArgumentError("no matching function", "name", name2);
          } else if (matching.length > 1) {
            logger14.throwArgumentError("multiple matching functions", "name", name2);
          }
          return this.functions[matching[0]];
        }
        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
          logger14.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
        }
        return result;
      }
      // Find an event definition by any means necessary (unless it is ambiguous)
      getEvent(nameOrSignatureOrTopic) {
        if (isHexString(nameOrSignatureOrTopic)) {
          const topichash = nameOrSignatureOrTopic.toLowerCase();
          for (const name2 in this.events) {
            if (topichash === this.getEventTopic(name2)) {
              return this.events[name2];
            }
          }
          logger14.throwArgumentError("no matching event", "topichash", topichash);
        }
        if (nameOrSignatureOrTopic.indexOf("(") === -1) {
          const name2 = nameOrSignatureOrTopic.trim();
          const matching = Object.keys(this.events).filter((f) => f.split(
            "("
            /* fix:) */
          )[0] === name2);
          if (matching.length === 0) {
            logger14.throwArgumentError("no matching event", "name", name2);
          } else if (matching.length > 1) {
            logger14.throwArgumentError("multiple matching events", "name", name2);
          }
          return this.events[matching[0]];
        }
        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
        if (!result) {
          logger14.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
        }
        return result;
      }
      // Find a function definition by any means necessary (unless it is ambiguous)
      getError(nameOrSignatureOrSighash) {
        if (isHexString(nameOrSignatureOrSighash)) {
          const getSighash = getStatic(this.constructor, "getSighash");
          for (const name2 in this.errors) {
            const error = this.errors[name2];
            if (nameOrSignatureOrSighash === getSighash(error)) {
              return this.errors[name2];
            }
          }
          logger14.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
        }
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
          const name2 = nameOrSignatureOrSighash.trim();
          const matching = Object.keys(this.errors).filter((f) => f.split(
            "("
            /* fix:) */
          )[0] === name2);
          if (matching.length === 0) {
            logger14.throwArgumentError("no matching error", "name", name2);
          } else if (matching.length > 1) {
            logger14.throwArgumentError("multiple matching errors", "name", name2);
          }
          return this.errors[matching[0]];
        }
        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
          logger14.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
        }
        return result;
      }
      // Get the sighash (the bytes4 selector) used by Solidity to identify a function
      getSighash(fragment) {
        if (typeof fragment === "string") {
          try {
            fragment = this.getFunction(fragment);
          } catch (error) {
            try {
              fragment = this.getError(fragment);
            } catch (_) {
              throw error;
            }
          }
        }
        return getStatic(this.constructor, "getSighash")(fragment);
      }
      // Get the topic (the bytes32 hash) used by Solidity to identify an event
      getEventTopic(eventFragment) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        return getStatic(this.constructor, "getEventTopic")(eventFragment);
      }
      _decodeParams(params, data) {
        return this._abiCoder.decode(params, data);
      }
      _encodeParams(params, values) {
        return this._abiCoder.encode(params, values);
      }
      encodeDeploy(values) {
        return this._encodeParams(this.deploy.inputs, values || []);
      }
      decodeErrorResult(fragment, data) {
        if (typeof fragment === "string") {
          fragment = this.getError(fragment);
        }
        const bytes = arrayify(data);
        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
          logger14.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes));
        }
        return this._decodeParams(fragment.inputs, bytes.slice(4));
      }
      encodeErrorResult(fragment, values) {
        if (typeof fragment === "string") {
          fragment = this.getError(fragment);
        }
        return hexlify(concat([
          this.getSighash(fragment),
          this._encodeParams(fragment.inputs, values || [])
        ]));
      }
      // Decode the data for a function call (e.g. tx.data)
      decodeFunctionData(functionFragment, data) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        const bytes = arrayify(data);
        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
          logger14.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes));
        }
        return this._decodeParams(functionFragment.inputs, bytes.slice(4));
      }
      // Encode the data for a function call (e.g. tx.data)
      encodeFunctionData(functionFragment, values) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        return hexlify(concat([
          this.getSighash(functionFragment),
          this._encodeParams(functionFragment.inputs, values || [])
        ]));
      }
      // Decode the result from a function call (e.g. from eth_call)
      decodeFunctionResult(functionFragment, data) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        let bytes = arrayify(data);
        let reason = null;
        let message = "";
        let errorArgs = null;
        let errorName = null;
        let errorSignature = null;
        switch (bytes.length % this._abiCoder._getWordSize()) {
          case 0:
            try {
              return this._abiCoder.decode(functionFragment.outputs, bytes);
            } catch (error) {
            }
            break;
          case 4: {
            const selector = hexlify(bytes.slice(0, 4));
            const builtin = BuiltinErrors[selector];
            if (builtin) {
              errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
              errorName = builtin.name;
              errorSignature = builtin.signature;
              if (builtin.reason) {
                reason = errorArgs[0];
              }
              if (errorName === "Error") {
                message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
              } else if (errorName === "Panic") {
                message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
              }
            } else {
              try {
                const error = this.getError(selector);
                errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
                errorName = error.name;
                errorSignature = error.format();
              } catch (error) {
              }
            }
            break;
          }
        }
        return logger14.throwError("call revert exception" + message, Logger.errors.CALL_EXCEPTION, {
          method: functionFragment.format(),
          data: hexlify(data),
          errorArgs,
          errorName,
          errorSignature,
          reason
        });
      }
      // Encode the result for a function call (e.g. for eth_call)
      encodeFunctionResult(functionFragment, values) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
      }
      // Create the filter for the event with search criteria (e.g. for eth_filterLog)
      encodeFilterTopics(eventFragment, values) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        if (values.length > eventFragment.inputs.length) {
          logger14.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
            argument: "values",
            value: values
          });
        }
        let topics = [];
        if (!eventFragment.anonymous) {
          topics.push(this.getEventTopic(eventFragment));
        }
        const encodeTopic = (param, value) => {
          if (param.type === "string") {
            return id(value);
          } else if (param.type === "bytes") {
            return keccak256(hexlify(value));
          }
          if (param.type === "bool" && typeof value === "boolean") {
            value = value ? "0x01" : "0x00";
          }
          if (param.type.match(/^u?int/)) {
            value = BigNumber.from(value).toHexString();
          }
          if (param.type === "address") {
            this._abiCoder.encode(["address"], [value]);
          }
          return hexZeroPad(hexlify(value), 32);
        };
        values.forEach((value, index) => {
          let param = eventFragment.inputs[index];
          if (!param.indexed) {
            if (value != null) {
              logger14.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
            }
            return;
          }
          if (value == null) {
            topics.push(null);
          } else if (param.baseType === "array" || param.baseType === "tuple") {
            logger14.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
          } else if (Array.isArray(value)) {
            topics.push(value.map((value2) => encodeTopic(param, value2)));
          } else {
            topics.push(encodeTopic(param, value));
          }
        });
        while (topics.length && topics[topics.length - 1] === null) {
          topics.pop();
        }
        return topics;
      }
      encodeEventLog(eventFragment, values) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        const topics = [];
        const dataTypes = [];
        const dataValues = [];
        if (!eventFragment.anonymous) {
          topics.push(this.getEventTopic(eventFragment));
        }
        if (values.length !== eventFragment.inputs.length) {
          logger14.throwArgumentError("event arguments/values mismatch", "values", values);
        }
        eventFragment.inputs.forEach((param, index) => {
          const value = values[index];
          if (param.indexed) {
            if (param.type === "string") {
              topics.push(id(value));
            } else if (param.type === "bytes") {
              topics.push(keccak256(value));
            } else if (param.baseType === "tuple" || param.baseType === "array") {
              throw new Error("not implemented");
            } else {
              topics.push(this._abiCoder.encode([param.type], [value]));
            }
          } else {
            dataTypes.push(param);
            dataValues.push(value);
          }
        });
        return {
          data: this._abiCoder.encode(dataTypes, dataValues),
          topics
        };
      }
      // Decode a filter for the event and the search criteria
      decodeEventLog(eventFragment, data, topics) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        if (topics != null && !eventFragment.anonymous) {
          let topicHash = this.getEventTopic(eventFragment);
          if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
            logger14.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
          }
          topics = topics.slice(1);
        }
        let indexed = [];
        let nonIndexed = [];
        let dynamic = [];
        eventFragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
              indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
              dynamic.push(true);
            } else {
              indexed.push(param);
              dynamic.push(false);
            }
          } else {
            nonIndexed.push(param);
            dynamic.push(false);
          }
        });
        let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;
        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
        let result = [];
        let nonIndexedIndex = 0, indexedIndex = 0;
        eventFragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (resultIndexed == null) {
              result[index] = new Indexed({ _isIndexed: true, hash: null });
            } else if (dynamic[index]) {
              result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
            } else {
              try {
                result[index] = resultIndexed[indexedIndex++];
              } catch (error) {
                result[index] = error;
              }
            }
          } else {
            try {
              result[index] = resultNonIndexed[nonIndexedIndex++];
            } catch (error) {
              result[index] = error;
            }
          }
          if (param.name && result[param.name] == null) {
            const value = result[index];
            if (value instanceof Error) {
              Object.defineProperty(result, param.name, {
                enumerable: true,
                get: () => {
                  throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);
                }
              });
            } else {
              result[param.name] = value;
            }
          }
        });
        for (let i = 0; i < result.length; i++) {
          const value = result[i];
          if (value instanceof Error) {
            Object.defineProperty(result, i, {
              enumerable: true,
              get: () => {
                throw wrapAccessError(`index ${i}`, value);
              }
            });
          }
        }
        return Object.freeze(result);
      }
      // Given a transaction, find the matching function fragment (if any) and
      // determine all its properties and call parameters
      parseTransaction(tx) {
        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
        if (!fragment) {
          return null;
        }
        return new TransactionDescription({
          args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
          functionFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          sighash: this.getSighash(fragment),
          value: BigNumber.from(tx.value || "0")
        });
      }
      // @TODO
      //parseCallResult(data: BytesLike): ??
      // Given an event log, find the matching event fragment (if any) and
      // determine all its properties and values
      parseLog(log) {
        let fragment = this.getEvent(log.topics[0]);
        if (!fragment || fragment.anonymous) {
          return null;
        }
        return new LogDescription({
          eventFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          topic: this.getEventTopic(fragment),
          args: this.decodeEventLog(fragment, log.data, log.topics)
        });
      }
      parseError(data) {
        const hexData = hexlify(data);
        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
        if (!fragment) {
          return null;
        }
        return new ErrorDescription({
          args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
          errorFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          sighash: this.getSighash(fragment)
        });
      }
      /*
      static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
          if (Interface.isInterface(value)) {
              return value;
          }
          if (typeof(value) === "string") {
              return new Interface(JSON.parse(value));
          }
          return new Interface(value);
      }
      */
      static isInterface(value) {
        return !!(value && value._isInterface);
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/index.js
var lib_exports = {};
__export(lib_exports, {
  AbiCoder: () => AbiCoder,
  ConstructorFragment: () => ConstructorFragment,
  ErrorFragment: () => ErrorFragment,
  EventFragment: () => EventFragment,
  FormatTypes: () => FormatTypes,
  Fragment: () => Fragment,
  FunctionFragment: () => FunctionFragment,
  Indexed: () => Indexed,
  Interface: () => Interface,
  LogDescription: () => LogDescription,
  ParamType: () => ParamType,
  TransactionDescription: () => TransactionDescription,
  checkResultErrors: () => checkResultErrors,
  defaultAbiCoder: () => defaultAbiCoder
});
var init_lib13 = __esm({
  "node_modules/@ethersproject/abi/lib.esm/index.js"() {
    "use strict";
    init_fragments();
    init_abi_coder();
    init_interface();
  }
});

// node_modules/web3-eth-abi/lib/index.js
var require_lib7 = __commonJS({
  "node_modules/web3-eth-abi/lib/index.js"(exports, module) {
    var Buffer2 = require_buffer().Buffer;
    var utils = require_lib3();
    var EthersAbiCoder = (init_lib13(), __toCommonJS(lib_exports)).AbiCoder;
    var ParamType2 = (init_lib13(), __toCommonJS(lib_exports)).ParamType;
    var ethersAbiCoder = new EthersAbiCoder(function(type, value) {
      if (type.match(/^u?int/) && !Array.isArray(value) && (!(!!value && typeof value === "object") || value.constructor.name !== "BN")) {
        return value.toString();
      }
      return value;
    });
    function Result() {
    }
    var ABICoder = function() {
    };
    ABICoder.prototype.encodeFunctionSignature = function(functionName) {
      if (typeof functionName === "function" || typeof functionName === "object" && functionName) {
        functionName = utils._jsonInterfaceMethodToString(functionName);
      }
      return utils.sha3(functionName).slice(0, 10);
    };
    ABICoder.prototype.encodeEventSignature = function(functionName) {
      if (typeof functionName === "function" || typeof functionName === "object" && functionName) {
        functionName = utils._jsonInterfaceMethodToString(functionName);
      }
      return utils.sha3(functionName);
    };
    ABICoder.prototype.encodeParameter = function(type, param) {
      return this.encodeParameters([type], [param]);
    };
    ABICoder.prototype.encodeParameters = function(types, params) {
      var self2 = this;
      types = self2.mapTypes(types);
      params = params.map(function(param, index) {
        let type = types[index];
        if (typeof type === "object" && type.type) {
          type = type.type;
        }
        param = self2.formatParam(type, param);
        if (typeof type === "string" && type.includes("tuple")) {
          const coder2 = ethersAbiCoder._getCoder(ParamType2.from(type));
          const modifyParams = (coder3, param2) => {
            if (coder3.name === "array") {
              if (!coder3.type.match(/\[(\d+)\]/)) {
                return param2.map((p) => modifyParams(ethersAbiCoder._getCoder(ParamType2.from(coder3.type.replace("[]", ""))), p));
              }
              const arrayLength = parseInt(coder3.type.match(/\[(\d+)\]/)[1]);
              if (param2.length !== arrayLength) {
                throw new Error("Array length does not matches with the given input");
              }
              return param2.map((p) => modifyParams(ethersAbiCoder._getCoder(ParamType2.from(coder3.type.replace(/\[\d+\]/, ""))), p));
            }
            coder3.coders.forEach((c, i) => {
              if (c.name === "tuple") {
                modifyParams(c, param2[i]);
              } else {
                param2[i] = self2.formatParam(c.name, param2[i]);
              }
            });
          };
          modifyParams(coder2, param);
        }
        return param;
      });
      return ethersAbiCoder.encode(types, params);
    };
    ABICoder.prototype.mapTypes = function(types) {
      var self2 = this;
      var mappedTypes = [];
      types.forEach(function(type) {
        if (typeof type === "object" && type.type === "function") {
          type = Object.assign({}, type, { type: "bytes24" });
        }
        if (self2.isSimplifiedStructFormat(type)) {
          var structName = Object.keys(type)[0];
          mappedTypes.push(Object.assign(self2.mapStructNameAndType(structName), {
            components: self2.mapStructToCoderFormat(type[structName])
          }));
          return;
        }
        mappedTypes.push(type);
      });
      return mappedTypes;
    };
    ABICoder.prototype.isSimplifiedStructFormat = function(type) {
      return typeof type === "object" && typeof type.components === "undefined" && typeof type.name === "undefined";
    };
    ABICoder.prototype.mapStructNameAndType = function(structName) {
      var type = "tuple";
      if (structName.indexOf("[]") > -1) {
        type = "tuple[]";
        structName = structName.slice(0, -2);
      }
      return { type, name: structName };
    };
    ABICoder.prototype.mapStructToCoderFormat = function(struct) {
      var self2 = this;
      var components = [];
      Object.keys(struct).forEach(function(key2) {
        if (typeof struct[key2] === "object") {
          components.push(Object.assign(self2.mapStructNameAndType(key2), {
            components: self2.mapStructToCoderFormat(struct[key2])
          }));
          return;
        }
        components.push({
          name: key2,
          type: struct[key2]
        });
      });
      return components;
    };
    ABICoder.prototype.formatParam = function(type, param) {
      const paramTypeBytes2 = new RegExp(/^bytes([0-9]*)$/);
      const paramTypeBytesArray = new RegExp(/^bytes([0-9]*)\[\]$/);
      const paramTypeNumber2 = new RegExp(/^(u?int)([0-9]*)$/);
      const paramTypeNumberArray = new RegExp(/^(u?int)([0-9]*)\[\]$/);
      if (utils.isBN(param) || utils.isBigNumber(param)) {
        return param.toString(10);
      }
      if (type.match(paramTypeBytesArray) || type.match(paramTypeNumberArray)) {
        return param.map((p) => this.formatParam(type.replace("[]", ""), p));
      }
      let match = type.match(paramTypeNumber2);
      if (match) {
        let size = parseInt(match[2] || "256");
        if (size / 8 < param.length) {
          param = utils.leftPad(param, size);
        }
      }
      match = type.match(paramTypeBytes2);
      if (match) {
        if (Buffer2.isBuffer(param)) {
          param = utils.toHex(param);
        }
        let size = parseInt(match[1]);
        if (size) {
          let maxSize = size * 2;
          if (param.substring(0, 2) === "0x") {
            maxSize += 2;
          }
          if (param.length < maxSize) {
            param = utils.rightPad(param, size * 2);
          }
        }
        if (param.length % 2 === 1) {
          param = "0x0" + param.substring(2);
        }
      }
      return param;
    };
    ABICoder.prototype.encodeFunctionCall = function(jsonInterface, params) {
      return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace("0x", "");
    };
    ABICoder.prototype.decodeParameter = function(type, bytes) {
      return this.decodeParameters([type], bytes)[0];
    };
    ABICoder.prototype.decodeParameters = function(outputs, bytes) {
      return this.decodeParametersWith(outputs, bytes, false);
    };
    ABICoder.prototype.decodeParametersWith = function(outputs, bytes, loose) {
      if (outputs.length > 0 && (!bytes || bytes === "0x" || bytes === "0X")) {
        throw new Error("Returned values aren't valid, did it run Out of Gas? You might also see this error if you are not using the correct ABI for the contract you are retrieving data from, requesting data from a block number that does not exist, or querying a node which is not fully synced.");
      }
      var res = ethersAbiCoder.decode(this.mapTypes(outputs), "0x" + bytes.replace(/0x/i, ""), loose);
      var returnValue = new Result();
      returnValue.__length__ = 0;
      outputs.forEach(function(output, i) {
        var decodedValue = res[returnValue.__length__];
        const isStringObject = typeof output === "object" && output.type && output.type === "string";
        const isStringType = typeof output === "string" && output === "string";
        decodedValue = decodedValue === "0x" && !isStringObject && !isStringType ? null : decodedValue;
        returnValue[i] = decodedValue;
        if ((typeof output === "function" || !!output && typeof output === "object") && output.name) {
          returnValue[output.name] = decodedValue;
        }
        returnValue.__length__++;
      });
      return returnValue;
    };
    ABICoder.prototype.decodeLog = function(inputs, data, topics) {
      var _this = this;
      topics = Array.isArray(topics) ? topics : [topics];
      data = data || "";
      var notIndexedInputs = [];
      var indexedParams = [];
      var topicCount = 0;
      inputs.forEach(function(input, i) {
        if (input.indexed) {
          indexedParams[i] = ["bool", "int", "uint", "address", "fixed", "ufixed"].find(function(staticType) {
            return input.type.indexOf(staticType) !== -1;
          }) ? _this.decodeParameter(input.type, topics[topicCount]) : topics[topicCount];
          topicCount++;
        } else {
          notIndexedInputs[i] = input;
        }
      });
      var nonIndexedData = data;
      var notIndexedParams = nonIndexedData ? this.decodeParametersWith(notIndexedInputs, nonIndexedData, true) : [];
      var returnValue = new Result();
      returnValue.__length__ = 0;
      inputs.forEach(function(res, i) {
        returnValue[i] = res.type === "string" ? "" : null;
        if (typeof notIndexedParams[i] !== "undefined") {
          returnValue[i] = notIndexedParams[i];
        }
        if (typeof indexedParams[i] !== "undefined") {
          returnValue[i] = indexedParams[i];
        }
        if (res.name) {
          returnValue[res.name] = returnValue[i];
        }
        returnValue.__length__++;
      });
      return returnValue;
    };
    var coder = new ABICoder();
    module.exports = coder;
  }
});

// node_modules/sturdy-websocket/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/sturdy-websocket/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SHOULD_RECONNECT_FALSE_MESSAGE = "Provided shouldReconnect() returned false. Closing permanently.";
    var SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE = "Provided shouldReconnect() resolved to false. Closing permanently.";
    var SturdyWebSocket2 = (
      /** @class */
      function() {
        function SturdyWebSocket3(url, protocolsOrOptions, options) {
          if (options === void 0) {
            options = {};
          }
          this.url = url;
          this.onclose = null;
          this.onerror = null;
          this.onmessage = null;
          this.onopen = null;
          this.ondown = null;
          this.onreopen = null;
          this.CONNECTING = SturdyWebSocket3.CONNECTING;
          this.OPEN = SturdyWebSocket3.OPEN;
          this.CLOSING = SturdyWebSocket3.CLOSING;
          this.CLOSED = SturdyWebSocket3.CLOSED;
          this.hasBeenOpened = false;
          this.isClosed = false;
          this.messageBuffer = [];
          this.nextRetryTime = 0;
          this.reconnectCount = 0;
          this.lastKnownExtensions = "";
          this.lastKnownProtocol = "";
          this.listeners = {};
          if (protocolsOrOptions == null || typeof protocolsOrOptions === "string" || Array.isArray(protocolsOrOptions)) {
            this.protocols = protocolsOrOptions;
          } else {
            options = protocolsOrOptions;
          }
          this.options = applyDefaultOptions(options);
          if (!this.options.wsConstructor) {
            if (typeof WebSocket !== "undefined") {
              this.options.wsConstructor = WebSocket;
            } else {
              throw new Error("WebSocket not present in global scope and no wsConstructor option was provided.");
            }
          }
          this.openNewWebSocket();
        }
        Object.defineProperty(SturdyWebSocket3.prototype, "binaryType", {
          get: function() {
            return this.binaryTypeInternal || "blob";
          },
          set: function(binaryType) {
            this.binaryTypeInternal = binaryType;
            if (this.ws) {
              this.ws.binaryType = binaryType;
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(SturdyWebSocket3.prototype, "bufferedAmount", {
          get: function() {
            var sum = this.ws ? this.ws.bufferedAmount : 0;
            var hasUnknownAmount = false;
            this.messageBuffer.forEach(function(data) {
              var byteLength = getDataByteLength(data);
              if (byteLength != null) {
                sum += byteLength;
              } else {
                hasUnknownAmount = true;
              }
            });
            if (hasUnknownAmount) {
              this.debugLog("Some buffered data had unknown length. bufferedAmount() return value may be below the correct amount.");
            }
            return sum;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(SturdyWebSocket3.prototype, "extensions", {
          get: function() {
            return this.ws ? this.ws.extensions : this.lastKnownExtensions;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(SturdyWebSocket3.prototype, "protocol", {
          get: function() {
            return this.ws ? this.ws.protocol : this.lastKnownProtocol;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(SturdyWebSocket3.prototype, "readyState", {
          get: function() {
            return this.isClosed ? SturdyWebSocket3.CLOSED : SturdyWebSocket3.OPEN;
          },
          enumerable: true,
          configurable: true
        });
        SturdyWebSocket3.prototype.close = function(code, reason) {
          this.disposeSocket(code, reason);
          this.shutdown();
          this.debugLog("WebSocket permanently closed by client.");
        };
        SturdyWebSocket3.prototype.send = function(data) {
          if (this.isClosed) {
            throw new Error("WebSocket is already in CLOSING or CLOSED state.");
          } else if (this.ws && this.ws.readyState === this.OPEN) {
            this.ws.send(data);
          } else {
            this.messageBuffer.push(data);
          }
        };
        SturdyWebSocket3.prototype.reconnect = function() {
          if (this.isClosed) {
            throw new Error("Cannot call reconnect() on socket which is permanently closed.");
          }
          this.disposeSocket(1e3, "Client requested reconnect.");
          this.handleClose(void 0);
        };
        SturdyWebSocket3.prototype.addEventListener = function(type, listener) {
          if (!this.listeners[type]) {
            this.listeners[type] = [];
          }
          this.listeners[type].push(listener);
        };
        SturdyWebSocket3.prototype.dispatchEvent = function(event) {
          return this.dispatchEventOfType(event.type, event);
        };
        SturdyWebSocket3.prototype.removeEventListener = function(type, listener) {
          if (this.listeners[type]) {
            this.listeners[type] = this.listeners[type].filter(function(l) {
              return l !== listener;
            });
          }
        };
        SturdyWebSocket3.prototype.openNewWebSocket = function() {
          var _this = this;
          if (this.isClosed) {
            return;
          }
          var _a2 = this.options, connectTimeout = _a2.connectTimeout, wsConstructor = _a2.wsConstructor;
          this.debugLog("Opening new WebSocket to " + this.url + ".");
          var ws = new wsConstructor(this.url, this.protocols);
          ws.onclose = function(event) {
            return _this.handleClose(event);
          };
          ws.onerror = function(event) {
            return _this.handleError(event);
          };
          ws.onmessage = function(event) {
            return _this.handleMessage(event);
          };
          ws.onopen = function(event) {
            return _this.handleOpen(event);
          };
          this.connectTimeoutId = setTimeout(function() {
            _this.clearConnectTimeout();
            _this.disposeSocket();
            _this.handleClose(void 0);
          }, connectTimeout);
          this.ws = ws;
        };
        SturdyWebSocket3.prototype.handleOpen = function(event) {
          var _this = this;
          if (!this.ws || this.isClosed) {
            return;
          }
          var allClearResetTime = this.options.allClearResetTime;
          this.debugLog("WebSocket opened.");
          if (this.binaryTypeInternal != null) {
            this.ws.binaryType = this.binaryTypeInternal;
          } else {
            this.binaryTypeInternal = this.ws.binaryType;
          }
          this.clearConnectTimeout();
          if (this.hasBeenOpened) {
            this.dispatchEventOfType("reopen", event);
          } else {
            this.dispatchEventOfType("open", event);
            this.hasBeenOpened = true;
          }
          this.messageBuffer.forEach(function(message) {
            return _this.send(message);
          });
          this.messageBuffer = [];
          this.allClearTimeoutId = setTimeout(function() {
            _this.clearAllClearTimeout();
            _this.nextRetryTime = 0;
            _this.reconnectCount = 0;
            var openTime = allClearResetTime / 1e3 | 0;
            _this.debugLog("WebSocket remained open for " + openTime + " seconds. Resetting retry time and count.");
          }, allClearResetTime);
        };
        SturdyWebSocket3.prototype.handleMessage = function(event) {
          if (this.isClosed) {
            return;
          }
          this.dispatchEventOfType("message", event);
        };
        SturdyWebSocket3.prototype.handleClose = function(event) {
          var _this = this;
          if (this.isClosed) {
            return;
          }
          var _a2 = this.options, maxReconnectAttempts = _a2.maxReconnectAttempts, shouldReconnect = _a2.shouldReconnect;
          this.clearConnectTimeout();
          this.clearAllClearTimeout();
          if (this.ws) {
            this.lastKnownExtensions = this.ws.extensions;
            this.lastKnownProtocol = this.ws.protocol;
            this.disposeSocket();
          }
          this.dispatchEventOfType("down", event);
          if (this.reconnectCount >= maxReconnectAttempts) {
            this.stopReconnecting(event, this.getTooManyFailedReconnectsMessage());
            return;
          }
          var willReconnect = !event || shouldReconnect(event);
          if (typeof willReconnect === "boolean") {
            this.handleWillReconnect(willReconnect, event, SHOULD_RECONNECT_FALSE_MESSAGE);
          } else {
            willReconnect.then(function(willReconnectResolved) {
              if (_this.isClosed) {
                return;
              }
              _this.handleWillReconnect(willReconnectResolved, event, SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE);
            });
          }
        };
        SturdyWebSocket3.prototype.handleError = function(event) {
          this.dispatchEventOfType("error", event);
          this.debugLog("WebSocket encountered an error.");
        };
        SturdyWebSocket3.prototype.handleWillReconnect = function(willReconnect, event, denialReason) {
          if (willReconnect) {
            this.reestablishConnection();
          } else {
            this.stopReconnecting(event, denialReason);
          }
        };
        SturdyWebSocket3.prototype.reestablishConnection = function() {
          var _this = this;
          var _a2 = this.options, minReconnectDelay = _a2.minReconnectDelay, maxReconnectDelay = _a2.maxReconnectDelay, reconnectBackoffFactor = _a2.reconnectBackoffFactor;
          this.reconnectCount++;
          var retryTime = this.nextRetryTime;
          this.nextRetryTime = Math.max(minReconnectDelay, Math.min(this.nextRetryTime * reconnectBackoffFactor, maxReconnectDelay));
          setTimeout(function() {
            return _this.openNewWebSocket();
          }, retryTime);
          var retryTimeSeconds = retryTime / 1e3 | 0;
          this.debugLog("WebSocket was closed. Re-opening in " + retryTimeSeconds + " seconds.");
        };
        SturdyWebSocket3.prototype.stopReconnecting = function(event, debugReason) {
          this.debugLog(debugReason);
          this.shutdown();
          if (event) {
            this.dispatchEventOfType("close", event);
          }
        };
        SturdyWebSocket3.prototype.shutdown = function() {
          this.isClosed = true;
          this.clearAllTimeouts();
          this.messageBuffer = [];
          this.disposeSocket();
        };
        SturdyWebSocket3.prototype.disposeSocket = function(closeCode, reason) {
          if (!this.ws) {
            return;
          }
          this.ws.onerror = noop3;
          this.ws.onclose = noop3;
          this.ws.onmessage = noop3;
          this.ws.onopen = noop3;
          this.ws.close(closeCode, reason);
          this.ws = void 0;
        };
        SturdyWebSocket3.prototype.clearAllTimeouts = function() {
          this.clearConnectTimeout();
          this.clearAllClearTimeout();
        };
        SturdyWebSocket3.prototype.clearConnectTimeout = function() {
          if (this.connectTimeoutId != null) {
            clearTimeout(this.connectTimeoutId);
            this.connectTimeoutId = void 0;
          }
        };
        SturdyWebSocket3.prototype.clearAllClearTimeout = function() {
          if (this.allClearTimeoutId != null) {
            clearTimeout(this.allClearTimeoutId);
            this.allClearTimeoutId = void 0;
          }
        };
        SturdyWebSocket3.prototype.dispatchEventOfType = function(type, event) {
          var _this = this;
          switch (type) {
            case "close":
              if (this.onclose) {
                this.onclose(event);
              }
              break;
            case "error":
              if (this.onerror) {
                this.onerror(event);
              }
              break;
            case "message":
              if (this.onmessage) {
                this.onmessage(event);
              }
              break;
            case "open":
              if (this.onopen) {
                this.onopen(event);
              }
              break;
            case "down":
              if (this.ondown) {
                this.ondown(event);
              }
              break;
            case "reopen":
              if (this.onreopen) {
                this.onreopen(event);
              }
              break;
          }
          if (type in this.listeners) {
            this.listeners[type].slice().forEach(function(listener) {
              return _this.callListener(listener, event);
            });
          }
          return !event || !event.defaultPrevented;
        };
        SturdyWebSocket3.prototype.callListener = function(listener, event) {
          if (typeof listener === "function") {
            listener.call(this, event);
          } else {
            listener.handleEvent.call(this, event);
          }
        };
        SturdyWebSocket3.prototype.debugLog = function(message) {
          if (this.options.debug) {
            console.log(message);
          }
        };
        SturdyWebSocket3.prototype.getTooManyFailedReconnectsMessage = function() {
          var maxReconnectAttempts = this.options.maxReconnectAttempts;
          return "Failed to reconnect after " + maxReconnectAttempts + " " + pluralize("attempt", maxReconnectAttempts) + ". Closing permanently.";
        };
        SturdyWebSocket3.DEFAULT_OPTIONS = {
          allClearResetTime: 5e3,
          connectTimeout: 5e3,
          debug: false,
          minReconnectDelay: 1e3,
          maxReconnectDelay: 3e4,
          maxReconnectAttempts: Number.POSITIVE_INFINITY,
          reconnectBackoffFactor: 1.5,
          shouldReconnect: function() {
            return true;
          },
          wsConstructor: void 0
        };
        SturdyWebSocket3.CONNECTING = 0;
        SturdyWebSocket3.OPEN = 1;
        SturdyWebSocket3.CLOSING = 2;
        SturdyWebSocket3.CLOSED = 3;
        return SturdyWebSocket3;
      }()
    );
    exports.default = SturdyWebSocket2;
    function applyDefaultOptions(options) {
      var result = {};
      Object.keys(SturdyWebSocket2.DEFAULT_OPTIONS).forEach(function(key2) {
        var value = options[key2];
        result[key2] = value === void 0 ? SturdyWebSocket2.DEFAULT_OPTIONS[key2] : value;
      });
      return result;
    }
    function getDataByteLength(data) {
      if (typeof data === "string") {
        return 2 * data.length;
      } else if (data instanceof ArrayBuffer) {
        return data.byteLength;
      } else if (data instanceof Blob) {
        return data.size;
      } else {
        return void 0;
      }
    }
    function pluralize(s, n) {
      return n === 1 ? s : s + "s";
    }
    function noop3() {
    }
  }
});

// node_modules/es5-ext/global.js
var require_global = __commonJS({
  "node_modules/es5-ext/global.js"(exports, module) {
    var naiveFallback = function() {
      if (typeof self === "object" && self)
        return self;
      if (typeof window === "object" && window)
        return window;
      throw new Error("Unable to resolve global `this`");
    };
    module.exports = function() {
      if (this)
        return this;
      if (typeof globalThis === "object" && globalThis)
        return globalThis;
      try {
        Object.defineProperty(Object.prototype, "__global__", {
          get: function() {
            return this;
          },
          configurable: true
        });
      } catch (error) {
        return naiveFallback();
      }
      try {
        if (!__global__)
          return naiveFallback();
        return __global__;
      } finally {
        delete Object.prototype.__global__;
      }
    }();
  }
});

// node_modules/websocket/package.json
var require_package2 = __commonJS({
  "node_modules/websocket/package.json"(exports, module) {
    module.exports = {
      name: "websocket",
      description: "Websocket Client & Server Library implementing the WebSocket protocol as specified in RFC 6455.",
      keywords: [
        "websocket",
        "websockets",
        "socket",
        "networking",
        "comet",
        "push",
        "RFC-6455",
        "realtime",
        "server",
        "client"
      ],
      author: "Brian McKelvey <theturtle32@gmail.com> (https://github.com/theturtle32)",
      contributors: [
        "Iñaki Baz Castillo <ibc@aliax.net> (http://dev.sipdoc.net)"
      ],
      version: "1.0.34",
      repository: {
        type: "git",
        url: "https://github.com/theturtle32/WebSocket-Node.git"
      },
      homepage: "https://github.com/theturtle32/WebSocket-Node",
      engines: {
        node: ">=4.0.0"
      },
      dependencies: {
        bufferutil: "^4.0.1",
        debug: "^2.2.0",
        "es5-ext": "^0.10.50",
        "typedarray-to-buffer": "^3.1.5",
        "utf-8-validate": "^5.0.2",
        yaeti: "^0.0.6"
      },
      devDependencies: {
        "buffer-equal": "^1.0.0",
        gulp: "^4.0.2",
        "gulp-jshint": "^2.0.4",
        "jshint-stylish": "^2.2.1",
        jshint: "^2.0.0",
        tape: "^4.9.1"
      },
      config: {
        verbose: false
      },
      scripts: {
        test: "tape test/unit/*.js",
        gulp: "gulp"
      },
      main: "index",
      directories: {
        lib: "./lib"
      },
      browser: "lib/browser.js",
      license: "Apache-2.0"
    };
  }
});

// node_modules/websocket/lib/version.js
var require_version = __commonJS({
  "node_modules/websocket/lib/version.js"(exports, module) {
    module.exports = require_package2().version;
  }
});

// node_modules/websocket/lib/browser.js
var require_browser4 = __commonJS({
  "node_modules/websocket/lib/browser.js"(exports, module) {
    var _globalThis;
    if (typeof globalThis === "object") {
      _globalThis = globalThis;
    } else {
      try {
        _globalThis = require_global();
      } catch (error) {
      } finally {
        if (!_globalThis && typeof window !== "undefined") {
          _globalThis = window;
        }
        if (!_globalThis) {
          throw new Error("Could not determine global this");
        }
      }
    }
    var NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;
    var websocket_version = require_version();
    function W3CWebSocket(uri, protocols) {
      var native_instance;
      if (protocols) {
        native_instance = new NativeWebSocket(uri, protocols);
      } else {
        native_instance = new NativeWebSocket(uri);
      }
      return native_instance;
    }
    if (NativeWebSocket) {
      ["CONNECTING", "OPEN", "CLOSING", "CLOSED"].forEach(function(prop) {
        Object.defineProperty(W3CWebSocket, prop, {
          get: function() {
            return NativeWebSocket[prop];
          }
        });
      });
    }
    module.exports = {
      "w3cwebsocket": NativeWebSocket ? W3CWebSocket : null,
      "version": websocket_version
    };
  }
});

// node_modules/fetch-ponyfill/build/fetch-browser.js
var require_fetch_browser = __commonJS({
  "node_modules/fetch-ponyfill/build/fetch-browser.js"(exports, module) {
    (function(self2) {
      "use strict";
      function fetchPonyfill3(options) {
        var Promise2 = options && options.Promise || self2.Promise;
        var XMLHttpRequest2 = options && options.XMLHttpRequest || self2.XMLHttpRequest;
        var global2 = self2;
        return function() {
          var self3 = Object.create(global2, {
            fetch: {
              value: void 0,
              writable: true
            }
          });
          (function(self4) {
            "use strict";
            if (self4.fetch) {
              return;
            }
            var support = {
              searchParams: "URLSearchParams" in self4,
              iterable: "Symbol" in self4 && "iterator" in Symbol,
              blob: "FileReader" in self4 && "Blob" in self4 && function() {
                try {
                  new Blob();
                  return true;
                } catch (e) {
                  return false;
                }
              }(),
              formData: "FormData" in self4,
              arrayBuffer: "ArrayBuffer" in self4
            };
            if (support.arrayBuffer) {
              var viewClasses = [
                "[object Int8Array]",
                "[object Uint8Array]",
                "[object Uint8ClampedArray]",
                "[object Int16Array]",
                "[object Uint16Array]",
                "[object Int32Array]",
                "[object Uint32Array]",
                "[object Float32Array]",
                "[object Float64Array]"
              ];
              var isDataView = function(obj) {
                return obj && DataView.prototype.isPrototypeOf(obj);
              };
              var isArrayBufferView = ArrayBuffer.isView || function(obj) {
                return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
              };
            }
            function normalizeName(name2) {
              if (typeof name2 !== "string") {
                name2 = String(name2);
              }
              if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name2)) {
                throw new TypeError("Invalid character in header field name");
              }
              return name2.toLowerCase();
            }
            function normalizeValue(value) {
              if (typeof value !== "string") {
                value = String(value);
              }
              return value;
            }
            function iteratorFor(items) {
              var iterator = {
                next: function() {
                  var value = items.shift();
                  return { done: value === void 0, value };
                }
              };
              if (support.iterable) {
                iterator[Symbol.iterator] = function() {
                  return iterator;
                };
              }
              return iterator;
            }
            function Headers2(headers) {
              this.map = {};
              if (headers instanceof Headers2) {
                headers.forEach(function(value, name2) {
                  this.append(name2, value);
                }, this);
              } else if (Array.isArray(headers)) {
                headers.forEach(function(header) {
                  this.append(header[0], header[1]);
                }, this);
              } else if (headers) {
                Object.getOwnPropertyNames(headers).forEach(function(name2) {
                  this.append(name2, headers[name2]);
                }, this);
              }
            }
            Headers2.prototype.append = function(name2, value) {
              name2 = normalizeName(name2);
              value = normalizeValue(value);
              var oldValue = this.map[name2];
              this.map[name2] = oldValue ? oldValue + "," + value : value;
            };
            Headers2.prototype["delete"] = function(name2) {
              delete this.map[normalizeName(name2)];
            };
            Headers2.prototype.get = function(name2) {
              name2 = normalizeName(name2);
              return this.has(name2) ? this.map[name2] : null;
            };
            Headers2.prototype.has = function(name2) {
              return this.map.hasOwnProperty(normalizeName(name2));
            };
            Headers2.prototype.set = function(name2, value) {
              this.map[normalizeName(name2)] = normalizeValue(value);
            };
            Headers2.prototype.forEach = function(callback, thisArg) {
              for (var name2 in this.map) {
                if (this.map.hasOwnProperty(name2)) {
                  callback.call(thisArg, this.map[name2], name2, this);
                }
              }
            };
            Headers2.prototype.keys = function() {
              var items = [];
              this.forEach(function(value, name2) {
                items.push(name2);
              });
              return iteratorFor(items);
            };
            Headers2.prototype.values = function() {
              var items = [];
              this.forEach(function(value) {
                items.push(value);
              });
              return iteratorFor(items);
            };
            Headers2.prototype.entries = function() {
              var items = [];
              this.forEach(function(value, name2) {
                items.push([name2, value]);
              });
              return iteratorFor(items);
            };
            if (support.iterable) {
              Headers2.prototype[Symbol.iterator] = Headers2.prototype.entries;
            }
            function consumed(body) {
              if (body.bodyUsed) {
                return Promise2.reject(new TypeError("Already read"));
              }
              body.bodyUsed = true;
            }
            function fileReaderReady(reader) {
              return new Promise2(function(resolve, reject) {
                reader.onload = function() {
                  resolve(reader.result);
                };
                reader.onerror = function() {
                  reject(reader.error);
                };
              });
            }
            function readBlobAsArrayBuffer(blob) {
              var reader = new FileReader();
              var promise = fileReaderReady(reader);
              reader.readAsArrayBuffer(blob);
              return promise;
            }
            function readBlobAsText(blob) {
              var reader = new FileReader();
              var promise = fileReaderReady(reader);
              reader.readAsText(blob);
              return promise;
            }
            function readArrayBufferAsText(buf) {
              var view = new Uint8Array(buf);
              var chars = new Array(view.length);
              for (var i = 0; i < view.length; i++) {
                chars[i] = String.fromCharCode(view[i]);
              }
              return chars.join("");
            }
            function bufferClone(buf) {
              if (buf.slice) {
                return buf.slice(0);
              } else {
                var view = new Uint8Array(buf.byteLength);
                view.set(new Uint8Array(buf));
                return view.buffer;
              }
            }
            function Body() {
              this.bodyUsed = false;
              this._initBody = function(body) {
                this._bodyInit = body;
                if (!body) {
                  this._bodyText = "";
                } else if (typeof body === "string") {
                  this._bodyText = body;
                } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                  this._bodyBlob = body;
                } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                  this._bodyFormData = body;
                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                  this._bodyText = body.toString();
                } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                  this._bodyArrayBuffer = bufferClone(body.buffer);
                  this._bodyInit = new Blob([this._bodyArrayBuffer]);
                } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                  this._bodyArrayBuffer = bufferClone(body);
                } else {
                  throw new Error("unsupported BodyInit type");
                }
                if (!this.headers.get("content-type")) {
                  if (typeof body === "string") {
                    this.headers.set("content-type", "text/plain;charset=UTF-8");
                  } else if (this._bodyBlob && this._bodyBlob.type) {
                    this.headers.set("content-type", this._bodyBlob.type);
                  } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                    this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
                  }
                }
              };
              if (support.blob) {
                this.blob = function() {
                  var rejected = consumed(this);
                  if (rejected) {
                    return rejected;
                  }
                  if (this._bodyBlob) {
                    return Promise2.resolve(this._bodyBlob);
                  } else if (this._bodyArrayBuffer) {
                    return Promise2.resolve(new Blob([this._bodyArrayBuffer]));
                  } else if (this._bodyFormData) {
                    throw new Error("could not read FormData body as blob");
                  } else {
                    return Promise2.resolve(new Blob([this._bodyText]));
                  }
                };
                this.arrayBuffer = function() {
                  if (this._bodyArrayBuffer) {
                    return consumed(this) || Promise2.resolve(this._bodyArrayBuffer);
                  } else {
                    return this.blob().then(readBlobAsArrayBuffer);
                  }
                };
              }
              this.text = function() {
                var rejected = consumed(this);
                if (rejected) {
                  return rejected;
                }
                if (this._bodyBlob) {
                  return readBlobAsText(this._bodyBlob);
                } else if (this._bodyArrayBuffer) {
                  return Promise2.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
                } else if (this._bodyFormData) {
                  throw new Error("could not read FormData body as text");
                } else {
                  return Promise2.resolve(this._bodyText);
                }
              };
              if (support.formData) {
                this.formData = function() {
                  return this.text().then(decode3);
                };
              }
              this.json = function() {
                return this.text().then(JSON.parse);
              };
              return this;
            }
            var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
            function normalizeMethod(method) {
              var upcased = method.toUpperCase();
              return methods.indexOf(upcased) > -1 ? upcased : method;
            }
            function Request(input, options2) {
              options2 = options2 || {};
              var body = options2.body;
              if (input instanceof Request) {
                if (input.bodyUsed) {
                  throw new TypeError("Already read");
                }
                this.url = input.url;
                this.credentials = input.credentials;
                if (!options2.headers) {
                  this.headers = new Headers2(input.headers);
                }
                this.method = input.method;
                this.mode = input.mode;
                if (!body && input._bodyInit != null) {
                  body = input._bodyInit;
                  input.bodyUsed = true;
                }
              } else {
                this.url = String(input);
              }
              this.credentials = options2.credentials || this.credentials || "omit";
              if (options2.headers || !this.headers) {
                this.headers = new Headers2(options2.headers);
              }
              this.method = normalizeMethod(options2.method || this.method || "GET");
              this.mode = options2.mode || this.mode || null;
              this.referrer = null;
              if ((this.method === "GET" || this.method === "HEAD") && body) {
                throw new TypeError("Body not allowed for GET or HEAD requests");
              }
              this._initBody(body);
            }
            Request.prototype.clone = function() {
              return new Request(this, { body: this._bodyInit });
            };
            function decode3(body) {
              var form = new FormData();
              body.trim().split("&").forEach(function(bytes) {
                if (bytes) {
                  var split = bytes.split("=");
                  var name2 = split.shift().replace(/\+/g, " ");
                  var value = split.join("=").replace(/\+/g, " ");
                  form.append(decodeURIComponent(name2), decodeURIComponent(value));
                }
              });
              return form;
            }
            function parseHeaders(rawHeaders) {
              var headers = new Headers2();
              var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
              preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
                var parts = line.split(":");
                var key2 = parts.shift().trim();
                if (key2) {
                  var value = parts.join(":").trim();
                  headers.append(key2, value);
                }
              });
              return headers;
            }
            Body.call(Request.prototype);
            function Response(bodyInit, options2) {
              if (!options2) {
                options2 = {};
              }
              this.type = "default";
              this.status = options2.status === void 0 ? 200 : options2.status;
              this.ok = this.status >= 200 && this.status < 300;
              this.statusText = "statusText" in options2 ? options2.statusText : "OK";
              this.headers = new Headers2(options2.headers);
              this.url = options2.url || "";
              this._initBody(bodyInit);
            }
            Body.call(Response.prototype);
            Response.prototype.clone = function() {
              return new Response(this._bodyInit, {
                status: this.status,
                statusText: this.statusText,
                headers: new Headers2(this.headers),
                url: this.url
              });
            };
            Response.error = function() {
              var response = new Response(null, { status: 0, statusText: "" });
              response.type = "error";
              return response;
            };
            var redirectStatuses = [301, 302, 303, 307, 308];
            Response.redirect = function(url, status) {
              if (redirectStatuses.indexOf(status) === -1) {
                throw new RangeError("Invalid status code");
              }
              return new Response(null, { status, headers: { location: url } });
            };
            self4.Headers = Headers2;
            self4.Request = Request;
            self4.Response = Response;
            self4.fetch = function(input, init2) {
              return new Promise2(function(resolve, reject) {
                var request = new Request(input, init2);
                var xhr = new XMLHttpRequest2();
                xhr.onload = function() {
                  var options2 = {
                    status: xhr.status,
                    statusText: xhr.statusText,
                    headers: parseHeaders(xhr.getAllResponseHeaders() || "")
                  };
                  options2.url = "responseURL" in xhr ? xhr.responseURL : options2.headers.get("X-Request-URL");
                  var body = "response" in xhr ? xhr.response : xhr.responseText;
                  resolve(new Response(body, options2));
                };
                xhr.onerror = function() {
                  reject(new TypeError("Network request failed"));
                };
                xhr.ontimeout = function() {
                  reject(new TypeError("Network request failed"));
                };
                xhr.open(request.method, request.url, true);
                if (request.credentials === "include") {
                  xhr.withCredentials = true;
                } else if (request.credentials === "omit") {
                  xhr.withCredentials = false;
                }
                if ("responseType" in xhr && support.blob) {
                  xhr.responseType = "blob";
                }
                request.headers.forEach(function(value, name2) {
                  xhr.setRequestHeader(name2, value);
                });
                xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
              });
            };
            self4.fetch.polyfill = true;
          })(typeof self3 !== "undefined" ? self3 : this);
          return {
            fetch: self3.fetch,
            Headers: self3.Headers,
            Request: self3.Request,
            Response: self3.Response
          };
        }();
      }
      if (typeof define === "function" && define.amd) {
        define(function() {
          return fetchPonyfill3;
        });
      } else if (typeof exports === "object") {
        module.exports = fetchPonyfill3;
      } else {
        self2.fetchPonyfill = fetchPonyfill3;
      }
    })(typeof self !== "undefined" ? self : typeof globalThis !== "undefined" ? globalThis : exports);
  }
});

// node_modules/assert-never/index.js
var require_assert_never = __commonJS({
  "node_modules/assert-never/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function assertNever2(value, noThrow) {
      if (noThrow) {
        return value;
      }
      throw new Error("Unhandled discriminated union member: " + JSON.stringify(value));
    }
    exports.assertNever = assertNever2;
    exports.default = assertNever2;
  }
});

// node_modules/urijs/src/punycode.js
var require_punycode = __commonJS({
  "node_modules/urijs/src/punycode.js"(exports, module) {
    (function(root) {
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = typeof module == "object" && module && !module.nodeType && module;
      var freeGlobal = typeof globalThis == "object" && globalThis;
      if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
        root = freeGlobal;
      }
      var punycode, maxInt = 2147483647, base2 = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
      }, baseMinusTMin = base2 - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key2;
      function error(type) {
        throw new RangeError(errors[type]);
      }
      function map(array, fn) {
        var length = array.length;
        var result = [];
        while (length--) {
          result[length] = fn(array[length]);
        }
        return result;
      }
      function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
          result = parts[0] + "@";
          string = parts[1];
        }
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
      }
      function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while (counter < length) {
          value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      function ucs2encode(array) {
        return map(array, function(value) {
          var output = "";
          if (value > 65535) {
            value -= 65536;
            output += stringFromCharCode(value >>> 10 & 1023 | 55296);
            value = 56320 | value & 1023;
          }
          output += stringFromCharCode(value);
          return output;
        }).join("");
      }
      function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) {
          return codePoint - 22;
        }
        if (codePoint - 65 < 26) {
          return codePoint - 65;
        }
        if (codePoint - 97 < 26) {
          return codePoint - 97;
        }
        return base2;
      }
      function digitToBasic(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      }
      function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; delta > baseMinusTMin * tMax >> 1; k += base2) {
          delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      }
      function decode3(input) {
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, baseMinusT;
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
          basic = 0;
        }
        for (j = 0; j < basic; ++j) {
          if (input.charCodeAt(j) >= 128) {
            error("not-basic");
          }
          output.push(input.charCodeAt(j));
        }
        for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
          for (oldi = i, w = 1, k = base2; ; k += base2) {
            if (index >= inputLength) {
              error("invalid-input");
            }
            digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base2 || digit > floor((maxInt - i) / w)) {
              error("overflow");
            }
            i += digit * w;
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (digit < t) {
              break;
            }
            baseMinusT = base2 - t;
            if (w > floor(maxInt / baseMinusT)) {
              error("overflow");
            }
            w *= baseMinusT;
          }
          out = output.length + 1;
          bias = adapt(i - oldi, out, oldi == 0);
          if (floor(i / out) > maxInt - n) {
            error("overflow");
          }
          n += floor(i / out);
          i %= out;
          output.splice(i++, 0, n);
        }
        return ucs2encode(output);
      }
      function encode4(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
        input = ucs2decode(input);
        inputLength = input.length;
        n = initialN;
        delta = 0;
        bias = initialBias;
        for (j = 0; j < inputLength; ++j) {
          currentValue = input[j];
          if (currentValue < 128) {
            output.push(stringFromCharCode(currentValue));
          }
        }
        handledCPCount = basicLength = output.length;
        if (basicLength) {
          output.push(delimiter);
        }
        while (handledCPCount < inputLength) {
          for (m = maxInt, j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          }
          handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error("overflow");
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue < n && ++delta > maxInt) {
              error("overflow");
            }
            if (currentValue == n) {
              for (q = delta, k = base2; ; k += base2) {
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (q < t) {
                  break;
                }
                qMinusT = q - t;
                baseMinusT = base2 - t;
                output.push(
                  stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                );
                q = floor(qMinusT / baseMinusT);
              }
              output.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }
          ++delta;
          ++n;
        }
        return output.join("");
      }
      function toUnicode(input) {
        return mapDomain(input, function(string) {
          return regexPunycode.test(string) ? decode3(string.slice(4).toLowerCase()) : string;
        });
      }
      function toASCII(input) {
        return mapDomain(input, function(string) {
          return regexNonASCII.test(string) ? "xn--" + encode4(string) : string;
        });
      }
      punycode = {
        /**
         * A string representing the current Punycode.js version number.
         * @memberOf punycode
         * @type String
         */
        "version": "1.3.2",
        /**
         * An object of methods to convert from JavaScript's internal character
         * representation (UCS-2) to Unicode code points, and back.
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode
         * @type Object
         */
        "ucs2": {
          "decode": ucs2decode,
          "encode": ucs2encode
        },
        "decode": decode3,
        "encode": encode4,
        "toASCII": toASCII,
        "toUnicode": toUnicode
      };
      if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        define("punycode", function() {
          return punycode;
        });
      } else if (freeExports && freeModule) {
        if (module.exports == freeExports) {
          freeModule.exports = punycode;
        } else {
          for (key2 in punycode) {
            punycode.hasOwnProperty(key2) && (freeExports[key2] = punycode[key2]);
          }
        }
      } else {
        root.punycode = punycode;
      }
    })(exports);
  }
});

// node_modules/urijs/src/IPv6.js
var require_IPv6 = __commonJS({
  "node_modules/urijs/src/IPv6.js"(exports, module) {
    (function(root, factory) {
      "use strict";
      if (typeof module === "object" && module.exports) {
        module.exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define(factory);
      } else {
        root.IPv6 = factory(root);
      }
    })(exports, function(root) {
      "use strict";
      var _IPv6 = root && root.IPv6;
      function bestPresentation(address) {
        var _address = address.toLowerCase();
        var segments = _address.split(":");
        var length = segments.length;
        var total = 8;
        if (segments[0] === "" && segments[1] === "" && segments[2] === "") {
          segments.shift();
          segments.shift();
        } else if (segments[0] === "" && segments[1] === "") {
          segments.shift();
        } else if (segments[length - 1] === "" && segments[length - 2] === "") {
          segments.pop();
        }
        length = segments.length;
        if (segments[length - 1].indexOf(".") !== -1) {
          total = 7;
        }
        var pos;
        for (pos = 0; pos < length; pos++) {
          if (segments[pos] === "") {
            break;
          }
        }
        if (pos < total) {
          segments.splice(pos, 1, "0000");
          while (segments.length < total) {
            segments.splice(pos, 0, "0000");
          }
        }
        var _segments;
        for (var i = 0; i < total; i++) {
          _segments = segments[i].split("");
          for (var j = 0; j < 3; j++) {
            if (_segments[0] === "0" && _segments.length > 1) {
              _segments.splice(0, 1);
            } else {
              break;
            }
          }
          segments[i] = _segments.join("");
        }
        var best = -1;
        var _best = 0;
        var _current = 0;
        var current = -1;
        var inzeroes = false;
        for (i = 0; i < total; i++) {
          if (inzeroes) {
            if (segments[i] === "0") {
              _current += 1;
            } else {
              inzeroes = false;
              if (_current > _best) {
                best = current;
                _best = _current;
              }
            }
          } else {
            if (segments[i] === "0") {
              inzeroes = true;
              current = i;
              _current = 1;
            }
          }
        }
        if (_current > _best) {
          best = current;
          _best = _current;
        }
        if (_best > 1) {
          segments.splice(best, _best, "");
        }
        length = segments.length;
        var result = "";
        if (segments[0] === "") {
          result = ":";
        }
        for (i = 0; i < length; i++) {
          result += segments[i];
          if (i === length - 1) {
            break;
          }
          result += ":";
        }
        if (segments[length - 1] === "") {
          result += ":";
        }
        return result;
      }
      function noConflict() {
        if (root.IPv6 === this) {
          root.IPv6 = _IPv6;
        }
        return this;
      }
      return {
        best: bestPresentation,
        noConflict
      };
    });
  }
});

// node_modules/urijs/src/SecondLevelDomains.js
var require_SecondLevelDomains = __commonJS({
  "node_modules/urijs/src/SecondLevelDomains.js"(exports, module) {
    (function(root, factory) {
      "use strict";
      if (typeof module === "object" && module.exports) {
        module.exports = factory();
      } else if (typeof define === "function" && define.amd) {
        define(factory);
      } else {
        root.SecondLevelDomains = factory(root);
      }
    })(exports, function(root) {
      "use strict";
      var _SecondLevelDomains = root && root.SecondLevelDomains;
      var SLD = {
        // list of known Second Level Domains
        // converted list of SLDs from https://github.com/gavingmiller/second-level-domains
        // ----
        // publicsuffix.org is more current and actually used by a couple of browsers internally.
        // downside is it also contains domains like "dyndns.org" - which is fine for the security
        // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js
        // ----
        list: {
          "ac": " com gov mil net org ",
          "ae": " ac co gov mil name net org pro sch ",
          "af": " com edu gov net org ",
          "al": " com edu gov mil net org ",
          "ao": " co ed gv it og pb ",
          "ar": " com edu gob gov int mil net org tur ",
          "at": " ac co gv or ",
          "au": " asn com csiro edu gov id net org ",
          "ba": " co com edu gov mil net org rs unbi unmo unsa untz unze ",
          "bb": " biz co com edu gov info net org store tv ",
          "bh": " biz cc com edu gov info net org ",
          "bn": " com edu gov net org ",
          "bo": " com edu gob gov int mil net org tv ",
          "br": " adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ",
          "bs": " com edu gov net org ",
          "bz": " du et om ov rg ",
          "ca": " ab bc mb nb nf nl ns nt nu on pe qc sk yk ",
          "ck": " biz co edu gen gov info net org ",
          "cn": " ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ",
          "co": " com edu gov mil net nom org ",
          "cr": " ac c co ed fi go or sa ",
          "cy": " ac biz com ekloges gov ltd name net org parliament press pro tm ",
          "do": " art com edu gob gov mil net org sld web ",
          "dz": " art asso com edu gov net org pol ",
          "ec": " com edu fin gov info med mil net org pro ",
          "eg": " com edu eun gov mil name net org sci ",
          "er": " com edu gov ind mil net org rochest w ",
          "es": " com edu gob nom org ",
          "et": " biz com edu gov info name net org ",
          "fj": " ac biz com info mil name net org pro ",
          "fk": " ac co gov net nom org ",
          "fr": " asso com f gouv nom prd presse tm ",
          "gg": " co net org ",
          "gh": " com edu gov mil org ",
          "gn": " ac com gov net org ",
          "gr": " com edu gov mil net org ",
          "gt": " com edu gob ind mil net org ",
          "gu": " com edu gov net org ",
          "hk": " com edu gov idv net org ",
          "hu": " 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ",
          "id": " ac co go mil net or sch web ",
          "il": " ac co gov idf k12 muni net org ",
          "in": " ac co edu ernet firm gen gov i ind mil net nic org res ",
          "iq": " com edu gov i mil net org ",
          "ir": " ac co dnssec gov i id net org sch ",
          "it": " edu gov ",
          "je": " co net org ",
          "jo": " com edu gov mil name net org sch ",
          "jp": " ac ad co ed go gr lg ne or ",
          "ke": " ac co go info me mobi ne or sc ",
          "kh": " com edu gov mil net org per ",
          "ki": " biz com de edu gov info mob net org tel ",
          "km": " asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ",
          "kn": " edu gov net org ",
          "kr": " ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ",
          "kw": " com edu gov net org ",
          "ky": " com edu gov net org ",
          "kz": " com edu gov mil net org ",
          "lb": " com edu gov net org ",
          "lk": " assn com edu gov grp hotel int ltd net ngo org sch soc web ",
          "lr": " com edu gov net org ",
          "lv": " asn com conf edu gov id mil net org ",
          "ly": " com edu gov id med net org plc sch ",
          "ma": " ac co gov m net org press ",
          "mc": " asso tm ",
          "me": " ac co edu gov its net org priv ",
          "mg": " com edu gov mil nom org prd tm ",
          "mk": " com edu gov inf name net org pro ",
          "ml": " com edu gov net org presse ",
          "mn": " edu gov org ",
          "mo": " com edu gov net org ",
          "mt": " com edu gov net org ",
          "mv": " aero biz com coop edu gov info int mil museum name net org pro ",
          "mw": " ac co com coop edu gov int museum net org ",
          "mx": " com edu gob net org ",
          "my": " com edu gov mil name net org sch ",
          "nf": " arts com firm info net other per rec store web ",
          "ng": " biz com edu gov mil mobi name net org sch ",
          "ni": " ac co com edu gob mil net nom org ",
          "np": " com edu gov mil net org ",
          "nr": " biz com edu gov info net org ",
          "om": " ac biz co com edu gov med mil museum net org pro sch ",
          "pe": " com edu gob mil net nom org sld ",
          "ph": " com edu gov i mil net ngo org ",
          "pk": " biz com edu fam gob gok gon gop gos gov net org web ",
          "pl": " art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ",
          "pr": " ac biz com edu est gov info isla name net org pro prof ",
          "ps": " com edu gov net org plo sec ",
          "pw": " belau co ed go ne or ",
          "ro": " arts com firm info nom nt org rec store tm www ",
          "rs": " ac co edu gov in org ",
          "sb": " com edu gov net org ",
          "sc": " com edu gov net org ",
          "sh": " co com edu gov net nom org ",
          "sl": " com edu gov net org ",
          "st": " co com consulado edu embaixada gov mil net org principe saotome store ",
          "sv": " com edu gob org red ",
          "sz": " ac co org ",
          "tr": " av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ",
          "tt": " aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ",
          "tw": " club com ebiz edu game gov idv mil net org ",
          "mu": " ac co com gov net or org ",
          "mz": " ac co edu gov org ",
          "na": " co com ",
          "nz": " ac co cri geek gen govt health iwi maori mil net org parliament school ",
          "pa": " abo ac com edu gob ing med net nom org sld ",
          "pt": " com edu gov int net nome org publ ",
          "py": " com edu gov mil net org ",
          "qa": " com edu gov mil net org ",
          "re": " asso com nom ",
          "ru": " ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ",
          "rw": " ac co com edu gouv gov int mil net ",
          "sa": " com edu gov med net org pub sch ",
          "sd": " com edu gov info med net org tv ",
          "se": " a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ",
          "sg": " com edu gov idn net org per ",
          "sn": " art com edu gouv org perso univ ",
          "sy": " com edu gov mil net news org ",
          "th": " ac co go in mi net or ",
          "tj": " ac biz co com edu go gov info int mil name net nic org test web ",
          "tn": " agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ",
          "tz": " ac co go ne or ",
          "ua": " biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ",
          "ug": " ac co go ne or org sc ",
          "uk": " ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ",
          "us": " dni fed isa kids nsn ",
          "uy": " com edu gub mil net org ",
          "ve": " co com edu gob info mil net org web ",
          "vi": " co com k12 net org ",
          "vn": " ac biz com edu gov health info int name net org pro ",
          "ye": " co com gov ltd me net org plc ",
          "yu": " ac co edu gov org ",
          "za": " ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ",
          "zm": " ac co com edu gov net org sch ",
          // https://en.wikipedia.org/wiki/CentralNic#Second-level_domains
          "com": "ar br cn de eu gb gr hu jpn kr no qc ru sa se uk us uy za ",
          "net": "gb jp se uk ",
          "org": "ae",
          "de": "com "
        },
        // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost
        // in both performance and memory footprint. No initialization required.
        // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4
        // Following methods use lastIndexOf() rather than array.split() in order
        // to avoid any memory allocations.
        has: function(domain) {
          var tldOffset = domain.lastIndexOf(".");
          if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
            return false;
          }
          var sldOffset = domain.lastIndexOf(".", tldOffset - 1);
          if (sldOffset <= 0 || sldOffset >= tldOffset - 1) {
            return false;
          }
          var sldList = SLD.list[domain.slice(tldOffset + 1)];
          if (!sldList) {
            return false;
          }
          return sldList.indexOf(" " + domain.slice(sldOffset + 1, tldOffset) + " ") >= 0;
        },
        is: function(domain) {
          var tldOffset = domain.lastIndexOf(".");
          if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
            return false;
          }
          var sldOffset = domain.lastIndexOf(".", tldOffset - 1);
          if (sldOffset >= 0) {
            return false;
          }
          var sldList = SLD.list[domain.slice(tldOffset + 1)];
          if (!sldList) {
            return false;
          }
          return sldList.indexOf(" " + domain.slice(0, tldOffset) + " ") >= 0;
        },
        get: function(domain) {
          var tldOffset = domain.lastIndexOf(".");
          if (tldOffset <= 0 || tldOffset >= domain.length - 1) {
            return null;
          }
          var sldOffset = domain.lastIndexOf(".", tldOffset - 1);
          if (sldOffset <= 0 || sldOffset >= tldOffset - 1) {
            return null;
          }
          var sldList = SLD.list[domain.slice(tldOffset + 1)];
          if (!sldList) {
            return null;
          }
          if (sldList.indexOf(" " + domain.slice(sldOffset + 1, tldOffset) + " ") < 0) {
            return null;
          }
          return domain.slice(sldOffset + 1);
        },
        noConflict: function() {
          if (root.SecondLevelDomains === this) {
            root.SecondLevelDomains = _SecondLevelDomains;
          }
          return this;
        }
      };
      return SLD;
    });
  }
});

// node_modules/urijs/src/URI.js
var require_URI = __commonJS({
  "node_modules/urijs/src/URI.js"(exports, module) {
    (function(root, factory) {
      "use strict";
      if (typeof module === "object" && module.exports) {
        module.exports = factory(require_punycode(), require_IPv6(), require_SecondLevelDomains());
      } else if (typeof define === "function" && define.amd) {
        define(["./punycode", "./IPv6", "./SecondLevelDomains"], factory);
      } else {
        root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
      }
    })(exports, function(punycode, IPv6, SLD, root) {
      "use strict";
      var _URI = root && root.URI;
      function URI2(url, base2) {
        var _urlSupplied = arguments.length >= 1;
        var _baseSupplied = arguments.length >= 2;
        if (!(this instanceof URI2)) {
          if (_urlSupplied) {
            if (_baseSupplied) {
              return new URI2(url, base2);
            }
            return new URI2(url);
          }
          return new URI2();
        }
        if (url === void 0) {
          if (_urlSupplied) {
            throw new TypeError("undefined is not a valid argument for URI");
          }
          if (typeof location !== "undefined") {
            url = location.href + "";
          } else {
            url = "";
          }
        }
        if (url === null) {
          if (_urlSupplied) {
            throw new TypeError("null is not a valid argument for URI");
          }
        }
        this.href(url);
        if (base2 !== void 0) {
          return this.absoluteTo(base2);
        }
        return this;
      }
      function isInteger2(value) {
        return /^[0-9]+$/.test(value);
      }
      URI2.version = "1.19.11";
      var p = URI2.prototype;
      var hasOwn = Object.prototype.hasOwnProperty;
      function escapeRegEx(string) {
        return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1");
      }
      function getType(value) {
        if (value === void 0) {
          return "Undefined";
        }
        return String(Object.prototype.toString.call(value)).slice(8, -1);
      }
      function isArray(obj) {
        return getType(obj) === "Array";
      }
      function filterArrayValues(data, value) {
        var lookup = {};
        var i, length;
        if (getType(value) === "RegExp") {
          lookup = null;
        } else if (isArray(value)) {
          for (i = 0, length = value.length; i < length; i++) {
            lookup[value[i]] = true;
          }
        } else {
          lookup[value] = true;
        }
        for (i = 0, length = data.length; i < length; i++) {
          var _match = lookup && lookup[data[i]] !== void 0 || !lookup && value.test(data[i]);
          if (_match) {
            data.splice(i, 1);
            length--;
            i--;
          }
        }
        return data;
      }
      function arrayContains(list, value) {
        var i, length;
        if (isArray(value)) {
          for (i = 0, length = value.length; i < length; i++) {
            if (!arrayContains(list, value[i])) {
              return false;
            }
          }
          return true;
        }
        var _type = getType(value);
        for (i = 0, length = list.length; i < length; i++) {
          if (_type === "RegExp") {
            if (typeof list[i] === "string" && list[i].match(value)) {
              return true;
            }
          } else if (list[i] === value) {
            return true;
          }
        }
        return false;
      }
      function arraysEqual(one, two) {
        if (!isArray(one) || !isArray(two)) {
          return false;
        }
        if (one.length !== two.length) {
          return false;
        }
        one.sort();
        two.sort();
        for (var i = 0, l = one.length; i < l; i++) {
          if (one[i] !== two[i]) {
            return false;
          }
        }
        return true;
      }
      function trimSlashes(text) {
        var trim_expression = /^\/+|\/+$/g;
        return text.replace(trim_expression, "");
      }
      URI2._parts = function() {
        return {
          protocol: null,
          username: null,
          password: null,
          hostname: null,
          urn: null,
          port: null,
          path: null,
          query: null,
          fragment: null,
          // state
          preventInvalidHostname: URI2.preventInvalidHostname,
          duplicateQueryParameters: URI2.duplicateQueryParameters,
          escapeQuerySpace: URI2.escapeQuerySpace
        };
      };
      URI2.preventInvalidHostname = false;
      URI2.duplicateQueryParameters = false;
      URI2.escapeQuerySpace = true;
      URI2.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
      URI2.idn_expression = /[^a-z0-9\._-]/i;
      URI2.punycode_expression = /(xn--)/i;
      URI2.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
      URI2.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
      URI2.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
      URI2.findUri = {
        // valid "scheme://" or "www."
        start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
        // everything up to the next whitespace
        end: /[\s\r\n]|$/,
        // trim trailing punctuation captured by end RegExp
        trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/,
        // balanced parens inclusion (), [], {}, <>
        parens: /(\([^\)]*\)|\[[^\]]*\]|\{[^}]*\}|<[^>]*>)/g
      };
      URI2.leading_whitespace_expression = /^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/;
      URI2.ascii_tab_whitespace = /[\u0009\u000A\u000D]+/g;
      URI2.defaultPorts = {
        http: "80",
        https: "443",
        ftp: "21",
        gopher: "70",
        ws: "80",
        wss: "443"
      };
      URI2.hostProtocols = [
        "http",
        "https"
      ];
      URI2.invalid_hostname_characters = /[^a-zA-Z0-9\.\-:_]/;
      URI2.domAttributes = {
        "a": "href",
        "blockquote": "cite",
        "link": "href",
        "base": "href",
        "script": "src",
        "form": "action",
        "img": "src",
        "area": "href",
        "iframe": "src",
        "embed": "src",
        "source": "src",
        "track": "src",
        "input": "src",
        // but only if type="image"
        "audio": "src",
        "video": "src"
      };
      URI2.getDomAttribute = function(node) {
        if (!node || !node.nodeName) {
          return void 0;
        }
        var nodeName = node.nodeName.toLowerCase();
        if (nodeName === "input" && node.type !== "image") {
          return void 0;
        }
        return URI2.domAttributes[nodeName];
      };
      function escapeForDumbFirefox36(value) {
        return escape(value);
      }
      function strictEncodeURIComponent(string) {
        return encodeURIComponent(string).replace(/[!'()*]/g, escapeForDumbFirefox36).replace(/\*/g, "%2A");
      }
      URI2.encode = strictEncodeURIComponent;
      URI2.decode = decodeURIComponent;
      URI2.iso8859 = function() {
        URI2.encode = escape;
        URI2.decode = unescape;
      };
      URI2.unicode = function() {
        URI2.encode = strictEncodeURIComponent;
        URI2.decode = decodeURIComponent;
      };
      URI2.characters = {
        pathname: {
          encode: {
            // RFC3986 2.1: For consistency, URI producers and normalizers should
            // use uppercase hexadecimal digits for all percent-encodings.
            expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
            map: {
              // -._~!'()*
              "%24": "$",
              "%26": "&",
              "%2B": "+",
              "%2C": ",",
              "%3B": ";",
              "%3D": "=",
              "%3A": ":",
              "%40": "@"
            }
          },
          decode: {
            expression: /[\/\?#]/g,
            map: {
              "/": "%2F",
              "?": "%3F",
              "#": "%23"
            }
          }
        },
        reserved: {
          encode: {
            // RFC3986 2.1: For consistency, URI producers and normalizers should
            // use uppercase hexadecimal digits for all percent-encodings.
            expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
            map: {
              // gen-delims
              "%3A": ":",
              "%2F": "/",
              "%3F": "?",
              "%23": "#",
              "%5B": "[",
              "%5D": "]",
              "%40": "@",
              // sub-delims
              "%21": "!",
              "%24": "$",
              "%26": "&",
              "%27": "'",
              "%28": "(",
              "%29": ")",
              "%2A": "*",
              "%2B": "+",
              "%2C": ",",
              "%3B": ";",
              "%3D": "="
            }
          }
        },
        urnpath: {
          // The characters under `encode` are the characters called out by RFC 2141 as being acceptable
          // for usage in a URN. RFC2141 also calls out "-", ".", and "_" as acceptable characters, but
          // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also
          // note that the colon character is not featured in the encoding map; this is because URI.js
          // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it
          // should not appear unencoded in a segment itself.
          // See also the note above about RFC3986 and capitalalized hex digits.
          encode: {
            expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
            map: {
              "%21": "!",
              "%24": "$",
              "%27": "'",
              "%28": "(",
              "%29": ")",
              "%2A": "*",
              "%2B": "+",
              "%2C": ",",
              "%3B": ";",
              "%3D": "=",
              "%40": "@"
            }
          },
          // These characters are the characters called out by RFC2141 as "reserved" characters that
          // should never appear in a URN, plus the colon character (see note above).
          decode: {
            expression: /[\/\?#:]/g,
            map: {
              "/": "%2F",
              "?": "%3F",
              "#": "%23",
              ":": "%3A"
            }
          }
        }
      };
      URI2.encodeQuery = function(string, escapeQuerySpace) {
        var escaped = URI2.encode(string + "");
        if (escapeQuerySpace === void 0) {
          escapeQuerySpace = URI2.escapeQuerySpace;
        }
        return escapeQuerySpace ? escaped.replace(/%20/g, "+") : escaped;
      };
      URI2.decodeQuery = function(string, escapeQuerySpace) {
        string += "";
        if (escapeQuerySpace === void 0) {
          escapeQuerySpace = URI2.escapeQuerySpace;
        }
        try {
          return URI2.decode(escapeQuerySpace ? string.replace(/\+/g, "%20") : string);
        } catch (e) {
          return string;
        }
      };
      var _parts = { "encode": "encode", "decode": "decode" };
      var _part;
      var generateAccessor = function(_group, _part2) {
        return function(string) {
          try {
            return URI2[_part2](string + "").replace(URI2.characters[_group][_part2].expression, function(c) {
              return URI2.characters[_group][_part2].map[c];
            });
          } catch (e) {
            return string;
          }
        };
      };
      for (_part in _parts) {
        URI2[_part + "PathSegment"] = generateAccessor("pathname", _parts[_part]);
        URI2[_part + "UrnPathSegment"] = generateAccessor("urnpath", _parts[_part]);
      }
      var generateSegmentedPathFunction = function(_sep, _codingFuncName, _innerCodingFuncName) {
        return function(string) {
          var actualCodingFunc;
          if (!_innerCodingFuncName) {
            actualCodingFunc = URI2[_codingFuncName];
          } else {
            actualCodingFunc = function(string2) {
              return URI2[_codingFuncName](URI2[_innerCodingFuncName](string2));
            };
          }
          var segments = (string + "").split(_sep);
          for (var i = 0, length = segments.length; i < length; i++) {
            segments[i] = actualCodingFunc(segments[i]);
          }
          return segments.join(_sep);
        };
      };
      URI2.decodePath = generateSegmentedPathFunction("/", "decodePathSegment");
      URI2.decodeUrnPath = generateSegmentedPathFunction(":", "decodeUrnPathSegment");
      URI2.recodePath = generateSegmentedPathFunction("/", "encodePathSegment", "decode");
      URI2.recodeUrnPath = generateSegmentedPathFunction(":", "encodeUrnPathSegment", "decode");
      URI2.encodeReserved = generateAccessor("reserved", "encode");
      URI2.parse = function(string, parts) {
        var pos;
        if (!parts) {
          parts = {
            preventInvalidHostname: URI2.preventInvalidHostname
          };
        }
        string = string.replace(URI2.leading_whitespace_expression, "");
        string = string.replace(URI2.ascii_tab_whitespace, "");
        pos = string.indexOf("#");
        if (pos > -1) {
          parts.fragment = string.substring(pos + 1) || null;
          string = string.substring(0, pos);
        }
        pos = string.indexOf("?");
        if (pos > -1) {
          parts.query = string.substring(pos + 1) || null;
          string = string.substring(0, pos);
        }
        string = string.replace(/^(https?|ftp|wss?)?:+[/\\]*/i, "$1://");
        string = string.replace(/^[/\\]{2,}/i, "//");
        if (string.substring(0, 2) === "//") {
          parts.protocol = null;
          string = string.substring(2);
          string = URI2.parseAuthority(string, parts);
        } else {
          pos = string.indexOf(":");
          if (pos > -1) {
            parts.protocol = string.substring(0, pos) || null;
            if (parts.protocol && !parts.protocol.match(URI2.protocol_expression)) {
              parts.protocol = void 0;
            } else if (string.substring(pos + 1, pos + 3).replace(/\\/g, "/") === "//") {
              string = string.substring(pos + 3);
              string = URI2.parseAuthority(string, parts);
            } else {
              string = string.substring(pos + 1);
              parts.urn = true;
            }
          }
        }
        parts.path = string;
        return parts;
      };
      URI2.parseHost = function(string, parts) {
        if (!string) {
          string = "";
        }
        string = string.replace(/\\/g, "/");
        var pos = string.indexOf("/");
        var bracketPos;
        var t;
        if (pos === -1) {
          pos = string.length;
        }
        if (string.charAt(0) === "[") {
          bracketPos = string.indexOf("]");
          parts.hostname = string.substring(1, bracketPos) || null;
          parts.port = string.substring(bracketPos + 2, pos) || null;
          if (parts.port === "/") {
            parts.port = null;
          }
        } else {
          var firstColon = string.indexOf(":");
          var firstSlash = string.indexOf("/");
          var nextColon = string.indexOf(":", firstColon + 1);
          if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {
            parts.hostname = string.substring(0, pos) || null;
            parts.port = null;
          } else {
            t = string.substring(0, pos).split(":");
            parts.hostname = t[0] || null;
            parts.port = t[1] || null;
          }
        }
        if (parts.hostname && string.substring(pos).charAt(0) !== "/") {
          pos++;
          string = "/" + string;
        }
        if (parts.preventInvalidHostname) {
          URI2.ensureValidHostname(parts.hostname, parts.protocol);
        }
        if (parts.port) {
          URI2.ensureValidPort(parts.port);
        }
        return string.substring(pos) || "/";
      };
      URI2.parseAuthority = function(string, parts) {
        string = URI2.parseUserinfo(string, parts);
        return URI2.parseHost(string, parts);
      };
      URI2.parseUserinfo = function(string, parts) {
        var _string = string;
        var firstBackSlash = string.indexOf("\\");
        if (firstBackSlash !== -1) {
          string = string.replace(/\\/g, "/");
        }
        var firstSlash = string.indexOf("/");
        var pos = string.lastIndexOf("@", firstSlash > -1 ? firstSlash : string.length - 1);
        var t;
        if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
          t = string.substring(0, pos).split(":");
          parts.username = t[0] ? URI2.decode(t[0]) : null;
          t.shift();
          parts.password = t[0] ? URI2.decode(t.join(":")) : null;
          string = _string.substring(pos + 1);
        } else {
          parts.username = null;
          parts.password = null;
        }
        return string;
      };
      URI2.parseQuery = function(string, escapeQuerySpace) {
        if (!string) {
          return {};
        }
        string = string.replace(/&+/g, "&").replace(/^\?*&*|&+$/g, "");
        if (!string) {
          return {};
        }
        var items = {};
        var splits = string.split("&");
        var length = splits.length;
        var v, name2, value;
        for (var i = 0; i < length; i++) {
          v = splits[i].split("=");
          name2 = URI2.decodeQuery(v.shift(), escapeQuerySpace);
          value = v.length ? URI2.decodeQuery(v.join("="), escapeQuerySpace) : null;
          if (name2 === "__proto__") {
            continue;
          } else if (hasOwn.call(items, name2)) {
            if (typeof items[name2] === "string" || items[name2] === null) {
              items[name2] = [items[name2]];
            }
            items[name2].push(value);
          } else {
            items[name2] = value;
          }
        }
        return items;
      };
      URI2.build = function(parts) {
        var t = "";
        var requireAbsolutePath = false;
        if (parts.protocol) {
          t += parts.protocol + ":";
        }
        if (!parts.urn && (t || parts.hostname)) {
          t += "//";
          requireAbsolutePath = true;
        }
        t += URI2.buildAuthority(parts) || "";
        if (typeof parts.path === "string") {
          if (parts.path.charAt(0) !== "/" && requireAbsolutePath) {
            t += "/";
          }
          t += parts.path;
        }
        if (typeof parts.query === "string" && parts.query) {
          t += "?" + parts.query;
        }
        if (typeof parts.fragment === "string" && parts.fragment) {
          t += "#" + parts.fragment;
        }
        return t;
      };
      URI2.buildHost = function(parts) {
        var t = "";
        if (!parts.hostname) {
          return "";
        } else if (URI2.ip6_expression.test(parts.hostname)) {
          t += "[" + parts.hostname + "]";
        } else {
          t += parts.hostname;
        }
        if (parts.port) {
          t += ":" + parts.port;
        }
        return t;
      };
      URI2.buildAuthority = function(parts) {
        return URI2.buildUserinfo(parts) + URI2.buildHost(parts);
      };
      URI2.buildUserinfo = function(parts) {
        var t = "";
        if (parts.username) {
          t += URI2.encode(parts.username);
        }
        if (parts.password) {
          t += ":" + URI2.encode(parts.password);
        }
        if (t) {
          t += "@";
        }
        return t;
      };
      URI2.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {
        var t = "";
        var unique, key2, i, length;
        for (key2 in data) {
          if (key2 === "__proto__") {
            continue;
          } else if (hasOwn.call(data, key2)) {
            if (isArray(data[key2])) {
              unique = {};
              for (i = 0, length = data[key2].length; i < length; i++) {
                if (data[key2][i] !== void 0 && unique[data[key2][i] + ""] === void 0) {
                  t += "&" + URI2.buildQueryParameter(key2, data[key2][i], escapeQuerySpace);
                  if (duplicateQueryParameters !== true) {
                    unique[data[key2][i] + ""] = true;
                  }
                }
              }
            } else if (data[key2] !== void 0) {
              t += "&" + URI2.buildQueryParameter(key2, data[key2], escapeQuerySpace);
            }
          }
        }
        return t.substring(1);
      };
      URI2.buildQueryParameter = function(name2, value, escapeQuerySpace) {
        return URI2.encodeQuery(name2, escapeQuerySpace) + (value !== null ? "=" + URI2.encodeQuery(value, escapeQuerySpace) : "");
      };
      URI2.addQuery = function(data, name2, value) {
        if (typeof name2 === "object") {
          for (var key2 in name2) {
            if (hasOwn.call(name2, key2)) {
              URI2.addQuery(data, key2, name2[key2]);
            }
          }
        } else if (typeof name2 === "string") {
          if (data[name2] === void 0) {
            data[name2] = value;
            return;
          } else if (typeof data[name2] === "string") {
            data[name2] = [data[name2]];
          }
          if (!isArray(value)) {
            value = [value];
          }
          data[name2] = (data[name2] || []).concat(value);
        } else {
          throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");
        }
      };
      URI2.setQuery = function(data, name2, value) {
        if (typeof name2 === "object") {
          for (var key2 in name2) {
            if (hasOwn.call(name2, key2)) {
              URI2.setQuery(data, key2, name2[key2]);
            }
          }
        } else if (typeof name2 === "string") {
          data[name2] = value === void 0 ? null : value;
        } else {
          throw new TypeError("URI.setQuery() accepts an object, string as the name parameter");
        }
      };
      URI2.removeQuery = function(data, name2, value) {
        var i, length, key2;
        if (isArray(name2)) {
          for (i = 0, length = name2.length; i < length; i++) {
            data[name2[i]] = void 0;
          }
        } else if (getType(name2) === "RegExp") {
          for (key2 in data) {
            if (name2.test(key2)) {
              data[key2] = void 0;
            }
          }
        } else if (typeof name2 === "object") {
          for (key2 in name2) {
            if (hasOwn.call(name2, key2)) {
              URI2.removeQuery(data, key2, name2[key2]);
            }
          }
        } else if (typeof name2 === "string") {
          if (value !== void 0) {
            if (getType(value) === "RegExp") {
              if (!isArray(data[name2]) && value.test(data[name2])) {
                data[name2] = void 0;
              } else {
                data[name2] = filterArrayValues(data[name2], value);
              }
            } else if (data[name2] === String(value) && (!isArray(value) || value.length === 1)) {
              data[name2] = void 0;
            } else if (isArray(data[name2])) {
              data[name2] = filterArrayValues(data[name2], value);
            }
          } else {
            data[name2] = void 0;
          }
        } else {
          throw new TypeError("URI.removeQuery() accepts an object, string, RegExp as the first parameter");
        }
      };
      URI2.hasQuery = function(data, name2, value, withinArray) {
        switch (getType(name2)) {
          case "String":
            break;
          case "RegExp":
            for (var key2 in data) {
              if (hasOwn.call(data, key2)) {
                if (name2.test(key2) && (value === void 0 || URI2.hasQuery(data, key2, value))) {
                  return true;
                }
              }
            }
            return false;
          case "Object":
            for (var _key in name2) {
              if (hasOwn.call(name2, _key)) {
                if (!URI2.hasQuery(data, _key, name2[_key])) {
                  return false;
                }
              }
            }
            return true;
          default:
            throw new TypeError("URI.hasQuery() accepts a string, regular expression or object as the name parameter");
        }
        switch (getType(value)) {
          case "Undefined":
            return name2 in data;
          case "Boolean":
            var _booly = Boolean(isArray(data[name2]) ? data[name2].length : data[name2]);
            return value === _booly;
          case "Function":
            return !!value(data[name2], name2, data);
          case "Array":
            if (!isArray(data[name2])) {
              return false;
            }
            var op = withinArray ? arrayContains : arraysEqual;
            return op(data[name2], value);
          case "RegExp":
            if (!isArray(data[name2])) {
              return Boolean(data[name2] && data[name2].match(value));
            }
            if (!withinArray) {
              return false;
            }
            return arrayContains(data[name2], value);
          case "Number":
            value = String(value);
          case "String":
            if (!isArray(data[name2])) {
              return data[name2] === value;
            }
            if (!withinArray) {
              return false;
            }
            return arrayContains(data[name2], value);
          default:
            throw new TypeError("URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter");
        }
      };
      URI2.joinPaths = function() {
        var input = [];
        var segments = [];
        var nonEmptySegments = 0;
        for (var i = 0; i < arguments.length; i++) {
          var url = new URI2(arguments[i]);
          input.push(url);
          var _segments = url.segment();
          for (var s = 0; s < _segments.length; s++) {
            if (typeof _segments[s] === "string") {
              segments.push(_segments[s]);
            }
            if (_segments[s]) {
              nonEmptySegments++;
            }
          }
        }
        if (!segments.length || !nonEmptySegments) {
          return new URI2("");
        }
        var uri = new URI2("").segment(segments);
        if (input[0].path() === "" || input[0].path().slice(0, 1) === "/") {
          uri.path("/" + uri.path());
        }
        return uri.normalize();
      };
      URI2.commonPath = function(one, two) {
        var length = Math.min(one.length, two.length);
        var pos;
        for (pos = 0; pos < length; pos++) {
          if (one.charAt(pos) !== two.charAt(pos)) {
            pos--;
            break;
          }
        }
        if (pos < 1) {
          return one.charAt(0) === two.charAt(0) && one.charAt(0) === "/" ? "/" : "";
        }
        if (one.charAt(pos) !== "/" || two.charAt(pos) !== "/") {
          pos = one.substring(0, pos).lastIndexOf("/");
        }
        return one.substring(0, pos + 1);
      };
      URI2.withinString = function(string, callback, options) {
        options || (options = {});
        var _start = options.start || URI2.findUri.start;
        var _end = options.end || URI2.findUri.end;
        var _trim = options.trim || URI2.findUri.trim;
        var _parens = options.parens || URI2.findUri.parens;
        var _attributeOpen = /[a-z0-9-]=["']?$/i;
        _start.lastIndex = 0;
        while (true) {
          var match = _start.exec(string);
          if (!match) {
            break;
          }
          var start = match.index;
          if (options.ignoreHtml) {
            var attributeOpen = string.slice(Math.max(start - 3, 0), start);
            if (attributeOpen && _attributeOpen.test(attributeOpen)) {
              continue;
            }
          }
          var end = start + string.slice(start).search(_end);
          var slice = string.slice(start, end);
          var parensEnd = -1;
          while (true) {
            var parensMatch = _parens.exec(slice);
            if (!parensMatch) {
              break;
            }
            var parensMatchEnd = parensMatch.index + parensMatch[0].length;
            parensEnd = Math.max(parensEnd, parensMatchEnd);
          }
          if (parensEnd > -1) {
            slice = slice.slice(0, parensEnd) + slice.slice(parensEnd).replace(_trim, "");
          } else {
            slice = slice.replace(_trim, "");
          }
          if (slice.length <= match[0].length) {
            continue;
          }
          if (options.ignore && options.ignore.test(slice)) {
            continue;
          }
          end = start + slice.length;
          var result = callback(slice, start, end, string);
          if (result === void 0) {
            _start.lastIndex = end;
            continue;
          }
          result = String(result);
          string = string.slice(0, start) + result + string.slice(end);
          _start.lastIndex = start + result.length;
        }
        _start.lastIndex = 0;
        return string;
      };
      URI2.ensureValidHostname = function(v, protocol) {
        var hasHostname = !!v;
        var hasProtocol = !!protocol;
        var rejectEmptyHostname = false;
        if (hasProtocol) {
          rejectEmptyHostname = arrayContains(URI2.hostProtocols, protocol);
        }
        if (rejectEmptyHostname && !hasHostname) {
          throw new TypeError("Hostname cannot be empty, if protocol is " + protocol);
        } else if (v && v.match(URI2.invalid_hostname_characters)) {
          if (!punycode) {
            throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');
          }
          if (punycode.toASCII(v).match(URI2.invalid_hostname_characters)) {
            throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_]');
          }
        }
      };
      URI2.ensureValidPort = function(v) {
        if (!v) {
          return;
        }
        var port = Number(v);
        if (isInteger2(port) && port > 0 && port < 65536) {
          return;
        }
        throw new TypeError('Port "' + v + '" is not a valid port');
      };
      URI2.noConflict = function(removeAll) {
        if (removeAll) {
          var unconflicted = {
            URI: this.noConflict()
          };
          if (root.URITemplate && typeof root.URITemplate.noConflict === "function") {
            unconflicted.URITemplate = root.URITemplate.noConflict();
          }
          if (root.IPv6 && typeof root.IPv6.noConflict === "function") {
            unconflicted.IPv6 = root.IPv6.noConflict();
          }
          if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === "function") {
            unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
          }
          return unconflicted;
        } else if (root.URI === this) {
          root.URI = _URI;
        }
        return this;
      };
      p.build = function(deferBuild) {
        if (deferBuild === true) {
          this._deferred_build = true;
        } else if (deferBuild === void 0 || this._deferred_build) {
          this._string = URI2.build(this._parts);
          this._deferred_build = false;
        }
        return this;
      };
      p.clone = function() {
        return new URI2(this);
      };
      p.valueOf = p.toString = function() {
        return this.build(false)._string;
      };
      function generateSimpleAccessor(_part2) {
        return function(v, build) {
          if (v === void 0) {
            return this._parts[_part2] || "";
          } else {
            this._parts[_part2] = v || null;
            this.build(!build);
            return this;
          }
        };
      }
      function generatePrefixAccessor(_part2, _key) {
        return function(v, build) {
          if (v === void 0) {
            return this._parts[_part2] || "";
          } else {
            if (v !== null) {
              v = v + "";
              if (v.charAt(0) === _key) {
                v = v.substring(1);
              }
            }
            this._parts[_part2] = v;
            this.build(!build);
            return this;
          }
        };
      }
      p.protocol = generateSimpleAccessor("protocol");
      p.username = generateSimpleAccessor("username");
      p.password = generateSimpleAccessor("password");
      p.hostname = generateSimpleAccessor("hostname");
      p.port = generateSimpleAccessor("port");
      p.query = generatePrefixAccessor("query", "?");
      p.fragment = generatePrefixAccessor("fragment", "#");
      p.search = function(v, build) {
        var t = this.query(v, build);
        return typeof t === "string" && t.length ? "?" + t : t;
      };
      p.hash = function(v, build) {
        var t = this.fragment(v, build);
        return typeof t === "string" && t.length ? "#" + t : t;
      };
      p.pathname = function(v, build) {
        if (v === void 0 || v === true) {
          var res = this._parts.path || (this._parts.hostname ? "/" : "");
          return v ? (this._parts.urn ? URI2.decodeUrnPath : URI2.decodePath)(res) : res;
        } else {
          if (this._parts.urn) {
            this._parts.path = v ? URI2.recodeUrnPath(v) : "";
          } else {
            this._parts.path = v ? URI2.recodePath(v) : "/";
          }
          this.build(!build);
          return this;
        }
      };
      p.path = p.pathname;
      p.href = function(href, build) {
        var key2;
        if (href === void 0) {
          return this.toString();
        }
        this._string = "";
        this._parts = URI2._parts();
        var _URI2 = href instanceof URI2;
        var _object = typeof href === "object" && (href.hostname || href.path || href.pathname);
        if (href.nodeName) {
          var attribute = URI2.getDomAttribute(href);
          href = href[attribute] || "";
          _object = false;
        }
        if (!_URI2 && _object && href.pathname !== void 0) {
          href = href.toString();
        }
        if (typeof href === "string" || href instanceof String) {
          this._parts = URI2.parse(String(href), this._parts);
        } else if (_URI2 || _object) {
          var src = _URI2 ? href._parts : href;
          for (key2 in src) {
            if (key2 === "query") {
              continue;
            }
            if (hasOwn.call(this._parts, key2)) {
              this._parts[key2] = src[key2];
            }
          }
          if (src.query) {
            this.query(src.query, false);
          }
        } else {
          throw new TypeError("invalid input");
        }
        this.build(!build);
        return this;
      };
      p.is = function(what) {
        var ip = false;
        var ip4 = false;
        var ip6 = false;
        var name2 = false;
        var sld = false;
        var idn = false;
        var punycode2 = false;
        var relative = !this._parts.urn;
        if (this._parts.hostname) {
          relative = false;
          ip4 = URI2.ip4_expression.test(this._parts.hostname);
          ip6 = URI2.ip6_expression.test(this._parts.hostname);
          ip = ip4 || ip6;
          name2 = !ip;
          sld = name2 && SLD && SLD.has(this._parts.hostname);
          idn = name2 && URI2.idn_expression.test(this._parts.hostname);
          punycode2 = name2 && URI2.punycode_expression.test(this._parts.hostname);
        }
        switch (what.toLowerCase()) {
          case "relative":
            return relative;
          case "absolute":
            return !relative;
          case "domain":
          case "name":
            return name2;
          case "sld":
            return sld;
          case "ip":
            return ip;
          case "ip4":
          case "ipv4":
          case "inet4":
            return ip4;
          case "ip6":
          case "ipv6":
          case "inet6":
            return ip6;
          case "idn":
            return idn;
          case "url":
            return !this._parts.urn;
          case "urn":
            return !!this._parts.urn;
          case "punycode":
            return punycode2;
        }
        return null;
      };
      var _protocol = p.protocol;
      var _port = p.port;
      var _hostname = p.hostname;
      p.protocol = function(v, build) {
        if (v) {
          v = v.replace(/:(\/\/)?$/, "");
          if (!v.match(URI2.protocol_expression)) {
            throw new TypeError('Protocol "' + v + `" contains characters other than [A-Z0-9.+-] or doesn't start with [A-Z]`);
          }
        }
        return _protocol.call(this, v, build);
      };
      p.scheme = p.protocol;
      p.port = function(v, build) {
        if (this._parts.urn) {
          return v === void 0 ? "" : this;
        }
        if (v !== void 0) {
          if (v === 0) {
            v = null;
          }
          if (v) {
            v += "";
            if (v.charAt(0) === ":") {
              v = v.substring(1);
            }
            URI2.ensureValidPort(v);
          }
        }
        return _port.call(this, v, build);
      };
      p.hostname = function(v, build) {
        if (this._parts.urn) {
          return v === void 0 ? "" : this;
        }
        if (v !== void 0) {
          var x = { preventInvalidHostname: this._parts.preventInvalidHostname };
          var res = URI2.parseHost(v, x);
          if (res !== "/") {
            throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
          }
          v = x.hostname;
          if (this._parts.preventInvalidHostname) {
            URI2.ensureValidHostname(v, this._parts.protocol);
          }
        }
        return _hostname.call(this, v, build);
      };
      p.origin = function(v, build) {
        if (this._parts.urn) {
          return v === void 0 ? "" : this;
        }
        if (v === void 0) {
          var protocol = this.protocol();
          var authority = this.authority();
          if (!authority) {
            return "";
          }
          return (protocol ? protocol + "://" : "") + this.authority();
        } else {
          var origin = URI2(v);
          this.protocol(origin.protocol()).authority(origin.authority()).build(!build);
          return this;
        }
      };
      p.host = function(v, build) {
        if (this._parts.urn) {
          return v === void 0 ? "" : this;
        }
        if (v === void 0) {
          return this._parts.hostname ? URI2.buildHost(this._parts) : "";
        } else {
          var res = URI2.parseHost(v, this._parts);
          if (res !== "/") {
            throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
          }
          this.build(!build);
          return this;
        }
      };
      p.authority = function(v, build) {
        if (this._parts.urn) {
          return v === void 0 ? "" : this;
        }
        if (v === void 0) {
          return this._parts.hostname ? URI2.buildAuthority(this._parts) : "";
        } else {
          var res = URI2.parseAuthority(v, this._parts);
          if (res !== "/") {
            throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
          }
          this.build(!build);
          return this;
        }
      };
      p.userinfo = function(v, build) {
        if (this._parts.urn) {
          return v === void 0 ? "" : this;
        }
        if (v === void 0) {
          var t = URI2.buildUserinfo(this._parts);
          return t ? t.substring(0, t.length - 1) : t;
        } else {
          if (v[v.length - 1] !== "@") {
            v += "@";
          }
          URI2.parseUserinfo(v, this._parts);
          this.build(!build);
          return this;
        }
      };
      p.resource = function(v, build) {
        var parts;
        if (v === void 0) {
          return this.path() + this.search() + this.hash();
        }
        parts = URI2.parse(v);
        this._parts.path = parts.path;
        this._parts.query = parts.query;
        this._parts.fragment = parts.fragment;
        this.build(!build);
        return this;
      };
      p.subdomain = function(v, build) {
        if (this._parts.urn) {
          return v === void 0 ? "" : this;
        }
        if (v === void 0) {
          if (!this._parts.hostname || this.is("IP")) {
            return "";
          }
          var end = this._parts.hostname.length - this.domain().length - 1;
          return this._parts.hostname.substring(0, end) || "";
        } else {
          var e = this._parts.hostname.length - this.domain().length;
          var sub = this._parts.hostname.substring(0, e);
          var replace = new RegExp("^" + escapeRegEx(sub));
          if (v && v.charAt(v.length - 1) !== ".") {
            v += ".";
          }
          if (v.indexOf(":") !== -1) {
            throw new TypeError("Domains cannot contain colons");
          }
          if (v) {
            URI2.ensureValidHostname(v, this._parts.protocol);
          }
          this._parts.hostname = this._parts.hostname.replace(replace, v);
          this.build(!build);
          return this;
        }
      };
      p.domain = function(v, build) {
        if (this._parts.urn) {
          return v === void 0 ? "" : this;
        }
        if (typeof v === "boolean") {
          build = v;
          v = void 0;
        }
        if (v === void 0) {
          if (!this._parts.hostname || this.is("IP")) {
            return "";
          }
          var t = this._parts.hostname.match(/\./g);
          if (t && t.length < 2) {
            return this._parts.hostname;
          }
          var end = this._parts.hostname.length - this.tld(build).length - 1;
          end = this._parts.hostname.lastIndexOf(".", end - 1) + 1;
          return this._parts.hostname.substring(end) || "";
        } else {
          if (!v) {
            throw new TypeError("cannot set domain empty");
          }
          if (v.indexOf(":") !== -1) {
            throw new TypeError("Domains cannot contain colons");
          }
          URI2.ensureValidHostname(v, this._parts.protocol);
          if (!this._parts.hostname || this.is("IP")) {
            this._parts.hostname = v;
          } else {
            var replace = new RegExp(escapeRegEx(this.domain()) + "$");
            this._parts.hostname = this._parts.hostname.replace(replace, v);
          }
          this.build(!build);
          return this;
        }
      };
      p.tld = function(v, build) {
        if (this._parts.urn) {
          return v === void 0 ? "" : this;
        }
        if (typeof v === "boolean") {
          build = v;
          v = void 0;
        }
        if (v === void 0) {
          if (!this._parts.hostname || this.is("IP")) {
            return "";
          }
          var pos = this._parts.hostname.lastIndexOf(".");
          var tld = this._parts.hostname.substring(pos + 1);
          if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
            return SLD.get(this._parts.hostname) || tld;
          }
          return tld;
        } else {
          var replace;
          if (!v) {
            throw new TypeError("cannot set TLD empty");
          } else if (v.match(/[^a-zA-Z0-9-]/)) {
            if (SLD && SLD.is(v)) {
              replace = new RegExp(escapeRegEx(this.tld()) + "$");
              this._parts.hostname = this._parts.hostname.replace(replace, v);
            } else {
              throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
            }
          } else if (!this._parts.hostname || this.is("IP")) {
            throw new ReferenceError("cannot set TLD on non-domain host");
          } else {
            replace = new RegExp(escapeRegEx(this.tld()) + "$");
            this._parts.hostname = this._parts.hostname.replace(replace, v);
          }
          this.build(!build);
          return this;
        }
      };
      p.directory = function(v, build) {
        if (this._parts.urn) {
          return v === void 0 ? "" : this;
        }
        if (v === void 0 || v === true) {
          if (!this._parts.path && !this._parts.hostname) {
            return "";
          }
          if (this._parts.path === "/") {
            return "/";
          }
          var end = this._parts.path.length - this.filename().length - 1;
          var res = this._parts.path.substring(0, end) || (this._parts.hostname ? "/" : "");
          return v ? URI2.decodePath(res) : res;
        } else {
          var e = this._parts.path.length - this.filename().length;
          var directory = this._parts.path.substring(0, e);
          var replace = new RegExp("^" + escapeRegEx(directory));
          if (!this.is("relative")) {
            if (!v) {
              v = "/";
            }
            if (v.charAt(0) !== "/") {
              v = "/" + v;
            }
          }
          if (v && v.charAt(v.length - 1) !== "/") {
            v += "/";
          }
          v = URI2.recodePath(v);
          this._parts.path = this._parts.path.replace(replace, v);
          this.build(!build);
          return this;
        }
      };
      p.filename = function(v, build) {
        if (this._parts.urn) {
          return v === void 0 ? "" : this;
        }
        if (typeof v !== "string") {
          if (!this._parts.path || this._parts.path === "/") {
            return "";
          }
          var pos = this._parts.path.lastIndexOf("/");
          var res = this._parts.path.substring(pos + 1);
          return v ? URI2.decodePathSegment(res) : res;
        } else {
          var mutatedDirectory = false;
          if (v.charAt(0) === "/") {
            v = v.substring(1);
          }
          if (v.match(/\.?\//)) {
            mutatedDirectory = true;
          }
          var replace = new RegExp(escapeRegEx(this.filename()) + "$");
          v = URI2.recodePath(v);
          this._parts.path = this._parts.path.replace(replace, v);
          if (mutatedDirectory) {
            this.normalizePath(build);
          } else {
            this.build(!build);
          }
          return this;
        }
      };
      p.suffix = function(v, build) {
        if (this._parts.urn) {
          return v === void 0 ? "" : this;
        }
        if (v === void 0 || v === true) {
          if (!this._parts.path || this._parts.path === "/") {
            return "";
          }
          var filename = this.filename();
          var pos = filename.lastIndexOf(".");
          var s, res;
          if (pos === -1) {
            return "";
          }
          s = filename.substring(pos + 1);
          res = /^[a-z0-9%]+$/i.test(s) ? s : "";
          return v ? URI2.decodePathSegment(res) : res;
        } else {
          if (v.charAt(0) === ".") {
            v = v.substring(1);
          }
          var suffix = this.suffix();
          var replace;
          if (!suffix) {
            if (!v) {
              return this;
            }
            this._parts.path += "." + URI2.recodePath(v);
          } else if (!v) {
            replace = new RegExp(escapeRegEx("." + suffix) + "$");
          } else {
            replace = new RegExp(escapeRegEx(suffix) + "$");
          }
          if (replace) {
            v = URI2.recodePath(v);
            this._parts.path = this._parts.path.replace(replace, v);
          }
          this.build(!build);
          return this;
        }
      };
      p.segment = function(segment, v, build) {
        var separator = this._parts.urn ? ":" : "/";
        var path = this.path();
        var absolute = path.substring(0, 1) === "/";
        var segments = path.split(separator);
        if (segment !== void 0 && typeof segment !== "number") {
          build = v;
          v = segment;
          segment = void 0;
        }
        if (segment !== void 0 && typeof segment !== "number") {
          throw new Error('Bad segment "' + segment + '", must be 0-based integer');
        }
        if (absolute) {
          segments.shift();
        }
        if (segment < 0) {
          segment = Math.max(segments.length + segment, 0);
        }
        if (v === void 0) {
          return segment === void 0 ? segments : segments[segment];
        } else if (segment === null || segments[segment] === void 0) {
          if (isArray(v)) {
            segments = [];
            for (var i = 0, l = v.length; i < l; i++) {
              if (!v[i].length && (!segments.length || !segments[segments.length - 1].length)) {
                continue;
              }
              if (segments.length && !segments[segments.length - 1].length) {
                segments.pop();
              }
              segments.push(trimSlashes(v[i]));
            }
          } else if (v || typeof v === "string") {
            v = trimSlashes(v);
            if (segments[segments.length - 1] === "") {
              segments[segments.length - 1] = v;
            } else {
              segments.push(v);
            }
          }
        } else {
          if (v) {
            segments[segment] = trimSlashes(v);
          } else {
            segments.splice(segment, 1);
          }
        }
        if (absolute) {
          segments.unshift("");
        }
        return this.path(segments.join(separator), build);
      };
      p.segmentCoded = function(segment, v, build) {
        var segments, i, l;
        if (typeof segment !== "number") {
          build = v;
          v = segment;
          segment = void 0;
        }
        if (v === void 0) {
          segments = this.segment(segment, v, build);
          if (!isArray(segments)) {
            segments = segments !== void 0 ? URI2.decode(segments) : void 0;
          } else {
            for (i = 0, l = segments.length; i < l; i++) {
              segments[i] = URI2.decode(segments[i]);
            }
          }
          return segments;
        }
        if (!isArray(v)) {
          v = typeof v === "string" || v instanceof String ? URI2.encode(v) : v;
        } else {
          for (i = 0, l = v.length; i < l; i++) {
            v[i] = URI2.encode(v[i]);
          }
        }
        return this.segment(segment, v, build);
      };
      var q = p.query;
      p.query = function(v, build) {
        if (v === true) {
          return URI2.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        } else if (typeof v === "function") {
          var data = URI2.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
          var result = v.call(this, data);
          this._parts.query = URI2.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
          this.build(!build);
          return this;
        } else if (v !== void 0 && typeof v !== "string") {
          this._parts.query = URI2.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
          this.build(!build);
          return this;
        } else {
          return q.call(this, v, build);
        }
      };
      p.setQuery = function(name2, value, build) {
        var data = URI2.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        if (typeof name2 === "string" || name2 instanceof String) {
          data[name2] = value !== void 0 ? value : null;
        } else if (typeof name2 === "object") {
          for (var key2 in name2) {
            if (hasOwn.call(name2, key2)) {
              data[key2] = name2[key2];
            }
          }
        } else {
          throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");
        }
        this._parts.query = URI2.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        if (typeof name2 !== "string") {
          build = value;
        }
        this.build(!build);
        return this;
      };
      p.addQuery = function(name2, value, build) {
        var data = URI2.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        URI2.addQuery(data, name2, value === void 0 ? null : value);
        this._parts.query = URI2.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        if (typeof name2 !== "string") {
          build = value;
        }
        this.build(!build);
        return this;
      };
      p.removeQuery = function(name2, value, build) {
        var data = URI2.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        URI2.removeQuery(data, name2, value);
        this._parts.query = URI2.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        if (typeof name2 !== "string") {
          build = value;
        }
        this.build(!build);
        return this;
      };
      p.hasQuery = function(name2, value, withinArray) {
        var data = URI2.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        return URI2.hasQuery(data, name2, value, withinArray);
      };
      p.setSearch = p.setQuery;
      p.addSearch = p.addQuery;
      p.removeSearch = p.removeQuery;
      p.hasSearch = p.hasQuery;
      p.normalize = function() {
        if (this._parts.urn) {
          return this.normalizeProtocol(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
        }
        return this.normalizeProtocol(false).normalizeHostname(false).normalizePort(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
      };
      p.normalizeProtocol = function(build) {
        if (typeof this._parts.protocol === "string") {
          this._parts.protocol = this._parts.protocol.toLowerCase();
          this.build(!build);
        }
        return this;
      };
      p.normalizeHostname = function(build) {
        if (this._parts.hostname) {
          if (this.is("IDN") && punycode) {
            this._parts.hostname = punycode.toASCII(this._parts.hostname);
          } else if (this.is("IPv6") && IPv6) {
            this._parts.hostname = IPv6.best(this._parts.hostname);
          }
          this._parts.hostname = this._parts.hostname.toLowerCase();
          this.build(!build);
        }
        return this;
      };
      p.normalizePort = function(build) {
        if (typeof this._parts.protocol === "string" && this._parts.port === URI2.defaultPorts[this._parts.protocol]) {
          this._parts.port = null;
          this.build(!build);
        }
        return this;
      };
      p.normalizePath = function(build) {
        var _path = this._parts.path;
        if (!_path) {
          return this;
        }
        if (this._parts.urn) {
          this._parts.path = URI2.recodeUrnPath(this._parts.path);
          this.build(!build);
          return this;
        }
        if (this._parts.path === "/") {
          return this;
        }
        _path = URI2.recodePath(_path);
        var _was_relative;
        var _leadingParents = "";
        var _parent, _pos;
        if (_path.charAt(0) !== "/") {
          _was_relative = true;
          _path = "/" + _path;
        }
        if (_path.slice(-3) === "/.." || _path.slice(-2) === "/.") {
          _path += "/";
        }
        _path = _path.replace(/(\/(\.\/)+)|(\/\.$)/g, "/").replace(/\/{2,}/g, "/");
        if (_was_relative) {
          _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || "";
          if (_leadingParents) {
            _leadingParents = _leadingParents[0];
          }
        }
        while (true) {
          _parent = _path.search(/\/\.\.(\/|$)/);
          if (_parent === -1) {
            break;
          } else if (_parent === 0) {
            _path = _path.substring(3);
            continue;
          }
          _pos = _path.substring(0, _parent).lastIndexOf("/");
          if (_pos === -1) {
            _pos = _parent;
          }
          _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
        }
        if (_was_relative && this.is("relative")) {
          _path = _leadingParents + _path.substring(1);
        }
        this._parts.path = _path;
        this.build(!build);
        return this;
      };
      p.normalizePathname = p.normalizePath;
      p.normalizeQuery = function(build) {
        if (typeof this._parts.query === "string") {
          if (!this._parts.query.length) {
            this._parts.query = null;
          } else {
            this.query(URI2.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
          }
          this.build(!build);
        }
        return this;
      };
      p.normalizeFragment = function(build) {
        if (!this._parts.fragment) {
          this._parts.fragment = null;
          this.build(!build);
        }
        return this;
      };
      p.normalizeSearch = p.normalizeQuery;
      p.normalizeHash = p.normalizeFragment;
      p.iso8859 = function() {
        var e = URI2.encode;
        var d = URI2.decode;
        URI2.encode = escape;
        URI2.decode = decodeURIComponent;
        try {
          this.normalize();
        } finally {
          URI2.encode = e;
          URI2.decode = d;
        }
        return this;
      };
      p.unicode = function() {
        var e = URI2.encode;
        var d = URI2.decode;
        URI2.encode = strictEncodeURIComponent;
        URI2.decode = unescape;
        try {
          this.normalize();
        } finally {
          URI2.encode = e;
          URI2.decode = d;
        }
        return this;
      };
      p.readable = function() {
        var uri = this.clone();
        uri.username("").password("").normalize();
        var t = "";
        if (uri._parts.protocol) {
          t += uri._parts.protocol + "://";
        }
        if (uri._parts.hostname) {
          if (uri.is("punycode") && punycode) {
            t += punycode.toUnicode(uri._parts.hostname);
            if (uri._parts.port) {
              t += ":" + uri._parts.port;
            }
          } else {
            t += uri.host();
          }
        }
        if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== "/") {
          t += "/";
        }
        t += uri.path(true);
        if (uri._parts.query) {
          var q2 = "";
          for (var i = 0, qp = uri._parts.query.split("&"), l = qp.length; i < l; i++) {
            var kv = (qp[i] || "").split("=");
            q2 += "&" + URI2.decodeQuery(kv[0], this._parts.escapeQuerySpace).replace(/&/g, "%26");
            if (kv[1] !== void 0) {
              q2 += "=" + URI2.decodeQuery(kv[1], this._parts.escapeQuerySpace).replace(/&/g, "%26");
            }
          }
          t += "?" + q2.substring(1);
        }
        t += URI2.decodeQuery(uri.hash(), true);
        return t;
      };
      p.absoluteTo = function(base2) {
        var resolved = this.clone();
        var properties = ["protocol", "username", "password", "hostname", "port"];
        var basedir, i, p2;
        if (this._parts.urn) {
          throw new Error("URNs do not have any generally defined hierarchical components");
        }
        if (!(base2 instanceof URI2)) {
          base2 = new URI2(base2);
        }
        if (resolved._parts.protocol) {
          return resolved;
        } else {
          resolved._parts.protocol = base2._parts.protocol;
        }
        if (this._parts.hostname) {
          return resolved;
        }
        for (i = 0; p2 = properties[i]; i++) {
          resolved._parts[p2] = base2._parts[p2];
        }
        if (!resolved._parts.path) {
          resolved._parts.path = base2._parts.path;
          if (!resolved._parts.query) {
            resolved._parts.query = base2._parts.query;
          }
        } else {
          if (resolved._parts.path.substring(-2) === "..") {
            resolved._parts.path += "/";
          }
          if (resolved.path().charAt(0) !== "/") {
            basedir = base2.directory();
            basedir = basedir ? basedir : base2.path().indexOf("/") === 0 ? "/" : "";
            resolved._parts.path = (basedir ? basedir + "/" : "") + resolved._parts.path;
            resolved.normalizePath();
          }
        }
        resolved.build();
        return resolved;
      };
      p.relativeTo = function(base2) {
        var relative = this.clone().normalize();
        var relativeParts, baseParts, common, relativePath, basePath;
        if (relative._parts.urn) {
          throw new Error("URNs do not have any generally defined hierarchical components");
        }
        base2 = new URI2(base2).normalize();
        relativeParts = relative._parts;
        baseParts = base2._parts;
        relativePath = relative.path();
        basePath = base2.path();
        if (relativePath.charAt(0) !== "/") {
          throw new Error("URI is already relative");
        }
        if (basePath.charAt(0) !== "/") {
          throw new Error("Cannot calculate a URI relative to another relative URI");
        }
        if (relativeParts.protocol === baseParts.protocol) {
          relativeParts.protocol = null;
        }
        if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
          return relative.build();
        }
        if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
          return relative.build();
        }
        if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
          relativeParts.hostname = null;
          relativeParts.port = null;
        } else {
          return relative.build();
        }
        if (relativePath === basePath) {
          relativeParts.path = "";
          return relative.build();
        }
        common = URI2.commonPath(relativePath, basePath);
        if (!common) {
          return relative.build();
        }
        var parents = baseParts.path.substring(common.length).replace(/[^\/]*$/, "").replace(/.*?\//g, "../");
        relativeParts.path = parents + relativeParts.path.substring(common.length) || "./";
        return relative.build();
      };
      p.equals = function(uri) {
        var one = this.clone();
        var two = new URI2(uri);
        var one_map = {};
        var two_map = {};
        var checked = {};
        var one_query, two_query, key2;
        one.normalize();
        two.normalize();
        if (one.toString() === two.toString()) {
          return true;
        }
        one_query = one.query();
        two_query = two.query();
        one.query("");
        two.query("");
        if (one.toString() !== two.toString()) {
          return false;
        }
        if (one_query.length !== two_query.length) {
          return false;
        }
        one_map = URI2.parseQuery(one_query, this._parts.escapeQuerySpace);
        two_map = URI2.parseQuery(two_query, this._parts.escapeQuerySpace);
        for (key2 in one_map) {
          if (hasOwn.call(one_map, key2)) {
            if (!isArray(one_map[key2])) {
              if (one_map[key2] !== two_map[key2]) {
                return false;
              }
            } else if (!arraysEqual(one_map[key2], two_map[key2])) {
              return false;
            }
            checked[key2] = true;
          }
        }
        for (key2 in two_map) {
          if (hasOwn.call(two_map, key2)) {
            if (!checked[key2]) {
              return false;
            }
          }
        }
        return true;
      };
      p.preventInvalidHostname = function(v) {
        this._parts.preventInvalidHostname = !!v;
        return this;
      };
      p.duplicateQueryParameters = function(v) {
        this._parts.duplicateQueryParameters = !!v;
        return this;
      };
      p.escapeQuerySpace = function(v) {
        this._parts.escapeQuerySpace = !!v;
        return this;
      };
      return URI2;
    });
  }
});

// node_modules/eventemitter3/index.js
var require_eventemitter32 = __commonJS({
  "node_modules/eventemitter3/index.js"(exports, module) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var prefix = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__)
        prefix = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
      if (!emitter._events[evt])
        emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn)
        emitter._events[evt].push(listener);
      else
        emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0)
        emitter._events = new Events();
      else
        delete emitter._events[evt];
    }
    function EventEmitter2() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      var names = [], events, name2;
      if (this._eventsCount === 0)
        return names;
      for (name2 in events = this._events) {
        if (has.call(events, name2))
          names.push(prefix ? name2.slice(1) : name2);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter2.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event, handlers = this._events[evt];
      if (!handlers)
        return [];
      if (handlers.fn)
        return [handlers.fn];
      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter2.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event, listeners = this._events[evt];
      if (!listeners)
        return 0;
      if (listeners.fn)
        return 1;
      return listeners.length;
    };
    EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once)
          this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once)
            this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args)
                for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter2.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter2.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
        if (events.length)
          this._events[evt] = events.length === 1 ? events[0] : events;
        else
          clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt])
          clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prefixed = prefix;
    EventEmitter2.EventEmitter = EventEmitter2;
    if ("undefined" !== typeof module) {
      module.exports = EventEmitter2;
    }
  }
});

// node_modules/web3-core-promievent/node_modules/eventemitter3/index.js
var require_eventemitter33 = __commonJS({
  "node_modules/web3-core-promievent/node_modules/eventemitter3/index.js"(exports, module) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var prefix = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__)
        prefix = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
      if (!emitter._events[evt])
        emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn)
        emitter._events[evt].push(listener);
      else
        emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0)
        emitter._events = new Events();
      else
        delete emitter._events[evt];
    }
    function EventEmitter2() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      var names = [], events, name2;
      if (this._eventsCount === 0)
        return names;
      for (name2 in events = this._events) {
        if (has.call(events, name2))
          names.push(prefix ? name2.slice(1) : name2);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter2.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event, handlers = this._events[evt];
      if (!handlers)
        return [];
      if (handlers.fn)
        return [handlers.fn];
      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter2.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event, listeners = this._events[evt];
      if (!listeners)
        return 0;
      if (listeners.fn)
        return 1;
      return listeners.length;
    };
    EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once)
          this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once)
            this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args)
                for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter2.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter2.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
        if (events.length)
          this._events[evt] = events.length === 1 ? events[0] : events;
        else
          clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt])
          clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prefixed = prefix;
    EventEmitter2.EventEmitter = EventEmitter2;
    if ("undefined" !== typeof module) {
      module.exports = EventEmitter2;
    }
  }
});

// node_modules/web3-core-promievent/lib/index.js
var require_lib8 = __commonJS({
  "node_modules/web3-core-promievent/lib/index.js"(exports, module) {
    "use strict";
    var EventEmitter2 = require_eventemitter33();
    var PromiEvent = function PromiEvent2(justPromise) {
      var resolve, reject, eventEmitter = new Promise(function() {
        resolve = arguments[0];
        reject = arguments[1];
      });
      if (justPromise) {
        return {
          resolve,
          reject,
          eventEmitter
        };
      }
      var emitter = new EventEmitter2();
      eventEmitter._events = emitter._events;
      eventEmitter.emit = emitter.emit;
      eventEmitter.on = emitter.on;
      eventEmitter.once = emitter.once;
      eventEmitter.off = emitter.off;
      eventEmitter.listeners = emitter.listeners;
      eventEmitter.addListener = emitter.addListener;
      eventEmitter.removeListener = emitter.removeListener;
      eventEmitter.removeAllListeners = emitter.removeAllListeners;
      return {
        resolve,
        reject,
        eventEmitter
      };
    };
    PromiEvent.resolve = function(value) {
      var promise = PromiEvent(true);
      promise.resolve(value);
      return promise.eventEmitter;
    };
    module.exports = PromiEvent;
  }
});

// node_modules/@ethersproject/signing-key/node_modules/bn.js/lib/bn.js
var require_bn9 = __commonJS({
  "node_modules/@ethersproject/signing-key/node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert2(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN3(number, base2, endian) {
        if (BN3.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN3;
      } else {
        exports2.BN = BN3;
      }
      BN3.BN = BN3;
      BN3.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer2().Buffer;
        }
      } catch (e) {
      }
      BN3.isBN = function isBN(num) {
        if (num instanceof BN3) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN3.wordSize && Array.isArray(num.words);
      };
      BN3.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN3.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN3.prototype._init = function init2(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base2 === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base2, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN3.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN3.prototype._initArray = function _initArray(number, base2, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert2(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN3.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul3) {
        var r2 = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul3;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert2(c >= 0 && b < mul3, "Invalid character");
          r2 += b;
        }
        return r2;
      }
      BN3.prototype._parseBase = function _parseBase(number, base2, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base2);
          for (i = 0; i < mod; i++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN3.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN3.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN3.prototype.clone = function clone() {
        var r2 = new BN3(null);
        this.copy(r2);
        return r2;
      };
      BN3.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN3.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN3.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN3.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect4;
        } catch (e) {
          BN3.prototype.inspect = inspect4;
        }
      } else {
        BN3.prototype.inspect = inspect4;
      }
      function inspect4() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN3.prototype.toString = function toString(base2, padding2) {
        base2 = base2 || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modrn(groupBase).toString(base2);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN3.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN3.prototype.toJSON = function toJSON2() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN3.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN3.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN3.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert2(byteLength <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN3.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN3.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN3.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN3.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN3.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN3.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN3.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26)
            break;
        }
        return r2;
      };
      BN3.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN3.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN3.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN3.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN3.prototype.neg = function neg3() {
        return this.clone().ineg();
      };
      BN3.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN3.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN3.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN3.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN3.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN3.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN3.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN3.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN3.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN3.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN3.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN3.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN3.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN3.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN3.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN3.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN3.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN3.prototype.add = function add3(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN3.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN3.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN3.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN3.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN3.prototype.mul = function mul3(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN3.prototype.mulf = function mulf(num) {
        var out = new BN3(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN3.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN3.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN3.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN3.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN3.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN3(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN3.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN3.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN3.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN3.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN3.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN3.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN3.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN3.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN3.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN3.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN3.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN3.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN3.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN3.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN3.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN3.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN3.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN3.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN3.prototype._ishlnsubmul = function _ishlnsubmul(num, mul3, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul3;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert2(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN3.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN3(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN3.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN3(0),
            mod: new BN3(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN3(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN3(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN3(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN3.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN3.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN3.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN3.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN3.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN3.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN3.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert2(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN3.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN3.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN3(1);
        var B = new BN3(0);
        var C = new BN3(0);
        var D = new BN3(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN3.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN3(1);
        var x2 = new BN3(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN3.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN3.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN3.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN3.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN3.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN3.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN3.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN3.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN3.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN3.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN3.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN3.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN3.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN3.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN3.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN3.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN3.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN3.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN3.prototype.eq = function eq4(num) {
        return this.cmp(num) === 0;
      };
      BN3.red = function red(num) {
        return new Red(num);
      };
      BN3.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN3.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN3.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN3.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN3.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN3.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN3.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN3.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN3.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN3.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN3.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN3.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN3.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN3.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN3.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN3.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN3.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p) {
        this.name = name2;
        this.p = new BN3(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN3(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN3(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN3._prime = function prime(name2) {
        if (primes[name2])
          return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN3._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg3(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add3(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul3(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN3(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN3(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN3(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert2(i < m);
          var b = this.pow(c, new BN3(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN3(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN3(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN3.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN3(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul3(a, b) {
        if (a.isZero() || b.isZero())
          return new BN3(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/@ethersproject/signing-key/lib.esm/elliptic.js
function createCommonjsModule(fn, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function(path, base2) {
      return commonjsRequire(path, base2 === void 0 || base2 === null ? module.path : base2);
    }
  }, fn(module, module.exports), module.exports;
}
function commonjsRequire() {
  throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
}
function assert(val, msg) {
  if (!val)
    throw new Error(msg || "Assertion failed");
}
function BaseCurve(type, conf) {
  this.type = type;
  this.p = new import_bn2.default(conf.p, 16);
  this.red = conf.prime ? import_bn2.default.red(conf.prime) : import_bn2.default.mont(this.p);
  this.zero = new import_bn2.default(0).toRed(this.red);
  this.one = new import_bn2.default(1).toRed(this.red);
  this.two = new import_bn2.default(2).toRed(this.red);
  this.n = conf.n && new import_bn2.default(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
  this._bitLength = this.n ? this.n.bitLength() : 0;
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
function ShortCurve(conf) {
  base.call(this, "short", conf);
  this.a = new import_bn2.default(conf.a, 16).toRed(this.red);
  this.b = new import_bn2.default(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();
  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
function Point(curve, x, y, isRed) {
  base.BasePoint.call(this, curve, "affine");
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new import_bn2.default(x, 16);
    this.y = new import_bn2.default(y, 16);
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
function JPoint(curve, x, y, z) {
  base.BasePoint.call(this, curve, "jacobian");
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new import_bn2.default(0);
  } else {
    this.x = new import_bn2.default(x, 16);
    this.y = new import_bn2.default(y, 16);
    this.z = new import_bn2.default(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);
  this.zOne = this.z === this.curve.one;
}
function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;
  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;
  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;
  var entropy = utils_1.toArray(options.entropy, options.entropyEnc || "hex");
  var nonce = utils_1.toArray(options.nonce, options.nonceEnc || "hex");
  var pers = utils_1.toArray(options.pers, options.persEnc || "hex");
  minimalisticAssert(
    entropy.length >= this.minEntropy / 8,
    "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
  );
  this._init(entropy, nonce, pers);
}
function KeyPair(ec2, options) {
  this.ec = ec2;
  this.priv = null;
  this.pub = null;
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
function Signature(options, enc) {
  if (options instanceof Signature)
    return options;
  if (this._importDER(options, enc))
    return;
  assert$4(options.r && options.s, "Signature without r or s");
  this.r = new import_bn2.default(options.r, 16);
  this.s = new import_bn2.default(options.s, 16);
  if (options.recoveryParam === void 0)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
function Position() {
  this.place = 0;
}
function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 128)) {
    return initial;
  }
  var octetLen = initial & 15;
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }
  if (val <= 127) {
    return false;
  }
  p.place = off;
  return val;
}
function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 128) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}
function constructLength(arr, len) {
  if (len < 128) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 128);
  while (--octets) {
    arr.push(len >>> (octets << 3) & 255);
  }
  arr.push(len);
}
function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);
  if (typeof options === "string") {
    assert$5(
      Object.prototype.hasOwnProperty.call(curves_1, options),
      "Unknown curve " + options
    );
    options = curves_1[options];
  }
  if (options instanceof curves_1.PresetCurve)
    options = { curve: options };
  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);
  this.hash = options.hash || options.curve.hash;
}
var import_bn2, import_hash2, minimalisticAssert, utils_1, utils_1$1, getNAF, getJSF, assert$1, base, inherits_browser, assert$2, short_1, curve_1, curves_1, hmacDrbg, assert$3, key, assert$4, signature, rand, assert$5, ec, elliptic_1, EC$1;
var init_elliptic = __esm({
  "node_modules/@ethersproject/signing-key/lib.esm/elliptic.js"() {
    import_bn2 = __toESM(require_bn9());
    import_hash2 = __toESM(require_hash());
    minimalisticAssert = assert;
    assert.equal = function assertEqual(l, r2, msg) {
      if (l != r2)
        throw new Error(msg || "Assertion failed: " + l + " != " + r2);
    };
    utils_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var utils = exports;
      function toArray(msg, enc) {
        if (Array.isArray(msg))
          return msg.slice();
        if (!msg)
          return [];
        var res = [];
        if (typeof msg !== "string") {
          for (var i = 0; i < msg.length; i++)
            res[i] = msg[i] | 0;
          return res;
        }
        if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/ig, "");
          if (msg.length % 2 !== 0)
            msg = "0" + msg;
          for (var i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        } else {
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            var hi = c >> 8;
            var lo = c & 255;
            if (hi)
              res.push(hi, lo);
            else
              res.push(lo);
          }
        }
        return res;
      }
      utils.toArray = toArray;
      function zero2(word) {
        if (word.length === 1)
          return "0" + word;
        else
          return word;
      }
      utils.zero2 = zero2;
      function toHex4(msg) {
        var res = "";
        for (var i = 0; i < msg.length; i++)
          res += zero2(msg[i].toString(16));
        return res;
      }
      utils.toHex = toHex4;
      utils.encode = function encode4(arr, enc) {
        if (enc === "hex")
          return toHex4(arr);
        else
          return arr;
      };
    });
    utils_1$1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var utils = exports;
      utils.assert = minimalisticAssert;
      utils.toArray = utils_1.toArray;
      utils.zero2 = utils_1.zero2;
      utils.toHex = utils_1.toHex;
      utils.encode = utils_1.encode;
      function getNAF2(num, w, bits) {
        var naf = new Array(Math.max(num.bitLength(), bits) + 1);
        naf.fill(0);
        var ws = 1 << w + 1;
        var k = num.clone();
        for (var i = 0; i < naf.length; i++) {
          var z;
          var mod = k.andln(ws - 1);
          if (k.isOdd()) {
            if (mod > (ws >> 1) - 1)
              z = (ws >> 1) - mod;
            else
              z = mod;
            k.isubn(z);
          } else {
            z = 0;
          }
          naf[i] = z;
          k.iushrn(1);
        }
        return naf;
      }
      utils.getNAF = getNAF2;
      function getJSF2(k1, k2) {
        var jsf = [
          [],
          []
        ];
        k1 = k1.clone();
        k2 = k2.clone();
        var d1 = 0;
        var d2 = 0;
        var m8;
        while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
          var m14 = k1.andln(3) + d1 & 3;
          var m24 = k2.andln(3) + d2 & 3;
          if (m14 === 3)
            m14 = -1;
          if (m24 === 3)
            m24 = -1;
          var u1;
          if ((m14 & 1) === 0) {
            u1 = 0;
          } else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2)
              u1 = -m14;
            else
              u1 = m14;
          }
          jsf[0].push(u1);
          var u2;
          if ((m24 & 1) === 0) {
            u2 = 0;
          } else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2)
              u2 = -m24;
            else
              u2 = m24;
          }
          jsf[1].push(u2);
          if (2 * d1 === u1 + 1)
            d1 = 1 - d1;
          if (2 * d2 === u2 + 1)
            d2 = 1 - d2;
          k1.iushrn(1);
          k2.iushrn(1);
        }
        return jsf;
      }
      utils.getJSF = getJSF2;
      function cachedProperty(obj, name2, computer) {
        var key2 = "_" + name2;
        obj.prototype[name2] = function cachedProperty2() {
          return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
        };
      }
      utils.cachedProperty = cachedProperty;
      function parseBytes(bytes) {
        return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
      }
      utils.parseBytes = parseBytes;
      function intFromLE(bytes) {
        return new import_bn2.default(bytes, "hex", "le");
      }
      utils.intFromLE = intFromLE;
    });
    getNAF = utils_1$1.getNAF;
    getJSF = utils_1$1.getJSF;
    assert$1 = utils_1$1.assert;
    base = BaseCurve;
    BaseCurve.prototype.point = function point() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype.validate = function validate() {
      throw new Error("Not implemented");
    };
    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert$1(p.precomputed);
      var doubles = p._getDoubles();
      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }
      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };
    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;
      var naf = getNAF(k, w, this._bitLength);
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);
        if (i < 0)
          break;
        var z = naf[i];
        assert$1(z !== 0);
        if (p.type === "affine") {
          if (z > 0)
            acc = acc.mixedAdd(wnd[z - 1 >> 1]);
          else
            acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else {
          if (z > 0)
            acc = acc.add(wnd[z - 1 >> 1]);
          else
            acc = acc.add(wnd[-z - 1 >> 1].neg());
        }
      }
      return p.type === "affine" ? acc.toP() : acc;
    };
    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }
        var comb = [
          points[a],
          /* 1 */
          null,
          /* 3 */
          null,
          /* 5 */
          points[b]
          /* 7 */
        ];
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
          -3,
          /* -1 -1 */
          -1,
          /* -1 0 */
          -5,
          /* -1 1 */
          -7,
          /* 0 -1 */
          0,
          /* 0 0 */
          7,
          /* 0 1 */
          5,
          /* 1 -1 */
          1,
          /* 1 0 */
          3
          /* 1 1 */
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;
          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }
      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;
        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;
        for (j = 0; j < len; j++) {
          var z = tmp[j];
          p;
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][z - 1 >> 1];
          else if (z < 0)
            p = wnd[j][-z - 1 >> 1].neg();
          if (p.type === "affine")
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      for (i = 0; i < len; i++)
        wnd[i] = null;
      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };
    BaseCurve.BasePoint = BasePoint;
    BasePoint.prototype.eq = function eq() {
      throw new Error("Not implemented");
    };
    BasePoint.prototype.validate = function validate2() {
      return this.curve.validate(this);
    };
    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils_1$1.toArray(bytes, enc);
      var len = this.p.byteLength();
      if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6)
          assert$1(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7)
          assert$1(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(
          bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len)
        );
        return res;
      } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
      }
      throw new Error("Unknown point format");
    };
    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };
    BasePoint.prototype._encode = function _encode2(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray("be", len);
      if (compact)
        return [this.getY().isEven() ? 2 : 3].concat(x);
      return [4].concat(x, this.getY().toArray("be", len));
    };
    BasePoint.prototype.encode = function encode3(enc, compact) {
      return utils_1$1.encode(this._encode(compact), enc);
    };
    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;
      var precomputed = {
        doubles: null,
        naf: null,
        beta: null
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;
      return this;
    };
    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;
      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;
      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };
    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;
      var doubles = [this];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step,
        points: doubles
      };
    };
    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;
      var res = [this];
      var max = (1 << wnd) - 1;
      var dbl3 = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl3);
      return {
        wnd,
        points: res
      };
    };
    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };
    BasePoint.prototype.dblp = function dblp(k) {
      var r2 = this;
      for (var i = 0; i < k; i++)
        r2 = r2.dbl();
      return r2;
    };
    inherits_browser = createCommonjsModule(function(module) {
      if (typeof Object.create === "function") {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          }
        };
      } else {
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function() {
            };
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        };
      }
    });
    assert$2 = utils_1$1.assert;
    inherits_browser(ShortCurve, base);
    short_1 = ShortCurve;
    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new import_bn2.default(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new import_bn2.default(conf.lambda, 16);
      } else {
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new import_bn2.default(vec.a, 16),
            b: new import_bn2.default(vec.b, 16)
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }
      return {
        beta,
        lambda,
        basis
      };
    };
    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      var red = num === this.p ? this.red : import_bn2.default.mont(num);
      var tinv = new import_bn2.default(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();
      var s = new import_bn2.default(3).toRed(red).redNeg().redSqrt().redMul(tinv);
      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [l1, l2];
    };
    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
      var u = lambda;
      var v = this.n.clone();
      var x1 = new import_bn2.default(1);
      var y1 = new import_bn2.default(0);
      var x2 = new import_bn2.default(0);
      var y2 = new import_bn2.default(1);
      var a0;
      var b0;
      var a1;
      var b1;
      var a2;
      var b2;
      var prevR;
      var i = 0;
      var r2;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r2 = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r2.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r2.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r2;
        v = u;
        u = r2;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r2.neg();
      b2 = x;
      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }
      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 }
      ];
    };
    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];
      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);
      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1, k2 };
    };
    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new import_bn2.default(x, 16);
      if (!x.red)
        x = x.toRed(this.red);
      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error("invalid point");
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();
      return this.point(x, y);
    };
    ShortCurve.prototype.validate = function validate3(point3) {
      if (point3.inf)
        return true;
      var x = point3.x;
      var y = point3.y;
      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };
    ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };
    inherits_browser(Point, base.BasePoint);
    ShortCurve.prototype.point = function point2(x, y, isRed) {
      return new Point(this, x, y, isRed);
    };
    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };
    Point.prototype._getBeta = function _getBeta2() {
      if (!this.curve.endo)
        return;
      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;
      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul)
          }
        };
      }
      return beta;
    };
    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [this.x, this.y];
      return [this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1)
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1)
        }
      }];
    };
    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === "string")
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;
      function obj2point(obj2) {
        return curve.point(obj2[0], obj2[1], red);
      }
      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [res].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [res].concat(pre.naf.points.map(obj2point))
        }
      };
      return res;
    };
    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return "<EC Point Infinity>";
      return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };
    Point.prototype.add = function add(p) {
      if (this.inf)
        return p;
      if (p.inf)
        return this;
      if (this.eq(p))
        return this.dbl();
      if (this.neg().eq(p))
        return this.curve.point(null, null);
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);
      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);
      var a = this.curve.a;
      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };
    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };
    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };
    Point.prototype.mul = function mul(k) {
      k = new import_bn2.default(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([this], [k]);
      else
        return this.curve._wnafMul(this, k);
    };
    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };
    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [this, p2];
      var coeffs = [k1, k2];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };
    Point.prototype.eq = function eq2(p) {
      return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };
    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;
      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate)
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate)
          }
        };
      }
      return res;
    };
    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);
      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };
    inherits_browser(JPoint, base.BasePoint);
    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };
    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);
      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);
      return this.curve.point(ax, ay);
    };
    JPoint.prototype.neg = function neg2() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    JPoint.prototype.add = function add2(p) {
      if (this.isInfinity())
        return p;
      if (p.isInfinity())
        return this;
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));
      var h = u1.redSub(u2);
      var r2 = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r2.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      if (this.isInfinity())
        return p.toJ();
      if (p.isInfinity())
        return this;
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);
      var h = u1.redSub(u2);
      var r2 = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r2.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }
      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);
      var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.dblp = function dblp2(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();
      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r2 = this;
        for (i = 0; i < pow; i++)
          r2 = r2.dbl();
        return r2;
      }
      var a = this.curve.a;
      var tinv = this.curve.tinv;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
      }
      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };
    JPoint.prototype.dbl = function dbl2() {
      if (this.isInfinity())
        return this;
      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };
    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx);
        var t = m.redSqr().redISub(s).redISub(s);
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        nx = t;
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var a = this.x.redSqr();
        var b = this.y.redSqr();
        var c = b.redSqr();
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        var e = a.redAdd(a).redIAdd(a);
        var f = e.redSqr();
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        nx = f.redISub(d).redISub(d);
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      if (this.zOne) {
        var xx = this.x.redSqr();
        var yy = this.y.redSqr();
        var yyyy = yy.redSqr();
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        var t = m.redSqr().redISub(s).redISub(s);
        nx = t;
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        nz = this.y.redAdd(this.y);
      } else {
        var delta = this.z.redSqr();
        var gamma = this.y.redSqr();
        var beta = this.x.redMul(gamma);
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();
      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var zz = this.z.redSqr();
      var yyyy = yy.redSqr();
      var m = xx.redAdd(xx).redIAdd(xx);
      var mm = m.redSqr();
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      var ee = e.redSqr();
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
      return this.curve.jpoint(nx, ny, nz);
    };
    JPoint.prototype.mul = function mul2(k, kbase) {
      k = new import_bn2.default(k, kbase);
      return this.curve._wnafMul(this, k);
    };
    JPoint.prototype.eq = function eq3(p) {
      if (p.type === "affine")
        return this.eq(p.toJ());
      if (this === p)
        return true;
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };
    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;
      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (; ; ) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };
    JPoint.prototype.inspect = function inspect2() {
      if (this.isInfinity())
        return "<EC JPoint Infinity>";
      return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    JPoint.prototype.isInfinity = function isInfinity2() {
      return this.z.cmpn(0) === 0;
    };
    curve_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var curve = exports;
      curve.base = base;
      curve.short = short_1;
      curve.mont = /*RicMoo:ethers:require(./mont)*/
      null;
      curve.edwards = /*RicMoo:ethers:require(./edwards)*/
      null;
    });
    curves_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var curves = exports;
      var assert2 = utils_1$1.assert;
      function PresetCurve(options) {
        if (options.type === "short")
          this.curve = new curve_1.short(options);
        else if (options.type === "edwards")
          this.curve = new curve_1.edwards(options);
        else
          this.curve = new curve_1.mont(options);
        this.g = this.curve.g;
        this.n = this.curve.n;
        this.hash = options.hash;
        assert2(this.g.validate(), "Invalid curve");
        assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
      }
      curves.PresetCurve = PresetCurve;
      function defineCurve(name2, options) {
        Object.defineProperty(curves, name2, {
          configurable: true,
          enumerable: true,
          get: function() {
            var curve = new PresetCurve(options);
            Object.defineProperty(curves, name2, {
              configurable: true,
              enumerable: true,
              value: curve
            });
            return curve;
          }
        });
      }
      defineCurve("p192", {
        type: "short",
        prime: "p192",
        p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
        b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
        n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
        hash: import_hash2.default.sha256,
        gRed: false,
        g: [
          "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
          "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
        ]
      });
      defineCurve("p224", {
        type: "short",
        prime: "p224",
        p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
        b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
        n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
        hash: import_hash2.default.sha256,
        gRed: false,
        g: [
          "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
          "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
        ]
      });
      defineCurve("p256", {
        type: "short",
        prime: null,
        p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
        a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
        b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
        n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
        hash: import_hash2.default.sha256,
        gRed: false,
        g: [
          "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
          "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
        ]
      });
      defineCurve("p384", {
        type: "short",
        prime: null,
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
        a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
        b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
        n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
        hash: import_hash2.default.sha384,
        gRed: false,
        g: [
          "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
          "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
        ]
      });
      defineCurve("p521", {
        type: "short",
        prime: null,
        p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
        a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
        b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
        n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
        hash: import_hash2.default.sha512,
        gRed: false,
        g: [
          "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
          "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
        ]
      });
      defineCurve("curve25519", {
        type: "mont",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "76d06",
        b: "1",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: import_hash2.default.sha256,
        gRed: false,
        g: [
          "9"
        ]
      });
      defineCurve("ed25519", {
        type: "edwards",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "-1",
        c: "1",
        // -121665 * (121666^(-1)) (mod P)
        d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: import_hash2.default.sha256,
        gRed: false,
        g: [
          "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
          // 4/5
          "6666666666666666666666666666666666666666666666666666666666666658"
        ]
      });
      var pre;
      try {
        pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/
        null.crash();
      } catch (e) {
        pre = void 0;
      }
      defineCurve("secp256k1", {
        type: "short",
        prime: "k256",
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
        a: "0",
        b: "7",
        n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
        h: "1",
        hash: import_hash2.default.sha256,
        // Precomputed endomorphism
        beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
        lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
        basis: [
          {
            a: "3086d221a7d46bcde86c90e49284eb15",
            b: "-e4437ed6010e88286f547fa90abfe4c3"
          },
          {
            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
            b: "3086d221a7d46bcde86c90e49284eb15"
          }
        ],
        gRed: false,
        g: [
          "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
          "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
          pre
        ]
      });
    });
    hmacDrbg = HmacDRBG;
    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);
      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0;
        this.V[i] = 1;
      }
      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 281474976710656;
    };
    HmacDRBG.prototype._hmac = function hmac() {
      return new import_hash2.default.hmac(this.hash, this.K);
    };
    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac().update(this.V).update([0]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;
      this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
      this.V = this._hmac().update(this.V).digest();
    };
    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add3, addEnc) {
      if (typeof entropyEnc !== "string") {
        addEnc = add3;
        add3 = entropyEnc;
        entropyEnc = null;
      }
      entropy = utils_1.toArray(entropy, entropyEnc);
      add3 = utils_1.toArray(add3, addEnc);
      minimalisticAssert(
        entropy.length >= this.minEntropy / 8,
        "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
      );
      this._update(entropy.concat(add3 || []));
      this._reseed = 1;
    };
    HmacDRBG.prototype.generate = function generate(len, enc, add3, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error("Reseed is required");
      if (typeof enc !== "string") {
        addEnc = add3;
        add3 = enc;
        enc = null;
      }
      if (add3) {
        add3 = utils_1.toArray(add3, addEnc || "hex");
        this._update(add3);
      }
      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }
      var res = temp.slice(0, len);
      this._update(add3);
      this._reseed++;
      return utils_1.encode(res, enc);
    };
    assert$3 = utils_1$1.assert;
    key = KeyPair;
    KeyPair.fromPublic = function fromPublic(ec2, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;
      return new KeyPair(ec2, {
        pub,
        pubEnc: enc
      });
    };
    KeyPair.fromPrivate = function fromPrivate(ec2, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;
      return new KeyPair(ec2, {
        priv,
        privEnc: enc
      });
    };
    KeyPair.prototype.validate = function validate4() {
      var pub = this.getPublic();
      if (pub.isInfinity())
        return { result: false, reason: "Invalid public key" };
      if (!pub.validate())
        return { result: false, reason: "Public key is not a point" };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: "Public key * N != O" };
      return { result: true, reason: null };
    };
    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      if (typeof compact === "string") {
        enc = compact;
        compact = null;
      }
      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);
      if (!enc)
        return this.pub;
      return this.pub.encode(enc, compact);
    };
    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === "hex")
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };
    KeyPair.prototype._importPrivate = function _importPrivate(key2, enc) {
      this.priv = new import_bn2.default(key2, enc || 16);
      this.priv = this.priv.umod(this.ec.curve.n);
    };
    KeyPair.prototype._importPublic = function _importPublic(key2, enc) {
      if (key2.x || key2.y) {
        if (this.ec.curve.type === "mont") {
          assert$3(key2.x, "Need x coordinate");
        } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
          assert$3(key2.x && key2.y, "Need both x and y coordinate");
        }
        this.pub = this.ec.curve.point(key2.x, key2.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key2, enc);
    };
    KeyPair.prototype.derive = function derive(pub) {
      if (!pub.validate()) {
        assert$3(pub.validate(), "public point not validated");
      }
      return pub.mul(this.priv).getX();
    };
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };
    KeyPair.prototype.verify = function verify(msg, signature2) {
      return this.ec.verify(msg, signature2, this);
    };
    KeyPair.prototype.inspect = function inspect3() {
      return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
    assert$4 = utils_1$1.assert;
    signature = Signature;
    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils_1$1.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 48) {
        return false;
      }
      var len = getLength(data, p);
      if (len === false) {
        return false;
      }
      if (len + p.place !== data.length) {
        return false;
      }
      if (data[p.place++] !== 2) {
        return false;
      }
      var rlen = getLength(data, p);
      if (rlen === false) {
        return false;
      }
      var r2 = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 2) {
        return false;
      }
      var slen = getLength(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r2[0] === 0) {
        if (r2[1] & 128) {
          r2 = r2.slice(1);
        } else {
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 128) {
          s = s.slice(1);
        } else {
          return false;
        }
      }
      this.r = new import_bn2.default(r2);
      this.s = new import_bn2.default(s);
      this.recoveryParam = null;
      return true;
    };
    Signature.prototype.toDER = function toDER(enc) {
      var r2 = this.r.toArray();
      var s = this.s.toArray();
      if (r2[0] & 128)
        r2 = [0].concat(r2);
      if (s[0] & 128)
        s = [0].concat(s);
      r2 = rmPadding(r2);
      s = rmPadding(s);
      while (!s[0] && !(s[1] & 128)) {
        s = s.slice(1);
      }
      var arr = [2];
      constructLength(arr, r2.length);
      arr = arr.concat(r2);
      arr.push(2);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [48];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils_1$1.encode(res, enc);
    };
    rand = /*RicMoo:ethers:require(brorand)*/
    function() {
      throw new Error("unsupported");
    };
    assert$5 = utils_1$1.assert;
    ec = EC;
    EC.prototype.keyPair = function keyPair(options) {
      return new key(this, options);
    };
    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return key.fromPrivate(this, priv, enc);
    };
    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return key.fromPublic(this, pub, enc);
    };
    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};
      var drbg = new hmacDrbg({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
      });
      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new import_bn2.default(2));
      for (; ; ) {
        var priv = new import_bn2.default(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };
    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };
    EC.prototype.sign = function sign2(msg, key2, enc, options) {
      if (typeof enc === "object") {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};
      key2 = this.keyFromPrivate(key2, enc);
      msg = this._truncateToN(new import_bn2.default(msg, 16));
      var bytes = this.n.byteLength();
      var bkey = key2.getPrivate().toArray("be", bytes);
      var nonce = msg.toArray("be", bytes);
      var drbg = new hmacDrbg({
        hash: this.hash,
        entropy: bkey,
        nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
      });
      var ns1 = this.n.sub(new import_bn2.default(1));
      for (var iter = 0; ; iter++) {
        var k = options.k ? options.k(iter) : new import_bn2.default(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;
        var kpX = kp.getX();
        var r2 = kpX.umod(this.n);
        if (r2.cmpn(0) === 0)
          continue;
        var s = k.invm(this.n).mul(r2.mul(key2.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r2) !== 0 ? 2 : 0);
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }
        return new signature({ r: r2, s, recoveryParam });
      }
    };
    EC.prototype.verify = function verify2(msg, signature$1, key2, enc) {
      msg = this._truncateToN(new import_bn2.default(msg, 16));
      key2 = this.keyFromPublic(key2, enc);
      signature$1 = new signature(signature$1, "hex");
      var r2 = signature$1.r;
      var s = signature$1.s;
      if (r2.cmpn(1) < 0 || r2.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r2).umod(this.n);
      var p;
      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key2.getPublic(), u2);
        if (p.isInfinity())
          return false;
        return p.getX().umod(this.n).cmp(r2) === 0;
      }
      p = this.g.jmulAdd(u1, key2.getPublic(), u2);
      if (p.isInfinity())
        return false;
      return p.eqXToP(r2);
    };
    EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
      assert$5((3 & j) === j, "The recovery param is more than two bits");
      signature$1 = new signature(signature$1, enc);
      var n = this.n;
      var e = new import_bn2.default(msg);
      var r2 = signature$1.r;
      var s = signature$1.s;
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error("Unable to find sencond key candinate");
      if (isSecondKey)
        r2 = this.curve.pointFromX(r2.add(this.curve.n), isYOdd);
      else
        r2 = this.curve.pointFromX(r2, isYOdd);
      var rInv = signature$1.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);
      return this.g.mulAdd(s1, r2, s2);
    };
    EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
      signature$1 = new signature(signature$1, enc);
      if (signature$1.recoveryParam !== null)
        return signature$1.recoveryParam;
      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature$1, i);
        } catch (e2) {
          continue;
        }
        if (Qprime.eq(Q))
          return i;
      }
      throw new Error("Unable to find valid recovery factor");
    };
    elliptic_1 = createCommonjsModule(function(module, exports) {
      "use strict";
      var elliptic = exports;
      elliptic.version = /*RicMoo:ethers*/
      { version: "6.5.4" }.version;
      elliptic.utils = utils_1$1;
      elliptic.rand = /*RicMoo:ethers:require(brorand)*/
      function() {
        throw new Error("unsupported");
      };
      elliptic.curve = curve_1;
      elliptic.curves = curves_1;
      elliptic.ec = ec;
      elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/
      null;
    });
    EC$1 = elliptic_1.ec;
  }
});

// node_modules/@ethersproject/signing-key/lib.esm/_version.js
var version10;
var init_version10 = __esm({
  "node_modules/@ethersproject/signing-key/lib.esm/_version.js"() {
    version10 = "signing-key/5.7.0";
  }
});

// node_modules/@ethersproject/signing-key/lib.esm/index.js
function getCurve() {
  if (!_curve) {
    _curve = new EC$1("secp256k1");
  }
  return _curve;
}
function recoverPublicKey(digest, signature2) {
  const sig = splitSignature(signature2);
  const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };
  return "0x" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
}
function computePublicKey(key2, compressed) {
  const bytes = arrayify(key2);
  if (bytes.length === 32) {
    const signingKey = new SigningKey(bytes);
    if (compressed) {
      return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
    }
    return signingKey.publicKey;
  } else if (bytes.length === 33) {
    if (compressed) {
      return hexlify(bytes);
    }
    return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
  } else if (bytes.length === 65) {
    if (!compressed) {
      return hexlify(bytes);
    }
    return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
  }
  return logger15.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
}
var logger15, _curve, SigningKey;
var init_lib14 = __esm({
  "node_modules/@ethersproject/signing-key/lib.esm/index.js"() {
    "use strict";
    init_elliptic();
    init_lib2();
    init_lib4();
    init_lib();
    init_version10();
    logger15 = new Logger(version10);
    _curve = null;
    SigningKey = class {
      constructor(privateKey) {
        defineReadOnly(this, "curve", "secp256k1");
        defineReadOnly(this, "privateKey", hexlify(privateKey));
        if (hexDataLength(this.privateKey) !== 32) {
          logger15.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
        }
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        defineReadOnly(this, "publicKey", "0x" + keyPair2.getPublic(false, "hex"));
        defineReadOnly(this, "compressedPublicKey", "0x" + keyPair2.getPublic(true, "hex"));
        defineReadOnly(this, "_isSigningKey", true);
      }
      _addPoint(other) {
        const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
        const p1 = getCurve().keyFromPublic(arrayify(other));
        return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
      }
      signDigest(digest) {
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        const digestBytes = arrayify(digest);
        if (digestBytes.length !== 32) {
          logger15.throwArgumentError("bad digest length", "digest", digest);
        }
        const signature2 = keyPair2.sign(digestBytes, { canonical: true });
        return splitSignature({
          recoveryParam: signature2.recoveryParam,
          r: hexZeroPad("0x" + signature2.r.toString(16), 32),
          s: hexZeroPad("0x" + signature2.s.toString(16), 32)
        });
      }
      computeSharedSecret(otherKey) {
        const keyPair2 = getCurve().keyFromPrivate(arrayify(this.privateKey));
        const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
        return hexZeroPad("0x" + keyPair2.derive(otherKeyPair.getPublic()).toString(16), 32);
      }
      static isSigningKey(value) {
        return !!(value && value._isSigningKey);
      }
    };
  }
});

// node_modules/@ethersproject/transactions/lib.esm/_version.js
var version11;
var init_version11 = __esm({
  "node_modules/@ethersproject/transactions/lib.esm/_version.js"() {
    version11 = "transactions/5.7.0";
  }
});

// node_modules/@ethersproject/transactions/lib.esm/index.js
var lib_exports2 = {};
__export(lib_exports2, {
  TransactionTypes: () => TransactionTypes,
  accessListify: () => accessListify,
  computeAddress: () => computeAddress,
  parse: () => parse,
  recoverAddress: () => recoverAddress,
  serialize: () => serialize
});
function handleAddress(value) {
  if (value === "0x") {
    return null;
  }
  return getAddress(value);
}
function handleNumber(value) {
  if (value === "0x") {
    return Zero2;
  }
  return BigNumber.from(value);
}
function computeAddress(key2) {
  const publicKey = computePublicKey(key2);
  return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));
}
function recoverAddress(digest, signature2) {
  return computeAddress(recoverPublicKey(arrayify(digest), signature2));
}
function formatNumber(value, name2) {
  const result = stripZeros(BigNumber.from(value).toHexString());
  if (result.length > 32) {
    logger16.throwArgumentError("invalid length for " + name2, "transaction:" + name2, value);
  }
  return result;
}
function accessSetify(addr, storageKeys) {
  return {
    address: getAddress(addr),
    storageKeys: (storageKeys || []).map((storageKey, index) => {
      if (hexDataLength(storageKey) !== 32) {
        logger16.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
      }
      return storageKey.toLowerCase();
    })
  };
}
function accessListify(value) {
  if (Array.isArray(value)) {
    return value.map((set, index) => {
      if (Array.isArray(set)) {
        if (set.length > 2) {
          logger16.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set);
        }
        return accessSetify(set[0], set[1]);
      }
      return accessSetify(set.address, set.storageKeys);
    });
  }
  const result = Object.keys(value).map((addr) => {
    const storageKeys = value[addr].reduce((accum, storageKey) => {
      accum[storageKey] = true;
      return accum;
    }, {});
    return accessSetify(addr, Object.keys(storageKeys).sort());
  });
  result.sort((a, b) => a.address.localeCompare(b.address));
  return result;
}
function formatAccessList(value) {
  return accessListify(value).map((set) => [set.address, set.storageKeys]);
}
function _serializeEip1559(transaction, signature2) {
  if (transaction.gasPrice != null) {
    const gasPrice = BigNumber.from(transaction.gasPrice);
    const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);
    if (!gasPrice.eq(maxFeePerGas)) {
      logger16.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
        gasPrice,
        maxFeePerGas
      });
    }
  }
  const fields = [
    formatNumber(transaction.chainId || 0, "chainId"),
    formatNumber(transaction.nonce || 0, "nonce"),
    formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
    formatNumber(transaction.gasLimit || 0, "gasLimit"),
    transaction.to != null ? getAddress(transaction.to) : "0x",
    formatNumber(transaction.value || 0, "value"),
    transaction.data || "0x",
    formatAccessList(transaction.accessList || [])
  ];
  if (signature2) {
    const sig = splitSignature(signature2);
    fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
    fields.push(stripZeros(sig.r));
    fields.push(stripZeros(sig.s));
  }
  return hexConcat(["0x02", encode(fields)]);
}
function _serializeEip2930(transaction, signature2) {
  const fields = [
    formatNumber(transaction.chainId || 0, "chainId"),
    formatNumber(transaction.nonce || 0, "nonce"),
    formatNumber(transaction.gasPrice || 0, "gasPrice"),
    formatNumber(transaction.gasLimit || 0, "gasLimit"),
    transaction.to != null ? getAddress(transaction.to) : "0x",
    formatNumber(transaction.value || 0, "value"),
    transaction.data || "0x",
    formatAccessList(transaction.accessList || [])
  ];
  if (signature2) {
    const sig = splitSignature(signature2);
    fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
    fields.push(stripZeros(sig.r));
    fields.push(stripZeros(sig.s));
  }
  return hexConcat(["0x01", encode(fields)]);
}
function _serialize(transaction, signature2) {
  checkProperties(transaction, allowedTransactionKeys);
  const raw = [];
  transactionFields.forEach(function(fieldInfo) {
    let value = transaction[fieldInfo.name] || [];
    const options = {};
    if (fieldInfo.numeric) {
      options.hexPad = "left";
    }
    value = arrayify(hexlify(value, options));
    if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
      logger16.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
    }
    if (fieldInfo.maxLength) {
      value = stripZeros(value);
      if (value.length > fieldInfo.maxLength) {
        logger16.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
      }
    }
    raw.push(hexlify(value));
  });
  let chainId = 0;
  if (transaction.chainId != null) {
    chainId = transaction.chainId;
    if (typeof chainId !== "number") {
      logger16.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
    }
  } else if (signature2 && !isBytesLike(signature2) && signature2.v > 28) {
    chainId = Math.floor((signature2.v - 35) / 2);
  }
  if (chainId !== 0) {
    raw.push(hexlify(chainId));
    raw.push("0x");
    raw.push("0x");
  }
  if (!signature2) {
    return encode(raw);
  }
  const sig = splitSignature(signature2);
  let v = 27 + sig.recoveryParam;
  if (chainId !== 0) {
    raw.pop();
    raw.pop();
    raw.pop();
    v += chainId * 2 + 8;
    if (sig.v > 28 && sig.v !== v) {
      logger16.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature2);
    }
  } else if (sig.v !== v) {
    logger16.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature2);
  }
  raw.push(hexlify(v));
  raw.push(stripZeros(arrayify(sig.r)));
  raw.push(stripZeros(arrayify(sig.s)));
  return encode(raw);
}
function serialize(transaction, signature2) {
  if (transaction.type == null || transaction.type === 0) {
    if (transaction.accessList != null) {
      logger16.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
    }
    return _serialize(transaction, signature2);
  }
  switch (transaction.type) {
    case 1:
      return _serializeEip2930(transaction, signature2);
    case 2:
      return _serializeEip1559(transaction, signature2);
    default:
      break;
  }
  return logger16.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {
    operation: "serializeTransaction",
    transactionType: transaction.type
  });
}
function _parseEipSignature(tx, fields, serialize2) {
  try {
    const recid = handleNumber(fields[0]).toNumber();
    if (recid !== 0 && recid !== 1) {
      throw new Error("bad recid");
    }
    tx.v = recid;
  } catch (error) {
    logger16.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
  }
  tx.r = hexZeroPad(fields[1], 32);
  tx.s = hexZeroPad(fields[2], 32);
  try {
    const digest = keccak256(serialize2(tx));
    tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
  } catch (error) {
  }
}
function _parseEip1559(payload) {
  const transaction = decode(payload.slice(1));
  if (transaction.length !== 9 && transaction.length !== 12) {
    logger16.throwArgumentError("invalid component count for transaction type: 2", "payload", hexlify(payload));
  }
  const maxPriorityFeePerGas = handleNumber(transaction[2]);
  const maxFeePerGas = handleNumber(transaction[3]);
  const tx = {
    type: 2,
    chainId: handleNumber(transaction[0]).toNumber(),
    nonce: handleNumber(transaction[1]).toNumber(),
    maxPriorityFeePerGas,
    maxFeePerGas,
    gasPrice: null,
    gasLimit: handleNumber(transaction[4]),
    to: handleAddress(transaction[5]),
    value: handleNumber(transaction[6]),
    data: transaction[7],
    accessList: accessListify(transaction[8])
  };
  if (transaction.length === 9) {
    return tx;
  }
  tx.hash = keccak256(payload);
  _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
  return tx;
}
function _parseEip2930(payload) {
  const transaction = decode(payload.slice(1));
  if (transaction.length !== 8 && transaction.length !== 11) {
    logger16.throwArgumentError("invalid component count for transaction type: 1", "payload", hexlify(payload));
  }
  const tx = {
    type: 1,
    chainId: handleNumber(transaction[0]).toNumber(),
    nonce: handleNumber(transaction[1]).toNumber(),
    gasPrice: handleNumber(transaction[2]),
    gasLimit: handleNumber(transaction[3]),
    to: handleAddress(transaction[4]),
    value: handleNumber(transaction[5]),
    data: transaction[6],
    accessList: accessListify(transaction[7])
  };
  if (transaction.length === 8) {
    return tx;
  }
  tx.hash = keccak256(payload);
  _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
  return tx;
}
function _parse(rawTransaction) {
  const transaction = decode(rawTransaction);
  if (transaction.length !== 9 && transaction.length !== 6) {
    logger16.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
  }
  const tx = {
    nonce: handleNumber(transaction[0]).toNumber(),
    gasPrice: handleNumber(transaction[1]),
    gasLimit: handleNumber(transaction[2]),
    to: handleAddress(transaction[3]),
    value: handleNumber(transaction[4]),
    data: transaction[5],
    chainId: 0
  };
  if (transaction.length === 6) {
    return tx;
  }
  try {
    tx.v = BigNumber.from(transaction[6]).toNumber();
  } catch (error) {
    return tx;
  }
  tx.r = hexZeroPad(transaction[7], 32);
  tx.s = hexZeroPad(transaction[8], 32);
  if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {
    tx.chainId = tx.v;
    tx.v = 0;
  } else {
    tx.chainId = Math.floor((tx.v - 35) / 2);
    if (tx.chainId < 0) {
      tx.chainId = 0;
    }
    let recoveryParam = tx.v - 27;
    const raw = transaction.slice(0, 6);
    if (tx.chainId !== 0) {
      raw.push(hexlify(tx.chainId));
      raw.push("0x");
      raw.push("0x");
      recoveryParam -= tx.chainId * 2 + 8;
    }
    const digest = keccak256(encode(raw));
    try {
      tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam });
    } catch (error) {
    }
    tx.hash = keccak256(rawTransaction);
  }
  tx.type = null;
  return tx;
}
function parse(rawTransaction) {
  const payload = arrayify(rawTransaction);
  if (payload[0] > 127) {
    return _parse(payload);
  }
  switch (payload[0]) {
    case 1:
      return _parseEip2930(payload);
    case 2:
      return _parseEip1559(payload);
    default:
      break;
  }
  return logger16.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {
    operation: "parseTransaction",
    transactionType: payload[0]
  });
}
var logger16, TransactionTypes, transactionFields, allowedTransactionKeys;
var init_lib15 = __esm({
  "node_modules/@ethersproject/transactions/lib.esm/index.js"() {
    "use strict";
    init_lib7();
    init_lib3();
    init_lib2();
    init_lib8();
    init_lib5();
    init_lib4();
    init_lib6();
    init_lib14();
    init_lib();
    init_version11();
    logger16 = new Logger(version11);
    (function(TransactionTypes2) {
      TransactionTypes2[TransactionTypes2["legacy"] = 0] = "legacy";
      TransactionTypes2[TransactionTypes2["eip2930"] = 1] = "eip2930";
      TransactionTypes2[TransactionTypes2["eip1559"] = 2] = "eip1559";
    })(TransactionTypes || (TransactionTypes = {}));
    transactionFields = [
      { name: "nonce", maxLength: 32, numeric: true },
      { name: "gasPrice", maxLength: 32, numeric: true },
      { name: "gasLimit", maxLength: 32, numeric: true },
      { name: "to", length: 20 },
      { name: "value", maxLength: 32, numeric: true },
      { name: "data" }
    ];
    allowedTransactionKeys = {
      chainId: true,
      data: true,
      gasLimit: true,
      gasPrice: true,
      nonce: true,
      to: true,
      type: true,
      value: true
    };
  }
});

// node_modules/web3-core-method/lib/index.js
var require_lib9 = __commonJS({
  "node_modules/web3-core-method/lib/index.js"(exports, module) {
    "use strict";
    var errors = require_lib5().errors;
    var formatters = require_lib5().formatters;
    var utils = require_lib3();
    var promiEvent = require_lib8();
    var Subscriptions = require_lib6().subscriptions;
    var EthersTransactionUtils = (init_lib15(), __toCommonJS(lib_exports2));
    var Method2 = function Method3(options) {
      if (!options.call || !options.name) {
        throw new Error('When creating a method you need to provide at least the "name" and "call" property.');
      }
      this.name = options.name;
      this.call = options.call;
      this.params = options.params || 0;
      this.inputFormatter = options.inputFormatter;
      this.outputFormatter = options.outputFormatter;
      this.transformPayload = options.transformPayload;
      this.extraFormatters = options.extraFormatters;
      this.abiCoder = options.abiCoder;
      this.requestManager = options.requestManager;
      this.accounts = options.accounts;
      this.defaultBlock = options.defaultBlock || "latest";
      this.defaultAccount = options.defaultAccount || null;
      this.transactionBlockTimeout = options.transactionBlockTimeout || 50;
      this.transactionConfirmationBlocks = options.transactionConfirmationBlocks || 24;
      this.transactionPollingTimeout = options.transactionPollingTimeout || 750;
      this.transactionPollingInterval = options.transactionPollingInterval || 1e3;
      this.blockHeaderTimeout = options.blockHeaderTimeout || 10;
      this.defaultCommon = options.defaultCommon;
      this.defaultChain = options.defaultChain;
      this.defaultHardfork = options.defaultHardfork;
      this.handleRevert = options.handleRevert;
    };
    Method2.prototype.setRequestManager = function(requestManager, accounts) {
      this.requestManager = requestManager;
      if (accounts) {
        this.accounts = accounts;
      }
    };
    Method2.prototype.createFunction = function(requestManager, accounts) {
      var func = this.buildCall();
      Object.defineProperty(func, "call", { configurable: true, writable: true, value: this.call });
      this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);
      return func;
    };
    Method2.prototype.attachToObject = function(obj) {
      var func = this.buildCall();
      Object.defineProperty(func, "call", { configurable: true, writable: true, value: this.call });
      var name2 = this.name.split(".");
      if (name2.length > 1) {
        obj[name2[0]] = obj[name2[0]] || {};
        obj[name2[0]][name2[1]] = func;
      } else {
        obj[name2[0]] = func;
      }
    };
    Method2.prototype.getCall = function(args) {
      return typeof this.call === "function" ? this.call(args) : this.call;
    };
    Method2.prototype.extractCallback = function(args) {
      if (typeof args[args.length - 1] === "function") {
        return args.pop();
      }
    };
    Method2.prototype.validateArgs = function(args) {
      if (args.length !== this.params) {
        throw errors.InvalidNumberOfParams(args.length, this.params, this.name);
      }
    };
    Method2.prototype.formatInput = function(args) {
      var _this = this;
      if (!this.inputFormatter) {
        return args;
      }
      return this.inputFormatter.map(function(formatter, index) {
        return formatter ? formatter.call(_this, args[index]) : args[index];
      });
    };
    Method2.prototype.formatOutput = function(result) {
      var _this = this;
      if (Array.isArray(result)) {
        return result.map(function(res) {
          return _this.outputFormatter && res ? _this.outputFormatter(res, this == null ? void 0 : this.hexFormat) : res;
        });
      } else {
        return this.outputFormatter && result ? this.outputFormatter(result, this == null ? void 0 : this.hexFormat) : result;
      }
    };
    Method2.prototype.toPayload = function(args) {
      var call = this.getCall(args);
      var callback = this.extractCallback(args);
      var params = this.formatInput(args);
      this.validateArgs(params);
      var payload = {
        method: call,
        params,
        callback
      };
      if (this.transformPayload) {
        payload = this.transformPayload(payload);
      }
      return payload;
    };
    Method2.prototype._confirmTransaction = function(defer, result, payload) {
      var method = this, promiseResolved = false, canUnsubscribe = true, timeoutCount = 0, confirmationCount = 0, intervalId = null, blockHeaderTimeoutId = null, lastBlock = null, receiptJSON = "", gasProvided = !!payload.params[0] && typeof payload.params[0] === "object" && payload.params[0].gas ? payload.params[0].gas : null, isContractDeployment = !!payload.params[0] && typeof payload.params[0] === "object" && payload.params[0].data && payload.params[0].from && !payload.params[0].to, hasBytecode = isContractDeployment && payload.params[0].data.length > 2;
      var _ethereumCalls = [
        new Method2({
          name: "getBlockByNumber",
          call: "eth_getBlockByNumber",
          params: 2,
          inputFormatter: [formatters.inputBlockNumberFormatter, function(val) {
            return !!val;
          }],
          outputFormatter: formatters.outputBlockFormatter
        }),
        new Method2({
          name: "getTransactionReceipt",
          call: "eth_getTransactionReceipt",
          params: 1,
          inputFormatter: [null],
          outputFormatter: formatters.outputTransactionReceiptFormatter
        }),
        new Method2({
          name: "getCode",
          call: "eth_getCode",
          params: 2,
          inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]
        }),
        new Method2({
          name: "getTransactionByHash",
          call: "eth_getTransactionByHash",
          params: 1,
          inputFormatter: [null],
          outputFormatter: formatters.outputTransactionFormatter
        }),
        new Subscriptions({
          name: "subscribe",
          type: "eth",
          subscriptions: {
            "newBlockHeaders": {
              subscriptionName: "newHeads",
              params: 0,
              outputFormatter: formatters.outputBlockFormatter
            }
          }
        })
      ];
      var _ethereumCall = {};
      _ethereumCalls.forEach((mthd) => {
        mthd.attachToObject(_ethereumCall);
        mthd.requestManager = method.requestManager;
      });
      var checkConfirmation = function(existingReceipt, isPolling, err, blockHeader, sub) {
        if (!err) {
          if (!sub) {
            sub = {
              unsubscribe: function() {
                clearInterval(intervalId);
                clearTimeout(blockHeaderTimeoutId);
              }
            };
          }
          return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result)).catch(function(err2) {
            sub.unsubscribe();
            promiseResolved = true;
            utils._fireError({
              message: "Failed to check for transaction receipt:",
              data: err2
            }, defer.eventEmitter, defer.reject);
          }).then(async function(receipt) {
            if (!receipt || !receipt.blockHash) {
              throw new Error("Receipt missing or blockHash null");
            }
            if (method.extraFormatters && method.extraFormatters.receiptFormatter) {
              receipt = method.extraFormatters.receiptFormatter(receipt);
            }
            if (defer.eventEmitter.listeners("confirmation").length > 0) {
              var block;
              if (existingReceipt === void 0 || confirmationCount !== 0) {
                var latestBlock = await _ethereumCall.getBlockByNumber("latest");
                var latestBlockHash = latestBlock ? latestBlock.hash : null;
                if (isPolling) {
                  if (lastBlock) {
                    block = await _ethereumCall.getBlockByNumber(lastBlock.number + 1);
                    if (block) {
                      lastBlock = block;
                      defer.eventEmitter.emit("confirmation", confirmationCount, receipt, latestBlockHash);
                    }
                  } else {
                    block = await _ethereumCall.getBlockByNumber(receipt.blockNumber);
                    lastBlock = block;
                    defer.eventEmitter.emit("confirmation", confirmationCount, receipt, latestBlockHash);
                  }
                } else {
                  defer.eventEmitter.emit("confirmation", confirmationCount, receipt, latestBlockHash);
                }
              }
              if (isPolling && block || !isPolling) {
                confirmationCount++;
              }
              canUnsubscribe = false;
              if (confirmationCount === method.transactionConfirmationBlocks + 1) {
                sub.unsubscribe();
                defer.eventEmitter.removeAllListeners();
              }
            }
            return receipt;
          }).then(async function(receipt) {
            if (isContractDeployment && !promiseResolved) {
              if (!receipt.contractAddress) {
                if (canUnsubscribe) {
                  sub.unsubscribe();
                  promiseResolved = true;
                }
                utils._fireError(errors.NoContractAddressFoundError(receipt), defer.eventEmitter, defer.reject, null, receipt);
                return;
              }
              var code;
              try {
                code = await _ethereumCall.getCode(receipt.contractAddress);
              } catch (err2) {
              }
              if (!code) {
                return;
              }
              var deploymentSuccess = receipt.status === true && hasBytecode;
              if (deploymentSuccess || code.length > 2) {
                defer.eventEmitter.emit("receipt", receipt);
                if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {
                  defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));
                } else {
                  defer.resolve(receipt);
                }
                if (canUnsubscribe) {
                  defer.eventEmitter.removeAllListeners();
                }
              } else {
                utils._fireError(errors.ContractCodeNotStoredError(receipt), defer.eventEmitter, defer.reject, null, receipt);
              }
              if (canUnsubscribe) {
                sub.unsubscribe();
              }
              promiseResolved = true;
            }
            return receipt;
          }).then(async function(receipt) {
            if (!isContractDeployment && !promiseResolved) {
              if (!receipt.outOfGas && (!gasProvided || gasProvided !== receipt.gasUsed) && (receipt.status === true || receipt.status === "0x1" || typeof receipt.status === "undefined")) {
                defer.eventEmitter.emit("receipt", receipt);
                defer.resolve(receipt);
                if (canUnsubscribe) {
                  defer.eventEmitter.removeAllListeners();
                }
              } else {
                receiptJSON = JSON.stringify(receipt, null, 2);
                if (receipt.status === false || receipt.status === "0x0") {
                  try {
                    var revertMessage = null;
                    if (method.handleRevert && (method.call === "eth_sendTransaction" || method.call === "eth_sendRawTransaction")) {
                      var txReplayOptions = payload.params[0];
                      if (method.call === "eth_sendRawTransaction") {
                        var rawTransactionHex = payload.params[0];
                        var parsedTx = EthersTransactionUtils.parse(rawTransactionHex);
                        txReplayOptions = formatters.inputTransactionFormatter({
                          data: parsedTx.data,
                          to: parsedTx.to,
                          from: parsedTx.from,
                          gas: parsedTx.gasLimit.toHexString(),
                          gasPrice: parsedTx.gasPrice ? parsedTx.gasPrice.toHexString() : void 0,
                          value: parsedTx.value.toHexString()
                        });
                      }
                      revertMessage = await method.getRevertReason(txReplayOptions, receipt.blockNumber);
                      if (revertMessage) {
                        utils._fireError(errors.TransactionRevertInstructionError(revertMessage.reason, revertMessage.signature, receipt), defer.eventEmitter, defer.reject, null, receipt);
                      } else {
                        throw false;
                      }
                    } else {
                      throw false;
                    }
                  } catch (error) {
                    utils._fireError(errors.TransactionRevertedWithoutReasonError(receipt), defer.eventEmitter, defer.reject, null, receipt);
                  }
                } else {
                  utils._fireError(errors.TransactionOutOfGasError(receipt), defer.eventEmitter, defer.reject, null, receipt);
                }
              }
              if (canUnsubscribe) {
                sub.unsubscribe();
              }
              promiseResolved = true;
            }
          }).catch(function() {
            timeoutCount++;
            if (!!isPolling) {
              if (timeoutCount - 1 >= method.transactionPollingTimeout) {
                sub.unsubscribe();
                promiseResolved = true;
                utils._fireError(errors.TransactionError("Transaction was not mined within " + method.transactionPollingTimeout + " seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!"), defer.eventEmitter, defer.reject);
              }
            } else {
              if (timeoutCount - 1 >= method.transactionBlockTimeout) {
                sub.unsubscribe();
                promiseResolved = true;
                utils._fireError(errors.TransactionError("Transaction was not mined within " + method.transactionBlockTimeout + " blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!"), defer.eventEmitter, defer.reject);
              }
            }
          });
        } else {
          sub.unsubscribe();
          promiseResolved = true;
          utils._fireError({
            message: "Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.",
            data: err
          }, defer.eventEmitter, defer.reject);
        }
      };
      var startWatching = (function(existingReceipt) {
        let blockHeaderArrived = false;
        const startInterval = () => {
          intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), method.transactionPollingInterval);
        };
        if (!this.requestManager.provider.on) {
          return startInterval();
        }
        _ethereumCall.subscribe("newBlockHeaders", function(err, blockHeader, sub) {
          blockHeaderArrived = true;
          if (err || !blockHeader) {
            return startInterval();
          }
          checkConfirmation(existingReceipt, false, err, blockHeader, sub);
        });
        blockHeaderTimeoutId = setTimeout(() => {
          if (!blockHeaderArrived) {
            startInterval();
          }
        }, this.blockHeaderTimeout * 1e3);
      }).bind(this);
      _ethereumCall.getTransactionReceipt(result).then(function(receipt) {
        if (receipt && receipt.blockHash) {
          if (defer.eventEmitter.listeners("confirmation").length > 0) {
            startWatching(receipt);
          }
          checkConfirmation(receipt, false);
        } else if (!promiseResolved) {
          startWatching();
        }
      }).catch(function() {
        if (!promiseResolved)
          startWatching();
      });
    };
    var getWallet = function(from, accounts) {
      var wallet = null;
      if (typeof from === "number") {
        wallet = accounts.wallet[from];
      } else if (!!from && typeof from === "object" && from.address && from.privateKey) {
        wallet = from;
      } else {
        wallet = accounts.wallet[from.toLowerCase()];
      }
      return wallet;
    };
    Method2.prototype.buildCall = function() {
      var method = this, isSendTx = method.call === "eth_sendTransaction" || method.call === "eth_sendRawTransaction", isCall = method.call === "eth_call";
      var send = function() {
        let args = Array.prototype.slice.call(arguments);
        var defer = promiEvent(!isSendTx), payload = method.toPayload(args);
        method.hexFormat = false;
        if (method.call === "eth_getTransactionReceipt" || method.call === "eth_getTransactionByHash" || method.name === "getBlock") {
          method.hexFormat = payload.params.length < args.length && args[args.length - 1] === "hex";
        }
        var sendTxCallback = function(err, result) {
          if (method.handleRevert && isCall && method.abiCoder) {
            var reasonData;
            if (!err && method.isRevertReasonString(result)) {
              reasonData = result.substring(10);
            } else if (err && err.data) {
              if (typeof err.data === "object") {
                var originalError = err.data.originalError ?? err.data;
                reasonData = originalError.data.substring(10);
              } else {
                reasonData = err.data.substring(10);
              }
            }
            if (reasonData) {
              var reason = method.abiCoder.decodeParameter("string", "0x" + reasonData);
              var signature2 = "Error(String)";
              utils._fireError(errors.RevertInstructionError(reason, signature2), defer.eventEmitter, defer.reject, payload.callback, {
                reason,
                signature: signature2
              });
              return;
            }
          }
          try {
            result = method.formatOutput(result);
          } catch (e) {
            err = e;
          }
          if (result instanceof Error) {
            err = result;
          }
          if (!err) {
            if (payload.callback) {
              payload.callback(null, result);
            }
          } else {
            if (err.error) {
              err = err.error;
            }
            return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);
          }
          if (!isSendTx) {
            if (!err) {
              defer.resolve(result);
            }
          } else {
            defer.eventEmitter.emit("transactionHash", result);
            method._confirmTransaction(defer, result, payload);
          }
        };
        var sendSignedTx = function(sign3) {
          var signedPayload = {
            ...payload,
            method: "eth_sendRawTransaction",
            params: [sign3.rawTransaction]
          };
          method.requestManager.send(signedPayload, sendTxCallback);
        };
        var sendRequest = function(payload2, method2) {
          if (method2 && method2.accounts && method2.accounts.wallet && method2.accounts.wallet.length) {
            var wallet;
            if (payload2.method === "eth_sendTransaction") {
              var tx = payload2.params[0];
              wallet = getWallet(!!tx && typeof tx === "object" ? tx.from : null, method2.accounts);
              if (wallet && wallet.privateKey) {
                var tx = JSON.parse(JSON.stringify(tx));
                delete tx.from;
                if (method2.defaultChain && !tx.chain) {
                  tx.chain = method2.defaultChain;
                }
                if (method2.defaultHardfork && !tx.hardfork) {
                  tx.hardfork = method2.defaultHardfork;
                }
                if (method2.defaultCommon && !tx.common) {
                  tx.common = method2.defaultCommon;
                }
                method2.accounts.signTransaction(tx, wallet.privateKey).then(sendSignedTx).catch(function(err) {
                  if (typeof defer.eventEmitter.listeners === "function" && defer.eventEmitter.listeners("error").length) {
                    try {
                      defer.eventEmitter.emit("error", err);
                    } catch (err2) {
                    }
                    defer.eventEmitter.removeAllListeners();
                    defer.eventEmitter.catch(function() {
                    });
                  }
                  defer.reject(err);
                });
                return;
              }
            } else if (payload2.method === "eth_sign") {
              var data = payload2.params[1];
              wallet = getWallet(payload2.params[0], method2.accounts);
              if (wallet && wallet.privateKey) {
                var sign3 = method2.accounts.sign(data, wallet.privateKey);
                if (payload2.callback) {
                  payload2.callback(null, sign3.signature);
                }
                defer.resolve(sign3.signature);
                return;
              }
            }
          }
          return method2.requestManager.send(payload2, sendTxCallback);
        };
        const hasSendTxObject = isSendTx && !!payload.params[0] && typeof payload.params[0] === "object";
        if (hasSendTxObject && payload.params[0].type === "0x1" && typeof payload.params[0].accessList === "undefined") {
          payload.params[0].accessList = [];
        }
        if (hasSendTxObject && (typeof payload.params[0].gasPrice === "undefined" && (typeof payload.params[0].maxPriorityFeePerGas === "undefined" || typeof payload.params[0].maxFeePerGas === "undefined"))) {
          _handleTxPricing(method, payload.params[0]).then((txPricing) => {
            if (txPricing.gasPrice !== void 0) {
              payload.params[0].gasPrice = txPricing.gasPrice;
            } else if (txPricing.maxPriorityFeePerGas !== void 0 && txPricing.maxFeePerGas !== void 0) {
              payload.params[0].maxPriorityFeePerGas = txPricing.maxPriorityFeePerGas;
              payload.params[0].maxFeePerGas = txPricing.maxFeePerGas;
            }
            if (isSendTx) {
              setTimeout(() => {
                defer.eventEmitter.emit("sending", payload);
              }, 0);
            }
            sendRequest(payload, method);
          });
        } else {
          if (isSendTx) {
            setTimeout(() => {
              defer.eventEmitter.emit("sending", payload);
            }, 0);
          }
          sendRequest(payload, method);
        }
        if (isSendTx) {
          setTimeout(() => {
            defer.eventEmitter.emit("sent", payload);
          }, 0);
        }
        return defer.eventEmitter;
      };
      send.method = method;
      send.request = this.request.bind(this);
      return send;
    };
    function _handleTxPricing(method, tx) {
      return new Promise((resolve, reject) => {
        try {
          var getBlockByNumber = new Method2({
            name: "getBlockByNumber",
            call: "eth_getBlockByNumber",
            params: 2,
            inputFormatter: [function(blockNumber) {
              return blockNumber ? utils.toHex(blockNumber) : "latest";
            }, function() {
              return false;
            }]
          }).createFunction(method.requestManager);
          var getGasPrice = new Method2({
            name: "getGasPrice",
            call: "eth_gasPrice",
            params: 0
          }).createFunction(method.requestManager);
          Promise.all([
            getBlockByNumber(),
            getGasPrice()
          ]).then((responses) => {
            const [block, gasPrice] = responses;
            if ((tx.type === "0x2" || tx.type === void 0) && (block && block.baseFeePerGas)) {
              let maxPriorityFeePerGas, maxFeePerGas;
              if (tx.gasPrice) {
                maxPriorityFeePerGas = tx.gasPrice;
                maxFeePerGas = tx.gasPrice;
                delete tx.gasPrice;
              } else {
                maxPriorityFeePerGas = tx.maxPriorityFeePerGas || "0x9502F900";
                maxFeePerGas = tx.maxFeePerGas || utils.toHex(utils.toBN(block.baseFeePerGas).mul(utils.toBN(2)).add(utils.toBN(maxPriorityFeePerGas)));
              }
              resolve({ maxFeePerGas, maxPriorityFeePerGas });
            } else {
              if (tx.maxPriorityFeePerGas || tx.maxFeePerGas)
                throw Error("Network doesn't support eip-1559");
              resolve({ gasPrice });
            }
          });
        } catch (error) {
          reject(error);
        }
      });
    }
    Method2.prototype.getRevertReason = function(txOptions, blockNumber) {
      var self2 = this;
      return new Promise(function(resolve, reject) {
        new Method2({
          name: "call",
          call: "eth_call",
          params: 2,
          abiCoder: self2.abiCoder,
          handleRevert: true
        }).createFunction(self2.requestManager)(txOptions, utils.numberToHex(blockNumber)).then(function() {
          resolve(false);
        }).catch(function(error) {
          if (error.reason) {
            resolve({
              reason: error.reason,
              signature: error.signature
            });
          } else {
            reject(error);
          }
        });
      });
    };
    Method2.prototype.isRevertReasonString = function(data) {
      return typeof data === "string" && (data.length - 2) / 2 % 32 === 4 && data.substring(0, 10) === "0x08c379a0";
    };
    Method2.prototype.request = function() {
      var payload = this.toPayload(Array.prototype.slice.call(arguments));
      payload.format = this.formatOutput.bind(this);
      return payload;
    };
    module.exports = Method2;
  }
});

// node_modules/tslib/tslib.es6.mjs
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r2, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r2 = i.next()).done)
      ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to, from, pack2) {
  if (pack2 || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}

// node_modules/@alch/alchemy-web3/dist/esm/index.js
var import_web3 = __toESM(require_web3_min());
var import_web3_core_subscriptions = __toESM(require_lib6());
var import_web3_eth_abi = __toESM(require_lib7());
var import_web3_utils = __toESM(require_lib3());

// node_modules/@alch/alchemy-web3/dist/esm/util/hex.js
function toHex2(n) {
  return "0x" + n.toString(16);
}
function fromHex(hexString) {
  return Number.parseInt(hexString, 16);
}
function formatBlock(block) {
  if (typeof block === "string") {
    return block;
  } else if (typeof block === "number" && Number.isInteger(block)) {
    return toHex2(block);
  }
  return block.toString();
}

// node_modules/@alch/alchemy-web3/dist/esm/util/promises.js
function promisify(f) {
  return new Promise(function(resolve, reject) {
    return f(function(error, result) {
      if (error != null) {
        reject(error);
      } else {
        resolve(result);
      }
    });
  });
}
function callWhenDone(promise, callback) {
  promise.then(function(result) {
    callback(null, result);
  }, function(error) {
    callback(error);
  });
}
function delay(ms) {
  return new Promise(function(resolve) {
    return setTimeout(resolve, ms);
  });
}
function withTimeout(promise, ms) {
  return Promise.race([
    promise,
    new Promise(function(_, reject) {
      return setTimeout(function() {
        return reject(new Error("Timeout"));
      }, ms);
    })
  ]);
}
var MIN_RETRY_DELAY = 1e3;
var RETRY_BACKOFF_FACTOR = 2;
var MAX_RETRY_DELAY = 3e4;
function withBackoffRetries(f, retryCount, shouldRetry) {
  if (shouldRetry === void 0) {
    shouldRetry = function() {
      return true;
    };
  }
  return __awaiter(this, void 0, void 0, function() {
    var nextWaitTime, i, error_1;
    return __generator(this, function(_a2) {
      switch (_a2.label) {
        case 0:
          nextWaitTime = 0;
          i = 0;
          _a2.label = 1;
        case 1:
          if (false)
            return [3, 7];
          _a2.label = 2;
        case 2:
          _a2.trys.push([2, 4, , 6]);
          return [4, f()];
        case 3:
          return [2, _a2.sent()];
        case 4:
          error_1 = _a2.sent();
          i++;
          if (i >= retryCount || !shouldRetry(error_1)) {
            throw error_1;
          }
          return [4, delay(nextWaitTime)];
        case 5:
          _a2.sent();
          if (!shouldRetry(error_1)) {
            throw error_1;
          }
          nextWaitTime = nextWaitTime === 0 ? MIN_RETRY_DELAY : Math.min(MAX_RETRY_DELAY, RETRY_BACKOFF_FACTOR * nextWaitTime);
          return [3, 6];
        case 6:
          return [3, 1];
        case 7:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function makeCancelToken() {
  var cancelled = false;
  return { cancel: function() {
    return cancelled = true;
  }, isCancelled: function() {
    return cancelled;
  } };
}
function throwIfCancelled(isCancelled) {
  if (isCancelled()) {
    throw CANCELLED;
  }
}
var CANCELLED = new Error("Cancelled");

// node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/alchemyContext.js
var import_sturdy_websocket = __toESM(require_dist4());
var import_websocket = __toESM(require_browser4());

// node_modules/@alch/alchemy-web3/dist/esm/util/jsonRpc.js
function makeJsonRpcPayloadFactory() {
  var nextId = 0;
  return function(method, params) {
    return {
      method,
      params,
      jsonrpc: "2.0",
      id: "alc-web3:" + nextId++
    };
  };
}
function makeJsonRpcSenders(sendJsonRpcPayload, makeJsonRpcPayload) {
  var _this = this;
  var send = function(method, params) {
    return __awaiter(_this, void 0, void 0, function() {
      var response;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, sendJsonRpcPayload(makeJsonRpcPayload(method, params))];
          case 1:
            response = _a2.sent();
            if (response.error) {
              throw new Error(response.error.message);
            }
            return [2, response.result];
        }
      });
    });
  };
  function sendBatch(parts) {
    return __awaiter(this, void 0, void 0, function() {
      var payload, response, message, errorResponse;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            payload = parts.map(function(_a3) {
              var method = _a3.method, params = _a3.params;
              return makeJsonRpcPayload(method, params);
            });
            return [4, sendJsonRpcPayload(payload)];
          case 1:
            response = _a2.sent();
            if (!Array.isArray(response)) {
              message = response.error ? response.error.message : "Batch request failed";
              throw new Error(message);
            }
            errorResponse = response.find(function(r2) {
              return !!r2.error;
            });
            if (errorResponse) {
              throw new Error(errorResponse.error.message);
            }
            return [2, response.sort(function(r1, r2) {
              return r1.id - r2.id;
            }).map(function(r2) {
              return r2.result;
            })];
        }
      });
    });
  }
  return { send, sendBatch };
}
function makeResponse(id2, result) {
  return { jsonrpc: "2.0", id: id2, result };
}

// node_modules/@alch/alchemy-web3/dist/esm/version.js
var VERSION = "1.4.7";

// node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/alchemySendHttp.js
var import_fetch_ponyfill = __toESM(require_fetch_browser());
var _a = (0, import_fetch_ponyfill.default)();
var fetch2 = _a.fetch;
var Headers = _a.Headers;
var ALCHEMY_HEADERS = new Headers({
  Accept: "application/json",
  "Content-Type": "application/json",
  "Alchemy-Web3-Version": VERSION
});
var RATE_LIMIT_STATUS = 429;
function makeJsonRpcHttpSender(url) {
  var _this = this;
  return function(request) {
    return __awaiter(_this, void 0, void 0, function() {
      var response, status, _a2;
      var _b, _c;
      var _d;
      return __generator(this, function(_e) {
        switch (_e.label) {
          case 0:
            return [4, fetch2(url, {
              method: "POST",
              headers: ALCHEMY_HEADERS,
              body: JSON.stringify(request)
            })];
          case 1:
            response = _e.sent();
            status = response.status;
            _a2 = status;
            switch (_a2) {
              case 200:
                return [3, 2];
              case RATE_LIMIT_STATUS:
                return [3, 4];
              case 0:
                return [3, 5];
            }
            return [3, 6];
          case 2:
            _b = { type: "jsonrpc" };
            return [4, response.json()];
          case 3:
            return [2, (_b.response = _e.sent(), _b)];
          case 4:
            return [2, { type: "rateLimit" }];
          case 5:
            return [2, {
              type: "networkError",
              status: 0,
              message: "Connection failed."
            }];
          case 6:
            _c = {
              status,
              type: "networkError"
            };
            return [4, response.json()];
          case 7:
            return [2, (_c.message = (_d = _e.sent().error) === null || _d === void 0 ? void 0 : _d.message, _c)];
        }
      });
    });
  };
}

// node_modules/@alch/alchemy-web3/dist/esm/types.js
function isResponse(message) {
  return Array.isArray(message) || message.jsonrpc === "2.0" && message.id !== void 0;
}
function isSubscriptionEvent(message) {
  return !isResponse(message);
}

// node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/alchemySendWebSocket.js
function makeWebSocketSender(ws) {
  var contextsById = /* @__PURE__ */ new Map();
  ws.addEventListener("message", function(message) {
    var response = JSON.parse(message.data);
    if (!isResponse(response)) {
      return;
    }
    var id2 = getIdFromResponse(response);
    if (id2 === void 0) {
      return;
    }
    var context = contextsById.get(id2);
    if (!context) {
      return;
    }
    var resolve = context.resolve;
    contextsById.delete(id2);
    if (!Array.isArray(response) && response.error && response.error.code === 429) {
      resolve({ type: "rateLimit" });
    } else {
      resolve({ response, type: "jsonrpc" });
    }
  });
  ws.addEventListener("down", function() {
    __spreadArray([], __read(contextsById)).forEach(function(_a2) {
      var _b = __read(_a2, 2), id2 = _b[0], _c = _b[1], request = _c.request, resolve = _c.resolve;
      if (isWrite(request)) {
        contextsById.delete(id2);
        resolve({
          type: "networkError",
          status: 0,
          message: "WebSocket closed before receiving a response for write request with id: " + id2 + "."
        });
      }
    });
  });
  ws.addEventListener("reopen", function() {
    var e_1, _a2;
    try {
      for (var _b = __values(contextsById.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
        var request = _c.value.request;
        ws.send(JSON.stringify(request));
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a2 = _b.return))
          _a2.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  });
  return function(request) {
    return new Promise(function(resolve) {
      var id2 = getIdFromRequest(request);
      if (id2 !== void 0) {
        var existingContext = contextsById.get(id2);
        if (existingContext) {
          var message = "Another WebSocket request was made with the same id (" + id2 + ") before a response was received.";
          console.error(message);
          existingContext.resolve({
            message,
            type: "networkError",
            status: 0
          });
        }
        contextsById.set(id2, { request, resolve });
      }
      ws.send(JSON.stringify(request));
    });
  };
}
function getIdFromRequest(request) {
  if (!Array.isArray(request)) {
    return request.id;
  }
  return getCanonicalIdFromList(request.map(function(p) {
    return p.id;
  }));
}
function getIdFromResponse(response) {
  if (!Array.isArray(response)) {
    return response.id;
  }
  return getCanonicalIdFromList(response.map(function(p) {
    return p.id;
  }));
}
function getCanonicalIdFromList(ids) {
  var stringIds = ids.filter(function(id2) {
    return typeof id2 === "string";
  });
  if (stringIds.length > 0) {
    return stringIds.reduce(function(bestId, id2) {
      return bestId < id2 ? bestId : id2;
    });
  }
  var numberIds = ids.filter(function(id2) {
    return typeof id2 === "number";
  });
  if (numberIds.length > 0) {
    return Math.min.apply(Math, __spreadArray([], __read(numberIds)));
  }
  return ids.indexOf(null) >= 0 ? null : void 0;
}
function isWrite(request) {
  return Array.isArray(request) ? request.every(isSingleWrite) : isSingleWrite(request);
}
var WRITE_METHODS = ["eth_sendTransaction", "eth_sendRawTransaction"];
function isSingleWrite(request) {
  return WRITE_METHODS.includes(request.method);
}

// node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/httpProvider.js
function makeAlchemyHttpProvider(sendJsonRpcPayload) {
  function send(payload, callback) {
    callWhenDone(sendJsonRpcPayload(payload), callback);
  }
  return { send };
}

// node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/sendJsonRpcPayload.js
var import_assert_never = __toESM(require_assert_never());
var ALCHEMY_DISALLOWED_METHODS = [
  "eth_accounts",
  "eth_sendTransaction",
  "eth_sign",
  "eth_signTypedData_v3",
  "eth_signTypedData"
];
var ALCHEMY_DISALLOWED_PREFIXES = ["personal"];
function makeJsonRpcPayloadSender(alchemySendJsonRpc, config) {
  var middlewares = [];
  config.jsonRpcSenderMiddlewares.forEach(function(m) {
    return middlewares.push(m);
  });
  var currentWriteProvider = config.writeProvider;
  middlewares.push(function(payload) {
    var disallowedMethod = getDisallowedMethod(payload);
    if (!disallowedMethod) {
      try {
        return sendJsonRpcWithRetries(payload, alchemySendJsonRpc, config);
      } catch (alchemyError) {
        if (!currentWriteProvider) {
          throw alchemyError;
        }
        try {
          return sendJsonRpcWithProvider(currentWriteProvider, payload);
        } catch (_a2) {
          throw alchemyError;
        }
      }
    } else {
      if (!currentWriteProvider) {
        throw new Error('No provider available for method "' + disallowedMethod + '"');
      }
      return sendJsonRpcWithProvider(currentWriteProvider, payload);
    }
  });
  var sendJsonRpcPayload = function(payload) {
    var getNext = function(i) {
      var middleware = middlewares[i];
      return function() {
        return middleware(payload, getNext(i + 1));
      };
    };
    return getNext(0)();
  };
  function setWriteProvider(writeProvider) {
    currentWriteProvider = writeProvider !== null && writeProvider !== void 0 ? writeProvider : null;
  }
  return {
    sendJsonRpcPayload,
    setWriteProvider
  };
}
function sendJsonRpcWithProvider(provider, payload) {
  var anyProvider = provider;
  var sendMethod = (anyProvider.sendAsync ? anyProvider.sendAsync : anyProvider.send).bind(anyProvider);
  return promisify(function(callback) {
    return sendMethod(payload, callback);
  });
}
function getDisallowedMethod(payload) {
  var payloads = Array.isArray(payload) ? payload : [payload];
  var disallowedRequest = payloads.find(function(p) {
    return ALCHEMY_DISALLOWED_METHODS.indexOf(p.method) >= 0 || ALCHEMY_DISALLOWED_PREFIXES.some(function(prefix) {
      return p.method.startsWith(prefix);
    });
  }) || void 0;
  return disallowedRequest && disallowedRequest.method;
}
function sendJsonRpcWithRetries(payload, alchemySendJsonRpc, _a2) {
  var maxRetries = _a2.maxRetries, retryInterval = _a2.retryInterval, retryJitter = _a2.retryJitter;
  return __awaiter(this, void 0, void 0, function() {
    var i, result, status_1, message, statusString;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          i = 0;
          _b.label = 1;
        case 1:
          if (!(i < maxRetries + 1))
            return [3, 5];
          return [4, alchemySendJsonRpc(payload)];
        case 2:
          result = _b.sent();
          switch (result.type) {
            case "jsonrpc":
              return [2, result.response];
            case "rateLimit":
              break;
            case "networkError": {
              status_1 = result.status, message = result.message;
              statusString = status_1 !== 0 ? "(" + status_1 + ") " : "";
              throw new Error(statusString + " " + message);
            }
            default:
              return [2, (0, import_assert_never.default)(result)];
          }
          return [4, delay(retryInterval + (retryJitter * Math.random() | 0))];
        case 3:
          _b.sent();
          _b.label = 4;
        case 4:
          i++;
          return [3, 1];
        case 5:
          throw new Error("Rate limited for " + (maxRetries + 1) + " consecutive attempts.");
      }
    });
  });
}

// node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/sendRestPayload.js
var import_fetch_ponyfill2 = __toESM(require_fetch_browser());
var import_urijs = __toESM(require_URI());
function makeRestPayloadSender(_a2) {
  var _this = this;
  var url = _a2.url, config = _a2.config;
  var error;
  if (/^wss?:\/\//.test(url)) {
    error = "Alchemy rest endpoints are not available via websockets";
  }
  if (!url.includes("alchemy")) {
    error = "Alchemy specific rest endpoints are not available with a non Alchemy provider.";
  }
  if (url.includes("alchemyapi.io") && !url.includes("eth-")) {
    error = "Alchemy specific rest endpoints on L2 networks are not available with our legacy endpoints on alchemyapi.io. Please switch over to alchemy.com";
  }
  var urlObject = new import_urijs.default(url);
  var origin = urlObject.origin();
  var pathname = urlObject.path();
  var apiKey = pathname.substring(pathname.lastIndexOf("/") + 1);
  var fetch3 = (0, import_fetch_ponyfill2.default)().fetch;
  var NFT_ENDPOINTS = ["getNFTs", "getNFTMetadata"];
  var NFT_PREFIX = "nft/v2/";
  var isNftPath = function(path) {
    return NFT_ENDPOINTS.includes(path);
  };
  var formatNftPath = function(path) {
    return NFT_PREFIX + apiKey + "/" + path;
  };
  var sendRestPayload = function(path, payload) {
    return __awaiter(_this, void 0, void 0, function() {
      var maxRetries, retryInterval, retryJitter, endpoint, i, response, status_1;
      return __generator(this, function(_a3) {
        switch (_a3.label) {
          case 0:
            if (error) {
              throw new Error(error);
            }
            maxRetries = config.maxRetries, retryInterval = config.retryInterval, retryJitter = config.retryJitter;
            if (!(origin && apiKey))
              return [3, 6];
            endpoint = new import_urijs.default(origin).search(payload).path(isNftPath(path) ? formatNftPath(path) : apiKey + path).toString();
            i = 0;
            _a3.label = 1;
          case 1:
            if (!(i < maxRetries + 1))
              return [3, 5];
            return [4, fetch3(endpoint)];
          case 2:
            response = _a3.sent();
            status_1 = response.status;
            switch (status_1) {
              case 200:
                return [2, response.json()];
              case 429:
                break;
              default:
                throw new Error(response.status + ":" + response.statusText);
            }
            return [4, delay(retryInterval + (retryJitter * Math.random() | 0))];
          case 3:
            _a3.sent();
            _a3.label = 4;
          case 4:
            i++;
            return [3, 1];
          case 5:
            throw new Error("Rate limited for " + (maxRetries + 1) + " consecutive attempts.");
          case 6:
            return [2, Promise.resolve()];
        }
      });
    });
  };
  return {
    sendRestPayload
  };
}

// node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/webSocketProvider.js
var import_eventemitter3 = __toESM(require_eventemitter32());

// node_modules/@alch/alchemy-web3/dist/esm/subscriptions/subscriptionBackfill.js
var MAX_BACKFILL_BLOCKS = 120;
var MAX_BATCH_SIZE = 10;
function makeBackfiller(jsonRpcSenders) {
  return { getNewHeadsBackfill, getLogsBackfill };
  function getNewHeadsBackfill(isCancelled, previousHeads, fromBlockNumber) {
    return __awaiter(this, void 0, void 0, function() {
      var toBlockNumber, lastSeenBlockNumber, minBlockNumber, reorgHeads, intermediateHeads;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            throwIfCancelled(isCancelled);
            return [4, getBlockNumber()];
          case 1:
            toBlockNumber = _a2.sent();
            throwIfCancelled(isCancelled);
            if (previousHeads.length === 0) {
              return [2, getHeadEventsInRange(Math.max(fromBlockNumber, toBlockNumber - MAX_BACKFILL_BLOCKS) + 1, toBlockNumber + 1)];
            }
            lastSeenBlockNumber = fromHex(previousHeads[previousHeads.length - 1].number);
            minBlockNumber = Math.max(0, lastSeenBlockNumber - MAX_BACKFILL_BLOCKS);
            if (lastSeenBlockNumber < minBlockNumber) {
              return [2, getHeadEventsInRange(minBlockNumber, toBlockNumber + 1)];
            }
            return [4, getReorgHeads(isCancelled, previousHeads)];
          case 2:
            reorgHeads = _a2.sent();
            throwIfCancelled(isCancelled);
            return [4, getHeadEventsInRange(lastSeenBlockNumber + 1, toBlockNumber + 1)];
          case 3:
            intermediateHeads = _a2.sent();
            throwIfCancelled(isCancelled);
            return [2, __spreadArray(__spreadArray([], __read(reorgHeads)), __read(intermediateHeads))];
        }
      });
    });
  }
  function getReorgHeads(isCancelled, previousHeads) {
    return __awaiter(this, void 0, void 0, function() {
      var result, i, oldEvent, blockHead;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            result = [];
            i = previousHeads.length - 1;
            _a2.label = 1;
          case 1:
            if (!(i >= 0))
              return [3, 4];
            oldEvent = previousHeads[i];
            return [4, getBlockByNumber(fromHex(oldEvent.number))];
          case 2:
            blockHead = _a2.sent();
            throwIfCancelled(isCancelled);
            if (oldEvent.hash === blockHead.hash) {
              return [3, 4];
            }
            result.push(toNewHeadsEvent(blockHead));
            _a2.label = 3;
          case 3:
            i--;
            return [3, 1];
          case 4:
            return [2, result.reverse()];
        }
      });
    });
  }
  function getHeadEventsInRange(fromBlockInclusive, toBlockExclusive) {
    return __awaiter(this, void 0, void 0, function() {
      var batchParts, headEventBatches, i, batchedBlockHeads, blockHeads;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (fromBlockInclusive >= toBlockExclusive) {
              return [2, []];
            }
            batchParts = [];
            headEventBatches = [];
            for (i = fromBlockInclusive; i < toBlockExclusive; i++) {
              batchParts.push({
                method: "eth_getBlockByNumber",
                params: [toHex2(i), false]
              });
              if (batchParts.length % MAX_BATCH_SIZE === 0) {
                headEventBatches.push(jsonRpcSenders.sendBatch(batchParts));
                batchParts = [];
              }
            }
            if (batchParts.length > 0) {
              headEventBatches.push(jsonRpcSenders.sendBatch(batchParts));
            }
            return [4, Promise.all(headEventBatches)];
          case 1:
            batchedBlockHeads = _a2.sent();
            blockHeads = batchedBlockHeads.reduce(function(acc, batch) {
              return acc.concat(batch);
            }, []);
            return [2, blockHeads.map(toNewHeadsEvent)];
        }
      });
    });
  }
  function getBlockByNumber(blockNumber) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a2) {
        return [2, jsonRpcSenders.send("eth_getBlockByNumber", [
          toHex2(blockNumber),
          false
        ])];
      });
    });
  }
  function getLogsBackfill(isCancelled, filter, previousLogs, fromBlockNumber) {
    return __awaiter(this, void 0, void 0, function() {
      var toBlockNumber, lastSeenBlockNumber, minBlockNumber, commonAncestorNumber, removedLogs, addedLogs;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            throwIfCancelled(isCancelled);
            return [4, getBlockNumber()];
          case 1:
            toBlockNumber = _a2.sent();
            throwIfCancelled(isCancelled);
            if (previousLogs.length === 0) {
              return [2, getLogsInRange(filter, Math.max(fromBlockNumber, toBlockNumber - MAX_BACKFILL_BLOCKS) + 1, toBlockNumber + 1)];
            }
            lastSeenBlockNumber = fromHex(previousLogs[previousLogs.length - 1].blockNumber);
            minBlockNumber = Math.max(0, lastSeenBlockNumber - MAX_BACKFILL_BLOCKS);
            if (lastSeenBlockNumber < minBlockNumber) {
              return [2, getLogsInRange(filter, minBlockNumber, toBlockNumber + 1)];
            }
            return [4, getCommonAncestorNumber(isCancelled, previousLogs)];
          case 2:
            commonAncestorNumber = _a2.sent();
            throwIfCancelled(isCancelled);
            removedLogs = previousLogs.filter(function(log) {
              return fromHex(log.blockNumber) > commonAncestorNumber;
            }).map(function(log) {
              return __assign(__assign({}, log), { removed: true });
            });
            return [4, getLogsInRange(filter, commonAncestorNumber + 1, toBlockNumber + 1)];
          case 3:
            addedLogs = _a2.sent();
            throwIfCancelled(isCancelled);
            return [2, __spreadArray(__spreadArray([], __read(removedLogs)), __read(addedLogs))];
        }
      });
    });
  }
  function getCommonAncestorNumber(isCancelled, previousLogs) {
    return __awaiter(this, void 0, void 0, function() {
      var i, _a2, blockHash, blockNumber, hash2;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            i = previousLogs.length - 1;
            _b.label = 1;
          case 1:
            if (!(i >= 0))
              return [3, 4];
            _a2 = previousLogs[i], blockHash = _a2.blockHash, blockNumber = _a2.blockNumber;
            return [4, getBlockByNumber(fromHex(blockNumber))];
          case 2:
            hash2 = _b.sent().hash;
            throwIfCancelled(isCancelled);
            if (blockHash === hash2) {
              return [2, fromHex(blockNumber)];
            }
            _b.label = 3;
          case 3:
            i--;
            return [3, 1];
          case 4:
            return [2, Number.NEGATIVE_INFINITY];
        }
      });
    });
  }
  function getLogsInRange(filter, fromBlockInclusive, toBlockExclusive) {
    return __awaiter(this, void 0, void 0, function() {
      var rangeFilter;
      return __generator(this, function(_a2) {
        if (fromBlockInclusive >= toBlockExclusive) {
          return [2, []];
        }
        rangeFilter = __assign(__assign({}, filter), { fromBlock: toHex2(fromBlockInclusive), toBlock: toHex2(toBlockExclusive - 1) });
        return [2, jsonRpcSenders.send("eth_getLogs", [rangeFilter])];
      });
    });
  }
  function getBlockNumber() {
    return __awaiter(this, void 0, void 0, function() {
      var blockNumberHex;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, jsonRpcSenders.send("eth_blockNumber")];
          case 1:
            blockNumberHex = _a2.sent();
            return [2, fromHex(blockNumberHex)];
        }
      });
    });
  }
}
function toNewHeadsEvent(head) {
  var result = __assign({}, head);
  delete result.totalDifficulty;
  delete result.transactions;
  delete result.uncles;
  return result;
}
function dedupeNewHeads(events) {
  return dedupe(events, function(event) {
    return event.hash;
  });
}
function dedupeLogs(events) {
  return dedupe(events, function(event) {
    return event.blockHash + "/" + event.logIndex;
  });
}
function dedupe(items, getKey) {
  var keysSeen = /* @__PURE__ */ new Set();
  var result = [];
  items.forEach(function(item) {
    var key2 = getKey(item);
    if (!keysSeen.has(key2)) {
      keysSeen.add(key2);
      result.push(item);
    }
  });
  return result;
}

// node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/webSocketProvider.js
var HEARTBEAT_INTERVAL = 3e4;
var HEARTBEAT_WAIT_TIME = 1e4;
var BACKFILL_TIMEOUT = 6e4;
var BACKFILL_RETRIES = 5;
var RETAINED_EVENT_BLOCK_COUNT = 10;
var AlchemyWebSocketProvider = (
  /** @class */
  function(_super) {
    __extends(AlchemyWebSocketProvider2, _super);
    function AlchemyWebSocketProvider2(ws, sendJsonRpcPayload, jsonRpcSenders) {
      var _this = _super.call(this) || this;
      _this.ws = ws;
      _this.sendJsonRpcPayload = sendJsonRpcPayload;
      _this.jsonRpcSenders = jsonRpcSenders;
      _this.virtualSubscriptionsById = /* @__PURE__ */ new Map();
      _this.virtualIdsByPhysicalId = /* @__PURE__ */ new Map();
      _this.cancelBackfill = noop;
      _this.startHeartbeat = function() {
        if (_this.heartbeatIntervalId != null) {
          return;
        }
        _this.heartbeatIntervalId = setInterval(function() {
          return __awaiter(_this, void 0, void 0, function() {
            var _a2;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  _b.trys.push([0, 2, , 3]);
                  return [4, withTimeout(this.jsonRpcSenders.send("net_version"), HEARTBEAT_WAIT_TIME)];
                case 1:
                  _b.sent();
                  return [3, 3];
                case 2:
                  _a2 = _b.sent();
                  this.ws.reconnect();
                  return [3, 3];
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        }, HEARTBEAT_INTERVAL);
      };
      _this.stopHeartbeatAndBackfill = function() {
        if (_this.heartbeatIntervalId != null) {
          clearInterval(_this.heartbeatIntervalId);
          _this.heartbeatIntervalId = void 0;
        }
        _this.cancelBackfill();
      };
      _this.handleMessage = function(event) {
        var message = JSON.parse(event.data);
        if (!isSubscriptionEvent(message)) {
          return;
        }
        var physicalId = message.params.subscription;
        var virtualId = _this.virtualIdsByPhysicalId.get(physicalId);
        if (!virtualId) {
          return;
        }
        var subscription2 = _this.virtualSubscriptionsById.get(virtualId);
        if (subscription2.method !== "eth_subscribe") {
          _this.emitGenericEvent(virtualId, message.params.result);
          return;
        }
        switch (subscription2.params[0]) {
          case "newHeads": {
            var newHeadsSubscription = subscription2;
            var newHeadsMessage = message;
            var isBackfilling = newHeadsSubscription.isBackfilling, backfillBuffer = newHeadsSubscription.backfillBuffer;
            var result = newHeadsMessage.params.result;
            if (isBackfilling) {
              addToNewHeadsEventsBuffer(backfillBuffer, result);
            } else {
              _this.emitNewHeadsEvent(virtualId, result);
            }
            break;
          }
          case "logs": {
            var logsSubscription = subscription2;
            var logsMessage = message;
            var isBackfilling = logsSubscription.isBackfilling, backfillBuffer = logsSubscription.backfillBuffer;
            var result = logsMessage.params.result;
            if (isBackfilling) {
              addToLogsEventsBuffer(backfillBuffer, result);
            } else {
              _this.emitLogsEvent(virtualId, result);
            }
            break;
          }
          default:
            _this.emitGenericEvent(virtualId, message.params.result);
        }
      };
      _this.handleReopen = function() {
        var e_1, _a2;
        _this.virtualIdsByPhysicalId.clear();
        var _b = makeCancelToken(), cancel = _b.cancel, isCancelled = _b.isCancelled;
        _this.cancelBackfill = cancel;
        var _loop_1 = function(subscription3) {
          (function() {
            return __awaiter(_this, void 0, void 0, function() {
              var error_1;
              return __generator(this, function(_a3) {
                switch (_a3.label) {
                  case 0:
                    _a3.trys.push([0, 2, , 3]);
                    return [4, this.resubscribeAndBackfill(isCancelled, subscription3)];
                  case 1:
                    _a3.sent();
                    return [3, 3];
                  case 2:
                    error_1 = _a3.sent();
                    if (!isCancelled()) {
                      console.error('Error while backfilling "' + subscription3.params[0] + '" subscription. Some events may be missing.', error_1);
                    }
                    return [3, 3];
                  case 3:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          })();
        };
        try {
          for (var _c = __values(_this.virtualSubscriptionsById.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
            var subscription2 = _d.value;
            _loop_1(subscription2);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_d && !_d.done && (_a2 = _c.return))
              _a2.call(_c);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        _this.startHeartbeat();
      };
      _this.backfiller = makeBackfiller(jsonRpcSenders);
      _this.addSocketListeners();
      _this.startHeartbeat();
      return _this;
    }
    AlchemyWebSocketProvider2.prototype.send = function(request, callback) {
      if (isSubscribeRequest(request)) {
        var id2 = request.id;
        if (id2 === void 0) {
          return;
        }
        callWhenDone(this.subscribe(request), callback);
        return;
      }
      if (isUnsubscribeRequest(request)) {
        callWhenDone(this.unsubscribe(request), callback);
        return;
      }
      callWhenDone(this.sendJsonRpcPayload(request), callback);
    };
    AlchemyWebSocketProvider2.prototype.supportsSubscriptions = function() {
      return true;
    };
    AlchemyWebSocketProvider2.prototype.disconnect = function(code, reason) {
      this.removeSocketListeners();
      this.removeAllListeners();
      this.stopHeartbeatAndBackfill();
      this.ws.close(code, reason);
    };
    AlchemyWebSocketProvider2.prototype.connect = function() {
    };
    AlchemyWebSocketProvider2.prototype.reset = function() {
    };
    AlchemyWebSocketProvider2.prototype.reconnect = function() {
    };
    AlchemyWebSocketProvider2.prototype.subscribe = function(request) {
      return __awaiter(this, void 0, void 0, function() {
        var method, _a2, params, startingBlockNumber, response, id2;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              method = request.method, _a2 = request.params, params = _a2 === void 0 ? [] : _a2;
              return [4, this.getBlockNumber()];
            case 1:
              startingBlockNumber = _b.sent();
              return [4, this.sendJsonRpcPayload(request)];
            case 2:
              response = _b.sent();
              id2 = response.result;
              this.virtualSubscriptionsById.set(id2, {
                method,
                params,
                startingBlockNumber,
                virtualId: id2,
                physicalId: id2,
                sentEvents: [],
                isBackfilling: false,
                backfillBuffer: []
              });
              this.virtualIdsByPhysicalId.set(id2, id2);
              return [2, makeResponse(request.id, id2)];
          }
        });
      });
    };
    AlchemyWebSocketProvider2.prototype.unsubscribe = function(request) {
      var _a2;
      return __awaiter(this, void 0, void 0, function() {
        var subscriptionId, virtualSubscription, physicalId, physicalRequest;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              subscriptionId = (_a2 = request.params) === null || _a2 === void 0 ? void 0 : _a2[0];
              virtualSubscription = this.virtualSubscriptionsById.get(subscriptionId);
              if (!virtualSubscription) {
                return [2, makeResponse(request.id, false)];
              }
              physicalId = virtualSubscription.physicalId;
              physicalRequest = __assign(__assign({}, request), { params: [physicalId] });
              return [4, this.sendJsonRpcPayload(physicalRequest)];
            case 1:
              _b.sent();
              this.virtualSubscriptionsById.delete(subscriptionId);
              this.virtualIdsByPhysicalId.delete(physicalId);
              return [2, makeResponse(request.id, true)];
          }
        });
      });
    };
    AlchemyWebSocketProvider2.prototype.addSocketListeners = function() {
      this.ws.addEventListener("message", this.handleMessage);
      this.ws.addEventListener("reopen", this.handleReopen);
      this.ws.addEventListener("down", this.stopHeartbeatAndBackfill);
    };
    AlchemyWebSocketProvider2.prototype.removeSocketListeners = function() {
      this.ws.removeEventListener("message", this.handleMessage);
      this.ws.removeEventListener("reopen", this.handleReopen);
      this.ws.removeEventListener("down", this.stopHeartbeatAndBackfill);
    };
    AlchemyWebSocketProvider2.prototype.resubscribeAndBackfill = function(isCancelled, subscription2) {
      return __awaiter(this, void 0, void 0, function() {
        var virtualId, method, params, sentEvents, backfillBuffer, startingBlockNumber, physicalId, _a2, backfillEvents, events, filter_1, backfillEvents, events;
        var _this = this;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              virtualId = subscription2.virtualId, method = subscription2.method, params = subscription2.params, sentEvents = subscription2.sentEvents, backfillBuffer = subscription2.backfillBuffer, startingBlockNumber = subscription2.startingBlockNumber;
              subscription2.isBackfilling = true;
              backfillBuffer.length = 0;
              _b.label = 1;
            case 1:
              _b.trys.push([1, , 9, 10]);
              return [4, this.jsonRpcSenders.send(method, params)];
            case 2:
              physicalId = _b.sent();
              throwIfCancelled(isCancelled);
              subscription2.physicalId = physicalId;
              this.virtualIdsByPhysicalId.set(physicalId, virtualId);
              _a2 = params[0];
              switch (_a2) {
                case "newHeads":
                  return [3, 3];
                case "logs":
                  return [3, 5];
              }
              return [3, 7];
            case 3:
              return [4, withBackoffRetries(function() {
                return withTimeout(_this.backfiller.getNewHeadsBackfill(isCancelled, sentEvents, startingBlockNumber), BACKFILL_TIMEOUT);
              }, BACKFILL_RETRIES, function() {
                return !isCancelled();
              })];
            case 4:
              backfillEvents = _b.sent();
              throwIfCancelled(isCancelled);
              events = dedupeNewHeads(__spreadArray(__spreadArray([], __read(backfillEvents)), __read(backfillBuffer)));
              events.forEach(function(event) {
                return _this.emitNewHeadsEvent(virtualId, event);
              });
              return [3, 8];
            case 5:
              filter_1 = params[1] || {};
              return [4, withBackoffRetries(function() {
                return withTimeout(_this.backfiller.getLogsBackfill(isCancelled, filter_1, sentEvents, startingBlockNumber), BACKFILL_TIMEOUT);
              }, BACKFILL_RETRIES, function() {
                return !isCancelled();
              })];
            case 6:
              backfillEvents = _b.sent();
              throwIfCancelled(isCancelled);
              events = dedupeLogs(__spreadArray(__spreadArray([], __read(backfillEvents)), __read(backfillBuffer)));
              events.forEach(function(event) {
                return _this.emitLogsEvent(virtualId, event);
              });
              return [3, 8];
            case 7:
              return [3, 8];
            case 8:
              return [3, 10];
            case 9:
              subscription2.isBackfilling = false;
              backfillBuffer.length = 0;
              return [
                7
                /*endfinally*/
              ];
            case 10:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    AlchemyWebSocketProvider2.prototype.getBlockNumber = function() {
      return __awaiter(this, void 0, void 0, function() {
        var blockNumberHex;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, this.jsonRpcSenders.send("eth_blockNumber")];
            case 1:
              blockNumberHex = _a2.sent();
              return [2, fromHex(blockNumberHex)];
          }
        });
      });
    };
    AlchemyWebSocketProvider2.prototype.emitNewHeadsEvent = function(virtualId, result) {
      this.emitAndRememberEvent(virtualId, result, getNewHeadsBlockNumber);
    };
    AlchemyWebSocketProvider2.prototype.emitLogsEvent = function(virtualId, result) {
      this.emitAndRememberEvent(virtualId, result, getLogsBlockNumber);
    };
    AlchemyWebSocketProvider2.prototype.emitAndRememberEvent = function(virtualId, result, getBlockNumber) {
      var subscription2 = this.virtualSubscriptionsById.get(virtualId);
      if (!subscription2) {
        return;
      }
      addToPastEventsBuffer(subscription2.sentEvents, __assign({}, result), getBlockNumber);
      this.emitGenericEvent(virtualId, result);
    };
    AlchemyWebSocketProvider2.prototype.emitGenericEvent = function(virtualId, result) {
      var event = {
        jsonrpc: "2.0",
        method: "eth_subscription",
        params: {
          subscription: virtualId,
          result
        }
      };
      this.emit("data", event);
    };
    return AlchemyWebSocketProvider2;
  }(import_eventemitter3.default)
);
function addToNewHeadsEventsBuffer(pastEvents, event) {
  addToPastEventsBuffer(pastEvents, event, getNewHeadsBlockNumber);
}
function addToLogsEventsBuffer(pastEvents, event) {
  addToPastEventsBuffer(pastEvents, event, getLogsBlockNumber);
}
function addToPastEventsBuffer(pastEvents, event, getBlockNumber) {
  var currentBlockNumber = getBlockNumber(event);
  var firstGoodIndex = pastEvents.findIndex(function(e) {
    return getBlockNumber(e) > currentBlockNumber - RETAINED_EVENT_BLOCK_COUNT;
  });
  if (firstGoodIndex === -1) {
    pastEvents.length = 0;
  } else {
    pastEvents.splice(0, firstGoodIndex);
  }
  pastEvents.push(event);
}
function isSubscribeRequest(request) {
  return !Array.isArray(request) && request.method === "eth_subscribe";
}
function isUnsubscribeRequest(request) {
  return !Array.isArray(request) && request.method === "eth_unsubscribe";
}
function getNewHeadsBlockNumber(event) {
  return fromHex(event.number);
}
function getLogsBlockNumber(event) {
  return fromHex(event.blockNumber);
}
function noop() {
}

// node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/alchemyContext.js
var NODE_MAX_WS_FRAME_SIZE = 100 * 1024 * 1024;
function makeAlchemyContext(url, config) {
  var makeJsonRpcPayload = makeJsonRpcPayloadFactory();
  var restSender = makeRestPayloadSender({
    config,
    url
  });
  if (/^https?:\/\//.test(url)) {
    var alchemySendJsonrRpc = makeJsonRpcHttpSender(url);
    var _a2 = makeJsonRpcPayloadSender(alchemySendJsonrRpc, config), sendJsonRpcPayload = _a2.sendJsonRpcPayload, setWriteProvider = _a2.setWriteProvider;
    var jsonRpcSenders = makeJsonRpcSenders(sendJsonRpcPayload, makeJsonRpcPayload);
    var provider = makeAlchemyHttpProvider(sendJsonRpcPayload);
    return { provider, jsonRpcSenders, restSender, setWriteProvider };
  } else if (/^wss?:\/\//.test(url)) {
    var protocol = isAlchemyUrl(url) ? "alchemy-web3-" + VERSION : void 0;
    var ws = new import_sturdy_websocket.default(url, protocol, {
      wsConstructor: getWebSocketConstructor()
    });
    var alchemySend = makeWebSocketSender(ws);
    var _b = makeJsonRpcPayloadSender(alchemySend, config), sendJsonRpcPayload = _b.sendJsonRpcPayload, setWriteProvider = _b.setWriteProvider;
    var jsonRpcSenders = makeJsonRpcSenders(sendJsonRpcPayload, makeJsonRpcPayload);
    var provider = new AlchemyWebSocketProvider(ws, sendJsonRpcPayload, jsonRpcSenders);
    return { provider, jsonRpcSenders, restSender, setWriteProvider };
  } else {
    throw new Error("Alchemy URL protocol must be one of http, https, ws, or wss. Recieved: " + url);
  }
}
function getWebSocketConstructor() {
  return isNodeEnvironment() ? function(url, protocols) {
    return new import_websocket.w3cwebsocket(url, protocols, void 0, void 0, void 0, {
      maxReceivedMessageSize: NODE_MAX_WS_FRAME_SIZE,
      maxReceivedFrameSize: NODE_MAX_WS_FRAME_SIZE
    });
  } : WebSocket;
}
function isNodeEnvironment() {
  return typeof process !== "undefined" && process != null && process.versions != null && process.versions.node != null;
}
function isAlchemyUrl(url) {
  return url.indexOf("alchemy.com") >= 0 || url.indexOf("alchemyapi.io") >= 0;
}

// node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/customRPC.js
var import_web3_core_method = __toESM(require_lib9());
var MethodFn = import_web3_core_method.default;
function patchEnableCustomRPC(web3) {
  web3.eth.customRPC = function(opts) {
    var newMethod = new MethodFn({
      name: opts.name,
      call: opts.call,
      params: opts.params || 0,
      inputFormatter: opts.inputFormatter || null,
      outputFormatter: opts.outputFormatter || null
    });
    newMethod.attachToObject(this);
    newMethod.setRequestManager(this._requestManager, this.accounts);
  };
}

// node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/eth_maxPriorityFeePerGas.js
function patchEthMaxPriorityFeePerGasMethod(web3) {
  web3.eth.customRPC({
    name: "getMaxPriorityFeePerGas",
    call: "eth_maxPriorityFeePerGas",
    params: 0
  });
}

// node_modules/@alch/alchemy-web3/dist/esm/web3-adapter/eth_PrivateTransactions.js
function patchEthPrivateTransactionMethods(web3) {
  web3.eth.customRPC({
    name: "sendPrivateTransaction",
    call: "eth_sendPrivateTransaction",
    params: 3
  });
  web3.eth.customRPC({
    name: "cancelPrivateTransaction",
    call: "eth_cancelPrivateTransaction",
    params: 1
  });
}

// node_modules/@alch/alchemy-web3/dist/esm/alchemy-apis/types.js
var AssetTransfersCategory;
(function(AssetTransfersCategory2) {
  AssetTransfersCategory2["EXTERNAL"] = "external";
  AssetTransfersCategory2["INTERNAL"] = "internal";
  AssetTransfersCategory2["TOKEN"] = "token";
  AssetTransfersCategory2["ERC20"] = "erc20";
  AssetTransfersCategory2["ERC721"] = "erc721";
  AssetTransfersCategory2["ERC1155"] = "erc1155";
  AssetTransfersCategory2["SPECIALNFT"] = "specialnft";
})(AssetTransfersCategory || (AssetTransfersCategory = {}));
var AssetTransfersOrder;
(function(AssetTransfersOrder2) {
  AssetTransfersOrder2["ASCENDING"] = "asc";
  AssetTransfersOrder2["DESCENDING"] = "desc";
})(AssetTransfersOrder || (AssetTransfersOrder = {}));
var NftFilters;
(function(NftFilters2) {
  NftFilters2["SPAM"] = "SPAM";
})(NftFilters || (NftFilters = {}));

// node_modules/@alch/alchemy-web3/dist/esm/index.js
var DEFAULT_MAX_RETRIES = 3;
var DEFAULT_RETRY_INTERVAL = 1e3;
var DEFAULT_RETRY_JITTER = 250;
var DEFAULT_CONTRACT_ADDRESS = "DEFAULT_TOKENS";
function createAlchemyWeb3(alchemyUrl, config) {
  var fullConfig = fillInConfigDefaults(config);
  var _a2 = makeAlchemyContext(alchemyUrl, fullConfig), provider = _a2.provider, jsonRpcSenders = _a2.jsonRpcSenders, restSender = _a2.restSender, setWriteProvider = _a2.setWriteProvider;
  var alchemyWeb3 = new import_web3.default(provider);
  alchemyWeb3.setProvider = function() {
    throw new Error("setProvider is not supported in Alchemy Web3. To change the provider used for writes, use setWriteProvider() instead.");
  };
  alchemyWeb3.setWriteProvider = setWriteProvider;
  function getNfts(params, callback) {
    return callAlchemyRestEndpoint({
      restSender,
      callback,
      params,
      path: "getNFTs"
    });
  }
  alchemyWeb3.alchemy = {
    getTokenAllowance: function(params, callback) {
      return callAlchemyJsonRpcMethod({
        jsonRpcSenders,
        callback,
        method: "alchemy_getTokenAllowance",
        params: [params]
      });
    },
    getTokenBalances: function(address, contractAddresses, callback) {
      return callAlchemyJsonRpcMethod({
        jsonRpcSenders,
        callback,
        method: "alchemy_getTokenBalances",
        params: [address, contractAddresses || DEFAULT_CONTRACT_ADDRESS],
        processResponse: processTokenBalanceResponse
      });
    },
    getTokenMetadata: function(address, callback) {
      return callAlchemyJsonRpcMethod({
        jsonRpcSenders,
        callback,
        params: [address],
        method: "alchemy_getTokenMetadata"
      });
    },
    getAssetTransfers: function(params, callback) {
      return callAlchemyJsonRpcMethod({
        jsonRpcSenders,
        callback,
        params: [
          __assign(__assign({}, params), { fromBlock: params.fromBlock != null ? formatBlock(params.fromBlock) : void 0, toBlock: params.toBlock != null ? formatBlock(params.toBlock) : void 0, maxCount: params.maxCount != null ? (0, import_web3_utils.toHex)(params.maxCount) : void 0 })
        ],
        method: "alchemy_getAssetTransfers"
      });
    },
    getNftMetadata: function(params, callback) {
      return callAlchemyRestEndpoint({
        restSender,
        callback,
        params,
        path: "getNFTMetadata"
      });
    },
    getNfts,
    getTransactionReceipts: function(params, callback) {
      return callAlchemyJsonRpcMethod({
        jsonRpcSenders,
        callback,
        method: "alchemy_getTransactionReceipts",
        params: [params]
      });
    }
  };
  patchSubscriptions(alchemyWeb3);
  patchEnableCustomRPC(alchemyWeb3);
  patchEthMaxPriorityFeePerGasMethod(alchemyWeb3);
  patchEthPrivateTransactionMethods(alchemyWeb3);
  return alchemyWeb3;
}
function fillInConfigDefaults(_a2) {
  var _b = _a2 === void 0 ? {} : _a2, _c = _b.writeProvider, writeProvider = _c === void 0 ? getWindowProvider() : _c, _d = _b.jsonRpcSenderMiddlewares, jsonRpcSenderMiddlewares = _d === void 0 ? [] : _d, _e = _b.maxRetries, maxRetries = _e === void 0 ? DEFAULT_MAX_RETRIES : _e, _f = _b.retryInterval, retryInterval = _f === void 0 ? DEFAULT_RETRY_INTERVAL : _f, _g = _b.retryJitter, retryJitter = _g === void 0 ? DEFAULT_RETRY_JITTER : _g;
  return {
    writeProvider,
    jsonRpcSenderMiddlewares,
    maxRetries,
    retryInterval,
    retryJitter
  };
}
function getWindowProvider() {
  return typeof window !== "undefined" ? window.ethereum : null;
}
function callAlchemyJsonRpcMethod(_a2) {
  var _this = this;
  var jsonRpcSenders = _a2.jsonRpcSenders, method = _a2.method, params = _a2.params, _b = _a2.callback, callback = _b === void 0 ? noop2 : _b, _c = _a2.processResponse, processResponse = _c === void 0 ? identity : _c;
  var promise = function() {
    return __awaiter(_this, void 0, void 0, function() {
      var result;
      return __generator(this, function(_a3) {
        switch (_a3.label) {
          case 0:
            return [4, jsonRpcSenders.send(method, params)];
          case 1:
            result = _a3.sent();
            return [2, processResponse(result)];
        }
      });
    });
  }();
  callWhenDone(promise, callback);
  return promise;
}
function callAlchemyRestEndpoint(_a2) {
  var _this = this;
  var restSender = _a2.restSender, path = _a2.path, params = _a2.params, _b = _a2.callback, callback = _b === void 0 ? noop2 : _b, _c = _a2.processResponse, processResponse = _c === void 0 ? identity : _c;
  var fixedParams = fixArrayQueryParams(params);
  var promise = function() {
    return __awaiter(_this, void 0, void 0, function() {
      var result;
      return __generator(this, function(_a3) {
        switch (_a3.label) {
          case 0:
            return [4, restSender.sendRestPayload(path, fixedParams)];
          case 1:
            result = _a3.sent();
            return [2, processResponse(result)];
        }
      });
    });
  }();
  callWhenDone(promise, callback);
  return promise;
}
function processTokenBalanceResponse(rawResponse) {
  var fixedTokenBalances = rawResponse.tokenBalances.map(function(balance) {
    return balance.tokenBalance != null ? __assign(__assign({}, balance), { tokenBalance: import_web3_eth_abi.default.decodeParameter("uint256", balance.tokenBalance) }) : balance;
  });
  return __assign(__assign({}, rawResponse), { tokenBalances: fixedTokenBalances });
}
function patchSubscriptions(web3) {
  var eth = web3.eth;
  var oldSubscribe = eth.subscribe.bind(eth);
  eth.subscribe = function(type) {
    var rest = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      rest[_i - 1] = arguments[_i];
    }
    if (type === "alchemy_fullPendingTransactions" || type === "alchemy_newFullPendingTransactions") {
      console.warn("This method is now deprecated. Please use `alchemy_pendingTransactions` instead.");
      return suppressNoSubscriptionExistsWarning(function() {
        return oldSubscribe.apply(void 0, __spreadArray(["alchemy_newFullPendingTransactions"], __read(rest)));
      });
    }
    if (type === "alchemy_filteredNewFullPendingTransactions" || type === "alchemy_filteredPendingTransactions" || type === "alchemy_filteredFullPendingTransactions") {
      console.warn("This method is now deprecated. Please use `alchemy_pendingTransactions` instead.");
      return suppressNoSubscriptionExistsWarning(function() {
        return oldSubscribe.apply(void 0, __spreadArray(["alchemy_filteredNewFullPendingTransactions"], __read(rest)));
      });
    }
    if (type === "alchemy_pendingTransactions") {
      return suppressNoSubscriptionExistsWarning(function() {
        return oldSubscribe.apply(void 0, __spreadArray(["alchemy_pendingTransactions"], __read(rest)));
      });
    }
    return oldSubscribe.apply(void 0, __spreadArray([type], __read(rest)));
  };
}
function suppressNoSubscriptionExistsWarning(f) {
  var oldConsoleWarn = console.warn;
  console.warn = function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    if (typeof args[0] === "string" && args[0].includes(" doesn't exist. Subscribing anyway.")) {
      return;
    }
    return oldConsoleWarn.apply(console, args);
  };
  try {
    return f();
  } finally {
    console.warn = oldConsoleWarn;
  }
}
var subscription = import_web3_core_subscriptions.default.subscription;
var oldSubscriptionPrototypeValidateArgs = subscription.prototype._validateArgs;
subscription.prototype._validateArgs = function(args) {
  if ([
    "alchemy_filteredNewFullPendingTransactions",
    "alchemy_filteredPendingTransactions",
    "alchemy_filteredFullPendingTransactions",
    "alchemy_pendingTransactions"
  ].includes(this.subscriptionMethod)) {
  } else {
    if ([
      "alchemy_fullPendingTransactions",
      "alchemy_newFullPendingTransactions"
    ].includes(this.subscriptionMethod)) {
      if (this.options.subscription) {
        this.options.subscription.subscriptionName = this.subscriptionMethod;
      }
    }
    var validator = oldSubscriptionPrototypeValidateArgs.bind(this);
    validator(args);
  }
};
function noop2() {
}
function identity(x) {
  return x;
}
function fixArrayQueryParams(params) {
  var result = {};
  Object.keys(params).forEach(function(key2) {
    var value = params[key2];
    var fixedKey = Array.isArray(value) ? toArrayKey(key2) : key2;
    result[fixedKey] = value;
  });
  return result;
}
function toArrayKey(key2) {
  return endsWith(key2, "[]") ? key2 : key2 + "[]";
}
function endsWith(s, ending) {
  var index = s.lastIndexOf(ending);
  return index >= 0 && index === s.length - ending.length;
}
export {
  AssetTransfersCategory,
  AssetTransfersOrder,
  NftFilters,
  createAlchemyWeb3
};
/*! Bundled license information:

web3/dist/web3.min.js:
  (*! For license information please see web3.min.js.LICENSE.txt *)

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

utf8/utf8.js:
  (*! https://mths.be/utf8js v3.0.0 by @mathias *)

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

js-sha3/src/sha3.js:
  (**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   *)

urijs/src/punycode.js:
  (*! https://mths.be/punycode v1.4.0 by @mathias *)

urijs/src/IPv6.js:
  (*!
   * URI.js - Mutating URLs
   * IPv6 Support
   *
   * Version: 1.19.11
   *
   * Author: Rodney Rehm
   * Web: http://medialize.github.io/URI.js/
   *
   * Licensed under
   *   MIT License http://www.opensource.org/licenses/mit-license
   *
   *)

urijs/src/SecondLevelDomains.js:
  (*!
   * URI.js - Mutating URLs
   * Second Level Domain (SLD) Support
   *
   * Version: 1.19.11
   *
   * Author: Rodney Rehm
   * Web: http://medialize.github.io/URI.js/
   *
   * Licensed under
   *   MIT License http://www.opensource.org/licenses/mit-license
   *
   *)

urijs/src/URI.js:
  (*!
   * URI.js - Mutating URLs
   *
   * Version: 1.19.11
   *
   * Author: Rodney Rehm
   * Web: http://medialize.github.io/URI.js/
   *
   * Licensed under
   *   MIT License http://www.opensource.org/licenses/mit-license
   *
   *)
*/
//# sourceMappingURL=@alch_alchemy-web3.js.map
